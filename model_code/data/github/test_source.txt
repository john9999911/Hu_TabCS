public String taskClassName ( ) { return taskClsName ; }
private static Class < ? > findClass ( ClassLoader loader , Class < ? > clazz ) { final String name = clazz . getName ( ) ; if ( name . startsWith ( STR_ ) || name . startsWith ( STR_ ) ) return null ; String generatedClassName = generateRetainerClassName ( name ) ; try { if ( Akatsuki . loggingLevel == AkatsukiConfig . LoggingLevel . VERBOSE ) Log . i ( Akatsuki . TAG , STR_ + clazz ) ; return Class . forName ( generatedClassName , BOOL_ , loader ) ; } catch ( ClassNotFoundException e ) { return findClass ( loader , clazz . getSuperclass ( ) ) ; } }
public static Foo findByUuid_First ( java . lang . String uuid , OrderByComparator < Foo > orderByComparator ) throws com . liferay . blade . samples . servicebuilder . exception . NoSuchFooException { return getPersistence ( ) . findByUuid_First ( uuid , orderByComparator ) ; }
public Element create ( String prefix , Document doc ) { return new SVGOMClipPathElement ( prefix , ( AbstractDocument ) doc ) ; }
public boolean infoEnabled ( ) ;
public java . lang . String toString ( ) { return Integer . toString ( value ) ; }
public boolean hasBasicBlockSet ( ) { return basicBlock != null ; }
public String unprunedTipText ( ) { return STR_ ; }
public IQueryResultSet < IEntryPacket > union ( IQueryResultSet < IEntryPacket > set ) { this . removeAll ( set ) ; this . addAll ( set ) ; return this ; }
public DefaultHttpRoutePlanner ( SchemeRegistry schreg ) { if ( schreg == null ) { throw new IllegalArgumentException ( STR_ ) ; } schemeRegistry = schreg ; }
private void processTypeRestriction ( QueryService qs ) { if ( selectorTypeRestriction != null ) { qs . addCriteria ( STR_ + selectorTypeRestriction ) ; } if ( bodyTypeRestriction != null ) { qs . addCriteria ( STR_ + bodyTypeRestriction ) ; } if ( targetTypeRestriction != null ) { qs . addCriteria ( STR_ + targetTypeRestriction ) ; } }
public static JBBPParser prepare ( final String script , final JBBPBitOrder bitOrder , final JBBPCustomFieldTypeProcessor customFieldTypeProcessor , final int flags ) { return new JBBPParser ( script , bitOrder , customFieldTypeProcessor , flags ) ; }
protected abstract void handleInProgressEvent ( int actionCode , MotionEvent event ) ;
public void updateLightIcon ( ) { Lighting lighting = World . getInstance ( ) . getLighting ( ) ; if ( lighting . isLampMode ( ) ) { lightAction . setIcon ( Icons . getImageIcon ( STR_ ) ) ; lightAction . setToolTipText ( STR_ ) ; } else { lightAction . setIcon ( Icons . getImageIcon ( STR_ ) ) ; lightAction . setToolTipText ( STR_ ) ; } State state = currentConfig . lightPosState ; if ( state != null ) { LightPositionView view = ( LightPositionView ) state . getViewData ( ) . getView ( ) ; if ( view != null ) { view . setMode ( ) ; } } }
public static EventTypeMetadata createTable ( String tableName ) { return new EventTypeMetadata ( tableName , null , TypeClass . TABLE , BOOL_ , BOOL_ , BOOL_ , null , BOOL_ ) ; }
protected void sendMessage ( Session session , ClusterManager manager ) { String id = session . getIdInternal ( ) ; if ( id != null ) { send ( manager , id ) ; } }
public CSSOMSVGPaint ( ValueProvider vp ) { super ( vp ) ; }
public void visitInnerClass ( String name , String outerName , String innerName , int access ) { if ( cv != null ) { cv . visitInnerClass ( name , outerName , innerName , access ) ; } }
protected double norm ( double x , int i ) { if ( Double . isNaN ( m_Ranges [ i ] [ R_MIN ] ) || ( m_Ranges [ i ] [ R_MAX ] == m_Ranges [ i ] [ R_MIN ] ) ) { return NUM_ ; } else { return ( x - m_Ranges [ i ] [ R_MIN ] ) / ( m_Ranges [ i ] [ R_WIDTH ] ) ; } }
public static boolean isImported ( JCCompilationUnit compilationUnit , TypeSymbol type ) { for ( JCImport i : compilationUnit . getImports ( ) ) { if ( i . isStatic ( ) ) { continue ; } if ( i . qualid . type . tsym == type ) { return BOOL_ ; } } return BOOL_ ; }
public boolean isJumping ( ) { if ( steps . size ( ) > NUM_ ) { boolean jump = BOOL_ ; for ( MoveStep step : steps ) { if ( step . getType ( ) == MovePath . MoveStepType . START_JUMP ) { jump = BOOL_ ; } } return jump ; } return BOOL_ ; }
public boolean hasErrors ( ) { return myHaveExceptions || myMessages != null || myClassesWithIncorrectFormat != null || myBrokenClasses != null || myMissingClasses != null || myMissingSize || myMissingFragments != null ; }
public static boolean equalDeclarations ( IBinding b1 , IBinding b2 ) { if ( b1 . getKind ( ) != b2 . getKind ( ) ) return BOOL_ ; return getDeclaration ( b1 ) . isEqualTo ( getDeclaration ( b2 ) ) ; }
public static void startDeleteAll ( ConversationQueryHandler handler , int token , boolean deleteAll ) { synchronized ( sDeletingThreadsLock ) { if ( DELETEDEBUG ) { Log . v ( TAG , STR_ + sDeletingThreads ) ; } if ( sDeletingThreads ) { Log . e ( TAG , STR_ , new Exception ( ) ) ; } sDeletingThreads = BOOL_ ; String selection = deleteAll ? null : STR_ ; QKSMSAppBase app = QKSMSApp . getApplication ( ) ; handler . setDeleteToken ( token ) ; handler . startDelete ( token , new Long ( - NUM_ ) , Threads . CONTENT_URI , selection , null ) ; } }
public GridNioAsyncNotifyFilter ( String gridName , Executor exec , IgniteLogger log ) { super ( GridNioAsyncNotifyFilter . class . getSimpleName ( ) ) ; this . gridName = gridName ; this . log = log ; workerPool = new GridWorkerPool ( exec , log ) ; }
public boolean isReadOnly ( ) { return BOOL_ ; }
public String invokeStringMethod ( String stringObj , String methodName , List < String > methodArgs ) { String value = STR_ ; try { CustomConfigMethod configMethodDef = getCustomConfigMethod ( methodName ) ; if ( configMethodDef == null ) { logger . error ( STR_ , methodName ) ; return null ; } logger . debug ( STR_ , stringObj ) ; logger . debug ( STR_ , configMethodDef . getName ( ) , methodArgs ) ; value = configMethodDef . invoke ( stringObj , methodArgs ) ; } catch ( Exception e ) { logger . error ( STR_ , e ) ; } return value ; }
public static SGraphFactory init ( ) { try { SGraphFactory theSGraphFactory = ( SGraphFactory ) EPackage . Registry . INSTANCE . getEFactory ( SGraphPackage . eNS_URI ) ; if ( theSGraphFactory != null ) { return theSGraphFactory ; } } catch ( Exception exception ) { EcorePlugin . INSTANCE . log ( exception ) ; } return new SGraphFactoryImpl ( ) ; }
public static void main ( String [ ] args ) { RenderingImagesOnBodies simulation = new RenderingImagesOnBodies ( ) ; simulation . run ( ) ; }
public RunnableAction ( Runnable runnable ) { this ( runnable , null ) ; }
public static Date parseDate ( String dateValue , String [ ] dateFormats , Date startDate ) throws DateParseException { if ( dateValue == null ) { throw new IllegalArgumentException ( STR_ ) ; } if ( dateFormats == null ) { dateFormats = DEFAULT_PATTERNS ; } if ( startDate == null ) { startDate = DEFAULT_TWO_DIGIT_YEAR_START ; } if ( dateValue . length ( ) > NUM_ && dateValue . startsWith ( STR_ ) && dateValue . endsWith ( STR_ ) ) { dateValue = dateValue . substring ( NUM_ , dateValue . length ( ) - NUM_ ) ; } for ( String dateFormat : dateFormats ) { SimpleDateFormat dateParser = DateFormatHolder . formatFor ( dateFormat ) ; dateParser . set2DigitYearStart ( startDate ) ; try { return dateParser . parse ( dateValue ) ; } catch ( ParseException pe ) { } } throw new DateParseException ( STR_ + dateValue ) ; }
public void update ( U value ) ;
public void removeConnectionCallback ( OneSheeldConnectionCallback connectionCallback ) { if ( connectionCallback != null && connectionCallbacks . contains ( connectionCallback ) ) connectionCallbacks . remove ( connectionCallback ) ; }
private void trackWeakOnes ( int x , int y , BufferedImage gray ) { for ( int xx = x - NUM_ ; xx <= x + NUM_ ; xx ++ ) for ( int yy = y - NUM_ ; yy <= y + NUM_ ; yy ++ ) { if ( isWeak ( xx , yy , gray ) ) { gray . getRaster ( ) . setPixel ( xx , yy , tmp000 ) ; trackWeakOnes ( xx , yy , gray ) ; } } }
public static int color ( ColorHolder colorHolder , Context ctx ) { if ( colorHolder == null ) { return NUM_ ; } else { return colorHolder . color ( ctx ) ; } }
public static Stats of ( Iterator < ? extends Number > values ) { StatsAccumulator accumulator = new StatsAccumulator ( ) ; accumulator . addAll ( values ) ; return accumulator . snapshot ( ) ; }
public AssetFileDescriptor ( ParcelFileDescriptor fd , long startOffset , long length ) { if ( fd == null ) { throw new IllegalArgumentException ( STR_ ) ; } if ( length < NUM_ && startOffset != NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } mFd = fd ; mStartOffset = startOffset ; mLength = length ; }
public ParameterBlock add ( float f ) { return add ( new Float ( f ) ) ; }
R apply ( T t ) throws E ;
List < Object [ ] > hsqlQuery ( String query , String node ) ;
public static String [ ] readLines ( String fileName ) { List < String > lines = new ArrayList < String > ( ) ; if ( reader == null ) createReader ( fileName ) ; String line = null ; try { while ( ( line = reader . readLine ( ) ) != null ) { if ( line . trim ( ) . length ( ) > NUM_ ) { lines . add ( line . trim ( ) ) ; } } } catch ( IOException e ) { e . printStackTrace ( ) ; } closeReader ( ) ; return lines . toArray ( new String [ lines . size ( ) ] ) ; }
String nameOfDay ( int day ) ;
public void test_DivideBigDecimalRoundingModeCEILING ( ) { String a = STR_ ; String b = STR_ ; RoundingMode rm = RoundingMode . CEILING ; String c = STR_ ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) ) ; BigDecimal bNumber = new BigDecimal ( new BigInteger ( b ) ) ; BigDecimal result = aNumber . divide ( bNumber , rm ) ; assertEquals ( STR_ , c , result . toString ( ) ) ; }
public boolean isPullToRefreshEnabled ( ) ;
public static void rename ( String url , String newFileName , boolean includedSuffix , OnRenameDownloadFileListener onRenameDownloadFileListener ) { getFileDownloadManager ( ) . rename ( url , newFileName , includedSuffix , onRenameDownloadFileListener ) ; }
private static void swap ( byte x [ ] , int a , int b ) { byte t = x [ a ] ; x [ a ] = x [ b ] ; x [ b ] = t ; }
void damage ( double amount , Entity source ) ;
public void addEnumClass ( String name , Class c ) { enumClassToNameMap . put ( c , name ) ; nameToEnumClassMap . put ( name , c ) ; }
void selectionChanged ( Collection < GraphNode > previous , Collection < GraphNode > current , Object author ) ;
public void onProfileClick ( ) { if ( mCrossFader != null ) { if ( mCrossFader . isCrossfaded ( ) ) { mCrossFader . crossfade ( ) ; } } if ( mAccountHeader != null ) { IProfile profile = mAccountHeader . getActiveProfile ( ) ; if ( profile instanceof IDrawerItem ) { mDrawerAdapter . setDrawerItem ( NUM_ , generateMiniDrawerItem ( ( IDrawerItem ) profile ) ) ; } } }
private boolean verifyResponseSignature ( HttpServletRequest request , ProviderDescriptorType remoteDescriptor , String remoteEntityId , boolean isIDP ) throws SAMLException , FSException { FSUtils . debug . message ( STR_ ) ; X509Certificate cert = KeyUtil . getVerificationCert ( remoteDescriptor , remoteEntityId , isIDP ) ; if ( cert == null ) { if ( FSUtils . debug . messageEnabled ( ) ) { FSUtils . debug . message ( STR_ + STR_ ) ; } throw new SAMLResponderException ( FSUtils . bundle . getString ( IFSConstants . NO_CERT ) ) ; } boolean isValidSign = FSSignatureUtil . verifyRequestSignature ( request , cert ) ; if ( ! isValidSign ) { FSUtils . debug . error ( STR_ ) ; return BOOL_ ; } else { FSUtils . debug . message ( STR_ ) ; return BOOL_ ; } }
static MemberName linkCallSite ( Object callerObj , Object bootstrapMethodObj , Object nameObj , Object typeObj , Object staticArguments , Object [ ] appendixResult ) { MethodHandle bootstrapMethod = ( MethodHandle ) bootstrapMethodObj ; Class < ? > caller = ( Class < ? > ) callerObj ; String name = nameObj . toString ( ) . intern ( ) ; MethodType type = ( MethodType ) typeObj ; if ( ! TRACE_METHOD_LINKAGE ) return linkCallSiteImpl ( caller , bootstrapMethod , name , type , staticArguments , appendixResult ) ; return linkCallSiteTracing ( caller , bootstrapMethod , name , type , staticArguments , appendixResult ) ; }
public LegHistogram ( final int binSize , Id < Population > popId , Population population ) { this ( binSize , NUM_ * NUM_ / binSize + NUM_ , popId , population ) ; }
public void subscribeToAsyncResellerService ( ) throws Exception { VendorData supplierData = setupNewSupplier ( STR_ ) ; setDateFactory ( STR_ ) ; VOServiceDetails supplService = createPublishActivateAsyncService ( supplierData , TestPriceModel . EXAMPLE_RATA_WEEK_ROLES , STR_ ) ; VendorData resellerData = setupNewReseller ( STR_ ) ; setCutOffDay ( resellerData . getAdminKey ( ) , NUM_ ) ; CustomerData resellerCustomerData = registerCustomer ( resellerData , STR_ ) ; setDateFactory ( STR_ ) ; VOServiceDetails resellerService = grantResalePermission ( supplierData , supplService , resellerData ) ; resellerService = publishActivateService ( resellerData , resellerService ) ; VOSubscriptionDetails subDetails = subscribe ( resellerCustomerData . getAdminUser ( ) , STR_ , resellerService , STR_ , STR_ ) ; completeAsyncSubscription ( basicSetup . getSupplierAdminKey ( ) , resellerCustomerData . getAdminUser ( ) , subDetails , STR_ ) ; resetCutOffDay ( supplierData . getAdminKey ( ) ) ; resetCutOffDay ( resellerData . getAdminKey ( ) ) ; }
private int measureLong ( int measureSpec ) { int result ; int specMode = MeasureSpec . getMode ( measureSpec ) ; int specSize = MeasureSpec . getSize ( measureSpec ) ; if ( ( specMode == MeasureSpec . EXACTLY ) || ( mViewPager == null ) ) { result = specSize ; } else { final int count = mViewPager . getAdapter ( ) . getCount ( ) ; result = ( int ) ( getPaddingLeft ( ) + getPaddingRight ( ) + ( count * NUM_ * mRadius ) + ( count - NUM_ ) * mRadius + NUM_ ) ; if ( specMode == MeasureSpec . AT_MOST ) { result = Math . min ( result , specSize ) ; } } return result ; }
public void flushUpdate ( ) { for ( int i = NUM_ ; i < numberOfQueues ; i ++ ) { if ( ! dbUpdateLists [ i ] . isEmpty ( ) ) { this . submitTaskToQueue ( this . createUpdateTask ( dbUpdateLists [ i ] , fileUpdateLists [ i ] ) , i , processedUpdates ) ; this . dbUpdateLists [ i ] = new ArrayList ( batchSize ) ; this . fileUpdateLists [ i ] = new ArrayList ( batchSize ) ; this . updatesQueued ++ ; } } }
public static < S extends HasRestoreClickHandlers & HasHandlers > void fire ( S source , JavaScriptObject jsObj ) { if ( TYPE != null ) { RestoreClickEvent event = new RestoreClickEvent ( jsObj ) ; source . fireEvent ( event ) ; } }
private Sort sortByLastNameAsc ( ) { return new Sort ( Sort . Direction . DESC , STR_ ) ; }
Object found ( String remainder ) ;
private Node ceiling ( Node x , Key key ) { if ( x == null ) return null ; int cmp = key . compareTo ( x . key ) ; if ( cmp == NUM_ ) return x ; if ( cmp > NUM_ ) return ceiling ( x . right , key ) ; Node y = ceiling ( x . left , key ) ; if ( y != null ) return y ; else return x ; }
public boolean isStreaming ( ) { return BOOL_ ; }
public DividerItemDecoration ( Context context ) { final TypedArray styledAttributes = context . obtainStyledAttributes ( ATTRS ) ; mDivider = styledAttributes . getDrawable ( NUM_ ) ; styledAttributes . recycle ( ) ; }
public boolean isLcdVisible ( ) { return null == lcdVisible ? _lcdVisible : lcdVisible . get ( ) ; }
public void addXPathProperty ( String name , String xpath , QName type ) { XPathPropertyDesc desc = new XPathPropertyDesc ( name , xpath , type ) ; xPathProperties . put ( name , desc ) ; }
public abstract String name ( ) ;
public void addListener ( AnimatorListener listener ) { if ( mListeners == null ) { mListeners = new ArrayList < AnimatorListener > ( ) ; } mListeners . add ( listener ) ; }
private void resetPersistenceManager ( ) { persistenceManager = null ; }
public static String parseCharset ( Map < String , String > headers , String defaultCharset ) { String contentType = headers . get ( HTTP . CONTENT_TYPE ) ; if ( contentType != null ) { String [ ] params = contentType . split ( STR_ ) ; for ( int i = NUM_ ; i < params . length ; i ++ ) { String [ ] pair = params [ i ] . trim ( ) . split ( STR_ ) ; if ( pair . length == NUM_ ) { if ( pair [ NUM_ ] . equals ( STR_ ) ) { return pair [ NUM_ ] ; } } } } return defaultCharset ; }
public void contextDestroyed ( ServletContextEvent sce ) ;
String apply ( ENTITY entity ) ;
public HeaderIterator iterator ( final String name ) { return new SaveListHeaderIterator ( this . headers , name ) ; }
public String createUniqueServerId ( ) { return UsefulBits . getMd5String ( LOCAL_SERVER_URL + LOCAL_SERVER_PORT + REMOTE_SERVER_URL + REMOTE_SERVER_PORT ) ; }
public MultiImageViewGroup ( Context context , AttributeSet attrs ) { this ( context , attrs , NUM_ ) ; }
public void retry ( VolleyError error ) throws VolleyError ;
public static void invokeMain ( String className , String [ ] args ) { try { Class . forName ( className ) . getMethod ( STR_ , new Class [ ] { String [ ] . class } ) . invoke ( null , new Object [ ] { args } ) ; } catch ( Exception e ) { InternalError error = new InternalError ( STR_ ) ; error . initCause ( e ) ; throw error ; } }
public void write ( byte [ ] buffer , int offset , int length ) throws IOException ;
protected void assertLastTimeNotStartTime ( StatisticImpl counter ) { assertTrue ( STR_ + counter . getStartTime ( ) + STR_ + counter . getLastSampleTime ( ) , counter . getStartTime ( ) != counter . getLastSampleTime ( ) ) ; }
public boolean isSubject ( ) { return typeString . startsWith ( SUBJECT ) ; }
public CipherParameters generateDerivedMacParameters ( int keySize ) { return generateDerivedParameters ( keySize ) ; }
public byte [ ] asn1Encode ( ) throws Asn1Exception , IOException { DerOutputStream temp , bytes ; temp = new DerOutputStream ( ) ; temp . putInteger ( BigInteger . valueOf ( pvno ) ) ; bytes = new DerOutputStream ( ) ; bytes . write ( DerValue . createTag ( DerValue . TAG_CONTEXT , BOOL_ , ( byte ) NUM_ ) , temp ) ; temp = new DerOutputStream ( ) ; temp . putInteger ( BigInteger . valueOf ( msgType ) ) ; bytes . write ( DerValue . createTag ( DerValue . TAG_CONTEXT , BOOL_ , ( byte ) NUM_ ) , temp ) ; bytes . write ( DerValue . createTag ( DerValue . TAG_CONTEXT , BOOL_ , ( byte ) NUM_ ) , encPart . asn1Encode ( ) ) ; temp = new DerOutputStream ( ) ; temp . write ( DerValue . tag_Sequence , bytes ) ; bytes = new DerOutputStream ( ) ; bytes . write ( DerValue . createTag ( DerValue . TAG_APPLICATION , BOOL_ , ( byte ) NUM_ ) , temp ) ; return bytes . toByteArray ( ) ; }
public CSSNamingConflict ( String msg ) { super ( msg ) ; }
private static void estimatorTimeSource ( ) { TimeSource tsNow = new SystemTimeSource ( ) ; TimeSource tsEstimated = new EstimatorTimeSource ( NUM_ ) ; compareTimeSources ( SYSTEM_SOURCE_NAME , STR_ , tsNow , tsEstimated ) ; }
public VegetableGrower ( final String name , final String notRipeEnoughMessage ) { this ( name ) ; this . notRipeEnoughMessage = notRipeEnoughMessage ; }
public E add ( E item ) ;
public boolean hasProjectLabels ( ) { return hasRepeatingExtension ( ProjectLabel . class ) ; }
public static void picture ( double x , double y , String s ) { Image image = getImage ( s ) ; double xs = scaleX ( x ) ; double ys = scaleY ( y ) ; int ws = image . getWidth ( null ) ; int hs = image . getHeight ( null ) ; if ( ws < NUM_ || hs < NUM_ ) throw new IllegalArgumentException ( STR_ + s + STR_ ) ; offscreen . drawImage ( image , ( int ) Math . round ( xs - ws / NUM_ ) , ( int ) Math . round ( ys - hs / NUM_ ) , null ) ; draw ( ) ; }
public Word plus ( Extent w2 ) { return new Word ( value . plus ( w2 . toLong ( ) ) ) ; }
public void put ( final int pPriority , final T pItem ) throws IllegalArgumentException , InterruptedException { if ( pItem == null ) { throw new IllegalArgumentException ( STR_ ) ; } final ReentrantLock lock = this . mLock ; final Condition notFullCondition = this . mNotFullConditions . get ( pPriority ) ; lock . lockInterruptibly ( ) ; try { final IList < T > queue = this . mQueues . get ( pPriority ) ; if ( queue == null ) { throw new IllegalArgumentException ( STR_ + pPriority + STR_ ) ; } final int queueCapacity = this . mQueueCapacities . get ( pPriority ) ; try { while ( queue . size ( ) == queueCapacity ) { notFullCondition . await ( ) ; } } catch ( final InterruptedException e ) { notFullCondition . signal ( ) ; throw e ; } insert ( pPriority , pItem ) ; } finally { lock . unlock ( ) ; } }
private void addCSSClasses ( ) { if ( ! svgp . getCSSClassManager ( ) . contains ( CSS_BRACKET ) ) { final CSSClass cls = new CSSClass ( this , CSS_BRACKET ) ; final StyleLibrary style = context . getStyleLibrary ( ) ; cls . setStatement ( SVGConstants . CSS_STROKE_PROPERTY , style . getColor ( StyleLibrary . PLOT ) ) ; cls . setStatement ( SVGConstants . CSS_STROKE_WIDTH_PROPERTY , style . getLineWidth ( StyleLibrary . PLOT ) ) ; svgp . addCSSClassOrLogError ( cls ) ; } }
public void startVoiceRecognition ( ) { if ( isMicEnabled ( ) ) { Intent intent = new Intent ( RecognizerIntent . ACTION_RECOGNIZE_SPEECH ) ; intent . putExtra ( RecognizerIntent . EXTRA_LANGUAGE_MODEL , RecognizerIntent . LANGUAGE_MODEL_FREE_FORM ) ; intent . putExtra ( RecognizerIntent . EXTRA_PROMPT , context . getString ( R . string . speak_now ) ) ; if ( mContainerActivity != null ) { mContainerActivity . startActivityForResult ( intent , VOICE_RECOGNITION_CODE ) ; } else if ( mContainerFragment != null ) { mContainerFragment . startActivityForResult ( intent , VOICE_RECOGNITION_CODE ) ; } else if ( mContainerSupportFragment != null ) { mContainerSupportFragment . startActivityForResult ( intent , VOICE_RECOGNITION_CODE ) ; } } }
void clear ( ) ;
void onFocusChanged ( RTEditText editor , boolean focused ) ;
public WalkingIteratorSorted ( PrefixResolver nscontext ) { super ( nscontext ) ; }
void clear ( ) ;
protected void layoutChildren ( ) { }
public DrawerBuilder withDrawerGravity ( int gravity ) { this . mDrawerGravity = gravity ; return this ; }
public ChannelDialog ( java . awt . Frame parent , boolean modal , JmeAnimation jmeAnim ) { super ( parent , modal ) ; this . jmeAnim = jmeAnim ; initComponents ( ) ; jTextField1 . setText ( jmeAnim . getAnimSpeed ( ) + STR_ ) ; jComboBox1 . setSelectedItem ( jmeAnim . getAnimLoopMode ( ) . toString ( ) ) ; }
public String toXMLString ( ) throws SAML2Exception { return toXMLString ( BOOL_ , BOOL_ ) ; }
public static void verifyCopyIsForSource ( Volume fullCopyVolume , URI fcSourceURI ) { if ( ! fullCopyVolume . getAssociatedSourceVolume ( ) . toString ( ) . equals ( fcSourceURI . toString ( ) ) ) { throw APIException . badRequests . protectionVolumeNotFullCopyOfVolume ( fullCopyVolume . getId ( ) , fcSourceURI ) ; } }
public void onLastItemVisible ( ) ;
public static void assertPathExists ( FileSystem fileSystem , String message , Path path ) throws IOException { if ( ! fileSystem . exists ( path ) ) { fail ( message + STR_ + path + STR_ + path . getParent ( ) ) ; } }
public StatechartScopeItemProvider ( AdapterFactory adapterFactory ) { super ( adapterFactory ) ; }
protected boolean [ ] canHandleMissing ( AttrTypes attrTypes , int classType , boolean attributeMissing , boolean classMissing , int missingLevel ) { if ( missingLevel == NUM_ ) { print ( STR_ ) ; } print ( STR_ ) ; if ( attributeMissing ) { print ( STR_ ) ; if ( classMissing ) { print ( STR_ ) ; } } if ( classMissing ) { print ( STR_ ) ; } print ( STR_ ) ; printAttributeSummary ( attrTypes , classType ) ; print ( STR_ ) ; ArrayList < String > accepts = new ArrayList < String > ( ) ; accepts . add ( STR_ ) ; accepts . add ( STR_ ) ; accepts . add ( STR_ ) ; int numTrain = getNumInstances ( ) , numTest = getNumInstances ( ) , numClasses = NUM_ ; int numAtts = NUM_ , attrIndex = NUM_ ; return runBasicTest ( attrTypes , numAtts , attrIndex , classType , missingLevel , attributeMissing , classMissing , numTrain , numTest , numClasses , accepts ) ; }
public boolean isIncludeNullsSalesRegion ( ) ;
protected Collection < BindingSet > makeIterationCache ( CloseableIteration < BindingSet , QueryEvaluationException > iter ) { return new ArrayList < BindingSet > ( ) ; }
public void updateDate ( int year , int monthOfYear , int dayOfMonth ) { mDatePicker . updateDate ( year , monthOfYear , dayOfMonth ) ; }
public abstract boolean isErrorEnabled ( ) ;
public static int mainImportLDIF ( String [ ] args , boolean initializeServer , OutputStream outStream , OutputStream errStream ) { ImportLDIF tool = new ImportLDIF ( ) ; return tool . process ( args , initializeServer , outStream , errStream ) ; }
private static void collectAllTablesInSubqueries ( GridSqlElement el , Set < String > schemas , Set < String > tbls ) { if ( el == null ) return ; el = GridSqlAlias . unwrap ( el ) ; if ( el instanceof GridSqlOperation || el instanceof GridSqlFunction ) { for ( GridSqlElement child : el ) collectAllTablesInSubqueries ( child , schemas , tbls ) ; } else if ( el instanceof GridSqlSubquery ) collectAllTables ( ( ( GridSqlSubquery ) el ) . select ( ) , schemas , tbls ) ; }
public IIOMetadata convertStreamMetadata ( IIOMetadata inData , ImageWriteParam param ) { if ( inData == null ) { throw new IllegalArgumentException ( STR_ ) ; } IIOMetadata sm = getDefaultStreamMetadata ( param ) ; convertMetadata ( STREAM_METADATA_NAME , inData , sm ) ; return sm ; }
public TagDispatcherBuilder enableSounds ( boolean enableSounds ) { this . enableSounds = enableSounds ; return this ; }
public ZoomToFitControl ( String group , int button ) { this . m_group = group ; this . m_button = button ; }
public boolean isPortConfigResetAtDisconnect ( ) { return portConfigResetAtDisconnect ; }
public void addUserRole ( UserRoleType userRole ) { userRoles . add ( userRole ) ; }
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( namednodemapremovenameditemns09 . class , args ) ; }
void removeListener ( IMEMonitorHandlerReceiver < T > l ) ;
private SqlReservedWords ( ) { }
public static < K , V > UnifiedSetMultimap < V , K > flip ( SetMultimap < K , V > setMultimap ) { UnifiedSetMultimap < V , K > result = new UnifiedSetMultimap < > ( ) ; setMultimap . forEachKeyMultiValues ( null ) ; return result ; }
public boolean requiresConnection ( ) { return BOOL_ ; }
public boolean containsKey ( K key ) { if ( _list == null ) return BOOL_ ; return _list . get ( key ) != null ; }
protected static boolean isPredefinedCidFont ( String fontName ) { if ( ! registryNames . containsKey ( FONTS_PROP ) ) { return BOOL_ ; } else if ( ! registryNames . get ( FONTS_PROP ) . contains ( fontName ) ) { return BOOL_ ; } return BOOL_ ; }
public static _Fields findByThriftIdOrThrow ( int fieldId ) { _Fields fields = findByThriftId ( fieldId ) ; if ( fields == null ) throw new IllegalArgumentException ( STR_ + fieldId + STR_ ) ; return fields ; }
public String convertTClassifierIterableToString ( EDataType eDataType , Object instanceValue ) { return super . convertToString ( instanceValue ) ; }
public static boolean isBodyAsleepColorEnabled ( ) { return bodyAsleepColorEnabled ; }
< R , P > R accept ( ElementVisitor < R , P > v , P p ) ;
public static String deleteChar ( String fromString , char charToDelete ) { StringBuffer buffer = new StringBuffer ( fromString . length ( ) ) ; for ( int i = NUM_ ; i < fromString . length ( ) ; i ++ ) { if ( fromString . charAt ( i ) != charToDelete ) { buffer . append ( fromString . charAt ( i ) ) ; } } return new String ( buffer ) ; }
static boolean formattingRuleHasFirstGroupOnly ( String nationalPrefixFormattingRule ) { return nationalPrefixFormattingRule . length ( ) == NUM_ || FIRST_GROUP_ONLY_PREFIX_PATTERN . matcher ( nationalPrefixFormattingRule ) . matches ( ) ; }
private Comparators ( ) { }
private void updateRecorderError ( int errorType ) { Log . d ( TAG , STR_ + errorType ) ; String showString = null ; refreshRecordIdle ( ) ; switch ( errorType ) { case FmRecorder . ERROR_SDCARD_NOT_PRESENT : showString = getString ( R . string . toast_sdcard_missing ) ; break ; case FmRecorder . ERROR_SDCARD_INSUFFICIENT_SPACE : showString = getString ( R . string . toast_sdcard_insufficient_space ) ; break ; case FmRecorder . ERROR_RECORDER_INTERNAL : showString = getString ( R . string . toast_recorder_internal_error ) ; break ; case FmRecorder . ERROR_PLAYER_INTERNAL : showString = getString ( R . string . toast_player_internal_error ) ; break ; case FmRadioListener . NOT_AUDIO_FOCUS : showString = getString ( R . string . not_available ) ; if ( isRecordFileExist ( ) ) { refreshPlaybackIdle ( BOOL_ ) ; } break ; case FmRecorder . ERROR_RECORDER_INVALID_STATE : showString = getString ( R . string . toast_powerup_before_record_warning ) ; break ; default : Log . d ( TAG , STR_ ) ; break ; } showToast ( showString ) ; }
protected Transferable createTransferableProxy ( Transferable t , boolean local ) { return new TransferableProxy ( t , local ) ; }
public ByteArrayOutputStream ( ) { buf = new byte [ NUM_ ] ; }
public JCExpression convertToIntForHashAttribute ( JCExpression value ) { SyntheticName tempName = naming . temp ( STR_ ) ; JCExpression type = make ( ) . Type ( syms ( ) . longType ) ; JCBinary combine = make ( ) . Binary ( JCTree . Tag . BITXOR , makeUnquotedIdent ( tempName . asName ( ) ) , make ( ) . Binary ( JCTree . Tag . USR , makeUnquotedIdent ( tempName . asName ( ) ) , makeInteger ( NUM_ ) ) ) ; return make ( ) . TypeCast ( syms ( ) . intType , makeLetExpr ( tempName , null , type , value , combine ) ) ; }
protected void parseAdaptationSetChild ( XmlPullParser xpp ) throws XmlPullParserException , IOException { }
public static Class < ? > classOrNull ( ClassLoader loader , String className ) { try { return loader . loadClass ( className ) ; } catch ( ClassNotFoundException ex ) { } catch ( SecurityException ex ) { } catch ( LinkageError ex ) { } catch ( IllegalArgumentException e ) { } return null ; }
public static final void drawPolygon ( GL2 gl , Vector2 [ ] vs , boolean points ) { gl . glBegin ( GL . GL_LINE_LOOP ) ; for ( int i = NUM_ ; i < vs . length ; i ++ ) { Vector2 v = vs [ i ] ; gl . glVertex2d ( v . x , v . y ) ; } gl . glEnd ( ) ; if ( points ) { gl . glBegin ( GL . GL_POINTS ) ; for ( int i = NUM_ ; i < vs . length ; i ++ ) { Vector2 v = vs [ i ] ; gl . glVertex2d ( v . x , v . y ) ; } gl . glEnd ( ) ; } }
int indexOf ( Node node ) ;
public SRGLoader ( ) { super ( null ) ; useNodes = BOOL_ ; }
public static String convertBracketsFromPTBFormat ( String sentence ) { sentence = sentence . replaceAll ( STR_ , STR_ ) ; sentence = sentence . replaceAll ( STR_ , STR_ ) ; sentence = sentence . replaceAll ( STR_ , STR_ ) ; sentence = sentence . replaceAll ( STR_ , STR_ ) ; sentence = sentence . replaceAll ( STR_ , STR_ ) ; sentence = sentence . replaceAll ( STR_ , STR_ ) ; return sentence ; }
public float lengthSquared ( ) { float x = this . m [ NUM_ ] ; float y = this . m [ NUM_ ] ; float z = this . m [ NUM_ ] ; float result = x * x + y * y + z * z ; return result ; }
public IRedirectRuleBuilder redirect ( String oldPath ) ;
public boolean isPanYEnabled ( ) { return mPanYEnabled ; }
private void init ( Context context , AttributeSet attrs ) { if ( attrs != null ) { TypedArray a = context . obtainStyledAttributes ( attrs , R . styleable . MetaballMenuImageView , NUM_ , NUM_ ) ; mnDefaultImage = a . getResourceId ( R . styleable . MetaballMenuImageView_defaultImage , NUM_ ) ; mnSelectedImage = a . getResourceId ( R . styleable . MetaballMenuImageView_selectedImage , NUM_ ) ; a . recycle ( ) ; } if ( mnDefaultImage != NUM_ ) setImageResource ( mnDefaultImage ) ; }
public Object clone ( ) throws CloneNotSupportedException { return new ObjectVector ( this ) ; }
public void write ( LogRecord logRecord ) throws Exception { if ( logRecord == null ) { throw new IllegalArgumentException ( STR_ ) ; } if ( archiveOut == null ) { initOutput ( ) ; } log . trace ( STR_ , logRecord . getId ( ) ) ; if ( logRecord instanceof MessageRecord ) { logArchiveCache . add ( ( MessageRecord ) logRecord ) ; } archiveBase . markRecordArchived ( logRecord ) ; if ( logArchiveCache . isRotating ( ) ) { rotate ( ) ; } }
private static String generateToken ( ) { return UUID . randomUUID ( ) . toString ( ) ; }
SessionInterface reconnect ( boolean write ) ;
public synchronized String complete ( ) throws Exception { if ( aborted ) { throw new Exception ( STR_ ) ; } final long startTime = System . currentTimeMillis ( ) ; boolean isTimedOut = BOOL_ ; while ( ! complete && ! isTimedOut ) { wait ( COMPLETION_PAUSE ) ; isTimedOut = ( System . currentTimeMillis ( ) - startTime ) > COMPLETION_TIMEOUT ; } if ( isTimedOut && ! complete ) { throw new Exception ( STR_ ) ; } decant ( ) ; return out . toString ( ) ; }
public boolean deleteOldRdn ( ) { return deleteOldRdn ; }
private void handleOnClientConnected ( ) { }
public double [ ] toArray ( ) { return new double [ ] { x , y , z } ; }
private void sendGhostSkipMessage ( IPlayer ghost ) { StringBuffer message = new StringBuffer ( ) ; message . append ( STR_ ) . append ( ghost . getName ( ) ) . append ( STR_ ) ; sendServerChat ( message . toString ( ) ) ; }
protected GitlabUrl subfolder ( String subfolder ) { this . subfolder = subfolder ; return this ; }
protected MultiProtocolURL ( ) { this . protocol = null ; this . host = null ; this . hostAddress = null ; this . userInfo = null ; this . path = null ; this . searchpart = null ; this . anchor = null ; this . contentDomain = null ; this . port = - NUM_ ; }
public static void w ( String tag , String msg ) { if ( sLevel > LEVEL_WARNING ) { return ; } Log . w ( tag , msg ) ; }
public static S2LatLngRect full ( ) { return new S2LatLngRect ( fullLat ( ) , fullLng ( ) ) ; }
public static void executeApiTask ( ExportGroupService exportGroupService , ExecutorService executorService , DbClient dbClient , Project project , ExportGroup exportGroup , ExportUpdateParam exportUpdateParam , String task , TaskResourceRep taskRes ) { CreateExportGroupUpdateSchedulingThread schedulingThread = new CreateExportGroupUpdateSchedulingThread ( dbClient , exportGroupService , project , exportGroup , exportUpdateParam , task , taskRes ) ; try { executorService . execute ( schedulingThread ) ; } catch ( Exception e ) { String message = STR_ + exportGroup . getId ( ) ; _log . error ( message ) ; taskRes . setMessage ( message ) ; } }
public void addCharge ( AttackAction ea ) { pendingCharges . addElement ( ea ) ; processGameEvent ( new GameNewActionEvent ( this , ea ) ) ; }
public JSONException ( String message ) { super ( message ) ; }
public String urlname ( ) { return ( this . alternative_urlname == null ) ? MultiProtocolURL . unescape ( urlstring ( ) ) : this . alternative_urlname ; }
public void dispose ( ) ;
protected void initializeAllLiveAttributes ( ) { super . initializeAllLiveAttributes ( ) ; initializeLiveAttributes ( ) ; }
public boolean shouldUpdateAlerts ( ) { if ( alerts_lastUpdated == null ) { alerts_lastUpdated = Calendar . getInstance ( ) ; return BOOL_ ; } Calendar updateTreshold = Calendar . getInstance ( ) ; updateTreshold . add ( Calendar . MINUTE , - NUM_ ) ; return alerts_lastUpdated . before ( updateTreshold ) ; }
public NodeCollection ( ) { }
private static int uarimaxGe ( double value , double [ ] bv , int [ ] bvi , BinaryOperator bOp ) throws DMLRuntimeException { int ixMax = bv . length ; if ( value < bv [ NUM_ ] || value >= bv [ bv . length - NUM_ ] ) return ixMax ; int ix = Arrays . binarySearch ( bv , value ) ; if ( ix < NUM_ ) ix = Math . abs ( ix ) - NUM_ ; ixMax = bvi [ ix ] + NUM_ ; return ixMax ; }
private void backwardTest ( ListIterator iter , int i ) { List list = getList ( ) ; while ( i > NUM_ ) { assertTrue ( STR_ + i , iter . hasPrevious ( ) ) ; assertEquals ( STR_ + i , iter . nextIndex ( ) , i ) ; assertEquals ( STR_ + i , iter . previousIndex ( ) , i - NUM_ ) ; Object o = iter . previous ( ) ; assertEquals ( STR_ , list . get ( i - NUM_ ) , o ) ; i -- ; } assertTrue ( STR_ , ! iter . hasPrevious ( ) ) ; int nextIndex = iter . nextIndex ( ) ; assertEquals ( STR_ + nextIndex , nextIndex , NUM_ ) ; int prevIndex = iter . previousIndex ( ) ; assertEquals ( STR_ + prevIndex , prevIndex , - NUM_ ) ; try { iter . previous ( ) ; fail ( STR_ ) ; } catch ( NoSuchElementException e ) { } }
private void updateProgress ( int progress ) { if ( myHost != null && progress != previousProgress ) { myHost . updateProgress ( progress ) ; } previousProgress = progress ; }
protected void resetCutOffDay ( long adminKey , UserRoleType userRole ) throws Exception { container . login ( adminKey , ROLE_ORGANIZATION_ADMIN , userRole . name ( ) ) ; orgSetup . updateCutOffDay ( oldCutOffDay ) ; }
public boolean hasCapabilities ( int capabilities ) { return ( getSupportedCapabilities ( ) & capabilities ) == capabilities ; }
public static void replaceDirectory ( Configuration conf , Path src , Path dest ) throws IOException { FileSystem fs = dest . getFileSystem ( conf ) ; if ( fs . exists ( dest ) ) { LOG . debug ( STR_ + dest + STR_ ) ; deleteDirectory ( conf , dest ) ; } LOG . debug ( STR_ + src + STR_ + dest ) ; fs . rename ( src , dest ) ; }
public GzipAsynchOutputStream ( OutputStream stream , int pipeSize , int gzipSize , boolean terminated ) throws IOException { super ( BGZIP ? new BlockCompressedOutputStream ( stream , null , DEFAULT_GZIP_LEVEL , terminated ) : new AdjustableGZIPOutputStream ( stream ) , pipeSize ) ; }
public int processByte ( byte in , byte [ ] out , int outOff ) throws DataLengthException , IllegalStateException { int resultLen = NUM_ ; if ( bufOff == buf . length ) { resultLen = cipher . processBlock ( buf , NUM_ , out , outOff ) ; bufOff = NUM_ ; } buf [ bufOff ++ ] = in ; return resultLen ; }
private int calculateMaxCharacterWidthBasedOnPixelWidth ( ) { String testWidthString = STR_ ; for ( int i = NUM_ ; i < NUM_ ; i ++ ) { testWidthString = testWidthString + STR_ ; } BufferedImage temp = new BufferedImage ( NUM_ , NUM_ , BufferedImage . TYPE_INT_ARGB ) ; Graphics2D tempG2d = temp . createGraphics ( ) ; ; FontMetrics metrics = tempG2d . getFontMetrics ( this . labelFont ) ; int strWidth = metrics . stringWidth ( testWidthString ) ; while ( strWidth > this . maxPixelWidth ) { testWidthString = testWidthString . substring ( NUM_ , testWidthString . length ( ) - NUM_ ) ; strWidth = metrics . stringWidth ( testWidthString ) ; } return testWidthString . length ( ) ; }
public static BigDecimal ln ( BigDecimal x , int scale ) { if ( x . signum ( ) <= NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } int magnitude = x . toString ( ) . length ( ) - x . scale ( ) - NUM_ ; if ( magnitude < NUM_ ) { return lnNewton ( x , scale ) ; } else { BigDecimal root = intRoot ( x , magnitude , scale ) ; BigDecimal lnRoot = lnNewton ( root , scale ) ; return BigDecimal . valueOf ( magnitude ) . multiply ( lnRoot ) . setScale ( scale , BigDecimal . ROUND_HALF_EVEN ) ; } }
public static VideoEditor create ( String projectPath ) throws IOException { final File dir = new File ( projectPath ) ; if ( ! dir . exists ( ) ) { if ( ! dir . mkdirs ( ) ) { throw new FileNotFoundException ( STR_ + projectPath ) ; } else { if ( ! new File ( dir , STR_ ) . createNewFile ( ) ) { throw new FileNotFoundException ( STR_ ) ; } } } return new VideoEditorImpl ( projectPath ) ; }
private void onTrigger4 ( ) { final CharSequence targetName = mAppsAdapter . getLabel ( TARGET_POSITION ) ; addInstruction ( R . string . accessibility_tutorial_lesson_1_text_5 , BOOL_ , targetName ) ; mAllApps . setAccessibilityDelegate ( mTargetIconLoseFocusDelegate ) ; mAllApps . setOnItemClickListener ( mTargetIconClickListener ) ; }
public static Request newUploadPhotoRequest ( Session session , File file , Callback callback ) throws FileNotFoundException { ParcelFileDescriptor descriptor = ParcelFileDescriptor . open ( file , ParcelFileDescriptor . MODE_READ_ONLY ) ; Bundle parameters = new Bundle ( NUM_ ) ; parameters . putParcelable ( PICTURE_PARAM , descriptor ) ; return new Request ( session , MY_PHOTOS , parameters , HttpMethod . POST , callback ) ; }
public int executeQuery ( String jpql ) { this . bot . log ( this , STR_ , Level . FINE , jpql ) ; int rowCount = NUM_ ; synchronized ( this . bot . memory ( ) ) { try { this . entityManager . getTransaction ( ) . begin ( ) ; rowCount = this . entityManager . createQuery ( jpql ) . executeUpdate ( ) ; this . entityManager . getTransaction ( ) . commit ( ) ; resetSize ( ) ; } catch ( RuntimeException failed ) { this . bot . log ( this , failed ) ; if ( this . entityManager . getTransaction ( ) . isActive ( ) ) { this . entityManager . getTransaction ( ) . rollback ( ) ; } clear ( ) ; throw failed ; } } ( ( DatabaseNetwork ) this . bot . memory ( ) . getLongTermMemory ( ) ) . resetSize ( ) ; return rowCount ; }
private void fixTrans ( ) { matrix . getValues ( m ) ; float transX = m [ Matrix . MTRANS_X ] ; float transY = m [ Matrix . MTRANS_Y ] ; float fixTransX = getFixTrans ( transX , viewWidth , getImageWidth ( ) ) ; float fixTransY = getFixTrans ( transY , viewHeight , getImageHeight ( ) ) ; if ( fixTransX != NUM_ || fixTransY != NUM_ ) { matrix . postTranslate ( fixTransX , fixTransY ) ; } }
public double stop ( ) { assert state == STARTED || state == PAUSED ; time = culmTime ; if ( state == STARTED ) time += now ( ) - startTime ; state = STOPPED ; for ( Map . Entry < String , RTimer > entry : children ) { RTimer child = entry . getValue ( ) ; if ( child . state == STARTED || child . state == PAUSED ) child . stop ( ) ; } return time ; }
public FileExistsException ( File file ) { super ( STR_ + file + STR_ ) ; }
public static < T > List < T > shiftElementsToEnd ( final List < T > source , final int count ) { final ArrayList < T > rVal = new ArrayList < > ( source . size ( ) ) ; for ( int i = count ; i < source . size ( ) ; i ++ ) { rVal . add ( source . get ( i ) ) ; } for ( int i = NUM_ ; i < count ; i ++ ) { rVal . add ( source . get ( i ) ) ; } if ( source . size ( ) != rVal . size ( ) ) { throw new IllegalStateException ( STR_ + count + STR_ + source + STR_ + rVal ) ; } return rVal ; }
Address copyAddress ( Customer customer , String addrId , String addressType ) ;
private void authorizeDomain ( Registration registration , String domain ) { try { val authorization = getAuthorization ( registration , domain ) ; val challenge = prepareDnsChallenge ( authorization ) ; completeChallenge ( challenge ) ; } catch ( AcmeException e ) { e . printStackTrace ( ) ; throw new LetsencryptException ( e . getMessage ( ) ) ; } }
public void initWheelEvent ( String typeArg , boolean canBubbleArg , boolean cancelableArg , AbstractView viewArg , int wheelDeltaArg ) { initUIEvent ( typeArg , canBubbleArg , cancelableArg , viewArg , NUM_ ) ; wheelDelta = wheelDeltaArg ; }
public void test_DivideBigDecimalRoundingModeUP ( ) { String a = STR_ ; String b = STR_ ; RoundingMode rm = RoundingMode . UP ; String c = STR_ ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) ) ; BigDecimal bNumber = new BigDecimal ( new BigInteger ( b ) ) ; BigDecimal result = aNumber . divide ( bNumber , rm ) ; assertEquals ( STR_ , c , result . toString ( ) ) ; }
private void withdraw ( ) { XEvent req = new XEvent ( ) ; try { long root ; XToolkit . awtLock ( ) ; try { root = XlibWrapper . RootWindow ( XToolkit . getDisplay ( ) , getScreenNumber ( ) ) ; } finally { XToolkit . awtUnlock ( ) ; } req . set_type ( XConstants . UnmapNotify ) ; XUnmapEvent umev = req . get_xunmap ( ) ; umev . set_event ( root ) ; umev . set_window ( getWindow ( ) ) ; umev . set_from_configure ( BOOL_ ) ; XToolkit . awtLock ( ) ; try { XlibWrapper . XSendEvent ( XToolkit . getDisplay ( ) , root , BOOL_ , XConstants . SubstructureRedirectMask | XConstants . SubstructureNotifyMask , req . pData ) ; } finally { XToolkit . awtUnlock ( ) ; } } finally { req . dispose ( ) ; } }
public Observable < UserRateCount > updateUserRateCounts ( ) { return routes . getUserRateCount ( KEY , Session . get ( ) . getUserId ( ) ) . flatMapIterable ( null ) . doOnNext ( null ) ; }
public FileWriterWithEncoding ( String filename , CharsetEncoder encoding , boolean append ) throws IOException { this ( new File ( filename ) , encoding , append ) ; }
public boolean canGather ( Unit targetUnit , boolean checkCanTargetUnit , boolean checkCanIssueCommandType ) { return canGather_native ( pointer , targetUnit , checkCanTargetUnit , checkCanIssueCommandType ) ; }
public final B coerce ( A a ) { return Coerce . ofHkt ( subst ( new Coerce < > ( a ) ) ) . uncoerce ; }
public boolean isRevocationEnabled ( ) { return revocationEnabled ; }
protected AlgorithmParameterGenerator ( AlgorithmParameterGeneratorSpi paramGenSpi , Provider provider , String algorithm ) { this . paramGenSpi = paramGenSpi ; this . provider = provider ; this . algorithm = algorithm ; }
public DefaultXYZDataset createSampleDataset1 ( ) { DefaultXYZDataset d = new DefaultXYZDataset ( ) ; double [ ] x1 = new double [ ] { NUM_ , NUM_ , NUM_ } ; double [ ] y1 = new double [ ] { NUM_ , NUM_ , NUM_ } ; double [ ] z1 = new double [ ] { NUM_ , NUM_ , NUM_ } ; double [ ] [ ] data1 = new double [ ] [ ] { x1 , y1 , z1 } ; d . addSeries ( STR_ , data1 ) ; double [ ] x2 = new double [ ] { NUM_ , NUM_ , NUM_ } ; double [ ] y2 = new double [ ] { NUM_ , NUM_ , NUM_ } ; double [ ] z2 = new double [ ] { NUM_ , NUM_ , NUM_ } ; double [ ] [ ] data2 = new double [ ] [ ] { x2 , y2 , z2 } ; d . addSeries ( STR_ , data2 ) ; return d ; }
public CertificateBody ( DERApplicationSpecific certificateProfileIdentifier , CertificationAuthorityReference certificationAuthorityReference , PublicKeyDataObject publicKey , CertificateHolderReference certificateHolderReference , CertificateHolderAuthorization certificateHolderAuthorization , PackedDate certificateEffectiveDate , PackedDate certificateExpirationDate ) { setCertificateProfileIdentifier ( certificateProfileIdentifier ) ; setCertificationAuthorityReference ( new DERApplicationSpecific ( EACTags . ISSUER_IDENTIFICATION_NUMBER , certificationAuthorityReference . getEncoded ( ) ) ) ; setPublicKey ( publicKey ) ; setCertificateHolderReference ( new DERApplicationSpecific ( EACTags . CARDHOLDER_NAME , certificateHolderReference . getEncoded ( ) ) ) ; setCertificateHolderAuthorization ( certificateHolderAuthorization ) ; try { setCertificateEffectiveDate ( new DERApplicationSpecific ( BOOL_ , EACTags . APPLICATION_EFFECTIVE_DATE , new DEROctetString ( certificateEffectiveDate . getEncoding ( ) ) ) ) ; setCertificateExpirationDate ( new DERApplicationSpecific ( BOOL_ , EACTags . APPLICATION_EXPIRATION_DATE , new DEROctetString ( certificateExpirationDate . getEncoding ( ) ) ) ) ; } catch ( IOException e ) { throw new IllegalArgumentException ( STR_ + e . getMessage ( ) ) ; } }
public boolean isBookmarkingEnabled ( ) { return bookmarkingEnabled ; }
void onParentListItemExpanded ( int position ) ;
protected abstract void refresh ( T value ) ;
public boolean isLoggedIn ( ) { return m_loggedIn ; }
public static Command create ( String name ) { return new Command ( name ) ; }
public static String toString ( URI uri , String encoding ) throws IOException { return toString ( uri , Charsets . toCharset ( encoding ) ) ; }
public NewVariableResolver ( VariableResolver original ) { this . original = original ; FacesContext . getCurrentInstance ( ) . getExternalContext ( ) . getApplicationMap ( ) . put ( STR_ , this ) ; }
public void testIsWritable ( ) { try { assertTrue ( rsmd . isWritable ( NUM_ ) ) ; assertTrue ( rsmd . isWritable ( NUM_ ) ) ; assertTrue ( rsmd . isWritable ( NUM_ ) ) ; } catch ( SQLException e1 ) { fail ( STR_ + e1 . getMessage ( ) ) ; e1 . printStackTrace ( ) ; } try { rsmd . isWritable ( NUM_ ) ; fail ( STR_ ) ; } catch ( SQLException e ) { } }
IEspDevice doActionDeviceActivateSharedInternet ( long userId , String userKey , String sharedDeviceKey ) ;
static public double normalize ( final double rawScore , final double totalRawScore ) { if ( totalRawScore == NUM_ ) { return NUM_ ; } return rawScore / totalRawScore ; }
public static Object destroyKey1 ( ) { try { Region region = cache . getRegion ( Region . SEPARATOR + REGION_NAME ) ; assertNotNull ( region ) ; region . destroy ( STR_ ) ; return eventId ; } catch ( Exception e ) { fail ( STR_ , e ) ; } return null ; }
public void updateForRecyclerView ( CharSequence text , int futureTextViewWidth , int expandState ) { mFutureTextViewWidth = futureTextViewWidth ; mCurrState = expandState ; setText ( text ) ; }
public long count ( ) { return xStats . count ( ) ; }
public void registerCustomTooltipRenderer ( RenderTooltipInterface renderer ) { renderField . registerCustomTooltipRenderer ( renderer ) ; }
private BinaryField binaryField ( BinaryObject obj ) { BinaryField field0 = field ; if ( field0 == null && ! fieldTaken ) { BinaryType type = obj instanceof BinaryObjectEx ? ( ( BinaryObjectEx ) obj ) . rawType ( ) : obj . type ( ) ; if ( type != null ) { field0 = type . field ( propName ) ; assert field0 != null ; field = field0 ; } fieldTaken = BOOL_ ; } return field0 ; }
public void putPresenter ( int viewId , P presenter , Context context ) { OrientationChangeFragment fragment = getFragment ( context ) ; CacheEntry < V , P > entry = fragment . get ( viewId ) ; if ( entry == null ) { entry = new CacheEntry < V , P > ( presenter ) ; fragment . put ( viewId , entry ) ; } else { entry . presenter = presenter ; } }
public static Texture createTexture ( URL url , boolean flip ) { Image image = loadImage ( url , flip ) ; return ( createTexture ( image ) ) ; }
public Boolean isVAssertsEnabled ( ) { return vAssertsEnabled ; }
public static Jump handle ( EntityLivingBase entity , float motion ) { Jump event = new Jump ( entity , motion ) ; OpenModLoader . getEventBus ( ) . post ( event ) ; return event ; }
public com . sun . identity . liberty . ws . common . jaxb . ps . AuthenticationStatementType createAuthenticationStatementType ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . liberty . ws . common . jaxb . ps . impl . AuthenticationStatementTypeImpl ( ) ; }
public boolean userCanEditDir ( int connectedUserId , int dirId , String entidad ) throws Exception { boolean can = BOOL_ ; int parentId ; int dirMgrId = ISicresAdminDefsKeys . NULL_ID ; DbConnection dbConn = new DbConnection ( ) ; try { dbConn . open ( DBSessionManager . getSession ( ) ) ; if ( dirId == ISicresAdminDefsKeys . NULL_ID || dirId == ISicresAdminDefsKeys . ROOT_DIR_ID ) dirMgrId = NUM_ ; else dirMgrId = this . getDirMgrId ( dirId , entidad ) ; can = hasUserAuth ( connectedUserId , USER_ACTION_ID_EDIT , dirMgrId , ISicresAdminDefsKeys . NULL_ID , ISicresAdminDefsKeys . NULL_ID , entidad ) ; } catch ( Exception e ) { _logger . error ( e ) ; throw e ; } finally { dbConn . close ( ) ; } return can ; }
public static void loadOtherDomains ( String dirName , String fileName , ConfigData configData ) { try { String filePath = dirName + fileName ; File file = new File ( filePath ) ; if ( ! file . exists ( ) ) { return ; } ArrayList < String > otherDomains = new ArrayList < String > ( ) ; FileInputStream fis = new FileInputStream ( filePath ) ; Scanner scan = new Scanner ( fis ) ; while ( scan . hasNextLine ( ) ) { String line = scan . nextLine ( ) ; if ( otherDomains == null ) otherDomains = new ArrayList < String > ( ) ; otherDomains . add ( line ) ; } scan . close ( ) ; fis . close ( ) ; if ( otherDomains != null ) { configData . otherDomains = otherDomains . toArray ( new String [ otherDomains . size ( ) ] ) ; } } catch ( Exception e ) { } }
public static Action increaseFontSizeAction ( JTextPane textPane ) { return changeFontSizeAction ( textPane , STR_ , INCREASE_FONT_SIZE , NUM_ ) ; }
public PdfCanvas showText ( PdfArray textArray ) { if ( currentGs . getFont ( ) == null ) throw new PdfException ( PdfException . FontAndSizeMustBeSetBeforeWritingAnyText , currentGs ) ; document . checkShowTextIsoConformance ( currentGs , resources ) ; contentStream . getOutputStream ( ) . writeBytes ( ByteUtils . getIsoBytes ( STR_ ) ) ; for ( PdfObject obj : textArray ) { if ( obj . isString ( ) ) { StreamUtil . writeEscapedString ( contentStream . getOutputStream ( ) , ( ( PdfString ) obj ) . getValueBytes ( ) ) ; } else if ( obj . isNumber ( ) ) { contentStream . getOutputStream ( ) . writeFloat ( ( ( PdfNumber ) obj ) . floatValue ( ) ) ; } } contentStream . getOutputStream ( ) . writeBytes ( ByteUtils . getIsoBytes ( STR_ ) ) ; contentStream . getOutputStream ( ) . writeBytes ( TJ ) ; return this ; }
private static byte [ ] readCheckedBytes ( byte [ ] buffer , int dataSize ) throws InvalidProtocolBufferNanoException { CheckedMessage wrapper = new CheckedMessage ( ) ; MessageNano . mergeFrom ( wrapper , buffer , NUM_ , dataSize ) ; CRC32 checksum = new CRC32 ( ) ; checksum . update ( wrapper . payload ) ; if ( wrapper . checksum != checksum . getValue ( ) ) { throw new InvalidProtocolBufferNanoException ( STR_ ) ; } return wrapper . payload ; }
void removeMouseListener ( MouseAdapter mouseListener ) ;
public boolean canContain ( Element other ) { return theType . canContain ( other . theType ) ; }
public final void remove ( ) { if ( underlying != null ) underlying . remove ( ) ; }
public TrieSET ( ) { }
public PosterOutputStream ( ) { super ( NUM_ ) ; }
public void reset ( ) { if ( myWatcher != null ) { myWatcher . stop ( ) ; } initialize ( ) ; }
public void initializeDefinition ( String definition ) { m_definition = definition ; s_logger . log ( Level . FINEST , toString ( ) ) ; }
double compute ( double [ ] a , double [ ] b ) throws MathIllegalArgumentException ;
public boolean isErasedTypeArguments ( ) { return BOOL_ ; }
private List < Node > possibleParents ( Node node , List < Node > adjNode ) { List < Node > possibleParents = new LinkedList < > ( ) ; String _x = node . getName ( ) ; for ( Node z : adjNode ) { String _z = z . getName ( ) ; if ( possibleParentOf ( _z , _x , knowledge ) ) { possibleParents . add ( z ) ; } } return possibleParents ; }
public static void checkFailure ( ) throws InternalGemFireError , Error { if ( failure == null ) { return ; } notifyWatchDog ( ) ; throwFailure ( ) ; }
public NinePatchBorder ( Insets insets , NinePatch np ) { this . insets = insets ; this . np = np ; }
public static Bitmap extractMiniThumb ( Bitmap source , int width , int height ) { return BitmapUtils . extractMiniThumb ( source , width , height , BOOL_ ) ; }
public void build ( Map < String , V > map ) { new Builder ( ) . build ( map ) ; }
private final Pair < Move , Boolean > matchingMove ( int sq1 , int sq2 , ArrayList < Move > moves ) { Move matchingMove = null ; boolean anyMatch = BOOL_ ; for ( Move m : moves ) { boolean match ; if ( sq1 == - NUM_ ) match = ( m . from == sq2 ) || ( m . to == sq2 ) ; else match = ( m . from == sq1 ) && ( m . to == sq2 ) || ( m . from == sq2 ) && ( m . to == sq1 ) ; if ( match ) { if ( matchingMove == null ) { matchingMove = m ; anyMatch = BOOL_ ; } else { if ( ( matchingMove . from == m . from ) && ( matchingMove . to == m . to ) ) { matchingMove . promoteTo = Piece . EMPTY ; } else { matchingMove = null ; break ; } } } } return new Pair < Move , Boolean > ( matchingMove , anyMatch ) ; }
public void run ( ) { run ( this , null ) ; }
public void testGlobalInfo ( ) { if ( ! m_GOETester . checkGlobalInfo ( ) ) fail ( STR_ ) ; }
public FastHexaValueGridPortrayal2D ( boolean immutableField ) { super ( ) ; setImmutableField ( immutableField ) ; }
public static void addListener ( LogListener listener ) { synchronized ( listeners ) { listeners . add ( listener ) ; } }
private void onConditionalChooserItemSelected ( String selStr , boolean manual ) { if ( Ruqus . CHOOSE_CONDITIONAL . equals ( selStr ) ) { currTransName = null ; updateArgViews ( ) ; return ; } String realTransName = Ruqus . transformerNameFromVisibleName ( selStr , BOOL_ ) ; if ( manual || currTransName == null || ! currTransName . equals ( realTransName ) ) { currTransName = realTransName ; updateArgViews ( ) ; } }
protected Class resolveClass ( ObjectStreamClass classDesc ) throws IOException , ClassNotFoundException { String cname = classDesc . getName ( ) ; if ( cname . startsWith ( STR_ ) ) { Class component ; int dcount ; for ( dcount = NUM_ ; cname . charAt ( dcount ) == STR_ ; dcount ++ ) ; if ( cname . charAt ( dcount ) == STR_ ) { component = loader . loadClass ( cname . substring ( dcount + NUM_ , cname . length ( ) - NUM_ ) ) ; } else { if ( cname . length ( ) != dcount + NUM_ ) { throw new ClassNotFoundException ( cname ) ; } component = primitiveType ( cname . charAt ( dcount ) ) ; } int dim [ ] = new int [ dcount ] ; for ( int i = NUM_ ; i < dcount ; i ++ ) { dim [ i ] = NUM_ ; } return Array . newInstance ( component , dim ) . getClass ( ) ; } else { return loader . loadClass ( cname ) ; } }
public DescriptiveStatistics copy ( ) { return new DescriptiveStatistics ( this ) ; }
public String dropEngine ( Engine engine ) { StringBuilder builder = new StringBuilder ( ) ; for ( String attribute : Setup . getDropEngineMessageFormat ( ) ) { builder . append ( getEngineAttribute ( engine , attribute , ! PICKUP ) ) ; } return builder . toString ( ) ; }
public static boolean quickCheckMemberAccess ( Class < ? > memberClass , int modifiers ) { return Modifier . isPublic ( getClassAccessFlags ( memberClass ) & modifiers ) ; }
public void removeSelectionRows ( int [ ] rows ) { TreeUI ui = getUI ( ) ; if ( ui != null && rows != null ) { int numRows = rows . length ; TreePath [ ] paths = new TreePath [ numRows ] ; for ( int counter = NUM_ ; counter < numRows ; counter ++ ) paths [ counter ] = ui . getPathForRow ( this , rows [ counter ] ) ; removeSelectionPaths ( paths ) ; } }
public boolean supportsConvert ( ) throws SQLException { return BOOL_ ; }
public NoiseDoubleDataSource ( long n , double dB ) { super ( ) ; this . n = n ; dataLength = n ; if ( dB > NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } this . amplitude = DDSAudioInputStream . MAX_AMPLITUDE * Math . sqrt ( MathUtils . db2linear ( dB ) ) ; }
public JSearchPanel ( Visualization vis , String field ) { this ( vis , Visualization . ALL_ITEMS , field , BOOL_ ) ; }
Publisher < ReactiveSocket > connect ( T address ) ;
public static void addFocusDebugListeners ( final org . eclipse . swt . widgets . Composite control , final Container topLevelComponent ) { control . addFocusListener ( _SWTFocusListener ) ; control . addListener ( SWT . Activate , _SWTActivationListener ) ; control . addListener ( SWT . Deactivate , _SWTActivationListener ) ; if ( topLevelComponent instanceof Window ) { ( ( Window ) topLevelComponent ) . addWindowFocusListener ( _AWTWindowFocusListener ) ; } addFocusListenerToTree ( topLevelComponent ) ; }
public void addSensor ( String sensorName , int state , SignalMast destination ) ;
private static int numericCompaction ( int [ ] codewords , int codeIndex , StringBuilder result ) throws FormatException { int count = NUM_ ; boolean end = BOOL_ ; int [ ] numericCodewords = new int [ MAX_NUMERIC_CODEWORDS ] ; while ( codeIndex < codewords [ NUM_ ] && ! end ) { int code = codewords [ codeIndex ++ ] ; if ( codeIndex == codewords [ NUM_ ] ) { end = BOOL_ ; } if ( code < TEXT_COMPACTION_MODE_LATCH ) { numericCodewords [ count ] = code ; count ++ ; } else { if ( code == TEXT_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH_6 || code == BEGIN_MACRO_PDF417_CONTROL_BLOCK || code == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || code == MACRO_PDF417_TERMINATOR ) { codeIndex -- ; end = BOOL_ ; } } if ( count % MAX_NUMERIC_CODEWORDS == NUM_ || code == NUMERIC_COMPACTION_MODE_LATCH || end ) { String s = decodeBase900toBase10 ( numericCodewords , count ) ; result . append ( s ) ; count = NUM_ ; } } return codeIndex ; }
public static void toggleRegularExpressionSearch ( final ZyGraph graph ) { Preconditions . checkNotNull ( graph , STR_ ) ; graph . getSettings ( ) . getSearchSettings ( ) . setSearchRegEx ( ! graph . getSettings ( ) . getSearchSettings ( ) . getSearchRegEx ( ) ) ; }
protected String convertWord ( String word ) { word = word . toUpperCase ( ) ; if ( ignoreList . contains ( word ) ) { return null ; } return word ; }
public UnionTypeExpression createUnionTypeExpression ( ) { UnionTypeExpressionImpl unionTypeExpression = new UnionTypeExpressionImpl ( ) ; return unionTypeExpression ; }
public void awaitConnectionToReplicationCluster ( ) throws InterruptedException { replicationClusterConnectedLatch . await ( ) ; }
public void addPreviewAreaChangedListener ( PreviewStatusListener . PreviewAreaChangedListener listener ) { mTextureViewHelper . addPreviewAreaSizeChangedListener ( listener ) ; }
public boolean addNondirectedEdge ( Node node1 , Node node2 ) { throw new UnsupportedOperationException ( ) ; }
public Set < Map . Entry < String , Object > > valueSet ( ) { return mValues . entrySet ( ) ; }
private float limitedScale ( float targetScale ) { targetScale = Math . max ( minScale ( ) , targetScale ) ; targetScale = Math . min ( maxScale , targetScale ) ; return targetScale ; }
public boolean captured ( ) { return capturingLayer != null ; }
public Set < Group > findNestedParentGroups ( String tenantName , PrincipalId userId ) throws Exception { return getService ( ) . findNestedParentGroups ( tenantName , userId , this . getServiceContext ( ) ) ; }
public boolean isNotifyForThisSubscriber ( SipRequest notify ) { boolean result = BOOL_ ; if ( ( mDialogPath != null ) && notify . getCallId ( ) . equals ( mDialogPath . getCallId ( ) ) ) { result = BOOL_ ; } return result ; }
protected GroupsLeaveQuery groupId ( int value ) { return unsafeParam ( STR_ , value ) ; }
protected double lambda ( int i ) { double alpha ; double result ; result = - java . lang . Math . abs ( nabla ( i ) + lambda_eq ) ; alpha = alphas [ i ] ; if ( alpha > is_zero ) { if ( alpha - C >= - is_zero ) { result = - lambda_eq - nabla ( i ) ; } ; } else { result = nabla ( i ) + lambda_eq ; } ; return result ; }
public IgfsStringDelimiterRecordResolver ( Charset charset , String ... delims ) { super ( toBytes ( charset , delims ) ) ; }
public static RbacAuthorizationDetails parseRbacDetails ( final String encodedDetails ) throws IOException { if ( encodedDetails == null ) { logger . error ( new Error ( STR_ ) . toString ( ) ) ; throw new IOException ( STR_ ) ; } String [ ] splitedDetails = encodedDetails . replace ( STR_ , STR_ ) . split ( STR_ ) ; RbacAuthorizationDetails authDetails = null ; if ( splitedDetails . length != NUM_ ) { logger . error ( new Error ( STR_ + encodedDetails ) . toString ( ) ) ; throw new IOException ( STR_ ) ; } else { authDetails = new RbacAuthorizationDetails ( ) ; authDetails . setRbacClass ( splitedDetails [ NUM_ ] ) ; authDetails . setRbacDevice ( splitedDetails [ NUM_ ] ) ; authDetails . setRbacProperty ( splitedDetails [ NUM_ ] ) ; } return authDetails ; }
public void onNextItemAppear ( View view ) ;
public void alignLeft ( ArrayList < Integer > nodes ) { if ( m_bNeedsUndoAction ) { addUndoAction ( new alignLeftAction ( nodes ) ) ; } int nMinX = - NUM_ ; for ( int iNode = NUM_ ; iNode < nodes . size ( ) ; iNode ++ ) { int nX = getPositionX ( nodes . get ( iNode ) ) ; if ( nX < nMinX || iNode == NUM_ ) { nMinX = nX ; } } for ( int iNode = NUM_ ; iNode < nodes . size ( ) ; iNode ++ ) { int nNode = nodes . get ( iNode ) ; m_nPositionX . set ( nNode , nMinX ) ; } }
public boolean isIs ( ) { return ( this . is ) ; }
private static void divideBlockToTasks ( Map < String , List < List < Distributable > > > outputMap , String key , List < Distributable > blockOfEachNode ) { List < List < Distributable > > taskLists = outputMap . get ( key ) ; int tasksOfNode = taskLists . size ( ) ; int i = NUM_ ; for ( Distributable block : blockOfEachNode ) { taskLists . get ( i % tasksOfNode ) . add ( block ) ; i ++ ; } }
public < T > T saveAndRefresh ( T entity ) ;
public final boolean isFinished ( ) { return mFinished ; }
void hideCommand ( ) ;
public synchronized void reset ( ) { loaded = BOOL_ ; started = BOOL_ ; tracker = new MediaTracker ( boardview ) ; mechImageList . clear ( ) ; mechImages . clear ( ) ; hexTileset . reset ( ) ; }
public boolean isBookmarkingEnabled ( ) { return iconArea . isBookmarkingEnabled ( ) ; }
public boolean hasValue ( ) { return getValue ( ) != null ; }
public MessagesGetHistoryAttachmentsQuery ( VkApiClient client , Actor actor , int peerId ) { super ( client , STR_ , GetHistoryAttachmentsResponse . class ) ; accessToken ( actor . getAccessToken ( ) ) ; peerId ( peerId ) ; }
public boolean hasOnClickListeners ( ) { ListenerInfo li = mListenerInfo ; return ( li != null && li . mOnClickListener != null ) ; }
protected BaseAbstractUnivariateSolver ( final double relativeAccuracy , final double absoluteAccuracy , final double functionValueAccuracy ) { this . absoluteAccuracy = absoluteAccuracy ; this . relativeAccuracy = relativeAccuracy ; this . functionValueAccuracy = functionValueAccuracy ; }
protected void addError ( String msg , ASTNode expr ) { sourceUnit . getErrorCollector ( ) . addErrorAndContinue ( new SyntaxErrorMessage ( new SyntaxException ( msg + STR_ , expr . getLineNumber ( ) , expr . getColumnNumber ( ) , expr . getLastLineNumber ( ) , expr . getLastColumnNumber ( ) ) , sourceUnit ) ) ; }
public static byte [ ] decrypt ( byte [ ] encryptedByteData , char [ ] password , byte [ ] salt ) throws EncryptionException { byte [ ] saltBytes = new byte [ IEncryptionService . CRYPTO_SALT_DEFAULT_LENGTH ] ; System . arraycopy ( encryptedByteData , NUM_ , saltBytes , NUM_ , IEncryptionService . CRYPTO_SALT_DEFAULT_LENGTH ) ; byte [ ] cypherText = new byte [ encryptedByteData . length - IEncryptionService . CRYPTO_SALT_DEFAULT_LENGTH ] ; System . arraycopy ( encryptedByteData , IEncryptionService . CRYPTO_SALT_DEFAULT_LENGTH , cypherText , NUM_ , encryptedByteData . length - IEncryptionService . CRYPTO_SALT_DEFAULT_LENGTH ) ; return decryptData ( password , salt , cypherText ) ; }
public static Graph createGraph ( boolean trace ) { return new Graph ( BOOL_ , trace ) ; }
public body addElement ( String hashcode , String element ) { addElementToRegistry ( hashcode , element ) ; return ( this ) ; }
public abstract Property copyWithFlags ( int newFlags ) ;
public JdbmPartition addPartition ( String partitionId , String partitionDn ) throws Exception { JdbmPartition partition = new JdbmPartition ( ) ; partition . setId ( partitionId ) ; partition . setPartitionDir ( new File ( service . getWorkingDirectory ( ) , partitionId ) ) ; partition . setSuffix ( partitionDn ) ; service . addPartition ( partition ) ; return partition ; }
public static ChainingTextWriter write ( ICalendar ... icals ) { return write ( Arrays . asList ( icals ) ) ; }
public void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGet ( request , response ) ; }
public WifiDirectPeerNetwork ( ) { }
public boolean removeOnItemClickListener ( OnItemClickListener itemClickListener ) { return clickListeners . remove ( itemClickListener ) ; }
public void encodeImage ( BufferedImage buf , File imageFile ) throws SVGGraphics2DIOException { try { OutputStream os = new FileOutputStream ( imageFile ) ; try { ImageWriter writer = ImageWriterRegistry . getInstance ( ) . getWriterFor ( STR_ ) ; writer . writeImage ( buf , os ) ; } finally { os . close ( ) ; } } catch ( IOException e ) { throw new SVGGraphics2DIOException ( ERR_WRITE + imageFile . getName ( ) ) ; } }
private void removeLoginPrompt ( Request req ) { Form query = req . getResourceRef ( ) . getQueryAsForm ( ) ; Parameter param = query . getFirst ( PROMPT ) ; if ( param != null && param . getValue ( ) != null ) { String newValue = param . getValue ( ) . toLowerCase ( ) . replace ( OpenIdPrompt . PROMPT_LOGIN , STR_ ) . trim ( ) ; param . setValue ( newValue ) ; } req . getResourceRef ( ) . setQuery ( query . getQueryString ( ) ) ; }
public final void renameAttributeValue ( Attribute att , String val , String name ) { int v = att . indexOfValue ( val ) ; if ( v == - NUM_ ) throw new IllegalArgumentException ( val + STR_ ) ; renameAttributeValue ( att . index ( ) , v , name ) ; }
protected static Multimap < String , String > validateAndGroupDomainNamesByTld ( List < String > names ) { ImmutableMultimap . Builder < String , String > builder = new ImmutableMultimap . Builder < > ( ) ; for ( String name : names ) { InternetDomainName tld = findTldForNameOrThrow ( InternetDomainName . from ( name ) ) ; builder . put ( tld . toString ( ) , name ) ; } return builder . build ( ) ; }
public void onScreenChange ( int currentScreen , int lastScreen ) { ImageView [ ] points = platformGridView . points ; for ( int i = NUM_ ; i < points . length ; i ++ ) { points [ i ] . setImageBitmap ( platformGridView . grayPoint ) ; } points [ currentScreen ] . setImageBitmap ( platformGridView . bluePoint ) ; }
public AdminDistributedSystemJmxImpl ( AgentConfigImpl config ) throws org . apache . geode . admin . AdminException { super ( config ) ; this . mbeanName = STR_ + MBeanUtil . makeCompliantMBeanNameProperty ( getId ( ) ) ; this . objectName = MBeanUtil . createMBean ( this ) ; isEmailNotificationEnabled = config . isEmailNotificationEnabled ( ) ; if ( isEmailNotificationEnabled ) { initMailProps ( config ) ; } initStateSaveFile ( config ) ; Assert . assertTrue ( this . objectName != null ) ; cacheRegionListener = new CacheAndRegionListenerImpl ( this ) ; }
public void serializeDOM3 ( Node node ) throws IOException ;
byte [ ] removeParameter ( byte [ ] request , IParameter parameter ) ;
byte [ ] buildHttpRequest ( URL url ) ;
public void testBug52167 ( ) throws Exception { if ( ! versionMeetsMinimum ( NUM_ , NUM_ ) ) { return ; } createProcedure ( STR_ , STR_ ) ; this . conn . prepareCall ( STR_ ) . close ( ) ; }
HistoricTaskInstanceQuery taskDeleteReason ( String taskDeleteReason ) ;
public AppTest ( String testName ) { super ( testName ) ; }
public void onProviderDisabled ( String provider ) { }
public static void showKeyboard ( Context context , View field ) { try { field . requestFocus ( ) ; InputMethodManager imm = ( InputMethodManager ) context . getSystemService ( Context . INPUT_METHOD_SERVICE ) ; imm . showSoftInput ( field , InputMethodManager . SHOW_IMPLICIT ) ; } catch ( Exception ex ) { Log . e ( STR_ , STR_ + ex ) ; } }
public abstract void addListener ( AnimatorListener listener ) ;
public void trim ( ) { trim ( NUM_ ) ; }
public static AuditLevel toLevel ( int val , Level defaultLevel ) { return AUDIT ; }
public void memberDisappeared ( Member member ) ;
void afterRecordUpdate ( ) ;
private void showFeedback ( String message ) { if ( myHost != null ) { myHost . showFeedback ( message ) ; } else { System . out . println ( message ) ; } }
void dfs ( int s , int d , boolean [ ] visited , List < Integer > path , int pos ) { visited [ s ] = BOOL_ ; path . add ( s ) ; if ( s == d ) { for ( int i : path ) System . out . print ( i + STR_ ) ; System . out . println ( ) ; } for ( int next : adjacent . get ( s ) ) { if ( ! visited [ next ] ) { dfs ( next , d , visited , path , pos + NUM_ ) ; } } path . remove ( path . size ( ) - NUM_ ) ; visited [ s ] = BOOL_ ; }
public byte [ ] unwrap ( byte [ ] incoming , int offset , int len ) throws SaslException { if ( completed ) { throw new IllegalStateException ( STR_ ) ; } else { throw new IllegalStateException ( STR_ ) ; } }
public static OverallCosts newInstance ( ) { return new OverallCosts ( ) ; }
public void addPermission ( Permission permission ) { if ( _permissions == null ) _permissions = new ArrayList < Permission > ( ) ; _permissions . add ( permission ) ; }
public NumericalUnaryExpression createNumericalUnaryExpression ( ) { NumericalUnaryExpressionImpl numericalUnaryExpression = new NumericalUnaryExpressionImpl ( ) ; return numericalUnaryExpression ; }
public static < T > Set < T > toSet ( T obj1 , T obj2 , T obj3 , T obj4 , T obj5 , T obj6 ) { Set < T > theSet = new LinkedHashSet < T > ( ) ; theSet . add ( obj1 ) ; theSet . add ( obj2 ) ; theSet . add ( obj3 ) ; theSet . add ( obj4 ) ; theSet . add ( obj5 ) ; theSet . add ( obj6 ) ; return theSet ; }
public ResourceLazyLoadingScript parameter ( String name , Object value ) { if ( parameters == null ) { parameters = new HashMap < String , Object > ( ) ; } parameters . put ( name , value ) ; return this ; }
protected AnimatableBooleanValue ( AnimationTarget target ) { super ( target ) ; }
private static void updateWindowUI ( Window window ) { updateStyles ( window ) ; Window ownedWins [ ] = window . getOwnedWindows ( ) ; for ( Window w : ownedWins ) { updateWindowUI ( w ) ; } }
public void enableVertexAttribute ( String name ) { int location = fetchAttributeLocation ( name ) ; if ( location == - NUM_ ) return ; GLES20 . glEnableVertexAttribArray ( location ) ; }
public void wrap ( InputStream is , OutputStream os , MessageProp msgProp ) throws GSSException ;
public String sqlAD_getCustomEntityTypes ( String vendorName , String catalogName , String schemaName ) { String tableName = STR_ ; ArrayList < String > columnNames = new ArrayList < String > ( ) ; columnNames . add ( STR_ ) ; ArrayList < String > aliasNames = new ArrayList < String > ( ) ; aliasNames . add ( STR_ ) ; ArrayList < String > conditions = new ArrayList < String > ( ) ; conditions . add ( STR_ ) ; ArrayList < String > sortColumns = new ArrayList < String > ( ) ; sortColumns . add ( STR_ ) ; return sql_select ( vendorName , catalogName , schemaName , tableName , null , columnNames , aliasNames , conditions , sortColumns , BOOL_ ) ; }
public abstract void removeBoardViewListener ( BoardViewListener listener ) ;
public void startTransition ( int durationMillis ) { mFrom = NUM_ ; mTo = NUM_ ; mAlpha = NUM_ ; mDuration = mOriginalDuration = durationMillis ; mReverse = BOOL_ ; mTransitionState = TRANSITION_STARTING ; invalidateSelf ( ) ; }
protected Angle normalizeAzimuth ( Angle azimuth ) { if ( azimuth != null ) return Angle . normalizedLongitude ( azimuth ) ; return null ; }
public void centerDialog ( ) { final Toolkit toolkit = Toolkit . getDefaultToolkit ( ) ; final Dimension screenSize = toolkit . getScreenSize ( ) ; final int x = ( screenSize . width - getWidth ( ) ) / NUM_ ; final int y = ( screenSize . height - getHeight ( ) ) / NUM_ ; setLocation ( x , y ) ; }
private void resetMatrix ( ) { mSuppMatrix . reset ( ) ; setImageViewMatrix ( getDrawMatrix ( ) ) ; checkMatrixBounds ( ) ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public ObjectFactory ( ) { }
private void writeQName ( javax . xml . namespace . QName qname , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { java . lang . String namespaceURI = qname . getNamespaceURI ( ) ; if ( namespaceURI != null ) { java . lang . String prefix = xmlWriter . getPrefix ( namespaceURI ) ; if ( prefix == null ) { prefix = generatePrefix ( namespaceURI ) ; xmlWriter . writeNamespace ( prefix , namespaceURI ) ; xmlWriter . setPrefix ( prefix , namespaceURI ) ; } if ( prefix . trim ( ) . length ( ) > NUM_ ) { xmlWriter . writeCharacters ( prefix + STR_ + org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } }
private static String makeGroupLdif ( String dn , String ... members ) { StringBuilder ldif = new StringBuilder ( ) ; ldif . append ( STR_ + dn ) . append ( EOL ) ; ldif . append ( STR_ ) . append ( EOL ) ; ldif . append ( STR_ ) . append ( EOL ) ; for ( String member : members ) { ldif . append ( STR_ + member ) . append ( EOL ) ; } ldif . append ( EOL ) ; return ldif . toString ( ) ; }
private void doList ( ) throws PageException , SearchException { required ( STR_ , action , STR_ , name ) ; pageContext . setVariable ( name , getSearchEngine ( ) . getCollectionsAsQuery ( ) ) ; }
public native void release ( ) ;
public boolean handleQuit ( ) { return BOOL_ ; }
public void addLayer ( QGisLayer layer ) { this . layers . add ( layer ) ; }
public boolean isExceptionThrower ( ) { return exceptionThrower != null ; }
public void testLoadLocations_DoesNotHideSpinnerWhenSyncInProgress ( ) { mController . init ( ) ; mController . attachFragmentUi ( mMockFragmentUi ) ; mFakeSyncManager . setSyncing ( BOOL_ ) ; LocationTree locationTree = FakeAppLocationTreeFactory . build ( ) ; mFakeEventBus . post ( new AppLocationTreeFetchedEvent ( locationTree ) ) ; verify ( mMockFragmentUi ) . setBusyLoading ( BOOL_ ) ; }
protected void configureScroller ( ) { scroller . setFocusable ( BOOL_ ) ; scroller . getVerticalScrollBar ( ) . setFocusable ( BOOL_ ) ; scroller . setBorder ( null ) ; installScrollerListeners ( ) ; }
public static String shortUuid ( ) { RandomBasedGenerator generator = Generators . randomBasedGenerator ( ) ; UUID uuid = generator . generate ( ) ; long l = ByteBuffer . wrap ( uuid . toString ( ) . getBytes ( ) ) . getLong ( ) ; return Long . toString ( l , Character . MAX_RADIX ) ; }
public static void clearSnapshot ( ) { mContactsList = null ; }
public DTMDefaultBaseTraversers ( DTMManager mgr , Source source , int dtmIdentity , DTMWSFilter whiteSpaceFilter , XMLStringFactory xstringfactory , boolean doIndexing , int blocksize , boolean usePrevsib , boolean newNameTable ) { super ( mgr , source , dtmIdentity , whiteSpaceFilter , xstringfactory , doIndexing , blocksize , usePrevsib , newNameTable ) ; }
public void childAdded ( NodeChangeEvent e ) ;
public void testHotDeployFailureRar ( ) { this . fileHandler . createFile ( STR_ ) ; RAR rar = ( RAR ) factory . createDeployable ( STR_ , STR_ , DeployableType . RAR ) ; setupAdminHotDeploymentFailure ( ) ; try { deployer . deploy ( rar ) ; fail ( STR_ ) ; } catch ( CargoException expected ) { assertTrue ( fileHandler . exists ( deployer . getDeployableDir ( rar ) + STR_ ) ) ; } }
public NumberPicker ( Context context ) { this ( context , null ) ; }
public void activateSanZones ( URI network , String fabricId , String fabricWwn , String taskId ) throws InternalException ;
private static char arrayTypeToName ( int type ) { switch ( type ) { case ByteCode . T_BOOLEAN : return STR_ ; case ByteCode . T_CHAR : return STR_ ; case ByteCode . T_FLOAT : return STR_ ; case ByteCode . T_DOUBLE : return STR_ ; case ByteCode . T_BYTE : return STR_ ; case ByteCode . T_SHORT : return STR_ ; case ByteCode . T_INT : return STR_ ; case ByteCode . T_LONG : return STR_ ; default : throw new IllegalArgumentException ( STR_ ) ; } }
private void returnData ( Object ret ) { if ( myHost != null ) { myHost . returnData ( ret ) ; } }
void onFactoryRegistration ( FactoryBuilderSupport builder , String registeredName , String registeredGroupName ) ;
Acceptor createAcceptor ( String name , ClusterConnection clusterConnection , Map < String , Object > configuration , BufferHandler handler , ServerConnectionLifeCycleListener listener , Executor threadPool , ScheduledExecutorService scheduledThreadPool , Map < String , ProtocolManager > protocolMap ) ;
public boolean addRecipe ( Recipe recipe ) { if ( recipe instanceof ShapedRecipe ) { shapedRecipes . add ( ( ShapedRecipe ) recipe ) ; return BOOL_ ; } else if ( recipe instanceof ShapelessRecipe ) { shapelessRecipes . add ( ( ShapelessRecipe ) recipe ) ; return BOOL_ ; } else if ( recipe instanceof DynamicRecipe ) { dynamicRecipes . add ( ( DynamicRecipe ) recipe ) ; return BOOL_ ; } else if ( recipe instanceof FurnaceRecipe ) { furnaceRecipes . add ( ( FurnaceRecipe ) recipe ) ; return BOOL_ ; } else { return BOOL_ ; } }
public String toString ( ) { return String . format ( STR_ , getLine ( ) ) ; }
public static _Fields findByThriftIdOrThrow ( int fieldId ) { _Fields fields = findByThriftId ( fieldId ) ; if ( fields == null ) throw new IllegalArgumentException ( STR_ + fieldId + STR_ ) ; return fields ; }
public GrayFilter ( boolean b , int p ) { brighter = b ; percent = p ; canFilterIndexColorModel = BOOL_ ; }
public static String encodeEndpoint ( String uri , String operation ) { StringBuilder buf = new StringBuilder ( ) ; if ( uri != null && ! uri . trim ( ) . isEmpty ( ) ) { buf . append ( uri ) ; } if ( operation != null && ! operation . trim ( ) . isEmpty ( ) ) { buf . append ( STR_ ) ; buf . append ( operation ) ; buf . append ( STR_ ) ; } return buf . toString ( ) ; }
boolean execute ( ) throws RateLimitException , MissingPermissionsException , DiscordException , Exception ;
public static _Fields findByName ( String name ) { return byName . get ( name ) ; }
static public void assertOnTopEdgeOfScreen ( View origin , View view ) { int [ ] xy = new int [ NUM_ ] ; view . getLocationOnScreen ( xy ) ; int [ ] xyRoot = new int [ NUM_ ] ; origin . getLocationOnScreen ( xyRoot ) ; int bottom = xy [ NUM_ ] + view . getHeight ( ) ; int bottomOfRoot = xyRoot [ NUM_ ] + origin . getHeight ( ) ; assertTrue ( bottom < bottomOfRoot ) ; assertTrue ( bottom > xyRoot [ NUM_ ] ) ; assertTrue ( xy [ NUM_ ] < xyRoot [ NUM_ ] ) ; }
public void ignorableWhitespace ( char ch [ ] , int start , int length ) throws SAXException { if ( contentHandler != null ) { contentHandler . ignorableWhitespace ( ch , start , length ) ; } }
public Boolean isValueIsReadonly ( ) { return valueIsReadonly ; }
boolean isFinal ( ) ;
public boolean delete ( String rpfDir ) { boolean ret = BOOL_ ; List < String > frameList = organizeFrames ( rpfDir ) ; if ( frameList != null ) { for ( Iterator < String > it = frameList . iterator ( ) ; it . hasNext ( ) ; ) { String relativeFilePath = STR_ + it . next ( ) ; File fromFile = new File ( rpfDir + relativeFilePath ) ; if ( fromFile . exists ( ) && fromFile . delete ( ) && verbose ) { Debug . output ( STR_ + fromFile . getPath ( ) ) ; } } ret = BOOL_ ; } return ret ; }
private static byte [ ] wrapCalculatedValue ( byte [ ] data ) { int dataLen = data . length ; data = ByteUtil . copyOf ( data , NUM_ , dataLen + CALC_EXTRA_DATA_LEN , CALC_DATA_OFFSET ) ; PageChannel . wrap ( data ) . putInt ( CALC_DATA_LEN_OFFSET , dataLen ) ; return data ; }
public abstract T build ( Canvas renderer ) ;
public static void o ( Zdiagmat D ) { o ( D , Parameters . OutputFieldWidth , Parameters . OutputFracPlaces ) ; }
private void newDrawableDialog ( ) { if ( Utils . isWindows ( ) ) { newDrawableDialogWindows ( ) ; } else { newDrawableDialogVisUI ( ) ; } }
void saveData ( ) throws CouldntSaveDataException ;
private void registerTaskInstances ( ) { for ( TaskFromDBTrigger trigger : tasksList ) { if ( trigger . isValid ( ) ) { trigger . initTrigger ( ) ; } else { log . error ( STR_ + trigger . getTaskId ( ) ) ; } } }
public String readString ( final Charset charset ) { byte ch ; int cnt = NUM_ ; final byte [ ] byteArrBuff = new byte [ remaining ( ) ] ; while ( remaining ( ) > NUM_ && ( ( ch = buf [ position ++ ] ) != NUM_ ) ) { byteArrBuff [ cnt ++ ] = ch ; } return new String ( byteArrBuff , NUM_ , cnt , charset ) ; }
public void processBye ( RequestEvent requestEvent , ServerTransaction serverTransactionId ) { SipProvider sipProvider = ( SipProvider ) requestEvent . getSource ( ) ; Request request = requestEvent . getRequest ( ) ; try { logger . info ( STR_ ) ; Response response = protocolObjects . messageFactory . createResponse ( NUM_ , request ) ; if ( serverTransactionId != null ) { serverTransactionId . sendResponse ( response ) ; logger . info ( STR_ + serverTransactionId . getDialog ( ) . getState ( ) ) ; } else { logger . info ( STR_ ) ; } } catch ( Exception ex ) { String s = STR_ ; logger . error ( s , ex ) ; ReInviteInfoAckOverlapTest . fail ( s ) ; } }
public String filterTypeTipText ( ) { return STR_ ; }
public String toXMLString ( ) throws SAML2Exception ;
public static MCashLine createCashLine ( Properties ctx , MCash cashJournal , BigDecimal amount , String cashType , String trxName ) throws OperationException { return createCashLine ( ctx , cashJournal , amount , cashType , STR_ , trxName ) ; }
boolean subTree ( Node r1 , Node r2 ) { if ( r1 == null ) return BOOL_ ; if ( r1 . value == r2 . value ) { if ( matchTree ( r1 , r2 ) ) return BOOL_ ; } return ( subTree ( r1 . left , r2 ) || subTree ( r1 . right , r2 ) ) ; }
protected abstract double dxStep ( double stepTime ) ;
static public boolean principalNameEqualsUuid ( SSOToken token ) throws SSOException { String principalName = token . getPrincipal ( ) . getName ( ) ; String uuid = token . getProperty ( com . sun . identity . shared . Constants . UNIVERSAL_IDENTIFIER ) ; return principalName . equals ( uuid ) ; }
private String createExplicitHashKey ( final String partitionKey ) { BigInteger hashKey = BigInteger . ZERO ; this . md5 . reset ( ) ; byte [ ] pkDigest = this . md5 . digest ( partitionKey . getBytes ( StandardCharsets . UTF_8 ) ) ; for ( int i = NUM_ ; i < this . md5 . getDigestLength ( ) ; i ++ ) { BigInteger p = new BigInteger ( Byte . toString ( pkDigest [ i ] ) ) ; p . shiftLeft ( ( NUM_ - i - NUM_ ) * NUM_ ) ; hashKey = hashKey . add ( p ) ; } return hashKey . toString ( NUM_ ) ; }
void evolveGraph ( int numSteps ) ;
public final int numValues ( ) { if ( ! isNominal ( ) && ! isString ( ) && ! isRelationValued ( ) ) { return NUM_ ; } else { return ( ( NominalAttributeInfo ) m_AttributeInfo ) . m_Values . size ( ) ; } }
protected void restrictProps ( int props ) { if ( ( properties & props ) != NUM_ ) { throw new RuntimeException ( STR_ + typeName + STR_ + this . getClass ( ) . getName ( ) + STR_ + STR_ + propertiesToString ( properties & props ) ) ; } }
public static < T1 , T2 , R > BiFunction < T1 , T2 , R > memoizeBiFunction ( final BiFunction < T1 , T2 , R > fn , final Cacheable < R > cache ) { val memoise2 = memoizeFunction ( null , cache ) ; return null ; }
public static void requestPermission ( CordovaPlugin plugin , int requestCode , String permission ) { PermissionHelper . requestPermissions ( plugin , requestCode , new String [ ] { permission } ) ; }
public Builder replicate ( int replicate ) { this . replicate = replicate ; return this ; }
private void startNewTransition ( ) { if ( ! hasBounds ( ) ) { return ; } mCurrentTrans = mTransGen . generateNextTransition ( mDrawableRect , mViewportRect ) ; mElapsedTime = NUM_ ; mLastFrameTime = System . currentTimeMillis ( ) ; fireTransitionStart ( mCurrentTrans ) ; }
public RawProperty addExtendedProperty ( String name , String value ) { RawProperty raw = new RawProperty ( name , value ) ; addProperty ( raw ) ; return raw ; }
private void addRandomSocialEdges ( ) { Bag people = socialNetwork . getAllNodes ( ) ; for ( Object person : people ) { for ( int i = NUM_ ; i < NUM_ ; i ++ ) { Object personB = null ; do { personB = people . get ( random . nextInt ( people . numObjs ) ) ; } while ( person == personB ) ; double buddiness = NUM_ ; socialNetwork . addEdge ( person , personB , new Double ( buddiness ) ) ; } } }
private void initializeLookAheadBuffer ( ) { for ( int i = NUM_ ; i < lookAheadBufferSize ; i ++ ) { lookAheadBuffer [ i ] = END_OF_INPUT ; } for ( int i = NUM_ ; i < lookAheadBufferSize ; i ++ ) { lookAheadBuffer [ i ] = readInput ( ) ; if ( isEndOfInput ( lookAheadBuffer [ i ] ) ) { break ; } } }
public abstract void openKeyCursor ( KeyRange < I > keyRange , CursorDirection direction , DatabaseCursorCallback < I , K > callback ) ;
public final static boolean isClassFileName ( char [ ] name ) { int nameLength = name == null ? NUM_ : name . length ; int suffixLength = SUFFIX_CLASS . length ; if ( nameLength < suffixLength ) return BOOL_ ; for ( int i = NUM_ , offset = nameLength - suffixLength ; i < suffixLength ; i ++ ) { char c = name [ offset + i ] ; if ( c != SUFFIX_class [ i ] && c != SUFFIX_CLASS [ i ] ) return BOOL_ ; } return BOOL_ ; }
private boolean entryExists ( Connection conn , DN dn ) throws UpgradeException { try { conn . readEntry ( dn , STR_ ) ; } catch ( EntryNotFoundException enfe ) { return BOOL_ ; } catch ( LdapException ere ) { DEBUG . error ( STR_ + dn , ere ) ; throw new UpgradeException ( ere ) ; } return BOOL_ ; }
private void onStartTrackingTouch ( ) { mIsDragging = BOOL_ ; }
public static String toEditConsolidated ( final IDocumentationHolder documentation ) { return consolidate ( documentation , BOOL_ ) ; }
public CActionSaveAs ( final JFrame parent , final ZyGraph graph , final IViewContainer container ) { super ( STR_ ) ; m_parent = parent ; m_graph = graph ; m_container = container ; }
protected void broadcast ( int msgtype , boolean rpc ) throws ChannelException { Member [ ] members = channel . getMembers ( ) ; if ( members . length == NUM_ ) return ; MapMessage msg = new MapMessage ( this . mapContextName , msgtype , BOOL_ , null , null , null , channel . getLocalMember ( BOOL_ ) , null ) ; if ( rpc ) { Response [ ] resp = rpcChannel . send ( members , msg , RpcChannel . FIRST_REPLY , ( channelSendOptions ) , rpcTimeout ) ; if ( resp . length > NUM_ ) { for ( int i = NUM_ ; i < resp . length ; i ++ ) { mapMemberAdded ( resp [ i ] . getSource ( ) ) ; messageReceived ( resp [ i ] . getMessage ( ) , resp [ i ] . getSource ( ) ) ; } } else { log . warn ( sm . getString ( STR_ ) ) ; } } else { channel . send ( channel . getMembers ( ) , msg , channelSendOptions ) ; } }
protected Fact triple ( Resource s , URI p , Value o , OwlRule rule , Fact source ) { Fact fact = new Fact ( s , p , o , this . currentIteration , rule , this . node ) ; fact . addSource ( source ) ; return fact ; }
boolean isJavaSource ( ) ;
public ColumnInfo ( String colHeader , String colSQL , Class < ? > colClass , String keyPairColSQL ) { this ( colHeader , colSQL , colClass , BOOL_ , BOOL_ , keyPairColSQL ) ; }
public float convertToPoint ( long value ) ;
public boolean satisfies ( ServiceResourceProfile profile , Constraint constraint ) { return satisfies ( profile ) && meetsConstraint ( constraint ) ; }
public < T > T createDto ( Class < T > dtoInterface ) { return getDtoProvider ( dtoInterface ) . newInstance ( ) ; }
public void lock ( boolean shared ) throws IgniteCheckedException { if ( fileLock != null ) throw new IgniteCheckedException ( STR_ + file + STR_ ) ; try { fileLock = raFile . getChannel ( ) . tryLock ( NUM_ , Long . MAX_VALUE , shared ) ; if ( fileLock == null ) throw new IgniteCheckedException ( STR_ + file + STR_ ) ; } catch ( IOException | OverlappingFileLockException e ) { throw new IgniteCheckedException ( STR_ + file + STR_ , e ) ; } }
protected void addValuePropertyDescriptor ( Object object ) { itemPropertyDescriptors . add ( createItemPropertyDescriptor ( ( ( ComposeableAdapterFactory ) adapterFactory ) . getRootAdapterFactory ( ) , getResourceLocator ( ) , getString ( STR_ ) , getString ( STR_ , STR_ , STR_ ) , ExpressionsPackage . Literals . FLOAT_LITERAL__VALUE , BOOL_ , BOOL_ , BOOL_ , ItemPropertyDescriptor . REAL_VALUE_IMAGE , null , null ) ) ; }
public boolean hasExtraStillImage ( ) { return isApng ( ) && ! firsIdatApngFrame ; }
private void drawToCanvas ( Canvas canvas ) { for ( int i = NUM_ ; i < mIndicatorCells . length ; i ++ ) { for ( int j = NUM_ ; j < mIndicatorCells [ i ] . length ; j ++ ) { if ( mIndicatorCells [ i ] [ j ] . getStatus ( ) == IndicatorCell . STATE_NORMAL ) { canvas . drawCircle ( mIndicatorCells [ i ] [ j ] . getX ( ) , mIndicatorCells [ i ] [ j ] . getY ( ) , radius , defaultPaint ) ; } else if ( mIndicatorCells [ i ] [ j ] . getStatus ( ) == IndicatorCell . STATE_CHECK ) { canvas . drawCircle ( mIndicatorCells [ i ] [ j ] . getX ( ) , mIndicatorCells [ i ] [ j ] . getY ( ) , radius , selectPaint ) ; } } } }
private Rect calcBounds ( Drawable drawable , int gravity ) { Rect bounds = new Rect ( ) ; int w = drawable . getIntrinsicWidth ( ) ; int h = drawable . getIntrinsicHeight ( ) ; Rect container = wrapper . getBounds ( ) ; if ( w == - NUM_ && h == - NUM_ ) { w = container . width ( ) ; h = container . height ( ) ; } Gravity . apply ( gravity , w , h , container , bounds ) ; return bounds ; }
int generate ( byte [ ] output , byte [ ] additionalInput , boolean predictionResistant ) ;
public static void dumbTradingLogic ( String company , int numberOfShares , PortfolioService portfolio , Map < String , Object > quote ) { JsonObject json = new JsonObject ( quote ) ; dumbTradingLogic ( company , numberOfShares , portfolio , json ) ; }
public void fling ( OverScroller scroller , int velocityX , int velocityY ) { fling = BOOL_ ; int minX = NUM_ - contentRect . width ( ) / NUM_ ; int maxX = ( surfaceSize . x - contentRect . width ( ) ) + contentRect . width ( ) / NUM_ ; scroller . forceFinished ( BOOL_ ) ; scroller . fling ( startX ( ) , startY ( ) , velocityX , velocityY , minX , maxX , NUM_ , surfaceSize . y - contentRect . height ( ) , contentRect . width ( ) / NUM_ , contentRect . height ( ) / NUM_ ) ; }
protected void run ( ) throws Exception { TopologyProviderFactory tpFactory = new TopologyProviderFactory ( props ) ; DirectProvider tp = tpFactory . newProvider ( ) ; t = tp . newTopology ( config ( ) . getProperty ( STR_ ) ) ; preBuildTopology ( t ) ; buildTopology ( t ) ; HttpServer httpServer = tp . getServices ( ) . getService ( HttpServer . class ) ; if ( httpServer != null ) { System . out . println ( STR_ + httpServer . getConsoleUrl ( ) ) ; } tp . submit ( t ) ; }
public Vm ( int id , int userId , double mips , int numberOfPes , int ram , long bw , long size , String vmm , CloudletScheduler cloudletScheduler ) { setId ( id ) ; setUserId ( userId ) ; setUid ( getUid ( userId , id ) ) ; setMips ( mips ) ; setNumberOfPes ( numberOfPes ) ; setRam ( ram ) ; setBw ( bw ) ; setSize ( size ) ; setVmm ( vmm ) ; setCloudletScheduler ( cloudletScheduler ) ; setInMigration ( BOOL_ ) ; setBeingInstantiated ( BOOL_ ) ; setCurrentAllocatedBw ( NUM_ ) ; setCurrentAllocatedMips ( null ) ; setCurrentAllocatedRam ( NUM_ ) ; setCurrentAllocatedSize ( NUM_ ) ; }
public List asList ( ) { List result = new LinkedList ( ) ; for ( Iterator it = iterator ( ) ; it . hasNext ( ) ; ) { result . add ( it . next ( ) ) ; } return result ; }
private boolean isForceEvenIfEdited ( ) { return forceEvenIfEdited ; }
public static SM_SYSTEM_MESSAGE STR_STIGMA_CANNT_EQUIP_STONE_OUT_OF_AVAILABLE_STIGMA_POINT ( String value0 ) { return new SM_SYSTEM_MESSAGE ( NUM_ , value0 ) ; }
public static boolean asBoolean ( CharSequence string ) { return string . length ( ) > NUM_ ; }
public BufferedChecksum ( Checksum in , int bufferSize ) { this . in = in ; this . buffer = new byte [ bufferSize ] ; }
public static void blacklistBlockFromMagnet ( Block block , int meta ) { String key = getMagnetKey ( block , meta ) ; magnetBlacklist . add ( key ) ; }
public Socket push ( final Envelope envelope ) throws IOException { LOG . log ( Level . FINE , STR_ , envelope ) ; final ObjectNode node = objectMapper . createObjectNode ( ) ; node . put ( STR_ , envelope . getTopic ( ) ) ; node . put ( STR_ , envelope . getEvent ( ) ) ; node . put ( STR_ , envelope . getRef ( ) ) ; node . set ( STR_ , envelope . getPayload ( ) == null ? objectMapper . createObjectNode ( ) : envelope . getPayload ( ) ) ; final String json = objectMapper . writeValueAsString ( node ) ; LOG . log ( Level . FINE , STR_ , json ) ; RequestBody body = RequestBody . create ( WebSocket . TEXT , json ) ; if ( this . isConnected ( ) ) { try { webSocket . sendMessage ( body ) ; } catch ( IllegalStateException e ) { LOG . log ( Level . SEVERE , STR_ , e ) ; } } else { this . sendBuffer . add ( body ) ; } return this ; }
public void addText ( String str ) { if ( text == null ) text = new StringBuffer ( ) ; text . append ( str ) ; }
public SelectionInputDialog ( Window owner , String key , boolean editable , T [ ] selectionValues , T initialSelectionValue , InputValidator < T > inputValidator , Object ... keyArguments ) { this ( owner , key , selectionValues , initialSelectionValue , inputValidator , keyArguments ) ; comboBox . setEditable ( editable ) ; }
public boolean hasPointValues ( ) { return hasPointValues ; }
public static int indexOf ( long [ ] array , long [ ] sub ) { return indexOf ( array , sub , NUM_ , array . length ) ; }
public boolean isAvailable ( ) { return association . isAvailable ( ) ; }
private void updateProgress ( int progress ) { if ( myHost != null && progress != previousProgress ) { myHost . updateProgress ( progress ) ; } previousProgress = progress ; }
public void test_ticket_1071i ( ) throws Exception { new TestHelper ( STR_ , STR_ , STR_ , STR_ ) . runTest ( ) ; }
public CampoDatoVO updateCampoDato ( CampoDatoVO campoDatoVO ) { DbConnection conn = getConnection ( ) ; try { final String qual = new StringBuffer ( ) . append ( STR_ ) . append ( DBUtils . generateEQTokenField ( CAMPO_ID , campoDatoVO . getId ( ) ) ) . toString ( ) ; DbUpdateFns . update ( conn , TABLE_NAME , COLUM_NAMES_LIST , new SigiaDbInputRecord ( COL_DEFS , campoDatoVO ) , qual . toString ( ) ) ; return campoDatoVO ; } catch ( Exception e ) { logger . error ( e . getMessage ( ) ) ; throw new DBException ( e . getMessage ( ) ) ; } }
public static Lexicon buildTrivialLexicon ( ) { Lexicon l = new Lexicon ( ) ; l . addLexWords ( STR_ , STR_ , STR_ , STR_ , STR_ ) ; l . addLexWords ( STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ ) ; l . addLexWords ( STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ ) ; l . addLexWords ( STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ ) ; l . addLexWords ( STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ ) ; return l ; }
public static void scaleFit ( Bitmap src , Bitmap dest ) { scaleFit ( src , dest , CLEAR_COLOR ) ; }
static AttrMaxPause createFromString ( final String str ) throws BOSHException { if ( str == null ) { return null ; } else { return new AttrMaxPause ( str ) ; } }
private void initialize ( ) { this . setLayout ( new CardLayout ( ) ) ; this . setName ( Constant . messages . getString ( STR_ ) ) ; this . add ( getPanelProxyChain ( ) , getPanelProxyChain ( ) . getName ( ) ) ; }
public < U extends Comparable < ? super U > > Eval < Optional < T > > maxBy ( Function < ? super T , ? extends U > function ) ;
public Builder widthRes ( int drawerWidthRes ) { if ( activity == null ) { throw new RuntimeException ( STR_ ) ; } this . drawerWidth = activity . getResources ( ) . getDimensionPixelSize ( drawerWidthRes ) ; return this ; }
public boolean send ( byte [ ] bytes ) { if ( ! connected ) return BOOL_ ; try { outputStream . write ( bytes ) ; outputStream . flush ( ) ; return BOOL_ ; } catch ( IOException e ) { connected = BOOL_ ; Log . e ( TAG , STR_ ) ; return BOOL_ ; } finally { if ( ! connected ) { closeConnection ( ) ; } } }
boolean allowAccess ( ) ;
public static Remember putFloat ( final String key , final float value ) { return getInstance ( ) . saveAsync ( key , value , null ) ; }
public Manager ( ) { status = Status . self ( ) ; instances = new HashMap < U , T > ( ) ; threads = new HashMap < T , Thread > ( ) ; }
private void drawCenterRect ( Canvas canvas ) { int center = getHeight ( ) / NUM_ ; int offset = getItemHeight ( ) / NUM_ ; centerSelectDrawable . setBounds ( NUM_ , center - offset , getWidth ( ) , center + offset ) ; centerSelectDrawable . draw ( canvas ) ; }
void removeFilters ( ) ;
public static void fill ( short [ ] a , short val ) { fill ( a , NUM_ , a . length , val ) ; }
synchronized void resumeThread ( ) { assert ! exiting ; Trace . trace ( Item . SCHED_DETAIL , STR_ , getName ( ) ) ; isCurrent = BOOL_ ; setQueue ( null ) ; model . setCurrent ( this ) ; notify ( ) ; }
protected void addMemoryArguments ( JvmLauncher java ) { String jvmArgs = getConfiguration ( ) . getPropertyValue ( GeneralPropertySet . JVMARGS ) ; if ( jvmArgs == null || ! jvmArgs . contains ( STR_ ) ) { java . addJvmArguments ( STR_ ) ; } if ( jvmArgs == null || ! jvmArgs . contains ( STR_ ) ) { java . addJvmArguments ( STR_ ) ; } if ( jvmMajorVersion < NUM_ ) { if ( jvmArgs == null || ! jvmArgs . contains ( STR_ ) ) { java . addJvmArguments ( STR_ ) ; } if ( jvmArgs == null || ! jvmArgs . contains ( STR_ ) ) { java . addJvmArguments ( STR_ ) ; } } }
public static final boolean exists ( String code ) { return mapping . containsKey ( code . toLowerCase ( ) ) ; }
public static Sort rewriteSort ( SortSpec sortSpec , IndexSearcher searcher ) throws IOException { assert null != sortSpec : STR_ ; assert null != searcher : STR_ ; Sort orig = sortSpec . getSort ( ) ; if ( null == orig ) { orig = Sort . RELEVANCE ; } return orig . rewrite ( searcher ) ; }
public PointerTypePanel ( final Component parent , final TypeManager typeManager , final BaseType existingType ) { super ( parent , typeManager , existingType ) ; createControls ( ) ; populateControls ( ) ; }
private void chargeLocale ( ) { Locale lc = this . getLocale ( ) ; InputStream str = getClass ( ) . getClassLoader ( ) . getResourceAsStream ( STR_ + lc . getCountry ( ) + STR_ ) ; if ( str == null ) { str = getClass ( ) . getClassLoader ( ) . getResourceAsStream ( STR_ ) ; } messages = new Properties ( ) ; try { messages . load ( str ) ; } catch ( FileNotFoundException e ) { } catch ( IOException e ) { } }
public static String format ( final long l ) { final StringBuffer s = new StringBuffer ( ) ; return FORMAT_LONG . format ( l , s , new java . text . FieldPosition ( NUM_ ) ) . toString ( ) ; }
public void testDoCheckWithDefaultDetectionResult ( ) { LOGGER . debug ( STR_ ) ; elements . add ( element ) ; expect ( mockTextElementBuilder . buildTextFromElement ( element ) ) . andReturn ( STR_ ) ; mockTestSolutionHandler . addTestSolution ( TestSolution . FAILED ) ; expectLastCall ( ) . once ( ) ; expect ( mockNomenclature . getValueList ( ) ) . andReturn ( Arrays . asList ( STR_ ) ) ; mockProcessRemarkService . addSourceCodeRemarkOnElement ( TestSolution . FAILED , element , DETECTION_MSG ) ; expectLastCall ( ) . once ( ) ; TextEndsWithChecker instance = new TextEndsWithChecker ( mockTextElementBuilder , EXTENSION_NOM_NAME , DETECTION_MSG ) ; instance . setNomenclatureLoaderService ( mockNomenclatureLoaderService ) ; instance . setProcessRemarkService ( mockProcessRemarkService ) ; replay ( mockTextElementBuilder , mockSSPHandler , mockTestSolutionHandler , mockNomenclature , mockNomenclatureLoaderService , mockProcessRemarkService ) ; instance . doCheck ( mockSSPHandler , elements , mockTestSolutionHandler ) ; verify ( mockTextElementBuilder , mockSSPHandler , mockTestSolutionHandler , mockNomenclature , mockNomenclatureLoaderService , mockProcessRemarkService ) ; }
public void addEmojiconGroup ( List < EaseEmojiconGroupEntity > groupEntitieList ) { for ( int i = NUM_ ; i < groupEntitieList . size ( ) ; i ++ ) { EaseEmojiconGroupEntity groupEntity = groupEntitieList . get ( i ) ; emojiconGroupList . add ( groupEntity ) ; pagerView . addEmojiconGroup ( groupEntity , i == groupEntitieList . size ( ) - NUM_ ? BOOL_ : BOOL_ ) ; tabBar . addTab ( groupEntity . getIcon ( ) ) ; } }
protected Object resolve ( ) { GigaSpace gs = findGigaSpaceByName ( this . name ) ; if ( GigaSpace . class . isAssignableFrom ( getMemberType ( ) ) ) { if ( ! getMemberType ( ) . isInstance ( gs ) ) { throw new IllegalArgumentException ( STR_ + this . member + STR_ + this . name + STR_ ) ; } return gs ; } else { throw new IllegalArgumentException ( STR_ ) ; } }
boolean study ( TreeInfo info ) { if ( next != null ) { return next . study ( info ) ; } else { return info . deterministic ; } }
public StorageUnitNotificationRegistration deleteStorageUnitNotificationRegistration ( NotificationRegistrationKey notificationRegistrationKey ) ;
protected Label readLabel ( int offset , Label [ ] labels ) { if ( labels [ offset ] == null ) { labels [ offset ] = new Label ( ) ; } return labels [ offset ] ; }
public static boolean ISK ( int x ) { return NUM_ != ( ( x ) & BITRK ) ; }
public void hideAppMenu ( ) { if ( mAppMenu != null && mAppMenu . isShowing ( ) ) mAppMenu . dismiss ( ) ; }
private AbLevelChartFactory ( ) { }
public ReadOnlyRequiredException ( ) { super ( STR_ ) ; }
private void updateProgress ( int progress ) { if ( myHost != null && progress != previousProgress ) { myHost . updateProgress ( progress ) ; } previousProgress = progress ; }
public FacebookException ( String message , Throwable throwable ) { super ( message , throwable ) ; }
public boolean write ( IOFSwitch sw , OFMessage msg ) throws IOException { return write ( sw , msg , BOOL_ ) ; }
public void initContents ( ) { if ( sdCurrent != null ) { Graphics g = vImg . createGraphics ( ) ; g . clearRect ( NUM_ , NUM_ , vImg . getWidth ( ) , vImg . getHeight ( ) ) ; g . dispose ( ) ; } }
boolean validate ( ) ;
public void fillFromToWith ( int from , int to , long val ) { checkRangeFromTo ( from , to , this . size ) ; for ( int i = from ; i <= to ; ) setQuick ( i ++ , val ) ; }
public void testGetAuditDataService ( ) { System . out . println ( STR_ ) ; mockInitialisationCalls ( BOOL_ , null ) ; AuditCommandImpl instance = new TestAuditCommandImpl ( ) ; AuditDataService result = instance . getAuditDataService ( ) ; assertEquals ( mockAuditDataService , result ) ; setVerifyMode ( ) ; }
public GroupShardsIterator allAssignedShardsGrouped ( String [ ] indices , boolean includeEmpty , boolean includeRelocationTargets ) { return allSatisfyingPredicateShardsGrouped ( indices , includeEmpty , includeRelocationTargets , ASSIGNED_PREDICATE ) ; }
String readNumber ( String source , int ofs , String token , boolean adjacent ) { if ( adjacent ) { return source . substring ( ofs , ofs + token . length ( ) ) ; } int len = source . length ( ) ; for ( int i = ofs ; i < len ; i ++ ) { char ch = source . charAt ( i ) ; if ( isNumeric ( ch ) == BOOL_ ) { if ( i == NUM_ ) { return null ; } return source . substring ( ofs , i ) ; } } return source . substring ( ofs ) ; }
public static boolean simpleCrossing ( S2Point a , S2Point b , S2Point c , S2Point d ) { S2Point ab = S2Point . crossProd ( a , b ) ; S2Point cd = S2Point . crossProd ( c , d ) ; double acb = - ab . dotProd ( c ) ; double cbd = - cd . dotProd ( b ) ; double bda = ab . dotProd ( d ) ; double dac = cd . dotProd ( a ) ; return ( acb * cbd > NUM_ ) && ( cbd * bda > NUM_ ) && ( bda * dac > NUM_ ) ; }
static public void assertEquals ( String message , String expected , String actual ) { if ( expected == null && actual == null ) return ; if ( expected != null && expected . equals ( actual ) ) return ; throw new ComparisonFailure ( message , expected , actual ) ; }
public String sel ( ) { return mSelection . toString ( ) ; }
public static void deleteSection ( final SQLProvider provider , final Section section ) throws CouldntLoadDataException { Preconditions . checkNotNull ( provider , STR_ ) ; Preconditions . checkNotNull ( section , STR_ ) ; final String query = STR_ ; try ( CallableStatement procedure = provider . getConnection ( ) . getConnection ( ) . prepareCall ( query ) ) { procedure . setInt ( NUM_ , section . getModule ( ) . getConfiguration ( ) . getId ( ) ) ; procedure . setInt ( NUM_ , section . getId ( ) ) ; procedure . execute ( ) ; } catch ( final SQLException exception ) { throw new CouldntLoadDataException ( exception ) ; } }
protected String actualValue ( int index ) throws Exception { checkInRange ( index ) ; return m_values . get ( index ) ; }
public abstract boolean isAllowed ( char c ) ;
public static DiagnosticPosition diagnosticPositionFor ( final Symbol sym , final JCTree tree ) { JCTree decl = declarationFor ( sym , tree ) ; return ( ( decl != null ) ? decl : tree ) . pos ( ) ; }
public void reset ( ) { engineReset ( ) ; state = INITIAL ; }
private void updateProgress ( int progress ) { if ( myHost != null && progress != previousProgress ) { myHost . updateProgress ( progress ) ; } previousProgress = progress ; }
public void removeHeader ( Header header ) { if ( header == null ) { return ; } headers . remove ( header ) ; }
public synchronized void clearErrors ( ) { errors = BOOL_ ; }
public List < STATS_TYPE > crossValidation ( List < ITEM_TYPE > items , int nFolds ) throws Exception { if ( nFolds > items . size ( ) ) { String message = STR_ ; throw new IllegalArgumentException ( String . format ( message , nFolds , items . size ( ) ) ) ; } List < STATS_TYPE > stats = new ArrayList < STATS_TYPE > ( ) ; for ( int fold = NUM_ ; fold < nFolds ; ++ fold ) { File subDirectory = new File ( this . baseDirectory , STR_ + fold ) ; subDirectory . mkdirs ( ) ; List < ITEM_TYPE > trainItems = this . selectFoldTrainItems ( items , nFolds , fold ) ; List < ITEM_TYPE > testItems = this . selectFoldTestItems ( items , nFolds , fold ) ; this . train ( this . getCollectionReader ( trainItems ) , subDirectory ) ; stats . add ( this . test ( this . getCollectionReader ( testItems ) , subDirectory ) ) ; } return stats ; }
public synchronized void resetTime ( ) { }
public static void rollbackFileSet ( ZooKeeperManager zkManager , String fileSet , FileSetInfo fileSetInfo , int versionIndex ) throws Exception { List < FileSetInfo . ServingInfo > oldServingInfoList = fileSetInfo . oldServingInfoList ; if ( versionIndex >= NUM_ && versionIndex < oldServingInfoList . size ( ) ) { String currentHdfsPath = fileSetInfo . servingInfo . hdfsPath ; String rollbackHdfsPath = oldServingInfoList . get ( versionIndex ) . hdfsPath ; fileSetInfo . servingInfo = oldServingInfoList . get ( versionIndex ) ; fileSetInfo . oldServingInfoList = oldServingInfoList . subList ( versionIndex + NUM_ , oldServingInfoList . size ( ) ) ; zkManager . setFileSetInfo ( fileSet , fileSetInfo ) ; LOG . info ( String . format ( STR_ , fileSet , currentHdfsPath , rollbackHdfsPath ) ) ; } else { throw new IllegalArgumentException ( STR_ ) ; } }
public int compareTo ( SavedField obj ) { DateTimeField other = obj . iField ; int result = compareReverse ( iField . getRangeDurationField ( ) , other . getRangeDurationField ( ) ) ; if ( result != NUM_ ) { return result ; } return compareReverse ( iField . getDurationField ( ) , other . getDurationField ( ) ) ; }
public int ordinal ( ) ;
protected XMLUtilities ( ) { }
public DateTime toDateTimeAtCurrentTime ( ) { return toDateTimeAtCurrentTime ( null ) ; }
public String post ( String url , String json , Map < String , String > headers , final int expectedStatusCode ) { return post ( url , json , headers , Collections . < String , String > emptyMap ( ) , expectedStatusCode ) ; }
public void registerSchema ( Schema schema ) ;
public void keyReleased ( KeyEvent e ) { }
public void markDead ( ) { alive = BOOL_ ; }
public Builder addListenUrls ( List < String > urls ) { List < String > needAdd = new ArrayList < String > ( ) ; for ( String url : urls ) { if ( ! UrlUtil . isUrl ( url ) ) { continue ; } needAdd . add ( url ) ; } if ( ! CollectionUtil . isEmpty ( needAdd ) ) { if ( mListenUrls == null ) { mListenUrls = new HashSet < String > ( ) ; } mListenUrls . addAll ( needAdd ) ; } return this ; }
public boolean isSelected ( int position ) { return getSelectedItems ( ) . contains ( position ) ; }
public void loadMarkdownFile ( String url , String cssFileUrl ) { new LoadMarkdownUrlTask ( ) . execute ( url , cssFileUrl ) ; }
public void addNode ( ClusterNode node ) ;
public static double [ ] computePowerSpectrum_FD ( final double [ ] fft ) { if ( fft == null ) throw new NullPointerException ( STR_ ) ; int halfN = fft . length / NUM_ ; double [ ] freqs = new double [ halfN ] ; freqs [ NUM_ ] = fft [ NUM_ ] * fft [ NUM_ ] ; for ( int i = NUM_ ; i < fft . length ; i += NUM_ ) { freqs [ i / NUM_ ] = fft [ i ] * fft [ i ] + fft [ i + NUM_ ] * fft [ i + NUM_ ] ; } return freqs ; }
String objectToString ( T data ) throws SQLException ;
public void removeLayoutComponent ( Component c ) { if ( c == viewport ) { viewport = null ; } else if ( c == vsb ) { vsb = null ; } else if ( c == hsb ) { hsb = null ; } else if ( c == rowHead ) { rowHead = null ; } else if ( c == colHead ) { colHead = null ; } else if ( c == lowerLeft ) { lowerLeft = null ; } else if ( c == lowerRight ) { lowerRight = null ; } else if ( c == upperLeft ) { upperLeft = null ; } else if ( c == upperRight ) { upperRight = null ; } }
public < T > IgniteInternalFuture < T > chain ( IgniteClosure < ? super IgniteInternalFuture < R > , T > doneCb ) ;
public FrameBodyTDAT ( ByteBuffer byteBuffer , int frameSize ) throws InvalidTagException { super ( byteBuffer , frameSize ) ; }
public boolean intersects ( S2Cell cell , S2Point [ ] vertices ) { if ( height >= NUM_ ) { return BOOL_ ; } if ( isEmpty ( ) ) { return BOOL_ ; } if ( cell . contains ( axis ) ) { return BOOL_ ; } double sin2Angle = height * ( NUM_ - height ) ; for ( int k = NUM_ ; k < NUM_ ; ++ k ) { S2Point edge = cell . getEdgeRaw ( k ) ; double dot = axis . dotProd ( edge ) ; if ( dot > NUM_ ) { continue ; } if ( dot * dot > sin2Angle * edge . norm2 ( ) ) { return BOOL_ ; } S2Point dir = S2Point . crossProd ( edge , axis ) ; if ( dir . dotProd ( vertices [ k ] ) < NUM_ && dir . dotProd ( vertices [ ( k + NUM_ ) & NUM_ ] ) > NUM_ ) { return BOOL_ ; } } return BOOL_ ; }
public void drawPaint ( Paint paint ) { native_drawPaint ( mNativeCanvas , paint . mNativePaint ) ; }
protected void endTag ( Element elem ) throws IOException { if ( synthesizedElement ( elem ) ) { return ; } closeOutUnwantedEmbeddedTags ( elem . getAttributes ( ) ) ; if ( inContent ) { if ( ! newlineOutputed && ! inPre ) { writeLineSeparator ( ) ; } newlineOutputed = BOOL_ ; inContent = BOOL_ ; } if ( ! inPre ) { indentSmart ( ) ; } if ( matchNameAttribute ( elem . getAttributes ( ) , HTML . Tag . PRE ) ) { inPre = BOOL_ ; } write ( STR_ ) ; write ( STR_ ) ; write ( elem . getName ( ) ) ; write ( STR_ ) ; writeLineSeparator ( ) ; }
public VideoSaveQuery groupId ( Integer value ) { return unsafeParam ( STR_ , value ) ; }
public static int compare ( boolean left , boolean right ) { if ( left ) return right ? NUM_ : NUM_ ; return right ? - NUM_ : NUM_ ; }
public static boolean supportsTrash ( ) { return isWindows ( ) || isMacOSX ( ) ; }
public static Matrix constructWithCopy ( double [ ] [ ] A ) { int m = A . length ; int n = A [ NUM_ ] . length ; Matrix X = new Matrix ( m , n ) ; double [ ] [ ] C = X . getArray ( ) ; for ( int i = NUM_ ; i < m ; i ++ ) { if ( A [ i ] . length != n ) { throw new IllegalArgumentException ( STR_ ) ; } for ( int j = NUM_ ; j < n ; j ++ ) { C [ i ] [ j ] = A [ i ] [ j ] ; } } return X ; }
public InputStreamInputSplit ( InputStream is , File path ) { this . is = is ; this . location = new URI [ ] { path . toURI ( ) } ; }
public void onSeekComplete ( MediaPlayer mp ) ;
ServiceProperties parseServiceProviderUri ( String serviceProviderUri ) ;
public abstract void trigger ( ) ;
public static < T > T removeElement ( final int index , final Collection < T > coll ) { return getElement ( BOOL_ , index , coll ) ; }
public String lookupPrefix ( String namespaceURI ) { if ( namespaceURI == null ) { return null ; } short type = this . getNodeType ( ) ; switch ( type ) { case Node . ENTITY_NODE : case Node . NOTATION_NODE : case Node . DOCUMENT_FRAGMENT_NODE : case Node . DOCUMENT_TYPE_NODE : return null ; case Node . ATTRIBUTE_NODE : { if ( this . getOwnerElement ( ) . getNodeType ( ) == Node . ELEMENT_NODE ) { return getOwnerElement ( ) . lookupPrefix ( namespaceURI ) ; } return null ; } default : { return null ; } } }
public static void copyWithGap ( Object src , Object dst , int oldSize , int gapIndex ) { if ( gapIndex > NUM_ ) { System . arraycopy ( src , NUM_ , dst , NUM_ , gapIndex ) ; } if ( gapIndex < oldSize ) { System . arraycopy ( src , gapIndex , dst , gapIndex + NUM_ , oldSize - gapIndex ) ; } }
public void updateCharacterStream ( String columnLabel , Reader reader , long length ) throws SQLException ;
public SIPHeader parse ( ) throws ParseException { if ( debug ) dbg_enter ( STR_ ) ; MimeVersion mimeVersion = new MimeVersion ( ) ; try { headerName ( TokenTypes . MIME_VERSION ) ; mimeVersion . setHeaderName ( SIPHeaderNames . MIME_VERSION ) ; try { String majorVersion = this . lexer . number ( ) ; mimeVersion . setMajorVersion ( Integer . parseInt ( majorVersion ) ) ; this . lexer . match ( STR_ ) ; String minorVersion = this . lexer . number ( ) ; mimeVersion . setMinorVersion ( Integer . parseInt ( minorVersion ) ) ; } catch ( InvalidArgumentException ex ) { throw createParseException ( ex . getMessage ( ) ) ; } this . lexer . SPorHT ( ) ; this . lexer . match ( STR_ ) ; return mimeVersion ; } finally { if ( debug ) dbg_leave ( STR_ ) ; } }
public void runTest ( ) throws Throwable { Document doc ; NamedNodeMap attributes ; Element element ; Attr attribute ; Attr newAttr1 ; Attr newAttribute ; NodeList elementList ; String attrName ; doc = ( Document ) load ( STR_ , BOOL_ ) ; elementList = doc . getElementsByTagNameNS ( STR_ , STR_ ) ; element = ( Element ) elementList . item ( NUM_ ) ; newAttr1 = doc . createAttributeNS ( STR_ , STR_ ) ; newAttribute = element . setAttributeNodeNS ( newAttr1 ) ; attributes = element . getAttributes ( ) ; attribute = ( Attr ) attributes . getNamedItemNS ( STR_ , STR_ ) ; attrName = attribute . getNodeName ( ) ; assertEquals ( STR_ , STR_ , attrName ) ; }
private boolean authenticate ( String username , String password ) { try { if ( captchaToken == null ) { service . setUserCredentials ( username , password ) ; } else { service . setUserCredentials ( username , password , captchaToken , captchaAnswerField . getText ( ) ) ; } return BOOL_ ; } catch ( CaptchaRequiredException e ) { captchaToken = e . getCaptchaToken ( ) ; try { captchaImage . setIcon ( new ImageIcon ( new URL ( e . getCaptchaUrl ( ) ) ) ) ; captchaAnswerField . setText ( STR_ ) ; } catch ( IOException ioe ) { captchaImage . setText ( STR_ ) ; } return BOOL_ ; } catch ( AuthenticationException e ) { SpreadsheetApiDemo . showErrorBox ( e ) ; return BOOL_ ; } }
private static boolean safeDestroy ( RMID rmid , long timeAllowed ) { DestroyThread destroyThread = new DestroyThread ( rmid ) ; destroyThread . start ( ) ; try { destroyThread . join ( timeAllowed ) ; } catch ( InterruptedException ie ) { Thread . currentThread ( ) . interrupt ( ) ; } return destroyThread . shutdownSucceeded ( ) ; }
private static int readInt ( ) throws IOException { String input = readLine ( ) ; try { return Integer . parseInt ( input ) ; } catch ( NumberFormatException nfe ) { return NUM_ ; } }
public void showTextOnFeed ( String message , boolean showOnArena ) { if ( showOnArena ) { showTextOnFeed ( message ) ; } else { super . showTextOnFeed ( message ) ; } }
public InstanceNotAliveException ( List < LocalizedText > messages , Throwable cause ) { super ( messages , cause ) ; }
protected void sequence_S_DirectAssignment ( ISerializationContext context , S_DirectAssignment semanticObject ) { genericSequencer . createSequence ( context , semanticObject ) ; }
public void clearAspectRatio ( ) { mCropOverlayView . setAspectRatioX ( NUM_ ) ; mCropOverlayView . setAspectRatioY ( NUM_ ) ; setFixedAspectRatio ( BOOL_ ) ; }
public void destroyScene ( ) { clearAnimations ( ) ; clearCameras ( ) ; clearLights ( ) ; clearPlugins ( ) ; clearChildren ( ) ; clearFrameCallbacks ( ) ; }
public static final double poundsToNewtons ( double pound ) { return pound * POUND_TO_NEWTON ; }
public static boolean isDesignTime ( ) { return ThreadGroupContext . getContext ( ) . isDesignTime ( ) ; }
private static void reset ( ) { description = null ; argName = STR_ ; longopt = null ; type = null ; required = BOOL_ ; numberOfArgs = Option . UNINITIALIZED ; optionalArg = BOOL_ ; valuesep = ( char ) NUM_ ; }
public static void wtf ( String tag , Throwable tr ) { wtf ( tag , null , tr ) ; }
Map < String , String > extractLabels ( ProcessorConfig config , Kind kind ) { return extract ( config , LABEL_EXTRACTOR , kind ) ; }
public abstract void onMessagesFlushed ( ContactId contact , String sessionId ) ;
public ServiceStateException ( ServiceStatus current , String expected ) { super ( STR_ , new Object [ ] { expected , current . name ( ) } ) ; }
public Fields ( Collection < String > fields ) { this . fields = Sets . newHashSet ( ) ; for ( String field : fields ) { Preconditions . checkNotNull ( field ) ; if ( ! this . fields . add ( field ) ) { throw new IllegalArgumentException ( STR_ + field ) ; } } fieldsList = Lists . newArrayList ( ) ; fieldsList . addAll ( fields ) ; }
public synchronized boolean isEmpty ( ) { return ( timerTable . isEmpty ( ) ) ; }
public GmlLowerCorner ( Point copyFrom ) { super ( Namespaces . GML_NAMESPACE , NAME , copyFrom ) ; }
public PreferenceLevel combine ( PreferenceLevel another ) { if ( getPrefProlog ( ) . equals ( another . getPrefProlog ( ) ) ) return this ; if ( getPrefProlog ( ) . equals ( sProhibited ) || another . getPrefProlog ( ) . equals ( sProhibited ) ) return getPreferenceLevel ( sProhibited ) ; if ( getPrefProlog ( ) . equals ( sRequired ) ) return another ; if ( another . getPrefProlog ( ) . equals ( sRequired ) ) return this ; return getPreferenceLevel ( String . valueOf ( Math . max ( Integer . parseInt ( getPrefProlog ( ) ) , Integer . parseInt ( another . getPrefProlog ( ) ) ) ) ) ; }
protected void writeXml ( MListTable < ? > table , OutputStream outputStream ) throws IOException { final List < ? > list = table . getList ( ) ; TransportFormatAdapter . writeXml ( ( Serializable ) list , outputStream ) ; }
protected static String usage ( String cmd ) { String usage = cmd + STR_ + getGenericFunction ( cmd ) . toString ( ) + STR_ + STR_ ; if ( cmd . equals ( STR_ ) ) usage = usage + STR_ ; if ( cmd . equals ( STR_ ) ) usage = usage + STR_ ; if ( cmd . equals ( STR_ ) ) usage = usage + STR_ ; usage = usage + STR_ + STR_ + STR_ + cmd + STR_ + STR_ + STR_ + STR_ + STR_ ; if ( cmd . equals ( STR_ ) ) usage = usage + STR_ ; if ( cmd . equals ( STR_ ) ) usage = usage + STR_ ; if ( cmd . equals ( STR_ ) ) usage = usage + STR_ ; usage = usage + STR_ ; return usage ; }
MultiMap < String , String > queryMap ( ) ;
public void close ( ) throws SQLException ;
void addPreDrawListener ( ) { if ( mIsAttachedToWindow ) { if ( mOnPreDrawListener == null ) { mOnPreDrawListener = new OnPreDrawListener ( ) ; } final ViewTreeObserver vto = getViewTreeObserver ( ) ; vto . addOnPreDrawListener ( mOnPreDrawListener ) ; } mNeedsPreDrawListener = BOOL_ ; }
private static long lf_ch ( long x , long y , long z ) { return ( x & y ) ^ ( ( ~ x ) & z ) ; }
public void attachToActivity ( Activity activity , int slideStyle ) { attachToActivity ( activity , slideStyle , BOOL_ ) ; }
public int board_layer_count ( ) { return shapes . length ; }
public void loginWithAuthSubToken ( String token ) throws AuthenticationException , DocumentListException { if ( token == null ) { throw new DocumentListException ( STR_ ) ; } service . setAuthSubToken ( token ) ; spreadsheetsService . setAuthSubToken ( token ) ; }
public void onErrorResponse ( VolleyError error ) ;
public void paintToolBarContentBackground ( SynthContext context , Graphics g , int x , int y , int w , int h ) { paintBackground ( context , g , x , y , w , h , null ) ; }
public static String genValue ( String ... columns ) { return Joiner . on ( STR_ ) . useForNull ( STR_ ) . join ( columns ) ; }
public void testBuildScenario_List ( ) { System . out . println ( STR_ ) ; List < String > urlList = new LinkedList < > ( ) ; String url1 = STR_ ; String url2 = STR_ ; String url3 = STR_ ; String url4 = STR_ ; urlList . add ( url1 ) ; urlList . add ( url2 ) ; urlList . add ( url3 ) ; urlList . add ( url4 ) ; String expResult = STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ ; String result = ScenarioBuilder . buildScenario ( urlList ) ; assertEquals ( expResult , result ) ; }
public static _Fields findByName ( String name ) { return byName . get ( name ) ; }
public static void checkState ( boolean expression , String errorMessageTemplate , Object ... errorMessageArgs ) { if ( ! expression ) { throw new IllegalStateException ( format ( errorMessageTemplate , errorMessageArgs ) ) ; } }
public T addHighlightedField ( HighlightBuilder . Field field ) { highlightBuilder ( ) . field ( field ) ; return ( T ) this ; }
public static Recipe fromCursor ( Cursor cursor ) { Recipe recipe = new Recipe ( null ) ; for ( int c = NUM_ ; c < cursor . getColumnCount ( ) ; c ++ ) { String columnName = cursor . getColumnName ( c ) ; if ( columnName . equals ( RecipeTable . ID_COLUMN ) ) { recipe . id = cursor . getString ( c ) ; } else if ( columnName . equals ( RecipeTable . TITLE_COLUMN ) ) { recipe . setTitle ( cursor . getString ( c ) ) ; } else if ( columnName . equals ( RecipeTable . DESCRIPTION_COLUMN ) ) { recipe . setDescription ( cursor . getString ( c ) ) ; } else if ( columnName . equals ( RecipeTable . PHOTO_COLUMN ) ) { recipe . setPhoto ( cursor . getString ( c ) ) ; } else if ( columnName . equals ( RecipeTable . PREP_TIME_COLUMN ) ) { recipe . setPrepTime ( cursor . getString ( c ) ) ; } } return recipe ; }
public boolean isSearchOpen ( ) { return mIsSearchOpen ; }
public static char [ ] copy ( final char [ ] array ) { char [ ] next = new char [ array . length ] ; System . arraycopy ( array , NUM_ , next , NUM_ , array . length ) ; return next ; }
private void resetState ( ) { for ( Integer key : mActiveCalls . keySet ( ) ) { LTRCallEvent event = mActiveCalls . get ( key ) ; if ( event != null ) { event . end ( ) ; broadcast ( event ) ; } } mActiveCalls . clear ( ) ; mTalkgroup = null ; broadcast ( ChangedAttribute . TO_TALKGROUP ) ; mTalkgroupAlias = null ; broadcast ( ChangedAttribute . TO_TALKGROUP_ALIAS ) ; }
private void deletePassword ( Intent data ) { if ( data != null && data . hasExtra ( PASSWORD_LIST_DELETED_ID ) ) { int deletedId = data . getIntExtra ( PASSWORD_LIST_DELETED_ID , - NUM_ ) ; boolean isException = data . getBooleanExtra ( DELETED_ITEM_IS_EXCEPTION , BOOL_ ) ; if ( isException ) { mPasswordManagerHandler . removeSavedPasswordException ( deletedId ) ; } else { mPasswordManagerHandler . removeSavedPasswordEntry ( deletedId ) ; } } }
public void loadFileAndCreate ( String fileName ) { try { readXMLAndPersist ( fileName , DbCliOperation . CREATE ) ; System . out . println ( String . format ( STR_ , fileName ) ) ; log . info ( STR_ , fileName ) ; } catch ( Exception e ) { System . err . println ( STR_ + e ) ; log . error ( STR_ , e ) ; } }
public FrameBodyTPE2 ( byte textEncoding , String text ) { super ( textEncoding , text ) ; }
protected void optimize ( final AST2BOpContext ctx , final StaticAnalysis sa , final GraphPatternGroup < ? extends IGroupMemberNode > group , final PropertyPathInfo ppInfo , final PathAlternative pathAlt , final ArbitraryLengthPathNode alpNode , final Properties queryHints , final PropertyPathNode ppNode ) { if ( pathAlt . arity ( ) == NUM_ ) { final PathSequence pathSeq = ( PathSequence ) pathAlt . get ( NUM_ ) ; optimize ( ctx , sa , group , ppInfo , pathSeq , alpNode , queryHints , ppNode ) ; } else { final UnionNode union = new PropertyPathUnionNode ( ) ; group . addArg ( getPositionOfNodeInGroup ( ppNode , group ) , union ) ; final Iterator < BOp > it = pathAlt . argIterator ( ) ; while ( it . hasNext ( ) ) { final JoinGroupNode subgroup = new JoinGroupNode ( ) ; union . addArg ( subgroup ) ; final PathSequence pathSeq = ( PathSequence ) it . next ( ) ; optimize ( ctx , sa , subgroup , ppInfo , pathSeq , alpNode , queryHints , ppNode ) ; } } }
PrimitiveSink putString ( CharSequence charSequence , Charset charset ) ;
public IntIterator columnRows ( IntIterator rows , int col ) { return new ColumnRowIterator ( rows , col ) ; }
boolean isDynamicMetadata ( ) ;
ThreadUntilEnd ( RightThreadedBinaryNode < T > start ) { cur = start ; }
public static NSObject parse ( byte [ ] bytes ) throws IOException , PropertyListFormatException , ParseException , ParserConfigurationException , SAXException { switch ( determineType ( bytes ) ) { case TYPE_BINARY : return BinaryPropertyListParser . parse ( bytes ) ; case TYPE_XML : return XMLPropertyListParser . parse ( bytes ) ; case TYPE_ASCII : return ASCIIPropertyListParser . parse ( bytes ) ; default : throw new PropertyListFormatException ( STR_ ) ; } }
public Long call ( ) throws Exception { for ( int i = NUM_ ; i < nops ; i ++ ) { Record record = writer . getRandomGroundTruthRecord ( ) ; ByteBuffer buf ; if ( r . nextInt ( NUM_ ) > NUM_ ) { buf = store . read ( record . addr ) ; } else { buf = ByteBuffer . allocate ( store . getByteCount ( record . addr ) ) ; buf = store . read ( record . addr ) ; } assertEquals ( record . data , buf ) ; } return NUM_ ; }
public JiangConrathComparator ( LexicalSemanticResource lexSemResource , Entity root ) throws LexicalSemanticResourceException { super ( lexSemResource , root ) ; }
public PdfGroupingAlgorithms ( final PdfData pdf_data , final boolean isXMLExtraction ) { this . pdf_data = pdf_data ; this . isXMLExtraction = isXMLExtraction ; colorExtracted = pdf_data . isColorExtracted ( ) ; }
public Object remove ( int index ) { Object o = this . opt ( index ) ; this . myArrayList . remove ( index ) ; return o ; }
public V put ( K key , V value , long expireTimeMillis ) { return putInternal ( key , value , TimeUnit . NANOSECONDS . convert ( expireTimeMillis , TimeUnit . MILLISECONDS ) ) ; }
private ConcreteComponentTransferFunction ( ) { }
public SimpleOrderedMap ( ) { super ( ) ; }
public abstract void writeBoolean ( boolean val ) throws IOException ;
public static void generateRPClass ( ) { final RPClass shop = new RPClass ( MARKET_RPCLASS_NAME ) ; shop . isA ( STR_ ) ; shop . addRPSlot ( OFFERS_SLOT_NAME , - NUM_ , Definition . HIDDEN ) ; shop . addRPSlot ( EARNINGS_SLOT_NAME , - NUM_ , Definition . HIDDEN ) ; shop . addRPSlot ( EXPIRED_OFFERS_SLOT_NAME , - NUM_ , Definition . HIDDEN ) ; }
public AndroidAuthenticator ( Context context , Account account , String authTokenType ) { this ( context , account , authTokenType , BOOL_ ) ; }
public abstract DataSet < T > copy ( ) ;
public static String readStringFromFile ( String path , SparkContext sc ) throws IOException { FileSystem fileSystem = FileSystem . get ( sc . hadoopConfiguration ( ) ) ; try ( BufferedInputStream bis = new BufferedInputStream ( fileSystem . open ( new Path ( path ) ) ) ) { byte [ ] asBytes = IOUtils . toByteArray ( bis ) ; return new String ( asBytes , STR_ ) ; } }
public static void dropTable ( Database db , boolean ifExists ) { String sql = STR_ + ( ifExists ? STR_ : STR_ ) + STR_ ; db . execSQL ( sql ) ; }
public static BaseRecordReader createRecordReader ( Configuration config , Path path ) throws IOException { EmoInputSplittable emoFs = ( EmoInputSplittable ) path . getFileSystem ( config ) ; return emoFs . getBaseRecordReader ( config , path , getSplitSize ( config ) ) ; }
public static int readMediumInt ( IoBuffer in ) { byte [ ] bytes = new byte [ NUM_ ] ; in . get ( bytes ) ; int val = NUM_ ; val += bytes [ NUM_ ] * NUM_ * NUM_ ; val += bytes [ NUM_ ] * NUM_ ; val += bytes [ NUM_ ] ; if ( val < NUM_ ) { val += NUM_ ; } return val ; }
private void loadCorrosionPixels ( IResourceManager manager ) { BufferedImage corrosionImg ; try { corrosionImg = ImageIO . read ( manager . getResource ( CORROSION_TEXTURE ) . getInputStream ( ) ) ; corrosionPixels = new int [ corrosionImg . getWidth ( ) * corrosionImg . getHeight ( ) ] ; corrosionImg . getRGB ( NUM_ , NUM_ , corrosionImg . getWidth ( ) , corrosionImg . getHeight ( ) , corrosionPixels , NUM_ , corrosionImg . getWidth ( ) ) ; corrosionWidth = corrosionImg . getWidth ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
public HarvestProcess urlExists ( final String hash ) throws IOException { LoadTimeURL md = this . index . fulltext ( ) . getDefaultConnector ( ) . getLoadTimeURL ( hash ) ; if ( md != null && md . date >= NUM_ ) return HarvestProcess . LOADED ; HarvestProcess hp = this . crawlQueues . exists ( ASCII . getBytes ( hash ) ) ; if ( hp != null ) return hp ; return null ; }
public RunElement ( Element parent , AttributeSet a , int offs0 , int offs1 ) { super ( parent , a , offs0 , offs1 ) ; }
private static void generateJavaScriptLogAlertCloseWindow ( Writer writer , String message ) throws IOException { writer . write ( STR_ + message + STR_ ) ; writer . write ( STR_ ) ; writer . write ( STR_ ) ; }
default void sendColoredMessage ( String ... strs ) { if ( strs != null ) { for ( String str : strs ) { this . sendColoredMessage ( str ) ; } } }
public boolean isSneaking ( ) ;
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( hc_nodegetprevioussibling . class , args ) ; }
public String toXMLString ( boolean includeNSPrefix , boolean declareNS ) throws XACMLException { StringBuffer sb = new StringBuffer ( NUM_ ) ; String nsPrefix = STR_ ; String nsDeclaration = STR_ ; if ( includeNSPrefix ) { nsPrefix = XACMLConstants . CONTEXT_NS_PREFIX + STR_ ; } if ( declareNS ) { nsDeclaration = XACMLConstants . CONTEXT_NS_DECLARATION ; } sb . append ( STR_ ) . append ( nsPrefix ) . append ( XACMLConstants . STATUS ) . append ( nsDeclaration ) . append ( STR_ ) ; if ( statusCode != null ) { sb . append ( statusCode . toXMLString ( includeNSPrefix , BOOL_ ) ) ; } if ( statusMessage != null ) { sb . append ( statusMessage . toXMLString ( includeNSPrefix , BOOL_ ) ) ; } if ( statusDetail != null ) { sb . append ( statusDetail . toXMLString ( includeNSPrefix , BOOL_ ) ) ; } sb . append ( STR_ ) . append ( nsPrefix ) . append ( XACMLConstants . STATUS ) . append ( STR_ ) ; return sb . toString ( ) ; }
protected final String startInfo ( ) { return STR_ + getUpTime ( ) + STR_ + spiMBean + STR_ ; }
public void onScanStart ( ) { }
public String toString ( String sep ) { if ( isEmpty ( ) ) { return STR_ ; } else { StringBuilder buf = new StringBuilder ( ) ; buf . append ( head ) ; for ( List < A > l = tail ; l . nonEmpty ( ) ; l = l . tail ) { buf . append ( sep ) ; buf . append ( l . head ) ; } return buf . toString ( ) ; } }
public void startImporting ( final IDatabase database , final String idb ) { if ( ! m_imports . containsKey ( database ) ) { m_imports . put ( database , new ArrayList < String > ( ) ) ; } m_imports . get ( database ) . add ( idb ) ; }
public int indexOfMax ( ) { int index = NUM_ ; double ma = V [ NUM_ ] ; for ( int i = NUM_ ; i < size ( ) ; i ++ ) { if ( ma < V [ i ] ) { ma = V [ i ] ; index = i ; } } return index ; }
protected void storeKeyPair ( String alias , KeyPair keyPair ) throws ResourceException { try { JsonValue keyPairValue = new JsonValue ( new HashMap < String , Object > ( ) ) ; keyPairValue . put ( STR_ , KeyRepresentation . toPem ( keyPair ) ) ; JsonValue encrypted = cryptoService . encrypt ( keyPairValue , cryptoCipher , cryptoAlias ) ; JsonValue keyMap = new JsonValue ( new HashMap < String , Object > ( ) ) ; keyMap . put ( STR_ , encrypted . getObject ( ) ) ; storeInRepo ( KEYS_CONTAINER , alias , keyMap ) ; } catch ( Exception e ) { throw new InternalServerErrorException ( e . getMessage ( ) , e ) ; } }
public RegisterSpec withReg ( int newReg ) { if ( reg == newReg ) { return this ; } return makeLocalOptional ( newReg , type , local ) ; }
public void print ( String value , boolean checkForEscape ) throws IOException { if ( ! checkForEscape ) { printSep ( ) ; out . write ( value ) ; return ; } if ( buf . length < value . length ( ) ) { buf = new char [ value . length ( ) ] ; } value . getChars ( NUM_ , value . length ( ) , buf , NUM_ ) ; print ( buf , NUM_ , value . length ( ) , checkForEscape ) ; }
public boolean filterResult ( int idx ) { assert filterRes != null : STR_ ; return filterRes [ idx ] ; }
public static String readFileToString ( Context ctx , String path ) throws IOException { StringBuilder sb = new StringBuilder ( ) ; char [ ] buffer = new char [ INPUT_BUFFER_SIZE ] ; InputStream is = null ; try { is = ctx . getAssets ( ) . open ( path ) ; InputStreamReader reader = new InputStreamReader ( is ) ; int numRead = reader . read ( buffer ) ; while ( numRead > NUM_ ) { sb . append ( buffer , NUM_ , numRead ) ; numRead = reader . read ( buffer ) ; } return sb . toString ( ) ; } catch ( IOException e ) { Log . e ( TAG , STR_ + path ) ; throw e ; } finally { if ( is != null ) is . close ( ) ; } }
void invalidate ( String key , boolean fullExpire ) ;
void createQuadProgram ( ) throws IOException { int program = glCreateProgram ( ) ; int vshader = createShader ( STR_ , GL_VERTEX_SHADER , STR_ ) ; int fshader = createShader ( STR_ , GL_FRAGMENT_SHADER , STR_ ) ; glAttachShader ( program , vshader ) ; glAttachShader ( program , fshader ) ; glBindAttribLocation ( program , NUM_ , STR_ ) ; glBindFragDataLocation ( program , NUM_ , STR_ ) ; glLinkProgram ( program ) ; int linked = glGetProgrami ( program , GL_LINK_STATUS ) ; String programLog = glGetProgramInfoLog ( program ) ; if ( programLog . trim ( ) . length ( ) > NUM_ ) { System . err . println ( programLog ) ; } if ( linked == NUM_ ) { throw new AssertionError ( STR_ ) ; } this . quadProgram = program ; glUseProgram ( quadProgram ) ; int texUniform = glGetUniformLocation ( quadProgram , STR_ ) ; glUniform1i ( texUniform , NUM_ ) ; glUseProgram ( NUM_ ) ; }
private VisorIgfsProfilerJob ( String arg , boolean debug ) { super ( arg , debug ) ; }
public void deleteAttribute ( boolean multiple ) { if ( ! isPanelSelected ( ) ) { return ; } if ( multiple ) { getCurrentPanel ( ) . deleteAttributes ( ) ; } else { getCurrentPanel ( ) . deleteAttribute ( ) ; } }
public static < R , A , B , C > CompletionStage < R > combine ( CompletionStage < A > a , CompletionStage < B > b , CompletionStage < C > c , Function3 < A , B , C , R > function ) { final CompletableFuture < A > af = a . toCompletableFuture ( ) ; final CompletableFuture < B > bf = b . toCompletableFuture ( ) ; final CompletableFuture < C > cf = c . toCompletableFuture ( ) ; return CompletableFuture . allOf ( af , bf , cf ) . thenApply ( null ) ; }
public boolean hasMoreLine ( ) { return mHasMoreByMaxLine ; }
protected AbstractRable ( Filter src , Map props ) { init ( src , props ) ; }
protected abstract void emit_DFcmpGL ( boolean single , boolean unorderedGT ) ;
public final boolean sendEmptyMessageDelayed ( int what , long delayMillis ) { return mExec . sendEmptyMessageDelayed ( what , delayMillis ) ; }
private void channelsChanged ( ) { boolean channelsPresent = ! getChannels ( ) . isEmpty ( ) ; doneButton . setEnabled ( channelsPresent ) ; int count = getChannels ( ) . size ( ) ; if ( count == NUM_ && doneButtonTextOneChannel != null ) { doneButton . setText ( doneButtonTextOneChannel ) ; } else { doneButton . setText ( doneButtonText ) ; } }
public void removeMarker ( String property , String marker ) { String propertyString = getProperties ( ) . getProperty ( property , STR_ ) ; int idx = propertyString . indexOf ( marker ) ; if ( idx != - NUM_ ) { StringBuffer sb = new StringBuffer ( propertyString ) ; sb . delete ( idx , idx + marker . length ( ) ) ; getProperties ( ) . setProperty ( property , sb . toString ( ) ) ; } }
public boolean implies ( Permission permission ) { return BOOL_ ; }
public void sendLoadGame ( int connId , String sFile ) { String sFinalFile = sFile ; if ( ! sFinalFile . endsWith ( STR_ ) && ! sFinalFile . endsWith ( STR_ ) ) { sFinalFile = sFile + STR_ ; } if ( ! sFinalFile . endsWith ( STR_ ) ) { sFinalFile = sFinalFile + STR_ ; } send ( connId , new Packet ( Packet . COMMAND_LOAD_SAVEGAME , new Object [ ] { sFinalFile } ) ) ; }
public void addLevel ( MarketDepthLevel level ) ;
private FailoverConnectionProxy ( List < String > hosts , Properties props ) throws SQLException { super ( hosts , props ) ; ConnectionPropertiesImpl connProps = new ConnectionPropertiesImpl ( ) ; connProps . initializeProperties ( props ) ; this . secondsBeforeRetryPrimaryHost = connProps . getSecondsBeforeRetryMaster ( ) ; this . queriesBeforeRetryPrimaryHost = connProps . getQueriesBeforeRetryMaster ( ) ; this . failoverReadOnly = connProps . getFailOverReadOnly ( ) ; this . retriesAllDown = connProps . getRetriesAllDown ( ) ; this . enableFallBackToPrimaryHost = this . secondsBeforeRetryPrimaryHost > NUM_ || this . queriesBeforeRetryPrimaryHost > NUM_ ; pickNewConnection ( ) ; this . explicitlyAutoCommit = this . currentConnection . getAutoCommit ( ) ; }
public Constraint widthPercentage ( int width ) { this . width = width ; return this ; }
public static void removeTransitions ( CSSStyleDeclaration style ) { style . removeProperty ( STR_ ) ; style . removeProperty ( STR_ ) ; style . removeProperty ( STR_ ) ; style . removeProperty ( STR_ ) ; }
public void testGcdFirstZERO ( ) { byte bBytes [ ] = { NUM_ , NUM_ , NUM_ , NUM_ , - NUM_ , NUM_ , NUM_ , NUM_ , - NUM_ , NUM_ , NUM_ , NUM_ } ; int bSign = NUM_ ; byte rBytes [ ] = { NUM_ , NUM_ , NUM_ , NUM_ , - NUM_ , NUM_ , NUM_ , NUM_ , - NUM_ , NUM_ , NUM_ , NUM_ } ; BigInteger aNumber = BigInteger . ZERO ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . gcd ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = NUM_ ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( STR_ , NUM_ , result . signum ( ) ) ; }
public boolean offer ( E e ) { return add ( e ) ; }
boolean isDisposed ( ) ;
private PlotConfigurationHistory ( ) { }
private void waitForSystemTimeChange ( ) { long start = System . currentTimeMillis ( ) ; while ( System . currentTimeMillis ( ) == start ) ; }
public void publishArtifacts ( ) { addArg ( STR_ ) ; }
boolean canGetConstantPool ( ) ;
void deleteCompleteDataSetRegistrations ( DataSet dataSet ) ;
private void processElementPoint ( List < double [ ] > points , Node cur ) { double [ ] point = null ; String vstr = ( ( Element ) cur ) . getAttribute ( ATTR_VECTOR ) ; if ( vstr != null && vstr . length ( ) > NUM_ ) { point = parseVector ( vstr ) ; } if ( point == null ) { throw new AbortException ( STR_ ) ; } points . add ( point ) ; XMLNodeIterator iter = new XMLNodeIterator ( cur . getFirstChild ( ) ) ; while ( iter . hasNext ( ) ) { Node child = iter . next ( ) ; if ( child . getNodeType ( ) == Node . ELEMENT_NODE ) { LOG . warning ( STR_ + child . getNodeName ( ) ) ; } } }
public AMSearchResults searchStaticGroups ( String wildcard , AMSearchControl searchControl ) throws AMException , SSOException { return searchStaticGroups ( wildcard , null , searchControl ) ; }
boolean canPublish ( ) ;
public int count ( ) { if ( root == null ) { return NUM_ ; } return root . count ( ) ; }
public static double millisToPoints ( double mm ) { return mm / INCH_MM * POINT_POSTSCRIPT ; }
public static String singularize ( String in ) { if ( in . endsWith ( STR_ ) || in . endsWith ( STR_ ) ) { return in . substring ( NUM_ , in . length ( ) - NUM_ ) + STR_ ; } else if ( in . endsWith ( STR_ ) ) { return in . substring ( NUM_ , in . length ( ) - NUM_ ) + STR_ ; } else if ( in . charAt ( in . length ( ) - NUM_ ) == STR_ ) { return in . substring ( NUM_ , in . length ( ) - NUM_ ) ; } return in ; }
private void generateRemoteCommand ( ) throws SAXException { String remoteCommand = this . system . getRemoteCommand ( ) ; handler . startElement ( STR_ , REMOTE_COMMAND , REMOTE_COMMAND , EMPTY ) ; handler . characters ( remoteCommand . toCharArray ( ) , NUM_ , remoteCommand . length ( ) ) ; handler . endElement ( STR_ , REMOTE_COMMAND , REMOTE_COMMAND ) ; }
public static void adoptPet ( Player player , int eggObjId , int petId , String name , int decorationId ) { int eggId = player . getInventory ( ) . getItemByObjId ( eggObjId ) . getItemId ( ) ; ItemTemplate template = DataManager . ITEM_DATA . getItemTemplate ( eggId ) ; if ( ! validateAdoption ( player , template , petId ) ) { return ; } if ( ! player . getInventory ( ) . decreaseByObjectId ( eggObjId , NUM_ ) ) { return ; } int expireTime = template . getActions ( ) . getAdoptPetAction ( ) . getExpireMinutes ( ) != NUM_ ? ( int ) ( ( System . currentTimeMillis ( ) / NUM_ ) + template . getActions ( ) . getAdoptPetAction ( ) . getExpireMinutes ( ) * NUM_ ) : NUM_ ; addPet ( player , petId , name , decorationId , expireTime ) ; }
public void markOpened ( ) { state = StorageState . OPENED ; }
private boolean parse ( ) { if ( mData == null ) { return BOOL_ ; } DataInputStream dis = new DataInputStream ( new ByteArrayInputStream ( mData ) ) ; mDnsQueryName = readDnsName ( dis ) ; if ( mDnsQueryName == null ) { return BOOL_ ; } try { mDnsType = dis . readUnsignedShort ( ) ; mVersion = dis . readUnsignedByte ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; return BOOL_ ; } if ( mDnsType == WifiP2pDnsSdServiceInfo . DNS_TYPE_PTR ) { String rData = readDnsName ( dis ) ; if ( rData == null ) { return BOOL_ ; } if ( rData . length ( ) <= mDnsQueryName . length ( ) ) { return BOOL_ ; } mInstanceName = rData . substring ( NUM_ , rData . length ( ) - mDnsQueryName . length ( ) - NUM_ ) ; } else if ( mDnsType == WifiP2pDnsSdServiceInfo . DNS_TYPE_TXT ) { return readTxtData ( dis ) ; } else { return BOOL_ ; } return BOOL_ ; }
private void initPrimaryBackupMaps ( ) { Map < UUID , Set < Integer > > tmpPrm = new HashMap < > ( ) ; Map < UUID , Set < Integer > > tmpBkp = new HashMap < > ( ) ; for ( int partsCnt = assignment . size ( ) , p = NUM_ ; p < partsCnt ; p ++ ) { Map < UUID , Set < Integer > > tmp = tmpPrm ; Map < UUID , Set < Integer > > map = primary ; for ( ClusterNode node : assignment . get ( p ) ) { UUID id = node . id ( ) ; Set < Integer > set = tmp . get ( id ) ; if ( set == null ) { tmp . put ( id , set = new HashSet < > ( ) ) ; map . put ( id , Collections . unmodifiableSet ( set ) ) ; } set . add ( p ) ; tmp = tmpBkp ; map = backup ; } } }
public void testDisconnect_NonBlockWithServerServerClosed ( ) throws IOException { this . channel1 . configureBlocking ( BOOL_ ) ; assertFalse ( this . channel1 . isBlocking ( ) ) ; connectLocalServer ( ) ; this . datagramSocket1 . close ( ) ; assertTrue ( this . channel1 . isOpen ( ) ) ; assertTrue ( this . channel1 . isConnected ( ) ) ; disconnectAfterConnected ( ) ; }
public void init$Children ( ) { children = new ASTNode [ NUM_ ] ; setChild ( new List ( ) , NUM_ ) ; setChild ( new List ( ) , NUM_ ) ; setChild ( new Opt ( ) , NUM_ ) ; setChild ( new List ( ) , NUM_ ) ; }
private void readObject ( ObjectInputStream s ) throws IOException , ClassNotFoundException { s . defaultReadObject ( ) ; type = null ; types = null ; }
public List < Resource > scan ( ) { List < Resource > foundResources = new LinkedList < > ( ) ; List < Class < ? extends Object > > classes ; try { if ( jarUrl == null ) { if ( this . clazz != null ) { classes = getClassesInPackage ( this . packageName , this . clazz ) ; } else { classes = getClassesInPackage ( this . packageName ) ; } } else { classes = getClassesInJarFile ( jarUrl ) ; } } catch ( IOException e ) { return foundResources ; } for ( Class clazz : classes ) { foundResources . addAll ( getResourcesFromClassRecursive ( clazz ) ) ; } return foundResources ; }
public static URI normalizeURI ( URI path ) { if ( path . isFile ( ) ) { return URI . createURI ( path . toString ( ) . replaceAll ( STR_ , STR_ ) ) ; } return path ; }
public EnumParameter ( OptionID optionID , Class < E > enumClass , E defaultValue ) { super ( optionID , defaultValue ) ; this . enumClass = enumClass ; }
public PrintWriter ( Writer out , boolean autoFlush ) { super ( out ) ; this . out = out ; this . autoFlush = autoFlush ; lineSeparator = java . security . AccessController . doPrivileged ( new sun . security . action . GetPropertyAction ( STR_ ) ) ; }
public void updateRectangle ( int x1 , int y1 , int x2 , int y2 , LinkProperties properties , int graphicUpdateMask ) throws IOException { writeGraphicGestureHeader ( graphicUpdateMask ) ; LinkRectangle . write ( x1 , y1 , x2 , y2 , properties , link . dos ) ; }
public boolean areContentsSecure ( ) { return BOOL_ ; }
private static char [ ] zzUnpackCMap ( String packed ) { char [ ] map = new char [ NUM_ ] ; int i = NUM_ ; int j = NUM_ ; while ( i < NUM_ ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > NUM_ ) ; } return map ; }
public T [ ] newArray ( int size ) ;
private void finishRubberband ( ) { if ( rubberband != null ) { remove ( rubberband ) ; this . rubberband = null ; repaint ( ) ; } }
public Transliterator ( String id ) { peer = create ( id ) ; }
public boolean isSetFullSyncRequest ( ) { return this . fullSyncRequest != null ; }
public static String generateActivationKey ( ) { return RandomStringUtils . randomNumeric ( DEF_COUNT ) ; }
public void executeFolderSelection ( long folderId , String folderName ) { getFragmentManager ( ) . popBackStackImmediate ( ) ; ( ( AddEditBookmarkFragment ) getTargetFragment ( ) ) . setParentFolderInfo ( folderId , folderName ) ; }
public PluginParameters createPluginParameters ( ) { return new PluginParameters ( pomFile , createBackupFile , backupFileExtension , encoding , lineSeparatorUtil , expandEmptyElements , keepBlankLines , indentCharacters , indentBlankLines , predefinedSortOrder , customSortOrderFile , sortDependencies , sortPlugins , sortProperties , verifyFailType ) ; }
protected void logMalformedCommand ( String command , String path ) { log ( Core . ALERT . WARNING , String . format ( STR_ , command , path ) ) ; }
public abstract void remove ( String path ) throws IOException ;
public static void d ( String tag , String msg ) { if ( sLevel > LEVEL_DEBUG ) { return ; } Log . d ( tag , msg ) ; }
Union5 < First , Second , Third , Fourth , Fifth > fifth ( Fifth value ) ;
Object remove ( Object key ) ;
public static SM_SYSTEM_MESSAGE STR_BUDDY_REQUEST_ADD ( String value0 ) { return new SM_SYSTEM_MESSAGE ( NUM_ , value0 ) ; }
public void onRetry ( R result , Throwable failure , ExecutionContext context ) { }
public final boolean peekOrFalse ( ) { return ( m_index > - NUM_ ) ? m_values [ m_index ] : BOOL_ ; }
public final Array currentValue ( ) { return this . currentValue_ ; }
protected void onInsertComplete ( int token , Object cookie , Uri uri ) { }
private int widthCheck ( int widthTrak ) { if ( widthTrak > paddedWidth - NUM_ ) { System . out . println ( ) ; widthTrak = NUM_ ; } else widthTrak ++ ; return widthTrak ; }
private void calcEntryCountIncludingStacks ( List < BarEntry > yVals ) { mEntryCountStacks = NUM_ ; for ( int i = NUM_ ; i < yVals . size ( ) ; i ++ ) { float [ ] vals = yVals . get ( i ) . getVals ( ) ; if ( vals == null ) mEntryCountStacks ++ ; else mEntryCountStacks += vals . length ; } }
public int triple ( int x , int n ) { int r = x ; for ( int i = NUM_ ; i < n ; i += NUM_ ) { r = NUM_ * r ; } return r ; }
public static FriendsFragment newInstance ( boolean init ) { FriendsFragment frag = new FriendsFragment ( ) ; frag . mInit = init ; return frag ; }
private InputStream gzipInputStream ( String contentEncoding , InputStream inputStream ) throws IOException { if ( HeaderUtil . isGzipContent ( contentEncoding ) ) { inputStream = new GZIPInputStream ( inputStream ) ; } return inputStream ; }
public void apply ( NexusStreamParser np ) throws Exception { np . matchIgnoreCase ( STR_ ) ; final String attribute = np . getWordRespectCase ( ) ; np . matchIgnoreCase ( STR_ ) ; final Director dir = ( Director ) getDir ( ) ; final Document doc = dir . getDocument ( ) ; final SamplesViewer samplesViewer = ( SamplesViewer ) getDir ( ) . getViewerByClass ( SamplesViewer . class ) ; if ( samplesViewer != null ) { } final int count = doc . getSampleAttributeTable ( ) . expandAttribute ( attribute , BOOL_ ) ; if ( count > NUM_ && samplesViewer != null ) samplesViewer . getSamplesTable ( ) . syncFromDocument ( ) ; if ( count == NUM_ ) NotificationsInSwing . showWarning ( getViewer ( ) . getFrame ( ) , STR_ ) ; else NotificationsInSwing . showInformation ( getViewer ( ) . getFrame ( ) , STR_ + attribute + STR_ + count + STR_ ) ; }
public InvalidScopeException ( final String message , final UrlLocation parameterLocation ) { super ( NUM_ , STR_ , message , parameterLocation ) ; }
public MidPointIntegrator ( final double relativeAccuracy , final double absoluteAccuracy , final int minimalIterationCount , final int maximalIterationCount ) throws MathIllegalArgumentException { super ( relativeAccuracy , absoluteAccuracy , minimalIterationCount , maximalIterationCount ) ; if ( maximalIterationCount > MIDPOINT_MAX_ITERATIONS_COUNT ) { throw new MathIllegalArgumentException ( LocalizedCoreFormats . NUMBER_TOO_LARGE_BOUND_EXCLUDED , maximalIterationCount , MIDPOINT_MAX_ITERATIONS_COUNT ) ; } }
public boolean isValid ( Resource res ) ;
public void render ( DrawContext dc , Matrix matrix ) { this . currentData = ( AbstractShapeData ) this . shapeDataCache . getEntry ( dc . getGlobe ( ) ) ; if ( this . currentData == null ) { this . currentData = this . createCacheEntry ( dc ) ; this . shapeDataCache . addEntry ( this . currentData ) ; } ShapeData current = ( ShapeData ) this . currentData ; current . renderMatrix = matrix ; ExtentCacheKey extentCacheKey = new ExtentCacheKey ( dc . getGlobe ( ) , matrix ) ; Extent extent = this . extentCache . get ( extentCacheKey ) ; if ( extent == null ) { extent = this . computeExtent ( dc ) ; this . extentCache . put ( extentCacheKey , extent ) ; } current . setExtent ( extent ) ; this . render ( dc ) ; }
public void update ( final SolrInputDocument solrdoc ) throws IOException , SolrException ;
public void expungeStaleEntries ( ) { Reference < ? > reference ; while ( ( reference = poll ( ) ) != null ) { target . remove ( reference ) ; } }
private static ExceptionProxy exceptionProxy ( int tag ) { return new AnnotationTypeMismatchExceptionProxy ( STR_ + tag ) ; }
public long secondarySpaceSize ( ) ;
public static < T > T [ ] remove ( T [ ] array , T objToRemove ) { for ( int i = NUM_ ; i < array . length ; i ++ ) { T elem = array [ i ] ; if ( areEqual ( elem , objToRemove ) ) return removeAt ( array , i ) ; } return array ; }
public void testBug18258 ( ) throws Exception { String bogusDatabaseName = STR_ ; this . conn . getMetaData ( ) . getTables ( bogusDatabaseName , STR_ , STR_ , new String [ ] { STR_ , STR_ } ) ; this . conn . getMetaData ( ) . getColumns ( bogusDatabaseName , STR_ , STR_ , STR_ ) ; this . conn . getMetaData ( ) . getProcedures ( bogusDatabaseName , STR_ , STR_ ) ; }
public boolean isAudited ( ) ;
public long addAndGet ( T obj , long delta ) { long prev , next ; do { prev = get ( obj ) ; next = prev + delta ; } while ( ! compareAndSet ( obj , prev , next ) ) ; return next ; }
public void visitMultiANewArrayInsn ( String desc , int dims ) { if ( mv != null ) { mv . visitMultiANewArrayInsn ( desc , dims ) ; } }
private void ensureOpen ( ) throws IOException { if ( in == null ) throw new IOException ( STR_ ) ; }
public Builder InlineNewTag ( String tag ) { InlineNewTag = tag ; return this ; }
public boolean isViewDisplayed ( ) { createHelpWindow ( ) ; return jhelp . isNavigatorDisplayed ( ) ; }
public void requestFocus ( ) { View view = getView ( ) ; if ( view != null ) view . requestFocus ( ) ; }
public LocationAssistant ( final Context context , Listener listener , Accuracy accuracy , long updateInterval , boolean allowMockLocations ) { this . context = context ; if ( context instanceof Activity ) this . activity = ( Activity ) context ; this . listener = listener ; switch ( accuracy ) { case HIGH : priority = LocationRequest . PRIORITY_HIGH_ACCURACY ; break ; case MEDIUM : priority = LocationRequest . PRIORITY_BALANCED_POWER_ACCURACY ; break ; case LOW : priority = LocationRequest . PRIORITY_LOW_POWER ; break ; case PASSIVE : default : priority = LocationRequest . PRIORITY_NO_POWER ; } this . updateInterval = updateInterval ; this . allowMockLocations = allowMockLocations ; if ( googleApiClient == null ) { googleApiClient = new GoogleApiClient . Builder ( context ) . addConnectionCallbacks ( this ) . addOnConnectionFailedListener ( this ) . addApi ( LocationServices . API ) . build ( ) ; } }
public CountModifiers ( CountModifiers modifiers1 , CountModifiers modifiers2 , CountModifiers modifiers3 ) { super ( modifiers1 , modifiers2 , modifiers3 ) ; }
public void removeHAListener ( IHAListener listener ) ;
void encodeXML ( Document doc , Element root , String elementName ) ;
ORCLUSCluster ( ) { }
protected void advance ( int count ) { if ( count < NUM_ ) throw new IllegalArgumentException ( STR_ ) ; for ( int i = NUM_ ; i < count ; i ++ ) { if ( getCurrentChar ( ) == STR_ ) { line ++ ; column = NUM_ ; } else { column ++ ; } pos ++ ; } }
public double computeFirstCover ( boolean leaf ) { double max = NUM_ ; for ( DistanceEntry < E > e : firstAssignments ) { double cover = leaf ? e . getDistance ( ) : ( e . getEntry ( ) . getCoveringRadius ( ) + e . getDistance ( ) ) ; max = cover > max ? cover : max ; } return max ; }
void onTopSideUp ( ) ;
public static void registerSubTile ( String key , Class < ? extends SubTileEntity > subtileClass ) { Preconditions . checkArgument ( Loader . instance ( ) . isInState ( LoaderState . PREINITIALIZATION ) ) ; subTiles . put ( key , subtileClass ) ; subTileMods . put ( key , Loader . instance ( ) . activeModContainer ( ) . getModId ( ) ) ; }
final boolean isPartiallyNormalized ( ) { return areFieldsSet && ! areAllFieldsSet ; }
public void testResettingOptions ( ) throws Exception { if ( m_OptionTester . getOptionHandler ( ) != null ) { if ( ! m_OptionTester . checkSetOptions ( ) ) { fail ( getClassname ( ) + STR_ + STR_ ) ; } } }
public boolean hasTitle ( ) { return super . hasElement ( Source . TITLE ) ; }
public static S2CellId fromLatLng ( S2LatLng ll ) { return fromPoint ( ll . toPoint ( ) ) ; }
public void actionPerformed ( ActionEvent e ) { DefaultCellEditor . this . stopCellEditing ( ) ; }
public static Object readDeclaredField ( final Object target , final String fieldName ) throws IllegalAccessException { return FieldUtils . readDeclaredField ( target , fieldName , BOOL_ ) ; }
protected void fillToolbar ( ) { ToolBarManager toolBarManager = getToolBarManager ( ) ; if ( toolBarManager == null ) return ; fInput . fillToolBar ( toolBarManager , this ) ; toolBarManager . update ( BOOL_ ) ; }
public static long parseDateAsEpoch ( String dateStr ) { try { return DateUtils . parseDate ( dateStr ) . getTime ( ) ; } catch ( DateParseException e ) { return NUM_ ; } }
public Builder renameColumn ( String oldName , String newName ) { return transform ( new RenameColumnsTransform ( oldName , newName ) ) ; }
void onIconSelected ( SelectableIcon selectedItem ) ;
private void close ( ) { LOG . info ( STR_ ) ; newCoverImage = null ; commonCover = Optional . empty ( ) ; editStage . close ( ) ; }
static public void assertFalse ( boolean condition ) { assertFalse ( null , condition ) ; }
public abstract Barriers newBarriers ( ) ;
public void clear ( ) { sample . clear ( ) ; count . set ( NUM_ ) ; max . set ( Long . MIN_VALUE ) ; min . set ( Long . MAX_VALUE ) ; sum . set ( NUM_ ) ; variance . set ( new double [ ] { - NUM_ , NUM_ } ) ; }
public synchronized void startProduction ( ImageConsumer ic ) { addConsumer ( ic ) ; Thread thread = new Thread ( this , STR_ ) ; thread . start ( ) ; }
public static final native boolean checkSELinuxAccess ( String scon , String tcon , String tclass , String perm ) ;
public static void validateCertificate ( boolean production , X509Certificate certificate ) throws CertificateException { if ( certificate == null ) throw new CertificateException ( STR_ ) ; certificate . checkValidity ( ) ; final Map < String , String > stringStringMap = CertificateUtils . splitCertificateSubject ( certificate . getSubjectDN ( ) . getName ( ) ) ; final String cn = stringStringMap . get ( STR_ ) ; if ( ! cn . toLowerCase ( ) . contains ( STR_ ) ) { throw new CertificateException ( STR_ + cn ) ; } if ( production && cn . toLowerCase ( ) . contains ( STR_ ) ) { throw new CertificateEnvironmentMismatchException ( STR_ ) ; } else if ( ! production && cn . toLowerCase ( ) . contains ( STR_ ) ) { throw new CertificateEnvironmentMismatchException ( STR_ ) ; } }
private void terminateProperlyAudit ( AuditServiceThread thread ) { thread . remove ( this ) ; if ( pageAuditExecutionList . remove ( thread ) ) { processPageAuditWaitQueue ( ) ; } else if ( scenarioAuditExecutionList . remove ( thread ) ) { processScenarioAuditWaitQueue ( ) ; } else if ( uploadAuditExecutionList . remove ( thread ) ) { processPageUploadAuditWaitQueue ( ) ; } else if ( siteAuditExecutionList . remove ( thread ) ) { processSiteAuditWaitQueue ( ) ; } }
public void reverse ( ) { long tmp ; int limit = size / NUM_ ; int j = size - NUM_ ; long [ ] theElements = elements ; for ( int i = NUM_ ; i < limit ; ) { tmp = theElements [ i ] ; theElements [ i ++ ] = theElements [ j ] ; theElements [ j -- ] = tmp ; } }
public String clusterDefinitionsTipText ( ) { return STR_ ; }
public void putDocumentInCache ( int n , Source source ) { int cachedNode = getNode ( source ) ; if ( DTM . NULL != cachedNode ) { if ( ! ( cachedNode == n ) ) throw new RuntimeException ( STR_ + STR_ + source . getSystemId ( ) ) ; return ; } if ( null != source . getSystemId ( ) ) { m_sourceTree . addElement ( new SourceTree ( n , source . getSystemId ( ) ) ) ; } }
public boolean isNonsingular ( ) { for ( int j = NUM_ ; j < n ; j ++ ) { if ( LU [ j ] [ j ] == NUM_ ) return BOOL_ ; } return BOOL_ ; }
private boolean loadNextPage ( ) { result = pageable . getPage ( query , skip , pageSize ) ; index = NUM_ ; if ( result == null || result . isEmpty ( ) ) { return BOOL_ ; } return BOOL_ ; }
boolean add ( char entry ) ;
public int writeULongLE ( int index , long ul ) { this . array . put ( index , ( byte ) ( ul & NUM_ ) ) ; this . array . put ( index + NUM_ , ( byte ) ( ( ul > > NUM_ ) & NUM_ ) ) ; this . array . put ( index + NUM_ , ( byte ) ( ( ul > > NUM_ ) & NUM_ ) ) ; this . array . put ( index + NUM_ , ( byte ) ( ( ul > > NUM_ ) & NUM_ ) ) ; return NUM_ ; }
public void waitUntilFinished ( ) { try { while ( m_runningCount > NUM_ ) { Thread . sleep ( NUM_ ) ; } while ( BOOL_ ) { boolean busy = BOOL_ ; for ( int i = NUM_ ; i < m_beans . size ( ) ; i ++ ) { BeanInstance temp = ( BeanInstance ) m_beans . elementAt ( i ) ; if ( temp . getBean ( ) instanceof BeanCommon ) { if ( ( ( BeanCommon ) temp . getBean ( ) ) . isBusy ( ) ) { busy = BOOL_ ; break ; } } } if ( busy ) { Thread . sleep ( NUM_ ) ; } else { break ; } } } catch ( Exception ex ) { if ( m_log != null ) { m_log . logMessage ( STR_ ) ; } else { System . err . println ( STR_ ) ; } stopAllFlows ( ) ; } }
public static void validateCompositeData ( CompositeData cd ) { if ( cd == null ) { throw new NullPointerException ( STR_ ) ; } if ( ! isTypeMatched ( memoryNotifInfoCompositeType , cd . getCompositeType ( ) ) ) { throw new IllegalArgumentException ( STR_ ) ; } }
public InliningResult ( final CodeNode firstNode , final CodeNode secondNode ) { m_firstNode = firstNode ; m_secondNode = secondNode ; }
protected FunctionLib ( ) { }
private void prepareUi ( ) { if ( mContactId != Contact . INVALID_ID ) { Contact contact = Contact . byId ( mContactId ) ; ContactViewBinder . bind ( contact , mTextContactName ) ; } mTextMessageBody . setText ( mBody ) ; }
public void insertVolumenSerie ( final VolumenSerieVO volumenSerieVO ) ;
protected void incrementTaskDone ( Set < TaskImageContainer > tasks ) throws RuntimeException { synchronized ( mShadowTaskMap ) { for ( TaskImageContainer task : tasks ) { ImageShadowTask shadowTask = mShadowTaskMap . get ( task . mSession ) ; if ( shadowTask == null ) { throw new RuntimeException ( STR_ + STR_ ) ; } shadowTask . getProtocol ( ) . addCount ( NUM_ ) ; } } }
public SparseArray ( int initialCapacity ) { initialCapacity = idealIntArraySize ( initialCapacity ) ; mKeys = new int [ initialCapacity ] ; Arrays . fill ( mKeys , - NUM_ ) ; mValues = new Double [ initialCapacity ] ; mSize = NUM_ ; }
public int read ( long fileOffset , byte [ ] buffer , int offset , int length ) throws IOException { _file . seek ( fileOffset ) ; return _file . read ( buffer , offset , length ) ; }
public void dispose ( ) ;
public void runTest ( ) throws Throwable { Document doc ; DOMImplementation domImpl ; boolean state ; doc = ( Document ) load ( STR_ , BOOL_ ) ; domImpl = doc . getImplementation ( ) ; state = domImpl . hasFeature ( STR_ , STR_ ) ; assertTrue ( STR_ , state ) ; }
public JIntegerField ( Composite parent , int style , boolean allowsNegative ) { this ( parent , style , NUM_ , allowsNegative ) ; }
public void handleException ( ParseException ex , SIPMessage sipMessage , Class hdrClass , String header , String message ) throws ParseException { if ( getSIPStack ( ) . isLoggingEnabled ( ) ) this . logger . logException ( ex ) ; if ( ( hdrClass != null ) && ( hdrClass . equals ( From . class ) || hdrClass . equals ( To . class ) || hdrClass . equals ( CSeq . class ) || hdrClass . equals ( Via . class ) || hdrClass . equals ( CallID . class ) || hdrClass . equals ( RequestLine . class ) || hdrClass . equals ( StatusLine . class ) ) ) { logger . logError ( STR_ ) ; logger . logError ( message ) ; throw ex ; } else { sipMessage . addUnparsed ( header ) ; } }
public boolean isOracle ( Connection conn ) ;
public Route createRoute ( ) { RouteImpl route = new RouteImpl ( ) ; return route ; }
public boolean isGame ( ) { return BOOL_ ; }
public static String printDocument ( Node root ) throws TransformerException , TransformerConfigurationException , FileNotFoundException { TransformerFactory tf = XMLUtils . getTransformerFactory ( ) ; Transformer transformer = tf . newTransformer ( ) ; StringWriter writer = new StringWriter ( ) ; transformer . transform ( new DOMSource ( root ) , new StreamResult ( writer ) ) ; return writer . getBuffer ( ) . toString ( ) ; }
public Result result ( SqlNode node , Collection < Clause > clauses , RelNode rel ) { final String alias2 = SqlValidatorUtil . getAlias ( node , - NUM_ ) ; final String alias3 = alias2 != null ? alias2 : STR_ ; final String alias4 = SqlValidatorUtil . uniquify ( alias3 , aliasSet , SqlValidatorUtil . EXPR_SUGGESTER ) ; final String alias5 = alias2 == null || ! alias2 . equals ( alias4 ) ? alias4 : null ; return new Result ( node , clauses , alias5 , Collections . singletonList ( Pair . of ( alias4 , rel . getRowType ( ) ) ) ) ; }
public static void assertNull ( Object object ) { if ( verbose ) { log ( STR_ + object + STR_ ) ; } assertBool ( object == null ) ; }
public boolean isBlocked ( Contact contact ) throws ImException { return isBlocked ( contact . getAddress ( ) . getAddress ( ) ) ; }
public boolean [ ] [ ] toBooleanArray2 ( ) { boolean [ ] [ ] array = new boolean [ rows ] [ columns ] ; for ( int r = NUM_ ; r < rows ; r ++ ) { for ( int c = NUM_ ; c < columns ; c ++ ) { array [ r ] [ c ] = get ( r , c ) != NUM_ ? BOOL_ : BOOL_ ; } } return array ; }
public void paintProgressBarForeground ( SynthContext context , Graphics g , int x , int y , int w , int h , int orientation ) { }
public static InlineDecision NO ( String reason ) { return new InlineDecision ( null , null , Code . DECIDE_NO , reason ) ; }
public boolean hasHref ( ) { return super . hasAttribute ( HREF ) ; }
public static boolean isScreenReadersAllowed ( int permissions ) { return ( EncryptionConstants . ALLOW_SCREENREADERS & permissions ) == EncryptionConstants . ALLOW_SCREENREADERS ; }
private static native int RegDeleteValue ( int hKey , byte [ ] valueName ) ;
private boolean responseAvailable ( ) { return ( responseBody != null ) || ( responseStream != null ) ; }
public ThumbnailProduct ( fr . gael . dhus . database . object . Product product ) { super ( product ) ; }
public static void addOsmiumCompressorRecipe ( ItemStack input , ItemStack output ) { try { Class recipeClass = Class . forName ( STR_ ) ; Method m = recipeClass . getMethod ( STR_ , ItemStack . class , ItemStack . class ) ; m . invoke ( null , input , output ) ; } catch ( Exception e ) { System . err . println ( STR_ + e . getMessage ( ) ) ; } }
final protected boolean rangeCheck ( final int index ) throws IndexOutOfBoundsException { final int nkeys = data . getKeyCount ( ) ; if ( index < NUM_ || index >= nkeys ) { throw new IndexOutOfBoundsException ( STR_ + index + STR_ + nkeys ) ; } return BOOL_ ; }
protected void addNode ( DefaultMapNode node ) { nodes . put ( node . getId ( ) , node ) ; }
Iterator < E > descendingIterator ( ) ;
void redFloatValueChanged ( short unit , float value ) throws DOMException ;
public static TestSuite suite ( ) throws Exception { Class testClass = ClassLoader . getSystemClassLoader ( ) . loadClass ( STR_ ) ; Constructor testConstructor = testClass . getConstructor ( new Class [ ] { DOMTestDocumentBuilderFactory . class } ) ; DOMTestDocumentBuilderFactory factory = new JAXPDOMTestDocumentBuilderFactory ( null , JAXPDOMTestDocumentBuilderFactory . getConfiguration2 ( ) ) ; Object test = testConstructor . newInstance ( new Object [ ] { factory } ) ; return new JUnitTestSuiteAdapter ( ( DOMTestSuite ) test ) ; }
public static ImageSource fromFilePath ( String pathName ) { if ( pathName == null ) { throw new IllegalArgumentException ( Logger . logMessage ( Logger . ERROR , STR_ , STR_ , STR_ ) ) ; } ImageSource imageSource = new ImageSource ( ) ; imageSource . type = TYPE_FILE_PATH ; imageSource . source = pathName ; return imageSource ; }
public int size ( ) { return size ; }
public String paramString ( ) { String typeStr ; switch ( id ) { case TEXT_VALUE_CHANGED : typeStr = STR_ ; break ; default : typeStr = STR_ ; } return typeStr ; }
private void updateProgress ( int progress ) { if ( myHost != null && progress != previousProgress ) { myHost . updateProgress ( progress ) ; } previousProgress = progress ; }
private void mark ( int c ) { temp [ patternLength ] = c ; }
public void testQueryByAssigneeExcludeSubtasks ( ) throws Exception { TaskQuery query = taskService . createTaskQuery ( ) . taskAssignee ( STR_ ) ; assertEquals ( NUM_ , query . count ( ) ) ; assertEquals ( NUM_ , query . list ( ) . size ( ) ) ; query = taskService . createTaskQuery ( ) . taskAssignee ( STR_ ) . excludeSubtasks ( ) ; assertEquals ( NUM_ , query . count ( ) ) ; assertEquals ( NUM_ , query . list ( ) . size ( ) ) ; query = taskService . createTaskQuery ( ) . taskAssignee ( STR_ ) ; assertEquals ( NUM_ , query . count ( ) ) ; assertEquals ( NUM_ , query . list ( ) . size ( ) ) ; assertNull ( query . singleResult ( ) ) ; query = taskService . createTaskQuery ( ) . taskAssignee ( STR_ ) . excludeSubtasks ( ) ; assertEquals ( NUM_ , query . count ( ) ) ; assertEquals ( NUM_ , query . list ( ) . size ( ) ) ; assertNull ( query . singleResult ( ) ) ; }
public double next ( ) { moveToNextIndex ( ) ; return _hash . _set [ _index ] ; }
public static SitemapsEntry insertSitemap ( WebmasterToolsService myService , String siteUrl , String sitemapUrl ) throws IOException , ServiceException { SitemapsRegularEntry entry = new SitemapsRegularEntry ( ) ; entry . setId ( sitemapUrl ) ; entry . setSitemapType ( GENERAL_WEB_SITEMAP ) ; System . out . println ( STR_ + sitemapUrl + STR_ ) ; return myService . insert ( getSitemapsFeedUrl ( siteUrl ) , entry ) ; }
public final View findNextFocus ( ViewGroup root , View focused , int direction ) { return findNextFocus ( root , focused , null , direction ) ; }
public void assertNoException ( Runnable expression ) { TestUtils . assertNoException ( expression ) ; }
public JSplitButton ( Icon icon ) { this ( null , icon ) ; }
public static String formatQuantity ( float quantity ) { return formatQuantity ( ( double ) quantity ) ; }
public static void check ( ) { Iterator < DataObjectType > doIterator = _typeMap . values ( ) . iterator ( ) ; while ( doIterator . hasNext ( ) ) { DataObjectType doType = doIterator . next ( ) ; Iterator < ColumnField > columnIterator = doType . getColumnFields ( ) . iterator ( ) ; while ( columnIterator . hasNext ( ) ) { ColumnField field = columnIterator . next ( ) ; field . check ( ) ; } } }
public AbstractHeaderItem ( ) { setHidden ( BOOL_ ) ; setSelectable ( BOOL_ ) ; }
public void doResumeNativeContinuousCopy ( StorageSystem storage , URI mirror , TaskCompleter taskCompleter ) throws DeviceControllerException ;
public Element ( String name , Element ... elems ) { this ( name , ( String [ ] ) null , elems , NUM_ ) ; }
public Dialog title ( CharSequence title ) { mTitle . setText ( title ) ; mTitle . setVisibility ( TextUtils . isEmpty ( title ) ? View . GONE : View . VISIBLE ) ; return this ; }
public void writeObjectData ( ObjectOutputStream stream ) throws IOException { doWriteObject ( stream ) ; }
public static int calcDesiredSize ( Context context , int parentWidth , int parentHeight ) { int orientation = context . getResources ( ) . getConfiguration ( ) . orientation ; int desiredSize = ( orientation == Configuration . ORIENTATION_LANDSCAPE ) ? parentWidth : parentHeight ; return Math . min ( desiredSize , parentWidth ) ; }
public boolean isAD_Override_Dict ( ) { Object oo = get_Value ( COLUMNNAME_AD_Override_Dict ) ; if ( oo != null ) { if ( oo instanceof Boolean ) return ( ( Boolean ) oo ) . booleanValue ( ) ; return STR_ . equals ( oo ) ; } return BOOL_ ; }
protected void clearEvents ( ) { }
private void handleTreeViewerMouseUp ( final Tree tree , MouseEvent e ) { if ( ( tree . getSelectionCount ( ) < NUM_ ) || ( e . button != NUM_ ) || ! tree . equals ( e . getSource ( ) ) ) { return ; } Object object = tree . getItem ( new Point ( e . x , e . y ) ) ; TreeItem selection = tree . getSelection ( ) [ NUM_ ] ; if ( selection . equals ( object ) ) { gotoSelectedElement ( ) ; } }
public abstract org . omg . CORBA . Object target ( ) ;
protected boolean hitsPreviousPage ( float x , float y ) { return ( x < getViewportOffsetX ( ) + getRelativeChildOffset ( mCurrentPage ) - mPageSpacing ) ; }
public void go ( OutputStream out ) throws IOException { go ( new VCardWriter ( out , getVCardWriterConstructorVersion ( ) ) ) ; }
public void pushRegister ( int registerNumber ) throws IOException { print ( STR_ , new String [ ] { STR_ + registerNumber + STR_ } ) ; }
private static Element addElement ( Document doc , Node parent , String tagName , String attrName , String attrVal ) { return addElement ( doc , parent , tagName , attrName , attrVal , null , null ) ; }
public static < T , E > ValidationResult < T , E > success ( final T result ) { return new SuccessfulResult < > ( result ) ; }
public static Map < String , Object > updateBinaryFile ( DispatchContext dctx , Map < String , ? extends Object > context ) { Map < String , Object > result = null ; try { result = updateBinaryFileMethod ( dctx , context ) ; } catch ( GenericServiceException e ) { return ServiceUtil . returnError ( e . getMessage ( ) ) ; } return result ; }
public boolean isRefreshing ( ) { return mStatus == PTR_STATUS_LOADING ; }
public static StringBuilder quotedString ( String s ) { final EscapeStringResult escapeString = escapeString ( s , STR_ ) ; final StringBuilder result = escapeString . buffer ; result . insert ( NUM_ , STR_ ) ; result . append ( STR_ ) ; return result ; }
public void startWith ( ) throws IOException ;
private static boolean isXmlQuote ( char c ) { return c == STR_ || c == STR_ ; }
public Shingles manySeriesToShingles ( Map < String , ArrayList < double [ ] > > data , int windowSize , int paaSize , int alphabetSize , NumerosityReductionStrategy strategy , double normalizationThreshold , int shingleSize ) throws SAXException { Shingles res = new Shingles ( alphabetSize , shingleSize ) ; for ( Entry < String , ArrayList < double [ ] > > e : data . entrySet ( ) ) { for ( double [ ] series : e . getValue ( ) ) { Map < String , Integer > shingles = ts2Shingles ( series , windowSize , paaSize , alphabetSize , strategy , normalizationThreshold , shingleSize ) ; int [ ] counts = new int [ res . getIndex ( ) . size ( ) ] ; for ( String str : shingles . keySet ( ) ) { Integer idx = res . getIndex ( ) . get ( str ) ; counts [ idx ] = shingles . get ( str ) ; } res . addShingledSeries ( e . getKey ( ) , counts ) ; } } return res ; }
private void updatePromoVisibility ( float percentage ) { if ( isPromoAvailable ( ) ) { mPromoVisible = BOOL_ ; mPromoHeightPx = Math . round ( MathUtils . clamp ( percentage * mPromoContentHeightPx , NUM_ , mPromoContentHeightPx ) ) ; mPromoOpacity = percentage ; } else { mPromoVisible = BOOL_ ; mPromoHeightPx = NUM_ ; mPromoOpacity = NUM_ ; } }
public LongMap ( ) { this ( NUM_ , NUM_ ) ; }
Account ( ) { id = NUM_ ; balance = NUM_ ; annualInterestRate = NUM_ ; dateCreated = new Date ( ) ; }
public static < P > Pointer < Pointer < Pointer < P > > > allocatePointerPointer ( Class < P > targetType ) { return allocatePointerPointer ( ( Type ) targetType ) ; }
public com . sun . identity . saml2 . jaxb . xmlsig . SignatureMethodType . HMACOutputLength createSignatureMethodTypeHMACOutputLength ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . saml2 . jaxb . xmlsig . impl . SignatureMethodTypeImpl . HMACOutputLengthImpl ( ) ; }
protected boolean isStartNode ( DelphiPMDNode node ) { return node . getText ( ) . equals ( start ) ; }
public void testGEOS_2 ( ) throws ParseException { checkIntersection ( STR_ , STR_ , NUM_ , STR_ , NUM_ ) ; }
public int readLabel ( ) throws IOException { return readUnsignedByte ( ) ; }
public FriendsGetQueryWithFields count ( Integer value ) { return unsafeParam ( STR_ , value ) ; }
public void sendForward ( final WorkflowAnnotation anno ) { if ( anno == null ) { throw new IllegalArgumentException ( STR_ ) ; } synchronized ( lock ) { int newIndexDraw = annotationsDrawOrder . indexOf ( anno ) + NUM_ ; int newIndexEvent = annotationsEventOrder . indexOf ( anno ) - NUM_ ; if ( annotationsDrawOrder . remove ( anno ) ) { if ( newIndexDraw >= annotationsDrawOrder . size ( ) ) { annotationsDrawOrder . add ( anno ) ; } else { annotationsDrawOrder . add ( newIndexDraw , anno ) ; } } if ( annotationsEventOrder . remove ( anno ) ) { if ( newIndexEvent < NUM_ ) { annotationsEventOrder . add ( NUM_ , anno ) ; } else { annotationsEventOrder . add ( newIndexEvent , anno ) ; } } } }
public abstract void endCDATA ( ) throws SAXException ;
public static VisorTransactionConfiguration from ( TransactionConfiguration src ) { VisorTransactionConfiguration cfg = new VisorTransactionConfiguration ( ) ; cfg . dfltTxConcurrency = src . getDefaultTxConcurrency ( ) ; cfg . dfltTxIsolation = src . getDefaultTxIsolation ( ) ; cfg . dfltTxTimeout = src . getDefaultTxTimeout ( ) ; cfg . pessimisticTxLogLinger = src . getPessimisticTxLogLinger ( ) ; cfg . pessimisticTxLogSize = src . getPessimisticTxLogSize ( ) ; cfg . txSerEnabled = src . isTxSerializableEnabled ( ) ; return cfg ; }
public abstract int parallelism ( ) ;
protected Iterator createEntrySetIterator ( ) { return new ReferenceEntrySetIterator ( this ) ; }
public boolean isDisplay ( ) { return is ( DISPLAY ) ; }
public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { log . info ( STR_ + request . getRemoteHost ( ) + STR_ + request . getRemoteAddr ( ) ) ; HttpSession session = request . getSession ( BOOL_ ) ; WWindowStatus ws = WWindowStatus . get ( request ) ; WebDoc doc = null ; if ( session == null || ws == null ) { doc = WebDoc . createPopup ( STR_ ) ; doc . addPopupClose ( ws . ctx ) ; } else { String error = null ; int AD_Record_ID = WebUtil . getParameterAsInt ( request , P_Record_ID ) ; int AD_Table_ID = WebUtil . getParameterAsInt ( request , P_Table_ID ) ; if ( AD_Record_ID == NUM_ || AD_Table_ID == NUM_ ) { doc = WebDoc . createPopup ( STR_ ) ; doc . addPopupClose ( ws . ctx ) ; } else { doc = createPage ( ws . ctx , request , AD_Record_ID , AD_Table_ID ) ; } } WebUtil . createResponse ( request , response , this , null , doc , BOOL_ ) ; }
public abstract String encode ( ) ;
public int [ ] postProcess ( int [ ] attributeSet ) throws Exception { return attributeSet ; }
protected void displayFilterDropedInfoOnLoad ( ) { filterDroppedInfo . removeAllComponents ( ) ; }
protected void analyseDragComponent ( final Component compsource ) { final String sourceID = getComponentId ( compsource ) ; final Object event = getDropHintConfigurations ( ) . get ( sourceID ) ; eventBus . publish ( this , event ) ; }
public final boolean isOverridingLocale ( ) { return ( myOverride & CFG_LOCALE ) != NUM_ ; }
public ConfigProperties ( Properties props ) { super ( props ) ; }
int copy ( int srcIndex ) { return srcPool . copy ( srcIndex , destPool , classnames ) ; }
public static EditorJavaElementResolver from ( IEditorPart editorPart ) { return new EditorJavaElementResolver ( editorPart ) ; }
public boolean is_contained_in_box ( PlaPointFloat p_1 , PlaPointFloat p_2 , double p_tolerance ) { if ( is_NaN ( ) ) return BOOL_ ; double min_x ; double max_x ; if ( p_1 . v_x < p_2 . v_x ) { min_x = p_1 . v_x ; max_x = p_2 . v_x ; } else { min_x = p_2 . v_x ; max_x = p_1 . v_x ; } if ( v_x < min_x - p_tolerance || v_x > max_x + p_tolerance ) { return BOOL_ ; } double min_y ; double max_y ; if ( p_1 . v_y < p_2 . v_y ) { min_y = p_1 . v_y ; max_y = p_2 . v_y ; } else { min_y = p_2 . v_y ; max_y = p_1 . v_y ; } return ( v_y >= min_y - p_tolerance && v_y <= max_y + p_tolerance ) ; }
protected boolean shouldRequestUpdateFromLayout ( ) { return BOOL_ ; }
public CSVDataSourceFactory ( ) { super ( STR_ , CSV_MIME_TYPES , CSV_FILE_ENDINGS , CSVFormatSpecificationWizardStep . CSV_FORMAT_SPECIFICATION_STEP_ID ) ; }
public ITag readTag ( ) ;
protected abstract void engineReset ( ) ;
public IgniteDeploymentException ( String msg ) { super ( msg ) ; }
public int length ( ) { return array . length ( ) ; }
public GlobalRunAction ( Workspace workspace ) { super ( STR_ , workspace ) ; putValue ( SMALL_ICON , ResourceManager . getImageIcon ( STR_ ) ) ; putValue ( SHORT_DESCRIPTION , STR_ ) ; }
public static ToolOptions create ( ) { return new ToolOptions ( ) ; }
public static boolean deleteFiles ( String directoryPath ) { int filesDeletedCount = NUM_ ; List < String > files = fileList ( directoryPath , BOOL_ ) ; Iterator < String > filesIterator = files . iterator ( ) ; while ( filesIterator . hasNext ( ) ) { String file = filesIterator . next ( ) ; deleteFile ( file ) ; filesDeletedCount ++ ; } return ( filesDeletedCount > NUM_ ? BOOL_ : BOOL_ ) ; }
protected int hash ( Object key1 , Object key2 ) { int h = NUM_ ; if ( key1 != null ) { h ^= key1 . hashCode ( ) ; } if ( key2 != null ) { h ^= key2 . hashCode ( ) ; } h += ~ ( h << NUM_ ) ; h ^= ( h > > > NUM_ ) ; h += ( h << NUM_ ) ; h ^= ( h > > > NUM_ ) ; return h ; }
public FileStorageTransferServer ( RevenoClusterConfiguration config , FileSystemStorage storage ) { this . config = config ; this . storage = storage ; this . executor = Executors . newFixedThreadPool ( config . revenoDataSync ( ) . threadPoolSize ( ) , new NamedThreadFactory ( STR_ ) ) ; this . mainListener = Executors . newSingleThreadExecutor ( new NamedThreadFactory ( STR_ ) ) ; }
public Split ( final IPartitionMetadata pmd , final int fromIndex , final int toIndex ) { this . pmd = pmd ; if ( fromIndex < NUM_ ) throw new IllegalArgumentException ( STR_ + fromIndex ) ; if ( toIndex < fromIndex ) throw new IllegalArgumentException ( STR_ + fromIndex + STR_ + toIndex ) ; this . fromIndex = fromIndex ; this . toIndex = toIndex ; this . ntuples = toIndex - fromIndex ; }
private FileStreamTransformDirective findTransformTarget ( Set < SootMethod > methods ) { for ( SootMethod method : methods ) { String signature = method . getSignature ( ) ; for ( FileStreamTransformDirective directive : transformDirectives ) { if ( directive . sig . equals ( signature ) ) return directive ; } } return null ; }
public boolean isWin2003 ( ) { return System . getProperty ( STR_ ) . indexOf ( STR_ ) >= NUM_ ; }
public static < E > SynchronizedRichIterable < E > of ( RichIterable < E > iterable , Object lock ) { return new SynchronizedRichIterable < > ( iterable , lock ) ; }
private void zzDoEOF ( ) { if ( ! zzEOFDone ) { zzEOFDone = BOOL_ ; return ; } }
public boolean is18 ( ) { return BOOL_ ; }
int updateByPrimaryKeySelective ( Programmer record ) ;
private void advanceRunState ( int targetState ) { for ( ; ; ) { int c = ctl . get ( ) ; if ( runStateOf ( c ) >= targetState || ctl . compareAndSet ( c , ctlOf ( targetState , workerCountOf ( c ) ) ) ) break ; } }
static boolean newerRoboZonkyVersionExists ( final Future < VersionIdentifier > futureVersion ) { try { final VersionIdentifier version = futureVersion . get ( ) ; final String latestStable = version . getLatestStable ( ) ; final boolean hasNewerStable = VersionCheck . isCurrentVersionOlderThan ( latestStable ) ; if ( hasNewerStable ) { VersionChecker . LOGGER . info ( STR_ , latestStable ) ; return BOOL_ ; } final Optional < String > latestUnstable = version . getLatestUnstable ( ) ; final boolean hasNewerUnstable = latestUnstable . isPresent ( ) && VersionCheck . isCurrentVersionOlderThan ( latestUnstable . get ( ) ) ; if ( hasNewerUnstable ) { VersionChecker . LOGGER . info ( STR_ ) ; VersionChecker . LOGGER . info ( STR_ + STR_ , latestUnstable . get ( ) ) ; return BOOL_ ; } else { VersionChecker . LOGGER . info ( STR_ ) ; return BOOL_ ; } } catch ( final InterruptedException | ExecutionException ex ) { VersionChecker . LOGGER . trace ( STR_ , ex ) ; return BOOL_ ; } }
public static Vector2 scale ( Vector2 a , float b ) { return new Vector2 ( a . getX ( ) * b , a . getY ( ) * b ) ; }
public void unRegisterEvent ( Object object ) { if ( noParamMap . containsKey ( object ) ) { noParamMap . remove ( object ) ; } if ( hasParamMap . containsKey ( object ) ) { hasParamMap . remove ( object ) ; } }
public String [ ] indices ( ) { return indices ; }
public void addImage ( BufferedImage img , BufferedImage height , int x , int y ) { ChunkImage chunk = new ChunkImage ( ) ; chunk . image = img ; chunk . height_map = height ; chunk . x = x ; chunk . y = y ; synchronized ( chunks ) { chunks . add ( chunk ) ; } redrawChunk ( chunk ) ; }
public void addConfigured ( final ResourceCollection resources ) { compareTo . add ( resources ) ; }
public boolean requiresPostProcessing ( ) { return usesRelevance ( ) || usesSorting ( ) ; }
private void releaseMediaPlayer ( ) { if ( mMediaPlayer != null ) { mMediaPlayer . reset ( ) ; mMediaPlayer . release ( ) ; mMediaPlayer = null ; } }
private void drawCircle ( Canvas canvas , Paint paint , float x , float y ) { canvas . drawCircle ( x , y , size , paint ) ; }
protected abstract void caseArrayLoadStmt ( Local dest , ArrayRef src ) ;
public NTRUSigningParameters ( InputStream is ) throws IOException { DataInputStream dis = new DataInputStream ( is ) ; N = dis . readInt ( ) ; q = dis . readInt ( ) ; d = dis . readInt ( ) ; d1 = dis . readInt ( ) ; d2 = dis . readInt ( ) ; d3 = dis . readInt ( ) ; B = dis . readInt ( ) ; beta = dis . readDouble ( ) ; normBound = dis . readDouble ( ) ; signFailTolerance = dis . readInt ( ) ; bitsF = dis . readInt ( ) ; String alg = dis . readUTF ( ) ; if ( STR_ . equals ( alg ) ) { hashAlg = new SHA512Digest ( ) ; } else if ( STR_ . equals ( alg ) ) { hashAlg = new SHA256Digest ( ) ; } init ( ) ; }
public Simulation ( ) { this . camera = new Camera ( NUM_ , new Vector2 ( ) ) ; this . rays = new ArrayList < SandboxRay > ( ) ; this . world = new World ( ) ; this . world . setUserData ( DEFAULT_SIMULATION_NAME ) ; this . contactCounter = new ContactCounter ( ) ; this . world . addListener ( this . contactCounter ) ; }
protected byte postDecryption ( long position ) throws IOException { byte padding = NUM_ ; if ( cipherReset ) { resetCipher ( position ) ; padding = getPadding ( position ) ; inBuffer . position ( padding ) ; } return padding ; }
public boolean remove ( StateMachineInterceptor < S , E > interceptor ) { return interceptors . remove ( interceptor ) ; }
public PTQuery_Select Select ( String ... ks ) throws PTQueryException { return new PTQuery_Select ( this , ks ) ; }
public Heap ( E [ ] objects , Comparator < ? super E > comparator ) { this . comparator = comparator ; for ( int i = NUM_ ; i < objects . length ; i ++ ) { add ( objects [ i ] ) ; } }
public VideoReportQuery searchQuery ( String value ) { return unsafeParam ( STR_ , value ) ; }
public GenericEntry retrieveSettingsEntry ( String username , String setting ) throws IOException , ServiceException { URL singleUrl = buildSettingsUrl ( username , setting ) ; return getEntry ( singleUrl , GenericEntry . class ) ; }
public void onPageSelected ( int position ) ;
public SimpleConstant ( String name , double doubleValue , String annotation , boolean invisible ) { this ( name , doubleValue , annotation ) ; this . invisible = invisible ; }
public synchronized void removeObservedObject ( ObjectName object ) { if ( object == null ) return ; final ObservedObject o = getObservedObject ( object ) ; if ( o != null ) { observedObjects . remove ( o ) ; createAlreadyNotified ( ) ; } }
public static RealVariable newReal ( double lowerBound , double upperBound ) { return new RealVariable ( lowerBound , upperBound ) ; }
boolean allowTruncate ( String stream ) ;
private void updateValidationMessagesForBusinessTransactions ( Collection < BusinessTransactionDefinition > businessTransactions ) { for ( BusinessTransactionDefinition businessTxDefinition : businessTransactions ) { if ( isValid ( businessTxDefinition ) ) { hideMessage ( businessTxDefinition ) ; } else { showMessage ( businessTxDefinition , getValidationErrorStates ( businessTxDefinition ) ) ; } } }
public static < K , V > ImmutableMultimap < K , V > of ( K k1 , V v1 ) { return ImmutableListMultimap . of ( k1 , v1 ) ; }
public void updateReloadButtonState ( boolean isLoading ) ;
public GenericRecord convert ( HCatRecord hcatRecord , Schema avroSchema ) throws IOException { JsonNode json = serializer . getRecordAsJson ( hcatRecord ) ; GenericRecord avroRecord = convertRecord ( json , avroSchema ) ; return avroRecord ; }
public int appendData ( DataSource dataSource , int length , boolean allowEndOfInput ) throws IOException { length = prepareForAppend ( length ) ; int bytesAppended = dataSource . read ( lastAllocation . data , lastAllocation . translateOffset ( lastAllocationOffset ) , length ) ; if ( bytesAppended == C . RESULT_END_OF_INPUT ) { if ( allowEndOfInput ) { return C . RESULT_END_OF_INPUT ; } throw new EOFException ( ) ; } lastAllocationOffset += bytesAppended ; totalBytesWritten += bytesAppended ; return bytesAppended ; }
public ReadRequest ( int objectId ) { this ( null , new LwM2mPath ( objectId ) ) ; }
public void runTest ( ) throws Throwable { Document doc ; ProcessingInstruction pi ; boolean success ; doc = ( Document ) load ( STR_ , BOOL_ ) ; pi = doc . createProcessingInstruction ( STR_ , STR_ ) ; success = pi . isSupported ( STR_ , STR_ ) ; assertFalse ( STR_ , success ) ; }
String readNumber ( String source , int ofs , String token , boolean adjacent ) { if ( adjacent ) { return source . substring ( ofs , ofs + token . length ( ) ) ; } int len = source . length ( ) ; for ( int i = ofs ; i < len ; i ++ ) { char ch = source . charAt ( i ) ; if ( isNumeric ( ch ) == BOOL_ ) { if ( i == NUM_ ) { return null ; } return source . substring ( ofs , i ) ; } } return source . substring ( ofs ) ; }
public AbstractInsnNode [ ] toArray ( ) { int i = NUM_ ; AbstractInsnNode elem = first ; AbstractInsnNode [ ] insns = new AbstractInsnNode [ size ] ; while ( elem != null ) { insns [ i ] = elem ; elem . index = i ++ ; elem = elem . next ; } return insns ; }
public int intValue ( ) { return NUM_ ; }
public void readAll ( ) throws IOException { while ( read ( ) > NUM_ ) ; }
private void closeReader ( ) { if ( reader != null ) try { reader . close ( ) ; } catch ( IOException ioException ) { logger . error ( AVRO_LOADER_INSTANCE_READ_ERROR + STR_ , ioException ) ; throw new RuntimeException ( AVRO_LOADER_INSTANCE_READ_ERROR + STR_ + ioException ) ; } }
public void onEnter ( VirtualFrame frame ) { EventChainNode localChain = lazyUpdate ( frame ) ; if ( localChain != null ) { localChain . onEnter ( context , frame ) ; } }
public T scrolledBottom ( Object handler , String method ) { if ( view instanceof AbsListView ) { setScrollListener ( ) . forward ( handler , method , BOOL_ , ON_SCROLLED_STATE_SIG ) ; } return self ( ) ; }
private static boolean hasAlpha ( Image image ) { if ( image instanceof BufferedImage ) { BufferedImage bimage = ( BufferedImage ) image ; return bimage . getColorModel ( ) . hasAlpha ( ) ; } PixelGrabber pg = new PixelGrabber ( image , NUM_ , NUM_ , NUM_ , NUM_ , BOOL_ ) ; try { pg . grabPixels ( ) ; } catch ( InterruptedException e ) { } ColorModel cm = pg . getColorModel ( ) ; return cm . hasAlpha ( ) ; }
private void closeDataSourceTag ( ) { buffer . append ( STR_ ) ; }
public SabresQuery < T > whereLessThan ( String key , Object value ) { addWhere ( key , Where . lessThan ( key , SabresValue . create ( value ) ) ) ; return this ; }
private void verifyMarketingPermissions ( VOTechnicalService tp , List < String > orgIds , String userKey ) throws Exception { AccountService as = serviceFactory . getAccountService ( userKey , DEFAULT_PASSWORD ) ; List < VOOrganization > supps = as . getSuppliersForTechnicalService ( tp ) ; for ( VOOrganization supp : supps ) { assertTrue ( orgIds . contains ( supp . getOrganizationId ( ) ) ) ; } if ( orgIds == null || orgIds . isEmpty ( ) ) { assertTrue ( supps . isEmpty ( ) ) ; } }
public mxInteractiveCanvas createCanvas ( ) { return new mxInteractiveCanvas ( ) ; }
List < IEspDevice > __getOriginStaDeviceList ( ) ;
private void updateProgress ( int progress ) { if ( myHost != null && progress != previousProgress ) { myHost . updateProgress ( progress ) ; } previousProgress = progress ; }
public SelectionBuilder reset ( ) { mSelection . setLength ( NUM_ ) ; mSelectionArgs . clear ( ) ; return this ; }
abstract ImageCacheEntry createEntry ( int checksum , Object data , int width , int height , SVGGeneratorContext ctx ) throws SVGGraphics2DIOException ;
public DoubleVector timesEquals ( double s ) { for ( int i = NUM_ ; i < size ( ) ; i ++ ) { V [ i ] *= s ; } return this ; }
public static void createDirectories ( String dir ) { if ( dir != null ) { if ( exists ( dir ) ) { if ( ! isDirectory ( dir ) ) { createDirectory ( dir ) ; } } else { String parent = getParent ( dir ) ; createDirectories ( parent ) ; createDirectory ( dir ) ; } } }
public static SM_SYSTEM_MESSAGE STR_DUEL_PARTNER_TOO_FAR_FOR_START ( String value0 ) { return new SM_SYSTEM_MESSAGE ( NUM_ , value0 ) ; }
public void removeAt ( int index ) { System . arraycopy ( mKeys , index + NUM_ , mKeys , index , mSize - ( index + NUM_ ) ) ; System . arraycopy ( mValues , index + NUM_ , mValues , index , mSize - ( index + NUM_ ) ) ; -- mSize ; }
public void addResults ( AddOnChangesResult result ) { selectedAddOns . addAll ( result . getSelectedAddOns ( ) ) ; oldVersions . addAll ( result . oldVersions ) ; uninstalls . addAll ( result . getUninstalls ( ) ) ; newVersions . addAll ( result . getNewVersions ( ) ) ; installs . addAll ( result . getInstalls ( ) ) ; optionalAddOns . addAll ( result . getOptionalAddOns ( ) ) ; unloadExtensions . addAll ( result . getUnloadExtensions ( ) ) ; softUnloadExtensions . addAll ( result . getSoftUnloadExtensions ( ) ) ; }
public void removeDragListener ( DragListener l ) { mListeners . remove ( l ) ; }
public String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; while ( this . hasNext ( ) ) { sb . append ( ( char ) nextByte ( ) ) ; } return sb . toString ( ) ; }
private boolean checkClassNameUnique ( PojoDescriptor pojo , String newVal , boolean key ) { for ( PojoDescriptor otherPojo : pojos ) if ( pojo != otherPojo ) { String otherKeyCls = otherPojo . keyClassName ( ) ; String otherValCls = otherPojo . valueClassName ( ) ; if ( newVal . equals ( otherKeyCls ) || newVal . equals ( otherValCls ) ) { MessageBox . warningDialog ( owner , ( key ? STR_ : STR_ ) + STR_ ) ; return BOOL_ ; } } return BOOL_ ; }
public static void addElectrolyticSeparatorRecipe ( FluidStack fluid , double energy , GasStack leftOutput , GasStack rightOutput ) { addRecipe ( Recipe . ELECTROLYTIC_SEPARATOR , new SeparatorRecipe ( fluid , energy , leftOutput , rightOutput ) ) ; }
public Foo findByUuid_Last ( java . lang . String uuid , com . liferay . portal . kernel . util . OrderByComparator < Foo > orderByComparator ) throws NoSuchFooException ;
public void sendHeartBeatEvent ( LicenseInfoExt licenseInfo , MediaType mediaType ) { if ( licenseInfo . isTrialLicense ( ) ) { _log . info ( STR_ , licenseInfo . getLicenseType ( ) . toString ( ) ) ; return ; } licenseInfo . setLastHeartbeatEventDate ( formatCurrentDate ( ) ) ; _log . info ( STR_ , licenseInfo . getLicenseType ( ) . toString ( ) ) ; _licenseManager . updateCoordinatorWithLicenseInfo ( licenseInfo ) ; _log . info ( STR_ , licenseInfo . getLicenseType ( ) ) ; SendHeartbeatEvent sendHeartbeatEvent = new SendHeartbeatEvent ( serviceInfo , logSvcPropertiesLoader , mediaType , licenseInfo , coordinator ) ; sendHeartbeatEvent . callEMCHome ( ) ; }
public static void registerReceiver ( Context context , BroadcastReceiver receiver , String ... actions ) { IntentFilter filter = new IntentFilter ( ) ; for ( String action : actions ) filter . addAction ( action ) ; LocalBroadcastManager . getInstance ( context ) . registerReceiver ( receiver , filter ) ; }
public void testLineWithLink ( ) throws Exception { final LinkInTrace linkInTrace = new PyTracebackParser ( ) . findLinkInTrace ( STR_ ) ; Assert . assertNotNull ( STR_ , linkInTrace ) ; Assert . assertEquals ( STR_ , STR_ , linkInTrace . getFileName ( ) ) ; Assert . assertEquals ( STR_ , NUM_ , linkInTrace . getLineNumber ( ) ) ; Assert . assertEquals ( STR_ , NUM_ , linkInTrace . getStartPos ( ) ) ; Assert . assertEquals ( STR_ , NUM_ , linkInTrace . getEndPos ( ) ) ; }
public Exchange ( String peerAddress , InputStream in , OutputStream out , boolean asInitiator , FriendStore friendStore , MessageStore messageStore , ExchangeCallback callback ) throws IllegalArgumentException { this . peerAddress = peerAddress ; this . in = in ; this . out = out ; this . friendStore = friendStore ; this . messageStore = messageStore ; this . asInitiator = asInitiator ; this . callback = callback ; if ( in == null ) { throw new IllegalArgumentException ( STR_ ) ; } if ( out == null ) { throw new IllegalArgumentException ( STR_ ) ; } if ( friendStore == null ) { throw new IllegalArgumentException ( STR_ ) ; } if ( messageStore == null ) { throw new IllegalArgumentException ( STR_ ) ; } if ( callback == null ) { log . warn ( STR_ ) ; throw new IllegalArgumentException ( STR_ ) ; } }
public void init ( boolean forEncryption , CipherParameters params ) { if ( params instanceof KeyParameter ) { WorkingKey = generateWorkingKey ( ( ( KeyParameter ) params ) . getKey ( ) , forEncryption ) ; this . forEncryption = forEncryption ; return ; } throw new IllegalArgumentException ( STR_ + params . getClass ( ) . getName ( ) ) ; }
private void showFeedback ( String message ) { if ( myHost != null ) { myHost . showFeedback ( message ) ; } else { System . out . println ( message ) ; } }
public boolean supportsCatalogsInPrivilegeDefinitions ( ) throws SQLException ;
public VcfRecord removeSamples ( ) { mNumSamples = NUM_ ; mFormatAndSample . clear ( ) ; return this ; }
private void addUnbuffered ( T elem ) { unbufferedElements . add ( elem ) ; if ( unbufferedElements . size ( ) == bufferSize ) { Collections . sort ( unbufferedElements , compareFn ) ; buffers . add ( new QuantileBuffer < T > ( unbufferedElements ) ) ; unbufferedElements = Lists . newArrayListWithCapacity ( bufferSize ) ; collapseIfNeeded ( ) ; } }
public Object runSafely ( Catbert . FastStack stack ) throws Exception { Show s = getShow ( stack ) ; return ( s == null ) ? STR_ : s . getEpisodeName ( ) ; }
public static SearchPattern createOrPattern ( SearchPattern leftPattern , SearchPattern rightPattern ) { return new OrPattern ( leftPattern , rightPattern ) ; }
public Cursor select ( SQLiteDatabase db , String ... columns ) { return db . query ( mTable . name , columns , mCondition , mArgs , mGroupBy , null , mOrderBy , null ) ; }
public StoryObject ( int id ) { this . id = id ; }
private static boolean CallStaticBooleanMethodV ( JNIEnvironment env , int classJREF , int methodID , Address argAddress ) throws Exception { if ( traceJNI ) VM . sysWrite ( STR_ ) ; RuntimeEntrypoints . checkJNICountDownToGC ( ) ; try { Object returnObj = JNIHelpers . invokeWithVarArg ( methodID , argAddress , TypeReference . Boolean ) ; return Reflection . unwrapBoolean ( returnObj ) ; } catch ( Throwable unexpected ) { if ( traceJNI ) unexpected . printStackTrace ( System . err ) ; env . recordException ( unexpected ) ; return BOOL_ ; } }
public native void shouldDragScroll ( ) ;
public Object runSafely ( Catbert . FastStack stack ) throws Exception { sage . plugin . PluginWrapper pluggy = getPlugin ( stack ) ; if ( pluggy != null ) return pluggy . getWebpages ( ) ; return null ; }
public ObjectWithDynamicAttributes copy ( ) { ObjectWithDynamicAttributes copy = null ; try { copy = getClass ( ) . newInstance ( ) ; copy . attributes . putAll ( attributes ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return copy ; }
public MessagesGetHistoryAttachmentsQuery photoSizes ( Boolean value ) { return unsafeParam ( STR_ , value ) ; }
private void updateProgress ( int progress ) { if ( myHost != null && progress != previousProgress ) { myHost . updateProgress ( progress ) ; } previousProgress = progress ; }
public static String checkNull ( String string1 , String string2 ) { if ( string1 != null ) return string1 ; else if ( string2 != null ) return string2 ; else return STR_ ; }
public E singleResult ( ) throws QueryEvaluationException { try { E next = next ( ) ; if ( next == null ) { throw new NoResultException ( STR_ ) ; } if ( next ( ) != null ) { throw new MultipleResultException ( STR_ ) ; } return next ; } finally { close ( ) ; } }
boolean isDefaultIn ( int configVersion ) { return defaultVersionRange . contains ( configVersion ) ; }
public < T > T reverse ( T t ) { return t ; }
public static void main ( String ... a ) throws Exception { TestBase . createCaller ( ) . init ( ) . test ( ) ; }
public HttpRequest receive ( final OutputStream output ) throws HttpRequestException { try { return copy ( buffer ( ) , output ) ; } catch ( IOException e ) { throw new HttpRequestException ( e ) ; } }
static public MotionEvent obtain ( long downTime , long eventTime , int action , int pointerCount , PointerProperties [ ] pointerProperties , PointerCoords [ ] pointerCoords , int metaState , int buttonState , float xPrecision , float yPrecision , int deviceId , int edgeFlags , int source , int flags ) { MotionEvent ev = obtain ( ) ; ev . mNativePtr = nativeInitialize ( ev . mNativePtr , deviceId , source , action , flags , edgeFlags , metaState , buttonState , NUM_ , NUM_ , xPrecision , yPrecision , downTime * NS_PER_MS , eventTime * NS_PER_MS , pointerCount , pointerProperties , pointerCoords ) ; return ev ; }
public void addResourceTypeUuid ( final String resourceTypeUuid ) { this . resourceTypeUuids . add ( resourceTypeUuid ) ; }
public void deleteAllGooglePlayMusicSongs ( ) { String where = SONG_SOURCE + STR_ + STR_ ; getDatabase ( ) . delete ( MUSIC_LIBRARY_TABLE , where , null ) ; }
public void next ( ) ;
public int nextObjectId ( ) { return objectId ++ ; }
protected String internalPut ( String key , String newValue ) { synchronized ( childAndPropertyLock ) { String oldValue = properties . get ( key ) ; if ( oldValue != null && oldValue . equals ( newValue ) ) return oldValue ; properties = properties . put ( key , newValue ) ; return oldValue ; } }
public static boolean isStringNumeric ( String str ) { DecimalFormatSymbols currentLocaleSymbols = DecimalFormatSymbols . getInstance ( ) ; char localeMinusSign = currentLocaleSymbols . getMinusSign ( ) ; if ( ! Character . isDigit ( str . charAt ( NUM_ ) ) && str . charAt ( NUM_ ) != localeMinusSign ) return BOOL_ ; boolean isDecimalSeparatorFound = BOOL_ ; char localeDecimalSeparator = currentLocaleSymbols . getDecimalSeparator ( ) ; for ( char c : str . substring ( NUM_ ) . toCharArray ( ) ) { if ( ! Character . isDigit ( c ) ) { if ( c == localeDecimalSeparator && ! isDecimalSeparatorFound ) { isDecimalSeparatorFound = BOOL_ ; continue ; } return BOOL_ ; } } return BOOL_ ; }
public java . lang . Object newInstance ( java . lang . Class javaContentInterface ) throws javax . xml . bind . JAXBException { return super . newInstance ( javaContentInterface ) ; }
public LengthConstraint ( int length , String errorMessage ) { this . length = length ; this . errorMessage = errorMessage ; }
void unmarkStreamAsUsed ( Transaction t , long streamId , byte [ ] reference ) ;
void deleteServiceInstanceBinding ( DeleteServiceInstanceBindingRequest request ) ;
protected boolean updateReplacementString ( Document document , char trigger , int offset , ImportRewrite impRewrite ) throws CoreException , BadLocationException { if ( impRewrite != null && fFullyQualifiedTypeName != null ) { String replacementString = getReplacementString ( ) ; String qualifiedType = fFullyQualifiedTypeName ; if ( qualifiedType . indexOf ( STR_ ) != - NUM_ && replacementString . startsWith ( qualifiedType ) && ! replacementString . endsWith ( String . valueOf ( STR_ ) ) ) { List < AbstractTypeDeclaration > types = fInvocationContext . getCompilationUnit ( ) . types ( ) ; if ( types . size ( ) > NUM_ && types . get ( NUM_ ) . getStartPosition ( ) <= offset ) { setReplacementString ( impRewrite . addImport ( getReplacementString ( ) ) ) ; return BOOL_ ; } } } return BOOL_ ; }
private void respondWithHierarchyDelimiter ( Responder responder , char delimiter ) { final LSubResponse response = new LSubResponse ( STR_ , BOOL_ , delimiter ) ; responder . respond ( response ) ; }
public String sampleSizeTipText ( ) { return STR_ ; }
public static void unregisterAll ( ) { synchronized ( allLists ) { for ( HandlerList h : allLists ) { synchronized ( h ) { for ( List < RegisteredListener > list : h . handlerslots . values ( ) ) { list . clear ( ) ; } h . handlers = null ; } } } }
public ResourceResponse update ( final Context context , Request request , String resourceId , String rev , JsonValue oldValue , JsonValue newValue , Set < JsonPointer > relationshipFields , Set < JsonPointer > alreadyPersistedRelationshipFields ) throws ResourceException ;
public < T > void addProperty ( PropertyDefinition < T > pd , Collection < T > defaultValues , Collection < T > activeValues ) { MyProperty < T > p = new MyProperty < > ( pd , defaultValues , activeValues ) ; properties . put ( pd , p ) ; }
public void clearHeader ( ) ;
private boolean validateUsername ( String username ) { int colon = username . indexOf ( STR_ ) ; if ( ( username . length ( ) < NUM_ ) || ( colon < NUM_ ) ) { if ( logger . isLoggable ( Level . FINE ) ) { logger . log ( Level . FINE , STR_ + STR_ ) ; } return BOOL_ ; } String lfrag = username . substring ( NUM_ , colon ) ; return getCredentialsManager ( ) . checkLocalUserName ( lfrag ) ; }
public native Boolean mouseMove ( ) ;
public long append ( Entry entry ) { Assert . notNull ( entry , STR_ ) ; assertIsOpen ( ) ; checkRoll ( ) ; long index = segments . currentSegment ( ) . append ( entry ) ; entryBuffer . append ( entry ) ; return index ; }
public void deleteUnidadDocumental ( String id ) ;
public static char [ ] [ ] loadImage ( File file ) throws FileNotFoundException , RuntimeException { ArrayList < String > rows = BooleanImageLoad . loadImage ( file ) ; String s = rows . get ( NUM_ ) ; char [ ] [ ] img = new char [ rows . size ( ) ] [ s . length ( ) ] ; for ( int i = NUM_ ; i < rows . size ( ) ; i ++ ) { s = rows . get ( i ) ; for ( int j = NUM_ ; j < s . length ( ) ; j ++ ) { img [ i ] [ j ] = s . charAt ( j ) ; } } return img ; }
public CompressionResponseStream ( CompressionServletResponseWrapper responseWrapper , ServletOutputStream originalOutput ) { super ( ) ; closed = BOOL_ ; this . response = responseWrapper ; this . output = originalOutput ; }
public void update ( ColourMapData newData ) { this . label = newData . label ; setColour ( newData . getColourExpression ( ) ) ; setOpacity ( newData . getOpacity ( ) ) ; setQuantity ( newData . getQuantity ( ) ) ; }
protected final void assertLogThrowableMessageContains ( String needle ) { LoggingEvent hit = null ; Iterator < LoggingEvent > iter = loggedEvents . iterator ( ) ; while ( hit == null && iter . hasNext ( ) ) { LoggingEvent event = iter . next ( ) ; if ( event . getThrowableInformation ( ) . getThrowable ( ) . toString ( ) . contains ( needle ) ) { hit = event ; } } assertNotNull ( STR_ + needle + STR_ , hit ) ; assertTrue ( STR_ + needle + STR_ , loggedEvents . remove ( hit ) ) ; }
static void accumMultiSeg ( int counts [ ] , SortedSetDocValues si , DocIdSetIterator disi , int subIndex , OrdinalMap map ) throws IOException { final int segCounts [ ] ; if ( map == null ) { segCounts = counts ; } else { segCounts = new int [ NUM_ + ( int ) si . getValueCount ( ) ] ; } int doc ; while ( ( doc = disi . nextDoc ( ) ) != DocIdSetIterator . NO_MORE_DOCS ) { if ( si . advanceExact ( doc ) ) { int term = ( int ) si . nextOrd ( ) ; do { segCounts [ NUM_ + term ] ++ ; } while ( ( term = ( int ) si . nextOrd ( ) ) >= NUM_ ) ; } else { counts [ NUM_ ] ++ ; } } if ( map != null ) { migrateGlobal ( counts , segCounts , subIndex , map ) ; } }
public default NBTTagCompound writeToNBT ( NBTTagCompound nbt ) { nbt . setString ( STR_ , this . getName ( ) ) ; return nbt ; }
void exerciseClassDefinition ( ) throws Exception { BatchEnvironment env = new BatchEnvironment ( System . out , BatchEnvironment . createClassPath ( testClassPath , null , null ) , null ) ; try { ClassDeclaration decl = env . getClassDeclaration ( Identifier . lookup ( testClassName ) ) ; decl . getClassDefinition ( env ) ; } finally { env . flushErrors ( ) ; env . shutdown ( ) ; } }
private void exportOsgiService ( Ignite ignite ) { Dictionary < String , String > dict = new Hashtable < > ( ) ; if ( ignite . name ( ) != null ) dict . put ( OSGI_SERVICE_PROP_IGNITE_NAME , ignite . name ( ) ) ; bundleCtx . registerService ( Ignite . class , ignite , dict ) ; if ( log . isInfoEnabled ( ) ) log . info ( STR_ + dict ) ; }
private int cMethod ( ) { int count = NUM_ ; for ( int ii = NUM_ ; ii < NUM_ ; ii ++ ) { count += ii ; } return count ; }
protected String [ ] formatRow ( AbstractMatrix1D vector ) { Former formatter = null ; formatter = factory . create ( format ) ; int s = vector . size ( ) ; String [ ] strings = new String [ s ] ; for ( int i = NUM_ ; i < s ; i ++ ) { strings [ i ] = form ( vector , i , formatter ) ; } return strings ; }
public void testIntValueNegative3 ( ) { byte aBytes [ ] = { NUM_ , NUM_ , NUM_ , - NUM_ , - NUM_ , NUM_ , NUM_ , NUM_ , NUM_ } ; int sign = - NUM_ ; int resInt = - NUM_ ; int aNumber = new BigInteger ( sign , aBytes ) . intValue ( ) ; assertTrue ( aNumber == resInt ) ; }
public boolean hasChildElements ( ) { return ! isPrimitive ( ) && ( type != null && ! type . fields . isEmpty ( ) ) ; }
public Object runSafely ( Catbert . FastStack stack ) throws Exception { String name = getString ( stack ) ; if ( Permissions . hasPermission ( Permissions . PERMISSION_PLAYLIST , stack . getUIMgr ( ) ) ) { Playlist rv = Wizard . getInstance ( ) . addPlaylist ( name ) ; sage . plugin . PluginEventManager . postEvent ( sage . plugin . PluginEventManager . PLAYLIST_ADDED , new Object [ ] { sage . plugin . PluginEventManager . VAR_PLAYLIST , rv , sage . plugin . PluginEventManager . VAR_UICONTEXT , ( stack . getUIMgr ( ) != null ? stack . getUIMgr ( ) . getLocalUIClientName ( ) : null ) } ) ; return rv ; } else return null ; }
public static IntList dincrList ( IntList L , int x ) { return L ; }
public void disposeWhenFinished ( ) { synchronized ( mAsyncInProgressLock ) { if ( mAsyncInProgress ) { logDebug ( STR_ ) ; mDisposeAfterAsync = BOOL_ ; } else { try { dispose ( ) ; } catch ( IabAsyncInProgressException e ) { } } } }
void addUsedRec ( RuleRec rec ) { if ( usedRuleRecs == null ) { usedRuleRecs = new ArrayList < RuleRec > ( ) ; } int n = usedRuleRecs . size ( ) ; for ( int i = NUM_ ; i < n ; i ++ ) { if ( usedRuleRecs . get ( i ) . equals ( rec ) ) { return ; } } usedRuleRecs . add ( rec ) ; }
long qualityChecksum ( ) ;
private void stop ( ) { StendhalRPZone zone = StendhalRPWorld . get ( ) . getZone ( ZONE_NAME ) ; System . getProperties ( ) . remove ( STR_ ) ; Portal portal = new Portal ( ) ; portal . setPosition ( NUM_ , NUM_ ) ; portal . setDestination ( STR_ , STR_ ) ; zone . add ( portal ) ; zone . remove ( NPCList . get ( ) . get ( STR_ ) ) ; }
public PolynomialGF2mSmallM mod ( PolynomialGF2mSmallM f ) { int [ ] resultCoeff = mod ( coefficients , f . coefficients ) ; return new PolynomialGF2mSmallM ( field , resultCoeff ) ; }
private Substitution < ReferenceType > selectSubstitution ( List < TypeVariable > typeParameters ) { Substitution < ReferenceType > substitution = new Substitution < > ( ) ; return selectSubstitution ( typeParameters , substitution ) ; }
protected void onPostExecute ( Uri imagePath ) { UiUtils . setActivityResult ( DownloadImageActivity . this , imagePath , STR_ ) ; DownloadImageActivity . this . finish ( ) ; }
private boolean initIfNecessary ( ) { if ( ourDeviceManager == null ) { if ( mySdkPath == null ) { IJ_LOG . error ( STR_ ) ; return BOOL_ ; } ourDeviceManager = DeviceManager . createInstance ( mySdkPath , SDK_LOG ) ; } return BOOL_ ; }
boolean matchesOverlap ( PfamHmmer3RawMatch one , PfamHmmer3RawMatch two ) { return ! ( ( one . getLocationStart ( ) > two . getLocationEnd ( ) ) || ( two . getLocationStart ( ) > one . getLocationEnd ( ) ) ) ; }
private static boolean sourceEquals ( SemanticNode node , SymbolNode symbol ) { if ( node == symbol ) { return BOOL_ ; } if ( ( ( node instanceof OpDefNode ) && ( ( OpDefNode ) node ) . getSource ( ) == symbol ) ) { return BOOL_ ; } if ( ( node instanceof ThmOrAssumpDefNode ) && ( ( ThmOrAssumpDefNode ) node ) . getSource ( ) == symbol ) { return BOOL_ ; } return BOOL_ ; }
public XObject operate ( XObject left , XObject right ) throws javax . xml . transform . TransformerException { return new XNumber ( left . num ( ) + right . num ( ) ) ; }
private Chronology selectChronology ( Chronology chrono ) { chrono = DateTimeUtils . getChronology ( chrono ) ; if ( iChrono != null ) { chrono = iChrono ; } if ( iZone != null ) { chrono = chrono . withZone ( iZone ) ; } return chrono ; }
public WalletAppKit connectToLocalHost ( ) { try { final InetAddress localHost = InetAddress . getLocalHost ( ) ; return setPeerNodes ( new PeerAddress ( params , localHost , params . getPort ( ) ) ) ; } catch ( UnknownHostException e ) { throw new RuntimeException ( e ) ; } }
public boolean reset ( ) { if ( state == S_READY ) { return BOOL_ ; } state = S_READY ; result = null ; error = null ; return BOOL_ ; }
public boolean checkIff ( String flag1 , String flag2 ) { if ( isSet ( flag1 ) != isSet ( flag2 ) ) { setParseMessage ( STR_ + LONG_FLAG_PREFIX + flag1 + STR_ + LONG_FLAG_PREFIX + flag2 + STR_ ) ; return BOOL_ ; } return BOOL_ ; }
public static void runClassifier ( MultiLabelClassifier h , String args [ ] ) { if ( h instanceof UpdateableClassifier ) { try { IncrementalEvaluation . runExperiment ( h , args ) ; } catch ( Exception e ) { System . err . println ( STR_ + e ) ; IncrementalEvaluation . printOptions ( h . listOptions ( ) ) ; } } else { try { Evaluation . runExperiment ( h , args ) ; } catch ( Exception e ) { System . err . println ( STR_ + e ) ; Evaluation . printOptions ( h . listOptions ( ) ) ; } } }
void run ( ) ;
public Object clone ( ) throws CloneNotSupportedException { MyXYBlockRenderer clone = ( MyXYBlockRenderer ) super . clone ( ) ; if ( this . paintScale instanceof PublicCloneable ) { PublicCloneable pc = ( PublicCloneable ) this . paintScale ; clone . paintScale = ( PaintScale ) pc . clone ( ) ; } return clone ; }
public void onIabSetupFinished ( IabResult result ) ;
public static double xlogx ( int c ) { if ( c == NUM_ ) { return NUM_ ; } return c * Utils . log2 ( ( double ) c ) ; }
public CipherFrameHeaders ( final int sequenceNumber , final byte [ ] nonce , final int frameContentLen , final boolean isFinal ) { sequenceNumber_ = sequenceNumber ; if ( nonce == null ) { throw new AwsCryptoException ( STR_ ) ; } if ( nonce . length > Constants . MAX_NONCE_LENGTH ) { throw new AwsCryptoException ( STR_ ) ; } nonce_ = nonce . clone ( ) ; isFinalFrame_ = isFinal ; frameContentLength_ = frameContentLen ; }
void onConsumeMultiFinished ( List < Purchase > purchases , List < IabResult > results ) ;
public MediaSize ( float x , float y , int units , MediaSizeName media ) { super ( x , y , units ) ; if ( x > y ) { throw new IllegalArgumentException ( STR_ ) ; } if ( media != null && mediaMap . get ( media ) == null ) { mediaName = media ; mediaMap . put ( mediaName , this ) ; } sizeVector . add ( this ) ; }
public boolean isAdjacent ( MonotoneVertex < E > vertex ) { return vertex == this . previous || vertex == this . next ; }
public double pointToLineDistance ( Entry startEntry , Entry endEntry , Entry entryPoint ) { double normalLength = Math . sqrt ( ( endEntry . getXIndex ( ) - startEntry . getXIndex ( ) ) * ( endEntry . getXIndex ( ) - startEntry . getXIndex ( ) ) + ( endEntry . getVal ( ) - startEntry . getVal ( ) ) * ( endEntry . getVal ( ) - startEntry . getVal ( ) ) ) ; return Math . abs ( ( entryPoint . getXIndex ( ) - startEntry . getXIndex ( ) ) * ( endEntry . getVal ( ) - startEntry . getVal ( ) ) - ( entryPoint . getVal ( ) - startEntry . getVal ( ) ) * ( endEntry . getXIndex ( ) - startEntry . getXIndex ( ) ) ) / normalLength ; }
public UpdateResponse deleteById ( String id ) throws SolrServerException , IOException { return deleteById ( id , - NUM_ ) ; }
public void showEmpty ( Drawable emptyImageDrawable , String emptyTextTitle , String emptyTextContent , List < Integer > skipIds ) { switchState ( EMPTY , emptyImageDrawable , emptyTextTitle , emptyTextContent , null , null , skipIds ) ; }
protected UsersGetFollowersQueryWithFields fields ( List < UserField > value ) { return unsafeParam ( STR_ , value ) ; }
public boolean isWaitingForLocation ( ) { if ( activeProvider != null ) { return activeProvider . isWaiting ( ) ; } else { return BOOL_ ; } }
public AcelaMessage ( String m ) { super ( m ) ; }
public S2LatLngRect union ( S2LatLngRect other ) { return new S2LatLngRect ( lat . union ( other . lat ) , lng . union ( other . lng ) ) ; }
public String toString ( ) { return value ; }
protected void nothingSelected ( ) { }
public boolean isOrthogonalTo ( IntVector v ) { return dotProduct ( v ) == NUM_ ; }
public void disconnect ( ) { delegate . disconnect ( ) ; }
public void flush ( ) throws IOException ;
public void registerOrientationListener ( OrientationListener listener ) { this . orientationListener = listener ; this . orientationDetector = new OrientationDetector ( ) ; }
public static _Fields findByName ( String name ) { return byName . get ( name ) ; }
boolean parseBoolean ( ) ;
public String createFolder ( String title , String parentFolderId ) throws IOException { return drive . files ( ) . insert ( createFileReference ( title , GOOGLE_FOLDER , parentFolderId ) ) . execute ( ) . getId ( ) ; }
private void showFeedback ( String message ) { if ( myHost != null ) { myHost . showFeedback ( message ) ; } else { System . out . println ( message ) ; } }
public void init ( boolean forEncryption , CipherParameters param ) { if ( param instanceof ParametersWithRandom ) { ParametersWithRandom rParam = ( ParametersWithRandom ) param ; key = ( RSAKeyParameters ) rParam . getParameters ( ) ; } else { key = ( RSAKeyParameters ) param ; } this . forEncryption = forEncryption ; }
public void testNegateNegative ( ) { String a = STR_ ; int aScale = NUM_ ; String c = STR_ ; int cScale = NUM_ ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) , aScale ) ; BigDecimal cNumber = new BigDecimal ( new BigInteger ( c ) , cScale ) ; assertEquals ( STR_ , cNumber , aNumber . negate ( ) ) ; }
public void encode ( OutputStream out ) throws IOException { DerOutputStream tmp = new DerOutputStream ( ) ; if ( extensionValue == null ) { extensionId = PKIXExtensions . PolicyConstraints_Id ; critical = BOOL_ ; encodeThis ( ) ; } super . encode ( tmp ) ; out . write ( tmp . toByteArray ( ) ) ; }
public static < V > boolean addDistinctEntry ( List < V > sourceList , V entry ) { return ( sourceList != null && ! sourceList . contains ( entry ) ) ? sourceList . add ( entry ) : BOOL_ ; }
public ALMA2K ( KernelTrick kernel , double alpha ) { setKernelTrick ( kernel ) ; setAlpha ( alpha ) ; }
public String lastActionMsg ( ) { if ( m_undoStack . size ( ) == NUM_ ) { return STR_ ; } return m_undoStack . get ( m_undoStack . size ( ) - NUM_ ) . getRedoMsg ( ) ; }
GroupCraftingRecipeBuilder addSemiShapedRecipe ( UnaryOperator < SemiShapedCraftingRecipeBuilder > recipe ) ;
public ScrollPanePainter ( Which state ) { super ( ) ; this . state = state ; this . ctx = new PaintContext ( CacheMode . FIXED_SIZES ) ; }
public void cdsect ( char [ ] buff , int offset , int length ) throws SAXException ;
private Process createProcess ( final File sourceFile ) throws IOException { notNull ( sourceFile ) ; final String [ ] commandLine = getCommandLine ( sourceFile . getPath ( ) ) ; LOG . debug ( STR_ , Arrays . asList ( commandLine ) ) ; return new ProcessBuilder ( commandLine ) . redirectErrorStream ( BOOL_ ) . start ( ) ; }
public Boolean createStock ( EntityManager em , String productId ) { Boolean status = BOOL_ ; Stock stock = null ; try { if ( ! em . getTransaction ( ) . isActive ( ) ) { em . getTransaction ( ) . begin ( ) ; } stock = new Stock ( ) ; stock . setProductId ( productId ) ; stock . setQuantity ( BigDecimal . valueOf ( NUM_ ) ) ; stock . setLotSize ( BigDecimal . valueOf ( NUM_ ) ) ; stock . setMinStock ( BigDecimal . valueOf ( NUM_ ) ) ; em . persist ( stock ) ; em . getTransaction ( ) . commit ( ) ; } catch ( Exception e ) { status = BOOL_ ; logger . error ( STR_ + e ) ; } return status ; }
public boolean appliesOnlyToBlockScopedElements ( ) { return BOOL_ ; }
private void rebuildPattern ( Graph graph ) { SearchGraphUtils . basicPattern ( graph , BOOL_ ) ; addRequiredEdges ( graph ) ; pdagWithBk ( graph , getKnowledge ( ) ) ; TetradLogger . getInstance ( ) . log ( STR_ , STR_ + graph ) ; }
static UnixStream < String > ls ( ) throws IOException { return ls ( Paths . get ( STR_ ) . toFile ( ) . getAbsolutePath ( ) ) ; }
private void readObject ( ObjectInputStream s ) throws InvalidObjectException { throw new InvalidObjectException ( STR_ ) ; }
protected void executeRuntimeProgram ( ) { try { runtimeProgram . execute ( executionContext ) ; } catch ( DMLRuntimeException e ) { throw new MLContextException ( STR_ , e ) ; } }
public ConcurrentHashMap ( ) { this ( DEFAULT_INITIAL_CAPACITY , DEFAULT_LOAD_FACTOR , DEFAULT_CONCURRENCY_LEVEL ) ; }
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( elementretrievetagname . class , args ) ; }
private PerfResult testPerformance ( String environmentName , TestEnvironment cloudStoreEnvironment , CloudStoreConstraintChecker checker , int numThreads , List < HostService . State > hosts ) throws Throwable { PerfResult perfResult = new PerfResult ( ) ; perfResult . numHosts = PERF_NUM_HOSTS ; perfResult . numDatastores = PERF_NUM_DATASTORES ; perfResult . numThreads = numThreads ; perfResult . throughputNoConstraint = testPerformanceNoConstraint ( environmentName , checker , numThreads ) ; perfResult . throughputDatastoreConstraint = testPerformanceDatastoreConstraint ( environmentName , checker , numThreads , hosts ) ; perfResult . throughputComplexConstraint = testPerformanceComplexConstraint ( environmentName , checker , numThreads , hosts ) ; return perfResult ; }
public void clear ( ) { fullyLock ( ) ; try { for ( Node < E > p , h = head ; ( p = h . next ) != null ; h = p ) { h . next = h ; p . item = null ; } head = last ; if ( count . getAndSet ( NUM_ ) == capacity ) notFull . signal ( ) ; } finally { fullyUnlock ( ) ; } }
public long timeSinceLast ( ) { long currentTime = System . currentTimeMillis ( ) ; return currentTime - lastMessageTime ; }
public OptionsBean obtenerTiposInformesCombo ( Entidad entidad ) throws RPAdminException { MultiEntityContextHolder . setEntity ( entidad . getIdentificador ( ) ) ; OptionsBean options = new OptionsBean ( ) ; ResourceBundle rs = ResourceBundle . getBundle ( STR_ ) ; Enumeration keys = rs . getKeys ( ) ; while ( keys . hasMoreElements ( ) ) { OptionBean option = new OptionBean ( ) ; String key = keys . nextElement ( ) . toString ( ) ; String value = rs . getString ( key ) ; option . setCodigo ( key ) ; option . setDescripcion ( value ) ; options . add ( option ) ; } return options ; }
abstract void pushLayerUpdate ( HardwareLayer layer ) ;
boolean isEmptyWriteSet ( ) ;
public static String substringBetween ( String str , String open , String close ) { if ( str != null && open != null && close != null ) { int start = str . indexOf ( open ) ; if ( start != - NUM_ ) { int end = str . indexOf ( close , start + open . length ( ) ) ; if ( end != - NUM_ ) { return str . substring ( start + open . length ( ) , end ) ; } } return null ; } else { return null ; } }
private void skipToEndOfLine ( ) { for ( ; pos < in . length ( ) ; pos ++ ) { char c = in . charAt ( pos ) ; if ( c == STR_ || c == STR_ ) { pos ++ ; break ; } } }
char proceed ( ) throws Exception ;
protected void greedyMatch ( ) { for ( int w = NUM_ ; w < dim ; w ++ ) { for ( int j = NUM_ ; j < dim ; j ++ ) { if ( matchJobByWorker [ w ] == - NUM_ && matchWorkerByJob [ j ] == - NUM_ && costMatrix [ w ] [ j ] - labelByWorker [ w ] - labelByJob [ j ] == NUM_ ) { match ( w , j ) ; } } } }
public void unFavorite ( String topicId , String access_token , Callback < Status > callback ) { topicApi = getRetrofitForSimpleJson ( ) . create ( TopicApi . class ) ; topicApi . unFavorite ( topicId , access_token ) . enqueue ( callback ) ; }
void addSubregion ( String name , RegionCreation region ) throws RegionExistsException { if ( this . subregions . containsKey ( name ) ) { RegionCreation existing = ( RegionCreation ) this . subregions . get ( name ) ; throw new RegionExistsException ( existing ) ; } else { this . subregions . put ( name , region ) ; } }
public static void wrapError ( PsiBuilder builder , String msg ) { Marker marker = builder . mark ( ) ; builder . advanceLexer ( ) ; marker . error ( msg ) ; }
public WebSecurityBundle ( ) { this ( WebSecurityConfiguration . builder ( ) . build ( ) ) ; }
protected void detailExecuteLogic ( ActionMapping mapping , ActionForm form , HttpServletRequest request , HttpServletResponse response ) { logger . info ( STR_ ) ; ServiceRepository services = ServiceRepository . getInstance ( ServiceClient . create ( getAppUser ( request ) ) ) ; GestionAuditoriaBI service = services . lookupGestionAuditoriaBI ( ) ; String idPista = request . getParameter ( Constants . ID ) ; if ( idPista != null && idPista . trim ( ) . length ( ) > NUM_ ) { TrazaVO pista = service . getPista ( idPista ) ; request . setAttribute ( AuditoriaConstants . PISTA_KEY , pista ) ; List datos = service . getDatosPista ( idPista ) ; request . setAttribute ( AuditoriaConstants . DETALLE_PISTA_KEY , datos ) ; request . setAttribute ( AuditoriaConstants . FICHA_XSL_KEY , getDefaultTemplate ( ) ) ; } saveCurrentInvocation ( KeysClientsInvocations . AUDITORIA_DETALLEPISTA , request ) ; setReturnActionFordward ( request , mapping . findForward ( Constants . FORWARD_DETALLE_PISTA ) ) ; }
public static Path append ( Path base , Path path , int strip ) { for ( Path subPath : path ) { if ( strip -- > NUM_ ) { continue ; } base = base . resolve ( subPath . toString ( ) ) ; } return base ; }
List < IEspStatusFlammable > doActionFlammableGetStatusListInternetDB ( final long deviceId , final String deviceKey , final long startTimestamp , final long endTimestamp , final long interval ) ;
private static void attemptRetryOnException ( String logPrefix , Request < ? > request , VolleyError exception ) throws VolleyError { RetryPolicy retryPolicy = request . getRetryPolicy ( ) ; int oldTimeout = request . getTimeoutMs ( ) ; try { retryPolicy . retry ( exception ) ; } catch ( VolleyError e ) { request . addMarker ( String . format ( STR_ , logPrefix , oldTimeout ) ) ; throw e ; } request . addMarker ( String . format ( STR_ , logPrefix , oldTimeout ) ) ; }
public void error ( SourceLocator srcLctr , Node styleNode , Node sourceNode , String msg ) throws TransformerException { error ( srcLctr , styleNode , sourceNode , msg , null ) ; }
protected abstract AdviceBase createAdvice ( Element adviceElement ) throws SAMLException ;
public void testTypical ( ) { m_Filter = getFilter ( ) ; performTest ( ) ; }
public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Element entRefAddr ; Node entRefNode ; String entRefName ; int nodeType ; doc = ( Document ) load ( STR_ , BOOL_ ) ; elementList = doc . getElementsByTagName ( STR_ ) ; entRefAddr = ( Element ) elementList . item ( NUM_ ) ; entRefNode = entRefAddr . getFirstChild ( ) ; nodeType = ( int ) entRefNode . getNodeType ( ) ; if ( ! equals ( NUM_ , nodeType ) ) { entRefNode = doc . createEntityReference ( STR_ ) ; assertNotNull ( STR_ , entRefNode ) ; } entRefName = entRefNode . getNodeName ( ) ; assertEquals ( STR_ , STR_ , entRefName ) ; }
public char current ( ) { if ( offset == end ) { return DONE ; } return string . charAt ( offset ) ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public void compress ( File file , byte [ ] data , Config config ) throws IOException , InterruptedException { if ( OS . getDefaultOS ( ) == OS . macosx && System . getenv ( STR_ ) == null ) { if ( ! file . getParentFile ( ) . exists ( ) ) { if ( ! file . getParentFile ( ) . mkdirs ( ) ) { throw new CompilerException ( STR_ + file . getAbsolutePath ( ) ) ; } } loadLib ( config ) ; if ( ! compressNative ( file . getAbsolutePath ( ) , data , data . length ) ) { config . getLogger ( ) . debug ( STR_ , file . getAbsolutePath ( ) ) ; FileUtils . writeByteArrayToFile ( file , data ) ; } } else { FileUtils . writeByteArrayToFile ( file , data ) ; } }
public void trainModels ( ) { System . out . println ( STR_ + rm . getString ( STR_ ) ) ; trainModels ( rm . getString ( STR_ ) ) ; }
public void updateRealmResults ( RealmResults < T > queryResults ) { if ( listener != null && realmResults != null ) { realmResults . removeChangeListener ( listener ) ; } realmResults = queryResults ; if ( listener != null && realmResults != null ) { realmResults . addChangeListener ( listener ) ; } updateRowWrappers ( ) ; ids = getIdsOfRealmResults ( ) ; notifyDataSetChanged ( ) ; }
public ClusterNode node ( AffinityTopologyVersion topVer , UUID id ) { return resolveDiscoCache ( null , topVer ) . node ( id ) ; }
public void runTest ( ) throws Throwable { Document doc ; Element rootNode ; Node newChild ; Node appendedChild ; doc = ( Document ) load ( STR_ , BOOL_ ) ; rootNode = doc . getDocumentElement ( ) ; newChild = doc . createAttribute ( STR_ ) ; { boolean success = BOOL_ ; try { appendedChild = rootNode . appendChild ( newChild ) ; } catch ( DOMException ex ) { success = ( ex . code == DOMException . HIERARCHY_REQUEST_ERR ) ; } assertTrue ( STR_ , success ) ; } }
public void removeStyle ( String nm ) ;
public void destroy ( ) { Tab currentTab = mToolbarModel . getTab ( ) ; if ( currentTab != null ) currentTab . removeObserver ( mTabObserver ) ; }
public Map < String , String > headers ( ) { if ( _headers == null ) parseHead ( ) ; return _headers ; }
public VideoGetQuery ownerId ( Integer value ) { return unsafeParam ( STR_ , value ) ; }
void preExecute ( ) throws DLException ;
public void clear ( ) { oredCriteria . clear ( ) ; orderByClause = null ; distinct = BOOL_ ; }
private static PublicKey generatePublicKey ( String encodedPublicKey ) { try { byte [ ] decodedKey = Base64 . decode ( encodedPublicKey ) ; KeyFactory keyFactory = KeyFactory . getInstance ( KEY_FACTORY_ALGORITHM ) ; return keyFactory . generatePublic ( new X509EncodedKeySpec ( decodedKey ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( e ) ; } }
public void removeInstant ( final BatchWriter writer , final TemporalInstant instant , final Statement statement ) throws MutationsRejectedException { final KeyParts keyParts = new KeyParts ( statement , instant ) ; for ( final KeyParts k : keyParts ) { final Mutation m = new Mutation ( k . getStoreKey ( ) ) ; m . putDelete ( k . cf , k . cq ) ; writer . addMutation ( m ) ; } }
public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = STR_ + ( ifExists ? STR_ : STR_ ) + STR_ ; db . execSQL ( sql ) ; }
public XmlHandler deleteAttributes ( Class < ? > aClass , String ... attributes ) { try { xml . deleteAttributes ( aClass , attributes ) ; xml . write ( ) ; } catch ( Exception e ) { JmapperLog . ERROR ( e ) ; } return this ; }
public static < T > NePredicate < T > ne ( Property < T > property , T value ) { return new NePredicate < > ( property ( property ) , value ) ; }
public BaseEvent ( Object source ) { this . source = source ; }
public int size ( ) { return _frameTop ; }
private synchronized void trim ( ) { while ( mCurrentSize > mSizeLimit ) { byte [ ] buf = mBuffersByLastUse . remove ( NUM_ ) ; mBuffersBySize . remove ( buf ) ; mCurrentSize -= buf . length ; } }
public final boolean hasMessages ( int what ) { return mExec . hasMessages ( what ) ; }
private static void checkResultFailures ( Result [ ] results ) { logger . entering ( ServiceStarter . class . getName ( ) , STR_ , ( Object [ ] ) results ) ; if ( results . length == NUM_ ) return ; for ( int i = NUM_ ; i < results . length ; i ++ ) { if ( results [ i ] . exception != null ) { logger . log ( Level . WARNING , STR_ , results [ i ] . exception ) ; logger . log ( Level . WARNING , STR_ , new Object [ ] { new Integer ( i ) , results [ i ] . descriptor } ) ; } else if ( results [ i ] . descriptor == null ) { logger . log ( Level . WARNING , STR_ , new Integer ( i ) ) ; } } logger . exiting ( ServiceStarter . class . getName ( ) , STR_ ) ; }
public void handleButton1Request ( RequestInvocationEvent event ) throws ModelControlException { submitCycle = BOOL_ ; modifyProperties ( ) ; forwardTo ( ) ; }
protected void updateEnabledState ( ) { calcButton . setEnabled ( frame . getMap ( ) . getMarkers ( ) . size ( ) > NUM_ ) ; }
public void registerHotkey ( Object hotkeyId , int modifiers , int keyCode ) { if ( ! initialized ) { return ; } try { int id = getId ( hotkeyId ) ; int mod = getModFromModifiers ( modifiers ) ; JIntellitype . getInstance ( ) . unregisterHotKey ( id ) ; LOGGER . info ( STR_ + id + STR_ + mod + STR_ + keyCode ) ; JIntellitype . getInstance ( ) . registerHotKey ( id , mod , keyCode ) ; hotkeys . put ( id , hotkeyId ) ; } catch ( JIntellitypeException ex ) { LOGGER . info ( STR_ + ex ) ; } }
public JCheckBox ( String text ) { this ( text , null , BOOL_ ) ; }
public static ResourceEnumerationTaskService . ResourceEnumerationTaskState performResourceEnumeration ( VerificationHost host , URI peerURI , EnumSet < TaskOption > options , String resourcePoolLink , String computeDescriptionLink , String parentComputeLink , List < String > tenantLinks ) throws Throwable { ResourceEnumerationTaskState enumerationTaskState = new ResourceEnumerationTaskService . ResourceEnumerationTaskState ( ) ; enumerationTaskState . parentComputeLink = parentComputeLink ; enumerationTaskState . enumerationAction = EnumerationAction . START ; enumerationTaskState . adapterManagementReference = UriUtils . buildUri ( AWSEnumerationAdapterService . SELF_LINK ) ; enumerationTaskState . resourcePoolLink = resourcePoolLink ; enumerationTaskState . options = EnumSet . noneOf ( TaskOption . class ) ; if ( options != null ) { enumerationTaskState . options = options ; } if ( tenantLinks != null ) { enumerationTaskState . tenantLinks = tenantLinks ; } URI uri = createServiceURI ( host , peerURI , ResourceEnumerationTaskService . FACTORY_LINK ) ; ResourceEnumerationTaskService . ResourceEnumerationTaskState enumTask = TestUtils . doPost ( host , enumerationTaskState , ResourceEnumerationTaskState . class , uri ) ; return enumTask ; }
public boolean isApplicable ( ) { return ( ( Director ) getDir ( ) ) . getDocument ( ) . getSampleSelection ( ) . size ( ) > NUM_ ; }
public UpdateManager ( BridgeContext ctx , GraphicsNode gn , Document doc ) { bridgeContext = ctx ; bridgeContext . setUpdateManager ( this ) ; document = doc ; updateRunnableQueue = RunnableQueue . createRunnableQueue ( ) ; runHandler = createRunHandler ( ) ; updateRunnableQueue . setRunHandler ( runHandler ) ; graphicsNode = gn ; scriptingEnvironment = initializeScriptingEnvironment ( bridgeContext ) ; secondaryBridgeContexts = ( BridgeContext [ ] ) ctx . getChildContexts ( ) . clone ( ) ; secondaryScriptingEnvironments = new ScriptingEnvironment [ secondaryBridgeContexts . length ] ; for ( int i = NUM_ ; i < secondaryBridgeContexts . length ; i ++ ) { BridgeContext resCtx = secondaryBridgeContexts [ i ] ; if ( ! ( ( SVGOMDocument ) resCtx . getDocument ( ) ) . isSVG12 ( ) ) { continue ; } resCtx . setUpdateManager ( this ) ; ScriptingEnvironment se = initializeScriptingEnvironment ( resCtx ) ; secondaryScriptingEnvironments [ i ] = se ; } minRepaintTime = MIN_REPAINT_TIME ; }
public LeaseException ( String reason ) { super ( reason ) ; }
public boolean hasNext ( ) { return index < size ; }
public boolean deleteView ( final INaviView view ) throws CouldntDeleteException { Preconditions . checkNotNull ( view , STR_ ) ; Preconditions . checkArgument ( m_views . contains ( view ) , STR_ ) ; m_provider . deleteView ( view ) ; m_views . remove ( view ) ; for ( final IProjectListener listener : m_listeners ) { try { listener . deletedView ( m_project , view ) ; } catch ( final Exception exception ) { CUtilityFunctions . logException ( exception ) ; } } m_project . getConfiguration ( ) . updateModificationDate ( ) ; return BOOL_ ; }
public synchronized Object lastElement ( ) { if ( elementCount == NUM_ ) { throw new NoSuchElementException ( ) ; } return elementData [ elementCount - NUM_ ] ; }
private void createRoleBasedOption ( RDOParameter roleParameter , String optionId , RDORole role ) { RDOOption roleBasedOption = new RDOOption ( ) ; roleBasedOption . setParentEntryNr ( roleParameter . getEntryNr ( ) ) ; roleBasedOption . setEntryNr ( sequence . nextValue ( ) ) ; roleBasedOption . setValue ( optionId ) ; roleBasedOption . setBasePrice ( role . getBasePrice ( ) ) ; roleBasedOption . setPrice ( role . getPrice ( ) ) ; roleBasedOption . setFactor ( role . getFactor ( ) ) ; roleParameter . getOptions ( ) . add ( roleBasedOption ) ; }
public AffinityTopologyVersion topologyVersion ( ) ;
int allowedNetworkTypes ( ) { return allowedNetworkTypes ; }
boolean evaluate ( ) throws Exception ;
private boolean isTypedTimeFullyLegal ( ) { if ( mIs24HourView ) { int [ ] values = getEnteredTime ( null ) ; return ( values [ NUM_ ] >= NUM_ && values [ NUM_ ] >= NUM_ && values [ NUM_ ] < NUM_ ) ; } else { return ( mTypedTimes . contains ( getAmOrPmKeyCode ( AM ) ) || mTypedTimes . contains ( getAmOrPmKeyCode ( PM ) ) ) ; } }
public boolean hasRoutedNetworks ( URI networkUri ) { return _routedNetworks != null && ! disableRouting && _routedNetworks . contains ( networkUri . toString ( ) ) ; }
public void handleDecode ( Result rawResult , Bitmap barcode , float scaleFactor ) { if ( mScannerCompletionListener != null ) { mScannerCompletionListener . OnScannerCompletion ( rawResult , Scanner . parseResult ( rawResult ) , barcode ) ; } if ( barcode != null ) { mViewfinderView . drawResultBitmap ( barcode ) ; } boolean fromLiveScan = barcode != null ; if ( fromLiveScan ) { mBeepManager . playBeepSoundAndVibrate ( ) ; drawResultPoints ( barcode , scaleFactor , rawResult ) ; } }
public DgReplanner createReplanner ( Person p , ScoringFunction sf ) ;
public BlockMask ( Extent extent , BaseBlock ... block ) { this ( extent , Arrays . asList ( checkNotNull ( block ) ) ) ; }
private void updateSymbols ( ) { if ( rendererList != null ) { for ( RenderSymbolInterface renderer : rendererList ) { renderer . renderSymbol ( ) ; } } }
CertificatePool createValidationPool ( ) ;
public void showFloatingActionButton ( ) { if ( mHidden ) { ObjectAnimator scaleX = ObjectAnimator . ofFloat ( this , STR_ , NUM_ , NUM_ ) ; ObjectAnimator scaleY = ObjectAnimator . ofFloat ( this , STR_ , NUM_ , NUM_ ) ; AnimatorSet animSetXY = new AnimatorSet ( ) ; animSetXY . playTogether ( scaleX , scaleY ) ; animSetXY . setInterpolator ( overshootInterpolator ) ; animSetXY . setDuration ( NUM_ ) ; animSetXY . start ( ) ; mHidden = BOOL_ ; } }
boolean canAddMember ( String realmName , String idType , String containerIDType ) throws AMConsoleException ;
private ArchitecturalWord loadArchitecturalWord ( Offset offset ) { return SimulatedMemory . getWord ( this . plus ( offset ) ) ; }
public void closingOK ( ) { if ( m_Customizer != null ) { m_Customizer . closingOK ( ) ; } }
public static Exception show ( final Window parent , final String title , final IProgressThread thread ) { Preconditions . checkNotNull ( thread , STR_ ) ; final EndlessHelperWrapper helperThread = new EndlessHelperWrapper ( thread ) ; CProgressDialog . showEndless ( parent , title , helperThread ) ; return helperThread . getException ( ) ; }
void replaceRange ( TextRange rangeWithinElement , String replacementText ) ;
public boolean isFLAG_OPERATION_FROM_ADD ( ) { switch ( value ) { case CARRY_FROM_ADD : case NO_CARRY_FROM_ADD : case OVERFLOW_FROM_ADD : case NO_OVERFLOW_FROM_ADD : return BOOL_ ; default : return BOOL_ ; } }
public static PasswordValidator buildUpdateValidator ( Map < String , String > properties , PasswordUtils passwordUtils ) { List < Rule > ruleList = buildBaseRuleList ( properties ) ; ruleList . add ( new HistoryRule ( NumberUtils . toInt ( properties . get ( PASSWORD_REUSE_NUMBER ) , NUM_ ) , passwordUtils ) ) ; ruleList . add ( new ChangedNumberRule ( NumberUtils . toInt ( properties . get ( PASSWORD_CHANGED_NUMBER ) , NUM_ ) ) ) ; ruleList . add ( new ChangeIntervalRule ( NumberUtils . toInt ( properties . get ( PASSWORD_CHANGE_INTERVAL ) , NUM_ ) ) ) ; PasswordValidator validator = new PasswordValidator ( ruleList ) ; return validator ; }
public static void init ( int poolSize ) { mPool = new ByteArrayPool ( poolSize ) ; }
public void updateBoundaries ( ) { PraatInterval prevInterval = null ; for ( int index = NUM_ ; index < getNumberOfIntervals ( ) ; index ++ ) { PraatInterval interval = getInterval ( index ) ; if ( ! interval . isComplete ( ) ) { if ( prevInterval == null ) { interval . setXmin ( NUM_ ) ; } else { interval . setXmin ( prevInterval . getXmax ( ) ) ; } if ( interval . getDuration ( ) == NUM_ ) { interval . setDuration ( NUM_ ) ; } interval . setXmax ( interval . getXmin ( ) + interval . getDuration ( ) ) ; } prevInterval = interval ; } }
public static double [ ] addVector ( final double [ ] base , final double [ ] add ) { double [ ] ret = new double [ max ( base . length , add . length ) ] ; if ( add . length == base . length ) { for ( int i = NUM_ ; i < base . length ; i ++ ) { ret [ i ] = base [ i ] + add [ i ] ; } } else { double [ ] temp = max ( base , add ) ; int max = max ( base . length , add . length ) ; int min = max - Math . abs ( base . length - add . length ) ; for ( int i = NUM_ ; i < min ; i ++ ) { ret [ i ] = base [ i ] + add [ i ] ; } for ( int i = min ; i < max ; i ++ ) { ret [ i ] = temp [ i ] ; } } return ret ; }
boolean ownDeletesAreVisible ( int type ) throws SQLException ;
GenericValue create ( String entityName , Map < String , ? extends Object > fields ) throws GenericEntityException ;
public Vector ( int d ) { this . d = d ; data = new double [ d ] ; }
public abstract ResultInterface queryMeta ( ) ;
protected DateTimeConverter makeConverter ( ) { return new DateConverter ( ) ; }
public boolean update ( Long ruleActionID , Long ruleID , Long actionID , Integer failureType , String message ) { if ( ruleActionID == null ) { throw new IllegalArgumentException ( STR_ ) ; } ContentValues args = new ContentValues ( ) ; if ( ruleID != null ) { args . put ( KEY_RULEID , ruleID ) ; } if ( actionID != null ) { args . put ( KEY_ACTIONID , actionID ) ; } if ( failureType != null ) { args . put ( KEY_FAILURE_TYPE , failureType ) ; } if ( message != null ) { args . put ( KEY_MESSAGE , message ) ; } if ( args . size ( ) > NUM_ ) { return database . update ( DATABASE_TABLE , args , KEY_FAILEDACTIONID + STR_ + ruleActionID , null ) > NUM_ ; } return BOOL_ ; }
void interrupt ( ) ;
public String addHeader ( String key , String value ) { return headers . put ( key , value ) ; }
public void write ( ByteBuffer buf , int length ) throws IOException { final byte [ ] buffer = _writeBuffer ; final int bufferLength = buffer . length ; StreamImpl source = _source ; while ( length > NUM_ ) { final int writeLength = _writeLength ; final int sublen = Math . min ( length , bufferLength - writeLength ) ; buf . get ( buffer , writeLength , sublen ) ; if ( length == sublen ) { _writeLength = writeLength + length ; if ( _implicitFlush ) { flush ( ) ; } return ; } if ( source == null ) { return ; } source . write ( buffer , NUM_ , bufferLength , BOOL_ ) ; _position += bufferLength ; _writeLength = NUM_ ; length -= sublen ; } }
private Collection < HadoopTaskInfo > mapperTasks ( Iterable < HadoopInputSplit > mappers , HadoopJobMetadata meta ) { UUID locNodeId = ctx . localNodeId ( ) ; HadoopJobId jobId = meta . jobId ( ) ; JobLocalState state = activeJobs . get ( jobId ) ; Collection < HadoopTaskInfo > tasks = null ; if ( mappers != null ) { if ( state == null ) state = initState ( jobId ) ; for ( HadoopInputSplit split : mappers ) { if ( state . addMapper ( split ) ) { if ( log . isDebugEnabled ( ) ) log . debug ( STR_ + locNodeId + STR_ + split + STR_ ) ; HadoopTaskInfo taskInfo = new HadoopTaskInfo ( MAP , jobId , meta . taskNumber ( split ) , NUM_ , split ) ; if ( tasks == null ) tasks = new ArrayList < > ( ) ; tasks . add ( taskInfo ) ; } } } return tasks ; }
public JSONObject ( JSONTokener x ) throws JSONException { this ( ) ; char c ; String key ; if ( x . nextClean ( ) != STR_ ) { throw x . syntaxError ( STR_ ) ; } for ( ; ; ) { c = x . nextClean ( ) ; switch ( c ) { case NUM_ : throw x . syntaxError ( STR_ ) ; case STR_ : return ; default : x . back ( ) ; key = x . nextValue ( ) . toString ( ) ; } c = x . nextClean ( ) ; if ( c != STR_ ) { throw x . syntaxError ( STR_ ) ; } this . putOnce ( key , x . nextValue ( ) ) ; switch ( x . nextClean ( ) ) { case STR_ : case STR_ : if ( x . nextClean ( ) == STR_ ) { return ; } x . back ( ) ; break ; case STR_ : return ; default : throw x . syntaxError ( STR_ ) ; } } }
void recordRemoval ( ObjectIntHashMap m ) { }
public boolean hasSubstitutedParameters ( ) { if ( this . wasInferred ) return this . originalMethod . hasSubstitutedParameters ( ) ; return super . hasSubstitutedParameters ( ) ; }
public static Field findInstanceField ( Class < ? > type , String name ) throws NoSuchFieldException { Field field = findField ( type , name ) ; if ( Modifier . isStatic ( field . getModifiers ( ) ) ) { throw new NoSuchFieldException ( STR_ + name + STR_ ) ; } return field ; }
private boolean jumpToPage ( int position , boolean smooth ) { if ( mShowWelcomePage && ! didAcceptTermsOfService ( ) ) { return position == NUM_ ; } if ( position >= mPagerAdapter . getCount ( ) ) { completeFirstRunExperience ( ) ; return BOOL_ ; } mPager . setCurrentItem ( position , smooth ) ; return BOOL_ ; }
public void removeSprite ( ) throws IOException { print ( STR_ , null ) ; }
public void onItemButtonClicked ( int position ) { String text = getString ( R . string . snack_bar_text_button_clicked , position ) ; Snackbar snackbar = Snackbar . make ( findViewById ( R . id . container ) , text , Snackbar . LENGTH_SHORT ) ; snackbar . show ( ) ; }
public void replace ( MemberDefinition method ) { if ( frozen ) { throw new CompilerError ( STR_ ) ; } Identifier name = method . getName ( ) ; List methodList = ( List ) lookupMap . get ( name ) ; if ( methodList == null ) { methodList = new ArrayList ( ) ; lookupMap . put ( name , methodList ) ; } int size = methodList . size ( ) ; for ( int i = NUM_ ; i < size ; i ++ ) { if ( ( ( MemberDefinition ) methodList . get ( i ) ) . getType ( ) . equalArguments ( method . getType ( ) ) ) { methodList . set ( i , method ) ; return ; } } methodList . add ( method ) ; count ++ ; }
public Element store ( Object o ) { Element e = new Element ( STR_ ) ; PerformScriptModel g = ( PerformScriptModel ) o ; e . setAttribute ( STR_ , FileUtil . getPortableFilename ( g . getFileName ( ) ) ) ; e . setAttribute ( STR_ , STR_ ) ; e . setAttribute ( STR_ , this . getClass ( ) . getName ( ) ) ; return e ; }
public static void checkEMail ( String emailAddress ) throws InvalidEmailException { if ( emailAddress == null ) { throw new InvalidEmailException ( STR_ ) ; } try { InternetAddress iNetAddress = new InternetAddress ( emailAddress ) ; iNetAddress . validate ( ) ; } catch ( Exception ex ) { throw new InvalidEmailException ( ex . getMessage ( ) , ex ) ; } }
public static _Fields findByThriftIdOrThrow ( int fieldId ) { _Fields fields = findByThriftId ( fieldId ) ; if ( fields == null ) throw new IllegalArgumentException ( STR_ + fieldId + STR_ ) ; return fields ; }
public void enableSpeech ( boolean toEnable ) { if ( toEnable ) { if ( getModule ( AudioModule . class ) == null ) { settings . selectAudioMixers ( ) ; attachModule ( AudioModule . class ) ; if ( settings . showGUI ) { getModule ( GUIFrame . class ) . enableSpeech ( BOOL_ ) ; } else { getModule ( AudioModule . class ) . activateVAD ( BOOL_ ) ; } } } else { detachModule ( AudioModule . class ) ; if ( getModule ( GUIFrame . class ) != null ) { getModule ( GUIFrame . class ) . enableSpeech ( BOOL_ ) ; } } }
private MethodSymbol lookupMethod ( DiagnosticPosition pos , Name name , Type qual , List < Type > args ) { return rs . resolveInternalMethod ( pos , attrEnv , qual , name , args , List . < Type > nil ( ) ) ; }
public static void main ( String [ ] args ) { jh61b . junit . textui . runClasses ( TestSimpleOomage . class ) ; }
public void loadingFinished ( ) { mLoadTracker . loadingFinished ( ) ; }
protected void engineSetMode ( String mode ) throws NoSuchAlgorithmException { core . setMode ( mode ) ; }
private void checkClosed ( ) throws GridClientClosedException { if ( closed ) throw new GridClientClosedException ( STR_ ) ; }
public boolean isRunning ( ) { return isRunning ; }
protected void finishPrepare ( FixedWithNextNode startInstr ) { }
public void prepareSession ( String remoteAddress , int remotePort , RtpInputStream rtpStream ) throws NetworkException { try { inputStream = new DummyPacketSourceStream ( ) ; inputStream . open ( ) ; if ( logger . isActivated ( ) ) { logger . debug ( STR_ + inputStream . getClass ( ) . getName ( ) ) ; } outputStream = new RtpOutputStream ( remoteAddress , remotePort , rtpStream ) ; outputStream . open ( ) ; if ( logger . isActivated ( ) ) { logger . debug ( STR_ + outputStream . getClass ( ) . getName ( ) ) ; } processor = new Processor ( inputStream , outputStream , new Codec [ NUM_ ] ) ; if ( logger . isActivated ( ) ) { logger . debug ( STR_ ) ; } } catch ( IOException e ) { throw new NetworkException ( new StringBuilder ( STR_ ) . append ( remoteAddress ) . append ( STR_ ) . append ( remotePort ) . append ( STR_ ) . toString ( ) , e ) ; } }
public Word xor ( Word w2 ) { return new Word ( value . xor ( w2 . value ) ) ; }
public static List < Modifier > newModifiers ( AST ast , int modifiers ) { return ast . newModifiers ( modifiers ) ; }
public abstract FtpClient reInit ( ) throws FtpProtocolException , IOException ;
private boolean equal ( int [ ] array1 , int [ ] array2 ) { if ( array1 . length != array2 . length ) { return BOOL_ ; } for ( int i = NUM_ ; i < array1 . length ; i ++ ) { if ( array1 [ i ] != array2 [ i ] ) { return BOOL_ ; } } return BOOL_ ; }
protected abstract void loadData ( P presenter , boolean pullToRefresh ) ;
public void clearActive ( ) { end = array . length ; }
public void bodySetup ( LocalVariableTable_attribute la , LocalVariableTypeTable_attribute lt , cp_info [ ] ca ) { activeVariableTable = la ; activeConstantPool = ca ; nameToIndexToLocal = null ; }
public Boolean isWhiteLabelWallet ( ) { return whiteLabelWallet ; }
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( hc_nodegetownerdocumentnull . class , args ) ; }
public CryptoException ( String message , Throwable cause ) { super ( message ) ; this . cause = cause ; }
public void writeRawBytes ( final ByteString value ) throws IOException { writeRawBytes ( value , NUM_ , value . size ( ) ) ; }
public boolean isSectionItemSelected ( int sectionIndex , int itemIndex ) { SectionSelectionState state = getSectionSelectionState ( sectionIndex ) ; return state . section || state . items . get ( itemIndex ) ; }
public ManagedStopFilterFactory ( Map < String , String > args ) { super ( args ) ; }
public void delete ( ) throws IOException { close ( ) ; Util . deleteContents ( directory ) ; }
public void onScrollOverThreshold ( ) ;
public EntryVersionCleaner ( String parentName , ReferenceQueue < Object > queue , Map < EntryInfoKey , V > entryInfos ) { super ( parentName + STR_ + EntryVersionCleaner . class . getSimpleName ( ) ) ; _queue = queue ; _entryInfos = entryInfos ; this . setDaemon ( BOOL_ ) ; }
public long cardinality ( final int tailIndex ) { return rangeCount ( tailIndex ) ; }
public Period minusDays ( int days ) { return plusDays ( - days ) ; }
public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { log . info ( STR_ + request . getRemoteHost ( ) + STR_ + request . getRemoteAddr ( ) + STR_ ) ; if ( ! response . isCommitted ( ) ) response . sendRedirect ( STR_ ) ; }
public static < T > AssociationNotNullPredicate < T > isNotNull ( Association < T > association ) { return new AssociationNotNullPredicate < > ( association ( association ) ) ; }
protected void enterTypevars ( Type t ) { if ( t . getEnclosingType ( ) != null && t . getEnclosingType ( ) . hasTag ( CLASS ) ) enterTypevars ( t . getEnclosingType ( ) ) ; for ( List < Type > xs = t . getTypeArguments ( ) ; xs . nonEmpty ( ) ; xs = xs . tail ) typevars . enter ( xs . head . tsym ) ; }
private static int recordSize ( byte type ) { if ( ( type == ct_change_cipher_spec ) || ( type == ct_alert ) ) { return maxAlertRecordSize ; } else { return maxRecordSize ; } }
public static boolean checkPrereadNames ( PrereadNamesInterface prereadNames , File outputFile ) throws IOException { final long numberSequences = prereadNames . length ( ) ; final NameDuplicateDetector dupDetector = new NameDuplicateDetector ( numberSequences ) ; for ( long i = NUM_ ; i < numberSequences ; i ++ ) { dupDetector . addPair ( prereadNames . name ( i ) , ( int ) i , NUM_ ) ; } return dupDetector . checkPrereadDuplicates ( new PrereadNamesInterface [ ] { prereadNames } , outputFile ) ; }
public CodeConstantOperand ( RVMMethod v ) { if ( VM . VerifyAssertions ) VM . _assert ( v != null ) ; value = v ; }
public MultisigAggregateModificationTransaction ( final DeserializationOptions options , final Deserializer deserializer ) { super ( TransactionTypes . MULTISIG_AGGREGATE_MODIFICATION , options , deserializer ) ; this . cosignatoryModifications = deserializer . readObjectArray ( STR_ , null ) ; final ExtendedData extendedData = new ExtendedData ( ) ; SERIALIZATION_EXTENSIONS . deserialize ( deserializer , this . getEntityVersion ( ) , extendedData ) ; this . minCosignatoriesModification = extendedData . minCosignatoriesModification ; VALIDATION_EXTENSIONS . validate ( this ) ; Collections . sort ( this . cosignatoryModifications ) ; }
public final static VersionInfo [ ] loadVersionInfo ( String [ ] pckgs , ClassLoader clsldr ) { if ( pckgs == null ) { throw new IllegalArgumentException ( STR_ ) ; } ArrayList vil = new ArrayList ( pckgs . length ) ; for ( int i = NUM_ ; i < pckgs . length ; i ++ ) { VersionInfo vi = loadVersionInfo ( pckgs [ i ] , clsldr ) ; if ( vi != null ) vil . add ( vi ) ; } return ( VersionInfo [ ] ) vil . toArray ( new VersionInfo [ vil . size ( ) ] ) ; }
public static IntegerArgument ldapVersionArgument ( ) throws ArgumentException { return IntegerArgument . builder ( OPTION_LONG_PROTOCOL_VERSION ) . shortIdentifier ( OPTION_SHORT_PROTOCOL_VERSION ) . description ( INFO_DESCRIPTION_VERSION . get ( ) ) . defaultValue ( NUM_ ) . valuePlaceholder ( INFO_PROTOCOL_VERSION_PLACEHOLDER . get ( ) ) . buildArgument ( ) ; }
public void fix ( String name ) { String name2 = toJvmName ( name ) ; super . put ( name2 , name2 ) ; }
public BindException ( String msg ) { super ( msg ) ; }
public void addHAListener ( IHAListener listener ) ;
protected String createContextXml ( WAR war ) { StringBuilder buffer = new StringBuilder ( ) ; buffer . append ( STR_ ) ; buffer . append ( STR_ + STR_ ) ; buffer . append ( STR_ ) ; buffer . append ( STR_ ) ; buffer . append ( STR_ ) ; buffer . append ( STR_ ) ; buffer . append ( STR_ ) ; buffer . append ( STR_ ) ; buffer . append ( STR_ ) ; buffer . append ( STR_ ) ; buffer . append ( STR_ + war . getContext ( ) + STR_ ) ; buffer . append ( STR_ + war . getFile ( ) + STR_ ) ; buffer . append ( STR_ ) ; buffer . append ( STR_ + STR_ ) ; buffer . append ( STR_ ) ; buffer . append ( getExtraClasspathXmlFragment ( war ) ) ; buffer . append ( getSharedClasspathXmlFragment ( ) ) ; buffer . append ( STR_ ) ; return buffer . toString ( ) ; }
private boolean isNameValid ( ProjectTypeDef type ) { boolean valid = BOOL_ ; if ( type . getId ( ) == null || type . getId ( ) . isEmpty ( ) || NAME_PATTERN . matcher ( type . getId ( ) ) . find ( ) ) { LOG . error ( STR_ + type . getClass ( ) . getName ( ) ) ; valid = BOOL_ ; } if ( type . getDisplayName ( ) == null || type . getDisplayName ( ) . isEmpty ( ) ) { LOG . error ( STR_ + type . getId ( ) ) ; valid = BOOL_ ; } for ( Attribute attr : type . getAttributes ( ) ) { if ( NAME_PATTERN . matcher ( attr . getName ( ) ) . find ( ) ) { LOG . error ( STR_ + attr . getClass ( ) . getName ( ) + STR_ + attr . getId ( ) + STR_ ) ; valid = BOOL_ ; } } return valid ; }
public void dispose ( ) { if ( mesh != null ) mesh . dispose ( ) ; }
protected Position computeSymbolPosition ( ) { Iterable < ? extends Position > positions = this . getPositions ( ) ; if ( positions == null ) return null ; Iterator < ? extends Position > iterator = positions . iterator ( ) ; Position pos1 = iterator . next ( ) ; Position pos2 = iterator . next ( ) ; return new Position ( LatLon . interpolateGreatCircle ( NUM_ , pos2 , pos1 ) , NUM_ ) ; }
public GenericFeed retrieveGroups ( String memberName , boolean directOnly ) throws AppsForYourDomainException , MalformedURLException , IOException , ServiceException { return getFeed ( new URL ( baseDomainUrl + STR_ + memberName + STR_ + String . valueOf ( directOnly ) ) , GenericFeed . class ) ; }
public void resetOriginals ( ) { mStartingStartTrim = NUM_ ; mStartingEndTrim = NUM_ ; mStartingRotation = NUM_ ; setStartTrim ( NUM_ ) ; setEndTrim ( NUM_ ) ; setRotation ( NUM_ ) ; }
public void add ( String name , T val ) { nvPairs . add ( name ) ; nvPairs . add ( val ) ; }
public void removeByUuid ( java . lang . String uuid ) ;
< T > void addPolyline ( AirMapPolyline < T > polyline ) ;
public static boolean isSchemaTriple ( Statement triple ) { URI pred = triple . getPredicate ( ) ; if ( schemaPredicates . contains ( pred ) ) { return BOOL_ ; } else if ( pred . equals ( RDF . TYPE ) ) { if ( schemaTypes . contains ( triple . getObject ( ) ) ) { return BOOL_ ; } } return BOOL_ ; }
public span addElement ( Element element ) { addElementToRegistry ( element ) ; return ( this ) ; }
public static Version v2_0 ( ) { return new Version ( ICalVersion . V2_0 ) ; }
private static void checkParameters ( CategorySeries dataset , DefaultRenderer renderer ) { if ( dataset == null || renderer == null || dataset . getItemCount ( ) != renderer . getSeriesRendererCount ( ) ) { throw new IllegalArgumentException ( STR_ ) ; } }
public static Collection < ClusterNode > allNodes ( GridCacheContext ctx , AffinityTopologyVersion topOrder ) { return ctx . discovery ( ) . cacheNodes ( ctx . namex ( ) , topOrder ) ; }
DownloadState query ( int downloadId ) { return downloadRequestQueue . query ( downloadId ) ; }
final void cleanStack ( ) { for ( Completion p = null , q = stack ; q != null ; ) { Completion s = q . next ; if ( q . isLive ( ) ) { p = q ; q = s ; } else if ( p == null ) { casStack ( q , s ) ; q = stack ; } else { p . next = s ; if ( p . isLive ( ) ) q = s ; else { p = null ; q = stack ; } } } }
public static String toRegex ( String glob , char separator ) { return new GlobToRegexParser ( glob , separator ) . parseToRegex ( ) ; }
Program ( ModeUsage modeUsage , ContentHandler handler ) { this . modeUsage = modeUsage ; this . handler = handler ; }
void menuKeyReleased ( MenuKeyEvent e ) ;
public void onLastItemVisible ( ) ;
public static void bootstrapConf ( SolrZkClient zkClient , CoreContainer cc , String solrHome ) throws IOException { ZkConfigManager configManager = new ZkConfigManager ( zkClient ) ; List < CoreDescriptor > cds = cc . getCoresLocator ( ) . discover ( cc ) ; log . info ( STR_ + cds . size ( ) + STR_ + solrHome ) ; for ( CoreDescriptor cd : cds ) { String coreName = cd . getName ( ) ; String confName = cd . getCollectionName ( ) ; if ( StringUtils . isEmpty ( confName ) ) confName = coreName ; Path udir = cd . getInstanceDir ( ) . resolve ( STR_ ) ; log . info ( STR_ + udir + STR_ + confName + STR_ + coreName ) ; configManager . uploadConfigDir ( udir , confName ) ; } }
static int [ ] roundSizes ( float [ ] sizes ) { int [ ] retInts = new int [ sizes . length ] ; float posD = NUM_ ; for ( int i = NUM_ ; i < retInts . length ; i ++ ) { int posI = ( int ) ( posD + NUM_ ) ; posD += sizes [ i ] ; retInts [ i ] = ( int ) ( posD + NUM_ ) - posI ; } return retInts ; }
public Image convertToArdor3DImage ( ByteBuffer raster , int pixelSize , DataType dataType , int width , int height ) { return ( convertToArdor3DImage ( raster , pixelSize , null , dataType , width , height ) ) ; }
public void connectionClosed ( ConnectionEvent event ) { if ( isActive ) { ManagedConnection conn = ( ManagedConnection ) event . getSource ( ) ; TransactionManagerImpl transManager = TransactionManagerImpl . getTransactionManager ( ) ; try { Transaction txn = transManager . getTransaction ( ) ; if ( txn == null ) { mannPoolCache . returnPooledConnectionToPool ( conn ) ; } } catch ( Exception se ) { String exception = STR_ + se . getMessage ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( exception , se ) ; } } } }
public void push ( Request request , Task task ) ;
public boolean greaterThan ( XObject obj2 ) throws javax . xml . transform . TransformerException { return compare ( obj2 , S_GT ) ; }
public WallDeleteCommentQuery ownerId ( Integer value ) { return unsafeParam ( STR_ , value ) ; }
public IRouteBuilder < R > allRoutingTypes ( ) ;
private void append ( Element element ) { if ( parentWidget == null && ( resourceWidget == null || resourceWidget . getParent ( ) == null ) ) { return ; } Widget parent = parentWidget != null ? parentWidget : resourceWidget . getParent ( ) ; parent . getElement ( ) . appendChild ( element ) ; }
protected BackgroundTask ( long timeoutSeconds ) { this . ownerFrame = null ; this . timeoutMilliseconds = TimeUnit . SECONDS . toMillis ( timeoutSeconds ) ; }
public AllocationExplanation add ( ShardId shardId , NodeExplanation nodeExplanation ) { List < NodeExplanation > list = explanations . get ( shardId ) ; if ( list == null ) { list = new ArrayList < > ( ) ; explanations . put ( shardId , list ) ; } list . add ( nodeExplanation ) ; return this ; }
protected void useAsReference ( MapEntity entity ) { currMatchLevel = getMatchLevel ( entity ) ; }
public static long prefixCodedToLong ( final BytesRef val ) { long sortableBits = NUM_ ; for ( int i = val . offset + NUM_ , limit = val . offset + val . length ; i < limit ; i ++ ) { sortableBits <<= NUM_ ; final byte b = val . bytes [ i ] ; if ( b < NUM_ ) { throw new NumberFormatException ( STR_ + Integer . toHexString ( b & NUM_ ) + STR_ + ( i - val . offset ) + STR_ ) ; } sortableBits |= b ; } return ( sortableBits << getPrefixCodedLongShift ( val ) ) ^ NUM_ ; }
public void assertExists ( String message , Path path ) throws IOException { SwiftTestUtils . assertPathExists ( sFileSystem , message , path ) ; }
public static Account loadAccount ( String name ) { Account account = getAccountDAO ( ) . getAccount ( name ) ; if ( account != null ) { account . setAccountTime ( getAccountTimeDAO ( ) . getAccountTime ( account . getId ( ) ) ) ; } return account ; }
public boolean isApplicable ( ) { CompareWindow viewer = ( CompareWindow ) getParent ( ) ; return viewer != null ; }
public void handleButton1Request ( RequestInvocationEvent event ) throws ModelControlException { submitCycle = BOOL_ ; DelegationModel model = ( DelegationModel ) getModel ( ) ; String uid = ( String ) getPageSessionAttribute ( CURRENT_IDENTITY ) ; AMPropertySheet ps = ( AMPropertySheet ) getChild ( DELEGATION_PROPERTIES ) ; String realm = ( String ) getPageSessionAttribute ( AMAdminConstants . CURRENT_REALM ) ; try { PrivilegeXMLBuilder builder = PrivilegeXMLBuilder . getInstance ( ) ; Set privileges = builder . getAllPrivileges ( realm , model ) ; Map values = ps . getAttributeValues ( privileges ) ; model . setPrivileges ( realm , uid , values ) ; setInlineAlertMessage ( CCAlert . TYPE_INFO , STR_ , STR_ ) ; } catch ( AMConsoleException e ) { setInlineAlertMessage ( CCAlert . TYPE_ERROR , STR_ , e . getMessage ( ) ) ; } forwardTo ( ) ; }
protected boolean [ ] multiInstanceHandler ( ) { boolean [ ] result = new boolean [ NUM_ ] ; print ( STR_ ) ; if ( m_Kernel instanceof MultiInstanceCapabilitiesHandler ) { println ( STR_ ) ; result [ NUM_ ] = BOOL_ ; } else { println ( STR_ ) ; result [ NUM_ ] = BOOL_ ; } return result ; }
public ZipParser ( ) { }
private void processPopulationsLinkers ( final RoundEnvironment env ) { final List < ? extends Element > populationsLinkers = sortElements ( env , populations_linker . class ) ; for ( final Element e : populationsLinkers ) { final populations_linker pLinker = e . getAnnotation ( populations_linker . class ) ; final StringBuilder sb = new StringBuilder ( ) ; sb . append ( POPULATIONS_LINKER_PREFIX ) ; sb . append ( pLinker . name ( ) ) . append ( SEP ) ; sb . append ( rawNameOf ( e ) ) ; gp . put ( sb . toString ( ) , docToString ( pLinker . doc ( ) ) ) ; } }
public void dispose ( ) { try { if ( _myInput != null ) { _myInput . close ( ) ; } if ( _myOutput != null ) { _myOutput . close ( ) ; } } catch ( final Exception e ) { e . printStackTrace ( ) ; } _myInput = null ; _myOutput = null ; try { if ( _mySocket != null ) { _mySocket . close ( ) ; } } catch ( final Exception e ) { e . printStackTrace ( ) ; } if ( _myThread == null ) { return ; } _mySocket = null ; _myThread = null ; handleStatus ( NetStatus . CONNECTION_CLOSED ) ; Logger . printProcess ( STR_ , STR_ ) ; }
public static boolean isLargeObject ( int type ) { if ( type == Value . BLOB || type == Value . CLOB ) { return BOOL_ ; } return BOOL_ ; }
public WishlistDataCursor queryWishlistsData ( ) { QueryHelper qh = new QueryHelper ( ) ; qh . Distinct = BOOL_ ; qh . Table = S . TABLE_WISHLIST_DATA ; qh . Columns = null ; qh . Selection = null ; qh . SelectionArgs = null ; qh . GroupBy = null ; qh . Having = null ; qh . OrderBy = null ; qh . Limit = null ; SQLiteQueryBuilder qb = builderWishlistData ( ) ; Cursor cursor = qb . query ( getWritableDatabase ( ) , qh . Columns , qh . Selection , qh . SelectionArgs , qh . GroupBy , qh . Having , qh . OrderBy , qh . Limit ) ; return new WishlistDataCursor ( cursor ) ; }
public static void updateAllForFacade ( DataStore dataStore , Iterator < Update > updateIter , Set < String > tags ) { Iterator < List < Update > > batchIter = new TimePartitioningIterator < > ( updateIter , NUM_ , NUM_ , NUM_ , Duration . millis ( NUM_ ) ) ; while ( batchIter . hasNext ( ) ) { dataStore . updateAllForFacade ( batchIter . next ( ) , tags ) ; } }
public Metadata ( ) { metadata = new HashMap < String , String [ ] > ( ) ; }
public XNumber ( Number num ) { super ( ) ; m_val = num . doubleValue ( ) ; setObject ( num ) ; }
public static int decodePositionZ ( long pos ) { return ( int ) ( pos << NUM_ > > NUM_ ) ; }
AtomicIntChunks ( final long length , final int chunkBits ) { mLength = length ; assert chunkBits >= NUM_ && chunkBits <= NUM_ ; mChunkBits = chunkBits ; mChunkSize = NUM_ << mChunkBits ; mChunkMask = mChunkSize - NUM_ ; final long ch = ( length + mChunkSize - NUM_ ) / mChunkSize ; if ( ch > Integer . MAX_VALUE ) { throw new RuntimeException ( STR_ + length + STR_ + mChunkSize ) ; } final int chunks = ( int ) ch ; mArray = new AtomicIntegerArray [ chunks ] ; long left = mLength ; long total = NUM_ ; for ( int i = NUM_ ; i < chunks ; i ++ ) { final int assignedLength = left <= mChunkSize ? ( int ) left : mChunkSize ; assert assignedLength > NUM_ ; mArray [ i ] = new AtomicIntegerArray ( assignedLength ) ; left -= assignedLength ; total += assignedLength ; } assert left == NUM_ ; }
public abstract boolean check ( DynamicObject subject ) ;
static void putTarget ( int typeRef , TypePath typePath , ByteVector out ) { switch ( typeRef > > > NUM_ ) { case NUM_ : case NUM_ : case NUM_ : out . putShort ( typeRef > > > NUM_ ) ; break ; case NUM_ : case NUM_ : case NUM_ : out . putByte ( typeRef > > > NUM_ ) ; break ; case NUM_ : case NUM_ : case NUM_ : case NUM_ : case NUM_ : out . putInt ( typeRef ) ; break ; default : out . put12 ( typeRef > > > NUM_ , ( typeRef & NUM_ ) > > NUM_ ) ; break ; } if ( typePath == null ) { out . putByte ( NUM_ ) ; } else { int length = typePath . b [ typePath . offset ] * NUM_ + NUM_ ; out . putByteArray ( typePath . b , typePath . offset , length ) ; } }
public void updateAndTestCounter ( OFMessage ofm , String type ) { validateCounter ( type , NUM_ ) ; counters . updateWriteStats ( ofm ) ; counters . updateWriteStats ( ofm ) ; counters . updateReadStats ( ofm ) ; counters . updateReadStats ( ofm ) ; validateCounter ( type , NUM_ ) ; }
public void close ( ) throws IOException ;
private static void copystream ( InputStream in , OutputStream out ) throws IOException { byte [ ] buffer = new byte [ NUM_ ] ; int len ; while ( ( len = in . read ( buffer ) ) >= NUM_ ) out . write ( buffer , NUM_ , len ) ; }
void onConfigurationReceived ( ConfigurationResponse configurationResponse ) ;
public < T > boolean has ( Class < T > clazz ) { return configuration . getClass ( ) . equals ( clazz ) || ( fieldCache . getIfPresent ( clazz ) != null ) ; }
public static String formatXml ( Node node ) { return formatXml ( node , BOOL_ ) ; }
public Object deserialize ( ByteBuffer buf ) ;
boolean contains ( DBIDRef o ) ;
public PageMessages ( ) { }
public void onPageSelected ( int position ) ;
public static < V > Pointer < V > allocateArray ( Type elementClass , long arrayLength ) { if ( arrayLength == NUM_ ) return null ; PointerIO pio = PointerIO . getInstance ( elementClass ) ; if ( pio == null ) throw new UnsupportedOperationException ( STR_ + ( elementClass instanceof Class ? ( ( Class ) elementClass ) . getName ( ) : elementClass . toString ( ) ) ) ; return ( Pointer < V > ) allocateArray ( pio , arrayLength ) ; }
public static void updateHighlighting ( final ZyGraph graph , final List < CSpecialInstruction > instructionResults ) { Preconditions . checkNotNull ( graph , STR_ ) ; Preconditions . checkNotNull ( instructionResults , STR_ ) ; clearHighlighting ( graph ) ; highlightInstructions ( graph , instructionResults ) ; }
public void switchToHeader ( String fragmentName , Bundle args ) { setSelectedHeader ( null ) ; switchToHeaderInner ( fragmentName , args , NUM_ ) ; }
public TemporaryLookupException ( String message ) { super ( message ) ; }
void updateSupportedShippingCountries ( long shopId , String countries ) ;
private static String readClassName ( DataInput di ) throws IOException { int len = di . readInt ( ) ; byte [ ] bytes = new byte [ len ] ; di . readFully ( bytes ) ; return new String ( bytes ) ; }
void onDialogCancelled ( ) ;
MergeTarget clearField ( Descriptors . FieldDescriptor field ) ;
public Future < Long > delayedCount ( String type ) { Future < Long > future = Future . future ( ) ; jobService . delayedCount ( type , future . completer ( ) ) ; return future ; }
private double minIgnoreNaN ( double a , double b ) { if ( Double . isNaN ( a ) ) { return b ; } if ( Double . isNaN ( b ) ) { return a ; } return Math . min ( a , b ) ; }
public String asString ( ) { throw new UnsupportedOperationException ( STR_ + toString ( ) ) ; }
public void rulesR8R9R10 ( Graph graph ) { List < Node > nodes = graph . getNodes ( ) ; for ( Node c : nodes ) { List < Node > intoCArrows = graph . getNodesInTo ( c , Endpoint . ARROW ) ; for ( Node a : intoCArrows ) { if ( ! ( graph . getEndpoint ( c , a ) == Endpoint . CIRCLE ) ) { continue ; } if ( ! ruleR8 ( a , c , graph ) ) { boolean b = ruleR9 ( a , c , graph ) ; if ( ! b ) { ruleR10 ( a , c , graph ) ; } } } } }
public Collection < HTMLToken > tokenizeHTML ( ) { List < HTMLToken > tokens = new ArrayList < HTMLToken > ( ) ; String nestedTags = nestedTagsRegex ( NUM_ ) ; Pattern p = Pattern . compile ( STR_ + STR_ + STR_ + STR_ + STR_ + nestedTags + STR_ , Pattern . CASE_INSENSITIVE ) ; Matcher m = p . matcher ( text ) ; int lastPos = NUM_ ; while ( m . find ( ) ) { if ( lastPos < m . start ( ) ) { tokens . add ( HTMLToken . text ( text . substring ( lastPos , m . start ( ) ) ) ) ; } tokens . add ( HTMLToken . tag ( text . substring ( m . start ( ) , m . end ( ) ) ) ) ; lastPos = m . end ( ) ; } if ( lastPos < text . length ( ) ) { tokens . add ( HTMLToken . text ( text . substring ( lastPos , text . length ( ) ) ) ) ; } return tokens ; }
public static int [ ] change1To0InArray ( int a [ ] ) { a [ a [ NUM_ ] ] = a [ a [ NUM_ ] ] ; return a ; }
public RestartTaskThread ( LocalizableMessage shutdownMessage ) { super ( STR_ ) ; this . shutdownMessage = shutdownMessage ; }
public static ByteBuffer convertTsvToByteBuffer ( String starsFileName ) { return convertTsvToByteBuffer ( starsFileName , DEFAULT_RADIUS ) ; }
public long length ( ) { try { return Libcore . os . stat ( path ) . st_size ; } catch ( ErrnoException errnoException ) { return NUM_ ; } }
public Exception [ ] cancelAll ( String [ ] entryUids , String [ ] classNames , int [ ] objectTypes ) { ArrayList < Exception > exceptionsList = new ArrayList < Exception > ( NUM_ ) ; for ( int i = NUM_ ; i < entryUids . length ; i ++ ) { try { cancel ( entryUids [ i ] , classNames [ i ] , objectTypes [ i ] , BOOL_ , BOOL_ , BOOL_ ) ; } catch ( Exception ex ) { exceptionsList . add ( ex ) ; } } return exceptionsList . toArray ( new Exception [ exceptionsList . size ( ) ] ) ; }
private void checkSolrSynonyms ( TokenFilterFactory factory ) throws Exception { Reader reader = new StringReader ( STR_ ) ; TokenStream stream = whitespaceMockTokenizer ( reader ) ; stream = factory . create ( stream ) ; assertTrue ( stream instanceof SynonymFilter ) ; assertTokenStreamContents ( stream , new String [ ] { STR_ , STR_ , STR_ , STR_ } , new int [ ] { NUM_ , NUM_ , NUM_ , NUM_ } ) ; }
public void registerCustomElementFactory ( String namespaceURI , String localName , ElementFactory factory ) { if ( customFactories == null ) { customFactories = new DoublyIndexedTable ( ) ; } customFactories . put ( namespaceURI , localName , factory ) ; }
protected abstract void caseReturnStmt ( Local val ) ;
public void error ( SAXParseException e ) throws SAXException { javax . xml . transform . ErrorListener errorListener = m_transformer . getErrorListener ( ) ; if ( errorListener instanceof ErrorHandler ) { ( ( ErrorHandler ) errorListener ) . error ( e ) ; if ( null != m_errorHandler ) m_errorHandler . error ( e ) ; } else { try { errorListener . error ( new javax . xml . transform . TransformerException ( e ) ) ; if ( null != m_errorHandler ) m_errorHandler . error ( e ) ; } catch ( javax . xml . transform . TransformerException te ) { throw e ; } } }
void parse ( ) { String line ; while ( ( line = getNextLine ( ) ) != null ) { Matcher matcher = COMMAND_LINE . matcher ( line ) ; if ( matcher . find ( ) ) { String command = matcher . group ( COMMAND_NAME_GROUP ) ; String rest = line . substring ( matcher . end ( ) ) ; switch ( command ) { case EXTENDS_COMMAND : parseExtends ( rest ) ; break ; case SNIPPET_COMMAND : input . noExtendsAllowed = BOOL_ ; parseSnippet ( SnippetKind . REGULAR , rest ) ; break ; case OVERRIDE_COMMAND : input . noExtendsAllowed = BOOL_ ; parseSnippet ( SnippetKind . OVERRIDE , rest ) ; break ; case ABSTRACT_COMMAND : input . noExtendsAllowed = BOOL_ ; parseSnippet ( SnippetKind . ABSTRACT , rest ) ; break ; case PRIVATE_COMMAND : input . noExtendsAllowed = BOOL_ ; parseSnippet ( SnippetKind . PRIVATE , rest ) ; break ; default : unexpectedCommandError ( command ) ; break ; } } else if ( ! CharMatcher . whitespace ( ) . matchesAllOf ( line ) ) { error ( STR_ , line ) ; } } }
final void cancelAll ( ) { ForkJoinTask . cancelIgnoringExceptions ( currentJoin ) ; ForkJoinTask . cancelIgnoringExceptions ( currentSteal ) ; for ( ForkJoinTask < ? > t ; ( t = poll ( ) ) != null ; ) ForkJoinTask . cancelIgnoringExceptions ( t ) ; }
protected boolean isHtmlFlavor ( DataFlavor flavor ) { DataFlavor [ ] flavors = htmlFlavors ; for ( int i = NUM_ ; i < flavors . length ; i ++ ) { if ( flavors [ i ] . equals ( flavor ) ) { return BOOL_ ; } } return BOOL_ ; }
public String baseInputName ( ) { String name = inputName ( ) ; int i = name . lastIndexOf ( STR_ ) ; if ( i >= NUM_ ) { return name . substring ( i + NUM_ ) ; } return name ; }
protected double secureProduct ( Vector v ) { double sum = NUM_ ; for ( int i = NUM_ ; i < v . dimension ( ) ; i ++ ) sum += components [ i ] * v . components [ i ] ; return sum ; }
public boolean containsAll ( Collection < ? > collection ) ;
public void writeOperationsFile ( ) { createFile ( getDefaultOperationsFilename ( ) , BOOL_ ) ; try { writeFile ( getDefaultOperationsFilename ( ) ) ; } catch ( Exception e ) { log . error ( STR_ + e ) ; } }
protected GenericReferenceImpl ( ) { super ( ) ; }
public synchronized void updateIconsForPkg ( String packageName , UserHandleCompat user ) { removeIconsForPkg ( packageName , user ) ; try { PackageInfo info = mPackageManager . getPackageInfo ( packageName , PackageManager . GET_UNINSTALLED_PACKAGES ) ; long userSerial = mUserManager . getSerialNumberForUser ( user ) ; for ( LauncherActivityInfoCompat app : mLauncherApps . getActivityList ( packageName , user ) ) { addIconToDBAndMemCache ( app , info , userSerial ) ; } } catch ( NameNotFoundException e ) { Log . d ( TAG , STR_ , e ) ; return ; } }
public boolean confirm ( String message ) { return BOOL_ ; }
public ConvexHullScan ( int numThreads ) { this . numThreads = numThreads ; }
public static < T > T deserialize ( T instance , Bundle bundle ) { return deserialize ( classLoader ( ) , instance , bundle ) ; }
public void start ( ) { onEmit ( ) ; getBeginNode ( ) . emitOutput ( ) ; }
public LinkRef ( Name linkName ) { super ( linkClassName , new StringRefAddr ( linkAddrType , linkName . toString ( ) ) ) ; }
public static void writeString ( OutputStream out , String charset , String value ) throws IOException { writeString ( out , Charset . forName ( charset ) , value ) ; }
public static IRenderingEngine createRenderingEngineForDisplay ( ) { return createRenderingEngine ( BOOL_ ) ; }
public static IntList dincrList ( IntList L , int x ) { return L ; }
StatusLine parseStatusLine ( CharArrayBuffer buffer , ParserCursor cursor ) throws ParseException ;
protected SnmpCachedData updateCachedDatas ( Object userData ) { final String [ ] path = JvmRuntimeImpl . getBootClassPath ( userData ) ; final long time = System . currentTimeMillis ( ) ; final int len = path . length ; SnmpOid indexes [ ] = new SnmpOid [ len ] ; for ( int i = NUM_ ; i < len ; i ++ ) { indexes [ i ] = new SnmpOid ( i + NUM_ ) ; } return new SnmpCachedData ( time , indexes , path ) ; }
public ByteVector putUTF8 ( final String s ) { int charLength = s . length ( ) ; if ( charLength > NUM_ ) { throw new IllegalArgumentException ( ) ; } int len = length ; if ( len + NUM_ + charLength > data . length ) { enlarge ( NUM_ + charLength ) ; } byte [ ] data = this . data ; data [ len ++ ] = ( byte ) ( charLength > > > NUM_ ) ; data [ len ++ ] = ( byte ) charLength ; for ( int i = NUM_ ; i < charLength ; ++ i ) { char c = s . charAt ( i ) ; if ( c >= STR_ && c <= STR_ ) { data [ len ++ ] = ( byte ) c ; } else { length = len ; return encodeUTF8 ( s , i , NUM_ ) ; } } length = len ; return this ; }
public Bidi ( String paragraph , int flags ) { if ( paragraph == null ) { throw new IllegalArgumentException ( STR_ ) ; } bidiBase = new BidiBase ( paragraph . toCharArray ( ) , NUM_ , null , NUM_ , paragraph . length ( ) , flags ) ; }
private boolean cookiesEnabled ( ) { return CookieManager . getInstance ( ) . acceptCookie ( ) ; }
private ViewDragHelper ( Context context , ViewGroup forParent , Callback cb ) { if ( forParent == null ) { throw new IllegalArgumentException ( STR_ ) ; } if ( cb == null ) { throw new IllegalArgumentException ( STR_ ) ; } mParentView = forParent ; mCallback = cb ; final ViewConfiguration vc = ViewConfiguration . get ( context ) ; final float density = context . getResources ( ) . getDisplayMetrics ( ) . density ; mEdgeSize = ( int ) ( EDGE_SIZE * density + NUM_ ) ; mTouchSlop = vc . getScaledTouchSlop ( ) ; mMaxVelocity = vc . getScaledMaximumFlingVelocity ( ) ; mMinVelocity = vc . getScaledMinimumFlingVelocity ( ) ; mScroller = ScrollerCompat . create ( context , sInterpolator ) ; }
public static String readableFileSize ( long size ) { if ( size <= NUM_ ) return STR_ ; final String [ ] units = new String [ ] { STR_ , STR_ , STR_ , STR_ , STR_ } ; int digitGroups = ( int ) ( Math . log10 ( size ) / Math . log10 ( NUM_ ) ) ; return new DecimalFormat ( STR_ ) . format ( size / Math . pow ( NUM_ , digitGroups ) ) + STR_ + units [ digitGroups ] ; }
public void remove ( ) { if ( lastVisited == null ) { throw new IllegalStateException ( ) ; } cache . map . remove ( lastVisited . key ) ; cache . removeEntry ( lastVisited ) ; }
boolean isIndependent ( ) ;
public I18n ( String moduleName , String key , I18nSet lang ) { super ( ) ; Assert . hasText ( moduleName , STR_ ) ; Assert . hasText ( key , STR_ ) ; this . moduleName = moduleName ; this . key = key ; this . lang = lang ; }
public void onGestureEnd ( MultiPointerGestureDetector detector ) ;
public boolean isExtended ( ) { return extended ; }
public void addServer ( Server server ) { if ( ! servers . containsKey ( server . getId ( ) ) ) { servers . put ( server . getId ( ) , server ) ; } }
public boolean removeConfiguredNetworksAndDisableWifi ( ) { if ( ! disconnectAP ( ) ) { return BOOL_ ; } sleep ( SHORT_TIMEOUT ) ; if ( ! mWifiManager . setWifiEnabled ( BOOL_ ) ) { return BOOL_ ; } sleep ( SHORT_TIMEOUT ) ; return BOOL_ ; }
public void update ( EventBean [ ] newData , EventBean [ ] oldData ) ;
private void writeQName ( javax . xml . namespace . QName qname , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { java . lang . String namespaceURI = qname . getNamespaceURI ( ) ; if ( namespaceURI != null ) { java . lang . String prefix = xmlWriter . getPrefix ( namespaceURI ) ; if ( prefix == null ) { prefix = generatePrefix ( namespaceURI ) ; xmlWriter . writeNamespace ( prefix , namespaceURI ) ; xmlWriter . setPrefix ( prefix , namespaceURI ) ; } if ( prefix . trim ( ) . length ( ) > NUM_ ) { xmlWriter . writeCharacters ( prefix + STR_ + org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } }
public Vector2 lerp ( Vector2 target , float alpha ) { Vector2 r = this . mul ( NUM_ - alpha ) ; r . add ( target . tmp ( ) . mul ( alpha ) ) ; return r ; }
public boolean isFile ( FilePath path ) ;
public void endDocument ( ) throws SAXException { if ( contentHandler != null ) { contentHandler . endDocument ( ) ; } }
public ImageContainer ( Bitmap bitmap , String requestUrl , String cacheKey , ImageListener listener ) { mBitmap = bitmap ; mRequestUrl = requestUrl ; mCacheKey = cacheKey ; mListener = listener ; }
public void addRole ( Role role ) { roles . put ( role . getId ( ) , role ) ; }
public DataField ( ) { }
public void handleResponse ( T response ) ;
public boolean diff ( WorkSource other ) { int N = mNum ; if ( N != other . mNum ) { return BOOL_ ; } final int [ ] uids1 = mUids ; final int [ ] uids2 = other . mUids ; final String [ ] names1 = mNames ; final String [ ] names2 = other . mNames ; for ( int i = NUM_ ; i < N ; i ++ ) { if ( uids1 [ i ] != uids2 [ i ] ) { return BOOL_ ; } if ( names1 != null && names2 != null && ! names1 [ i ] . equals ( names2 [ i ] ) ) { return BOOL_ ; } } return BOOL_ ; }
public void logEvent ( StoredException storedException , Callback < Object > callback ) { sendLogEvent ( storedException . threadName , storedException . stackTrace , callback ) ; }
public boolean isDirty ( ) { return dirty ; }
public ControllerProfile ( ) { }
public int responseCode ( ) { return responseCode ; }
public FunctionTreeBlockNode ( final BasicBlock basicBlock ) { m_basicBlock = basicBlock ; setIcon ( ICON ) ; }
public void killCurrentRequest ( ) { current . kill ( ) ; }
private BakedBezierInterpolator ( ) { super ( ) ; }
public boolean process ( ) throws ResourceNotFoundException { BufferedReader reader = null ; try { StringWriter sw = new StringWriter ( ) ; reader = new BufferedReader ( new InputStreamReader ( resourceLoader . getResourceStream ( name ) , encoding ) ) ; char buf [ ] = new char [ NUM_ ] ; int len = NUM_ ; while ( ( len = reader . read ( buf , NUM_ , NUM_ ) ) != - NUM_ ) sw . write ( buf , NUM_ , len ) ; setData ( sw . toString ( ) ) ; return BOOL_ ; } catch ( ResourceNotFoundException e ) { throw e ; } catch ( Exception e ) { rsvc . error ( STR_ + e . toString ( ) ) ; return BOOL_ ; } finally { if ( reader != null ) { try { reader . close ( ) ; } catch ( Exception ignored ) { } } } }
private void returnData ( Object ret ) { if ( myHost != null ) { myHost . returnData ( ret ) ; } }
void doReps ( ObjectOutputStream oout , ObjectInputStream oin , StreamBuffer sbuf , int nbatches , int ncycles ) throws Exception { for ( int i = NUM_ ; i < nbatches ; i ++ ) { sbuf . reset ( ) ; for ( int j = NUM_ ; j < ncycles ; j ++ ) { oout . writeChar ( STR_ ) ; } oout . flush ( ) ; for ( int j = NUM_ ; j < ncycles ; j ++ ) { oin . readChar ( ) ; } } }
public boolean isResponseAvailable ( ) throws IOException { LOG . trace ( STR_ ) ; if ( this . isOpen ) { return this . inputStream . available ( ) > NUM_ ; } else { return BOOL_ ; } }
void mkdirs ( String path ) throws IOException ;
public void addPropertyChangeListener ( String propertyName , PropertyChangeListener in_pcl ) { beanContextChildSupport . addPropertyChangeListener ( propertyName , in_pcl ) ; }
public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { log . info ( STR_ + request . getRemoteHost ( ) + STR_ + request . getRemoteAddr ( ) ) ; if ( ! processSystemRegistration ( request , response ) ) { log . info ( STR_ ) ; if ( ! response . isCommitted ( ) ) response . sendRedirect ( STR_ ) ; } }
private static byte [ ] streamToBytes ( InputStream in , int length ) throws IOException { byte [ ] bytes = new byte [ length ] ; int count ; int pos = NUM_ ; while ( pos < length && ( ( count = in . read ( bytes , pos , length - pos ) ) != - NUM_ ) ) { pos += count ; } if ( pos != length ) { throw new IOException ( STR_ + length + STR_ + pos + STR_ ) ; } return bytes ; }
public ChangeModifiers ( ChangeModifiers modifiers1 , ChangeModifiers modifiers2 , ChangeModifiers modifiers3 ) { super ( modifiers1 , modifiers2 , modifiers3 ) ; }
public Vector cross ( Vector other ) { return new Vector ( y * other . z - z * other . y , z * other . x - x * other . z , x * other . y - y * other . x ) ; }
public String postProcessing ( String text ) { String [ ] lines = text . split ( STR_ ) ; String ret = STR_ ; for ( String line : lines ) { String [ ] words = line . split ( STR_ ) ; String templine = STR_ ; for ( String currentWord : words ) { String [ ] syllables = currentWord . split ( STR_ ) ; boolean isContainNotValidSyll = BOOL_ ; for ( String syllable : syllables ) { VnSyllParser parser = new VnSyllParser ( syllable . toLowerCase ( ) ) ; if ( ! parser . isValidVnSyllable ( ) ) { isContainNotValidSyll = BOOL_ ; break ; } } if ( isContainNotValidSyll ) { String temp = STR_ ; for ( String syll : syllables ) { temp += syll + STR_ ; } templine += temp . trim ( ) + STR_ ; } else templine += currentWord + STR_ ; } ret += templine . trim ( ) + STR_ ; } return ret . trim ( ) ; }
public void encode ( DerOutputStream out ) throws IOException { if ( isEmpty ( ) ) { return ; } DerOutputStream temp = new DerOutputStream ( ) ; for ( GeneralName gn : names ) { gn . encode ( temp ) ; } out . write ( DerValue . tag_Sequence , temp ) ; }
public int indexOf ( T o ) ;
public void scrollToPage ( int page ) ;
public static int readSwappedInteger ( InputStream input ) throws IOException { int value1 = read ( input ) ; int value2 = read ( input ) ; int value3 = read ( input ) ; int value4 = read ( input ) ; return ( ( value1 & NUM_ ) << NUM_ ) + ( ( value2 & NUM_ ) << NUM_ ) + ( ( value3 & NUM_ ) << NUM_ ) + ( ( value4 & NUM_ ) << NUM_ ) ; }
public void drawEllipseMap ( Position p , int xrad , int yrad , Color color ) { drawEllipseMap_native ( pointer , p , xrad , yrad , color ) ; }
public String toShortString ( StringBuilder sb ) { sb . setLength ( NUM_ ) ; sb . append ( STR_ ) ; sb . append ( left ) ; sb . append ( STR_ ) ; sb . append ( top ) ; sb . append ( STR_ ) ; sb . append ( right ) ; sb . append ( STR_ ) ; sb . append ( bottom ) ; sb . append ( STR_ ) ; return sb . toString ( ) ; }
public native String column_table_name ( int col ) throws SQLite . Exception ;
private void writeJFXXSegment ( int index , BufferedImage thumbnail , ImageOutputStream ios , JPEGImageWriter writer ) throws IOException { JFIFExtensionMarkerSegment jfxx = null ; try { jfxx = new JFIFExtensionMarkerSegment ( thumbnail ) ; } catch ( IllegalThumbException e ) { writer . warningOccurred ( JPEGImageWriter . WARNING_ILLEGAL_THUMBNAIL ) ; return ; } writer . thumbnailStarted ( index ) ; jfxx . write ( ios , writer ) ; writer . thumbnailComplete ( ) ; }
public static void addURL ( URL u ) throws IOException { URLClassLoader sysLoader = ( URLClassLoader ) ClassLoader . getSystemClassLoader ( ) ; URL urls [ ] = sysLoader . getURLs ( ) ; for ( int i = NUM_ ; i < urls . length ; i ++ ) { if ( urls [ i ] . toString ( ) . equalsIgnoreCase ( u . toString ( ) ) ) { return ; } } Class sysclass = URLClassLoader . class ; try { Method method = sysclass . getDeclaredMethod ( STR_ , parameters ) ; method . setAccessible ( BOOL_ ) ; method . invoke ( sysLoader , new Object [ ] { u } ) ; } catch ( NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException t ) { throw new IOException ( STR_ ) ; } }
public static boolean equal ( File file1 , File file2 ) throws IOException { checkNotNull ( file1 ) ; checkNotNull ( file2 ) ; if ( file1 == file2 || file1 . equals ( file2 ) ) { return BOOL_ ; } long len1 = file1 . length ( ) ; long len2 = file2 . length ( ) ; if ( len1 != NUM_ && len2 != NUM_ && len1 != len2 ) { return BOOL_ ; } return asByteSource ( file1 ) . contentEquals ( asByteSource ( file2 ) ) ; }
public int flags ( ) { return theFlags ; }
void onSuccess ( File file ) ;
public boolean isControlClusterUpgradable ( ) { ClusterInfo . ClusterState state = _coordinator . getControlNodesState ( ) ; return ( state != null && ( state . equals ( ClusterInfo . ClusterState . STABLE ) || state . equals ( ClusterInfo . ClusterState . INITIALIZING ) ) ) ; }
public void free ( GL2 gl ) { if ( vbos [ NUM_ ] >= NUM_ ) { gl . glDeleteBuffers ( NUM_ , vbos , NUM_ ) ; } vbos [ NUM_ ] = - NUM_ ; }
public < U > U reduceKeys ( long parallelismThreshold , Function < ? super K , ? extends U > transformer , BiFunction < ? super U , ? super U , ? extends U > reducer ) { if ( transformer == null || reducer == null ) throw new NullPointerException ( ) ; return new MapReduceKeysTask < K , V , U > ( null , batchFor ( parallelismThreshold ) , NUM_ , NUM_ , table , null , transformer , reducer ) . invoke ( ) ; }
protected void prepare ( ) { m_AD_Client_ID = Env . getAD_Client_ID ( Env . getCtx ( ) ) ; ProcessInfoParameter [ ] para = getParameter ( ) ; for ( int i = NUM_ ; i < para . length ; i ++ ) { String name = para [ i ] . getParameterName ( ) ; if ( para [ i ] . getParameter ( ) == null ) ; else if ( name . equals ( STR_ ) ) { p_AD_Org_ID = para [ i ] . getParameterAsInt ( ) ; } else if ( name . equals ( STR_ ) ) { p_S_Resource_ID = para [ i ] . getParameterAsInt ( ) ; } else if ( name . equals ( STR_ ) ) { p_M_Warehouse_ID = para [ i ] . getParameterAsInt ( ) ; } else log . log ( Level . SEVERE , STR_ + name ) ; } }
public EntityQuery cursorScrollInsensitive ( ) { this . resultSetType = EntityFindOptions . TYPE_SCROLL_INSENSITIVE ; return this ; }
private void scanCategories ( ) { presetCategories . clear ( ) ; for ( AddressbookEntry entry : entries . values ( ) ) { addPresetCategories ( entry . getCategories ( ) ) ; } }
public JsonValue initiateAuthentication ( HttpServletRequest request , HttpServletResponse response , String authIndexType , String indexValue , String sessionUpgradeSSOTokenId ) throws RestAuthException { return authenticate ( request , response , null , authIndexType , indexValue , sessionUpgradeSSOTokenId ) ; }
private void writePacketOutForPacketIn ( IOFSwitch sw , OFPacketIn packetInMessage , OFPort egressPort ) { OFPacketOut . Builder pob = sw . getOFFactory ( ) . buildPacketOut ( ) ; pob . setBufferId ( packetInMessage . getBufferId ( ) ) ; pob . setInPort ( packetInMessage . getVersion ( ) . compareTo ( OFVersion . OF_12 ) < NUM_ ? packetInMessage . getInPort ( ) : packetInMessage . getMatch ( ) . get ( MatchField . IN_PORT ) ) ; List < OFAction > actions = new ArrayList < OFAction > ( NUM_ ) ; actions . add ( sw . getOFFactory ( ) . actions ( ) . buildOutput ( ) . setPort ( egressPort ) . setMaxLen ( Integer . MAX_VALUE ) . build ( ) ) ; pob . setActions ( actions ) ; if ( packetInMessage . getBufferId ( ) == OFBufferId . NO_BUFFER ) { byte [ ] packetData = packetInMessage . getData ( ) ; pob . setData ( packetData ) ; } counterPacketOut . increment ( ) ; sw . write ( pob . build ( ) ) ; }
public Topology buildAppTopology ( ) { Topology t = tp . newTopology ( STR_ ) ; TStream < String > msgs = t . poll ( new MsgSupplier ( options . get ( OPT_PUB_CNT ) ) , NUM_ , TimeUnit . SECONDS ) ; MqttConfig config = Runner . newConfig ( options ) ; MqttStreams mqtt = new MqttStreams ( t , null ) ; mqtt . publish ( msgs , options . get ( OPT_TOPIC ) , options . get ( OPT_QOS ) , options . get ( OPT_RETAIN ) ) ; return t ; }
public String print ( ReadablePartial partial ) { StringBuffer buf = new StringBuffer ( requirePrinter ( ) . estimatePrintedLength ( ) ) ; printTo ( buf , partial ) ; return buf . toString ( ) ; }
public static boolean hasParameter ( String parameterName ) { return parameterMap . containsKey ( parameterName ) ; }
public Response api ( final String url , final String methodType , final Map < String , String > params , final Map < String , String > headerParams , final String body ) throws Exception { Response response ; try { response = getCurrentProvider ( ) . api ( url , methodType , params , headerParams , body ) ; } catch ( Exception e ) { throw new SocialAuthException ( STR_ + url , e ) ; } return response ; }
StatelessOp ( AbstractPipeline < ? , E_IN , ? > upstream , StreamShape inputShape , int opFlags ) { super ( upstream , opFlags ) ; assert upstream . getOutputShape ( ) == inputShape ; }
public static Value binopRhs ( Unit unit ) { return binop ( rhs ( unit ) ) ; }
< T , S extends BaseStream < T , S > , R > S assertNCallsOnly ( S s , BiFunction < S , Consumer < T > , S > pf , int n ) { AtomicInteger boxedInt = new AtomicInteger ( ) ; return pf . apply ( s , null ) ; }
public void traceObjectNotInBootImage ( ) { traceNulledWord ( STR_ ) ; }
public void show ( ) { if ( mNextView == null ) { throw new RuntimeException ( STR_ ) ; } TN tn = mTN ; tn . mNextView = mNextView ; Message . obtain ( mHandler , MSG_ENQUEUE_TOAST , this ) . sendToTarget ( ) ; }
void duplicateErasureError ( DiagnosticPosition pos , Symbol sym1 , Symbol sym2 ) { if ( ! sym1 . type . isErroneous ( ) && ! sym2 . type . isErroneous ( ) ) { log . error ( pos , STR_ , sym1 , sym2 ) ; } }
HandlerRegistration addSubmitValuesHandler ( SubmitValuesHandler handler ) ;
public BindException ( String detailMessage ) { super ( detailMessage ) ; }
private void replacePackageName ( String filePath ) { try { Path path = Paths . get ( filePath ) ; Charset charset = StandardCharsets . UTF_8 ; String content = new String ( Files . readAllBytes ( path ) , charset ) ; content = content . replaceAll ( STR_ , STR_ ) ; Files . write ( path , content . getBytes ( charset ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
public Ceiling ( ) { super ( STR_ , NUM_ ) ; }
public static final Criterion uid ( UidRange [ ] range ) { return new UidCriterion ( range ) ; }
public MenuItem add ( CharSequence title ) ;
public ImageResizer ( Context context , int imageWidth , int imageHeight ) { super ( context ) ; setImageSize ( imageWidth , imageHeight ) ; }
public int capacity ( ) { return buffer . length ; }
public boolean put ( Object object ) throws InterruptedException , CacheException ;
static private byte [ ] toBytes ( ASN1OctetString [ ] octs ) { ByteArrayOutputStream bOut = new ByteArrayOutputStream ( ) ; for ( int i = NUM_ ; i != octs . length ; i ++ ) { try { DEROctetString o = ( DEROctetString ) octs [ i ] ; bOut . write ( o . getOctets ( ) ) ; } catch ( ClassCastException e ) { throw new IllegalArgumentException ( octs [ i ] . getClass ( ) . getName ( ) + STR_ ) ; } catch ( IOException e ) { throw new IllegalArgumentException ( STR_ + e . toString ( ) ) ; } } return bOut . toByteArray ( ) ; }
public BeanContextServicesSupport ( BeanContextServices peer , Locale lcle ) { this ( peer , lcle , BOOL_ , BOOL_ ) ; }
public void close ( ) { if ( cache != null ) { CloseableUtils . closeQuietly ( cache ) ; } if ( serviceDiscovery != null ) { CloseableUtils . closeQuietly ( serviceDiscovery ) ; } }
public Promise < Void > applyChosenImports ( String projectPath , String fqn , ConflictImportDTO chosen ) { String url = appContext . getDevMachine ( ) . getWsAgentBaseUrl ( ) + CODE_ASSIST_URL_PREFIX + STR_ + projectPath + STR_ + fqn ; return asyncRequestFactory . createPostRequest ( url , chosen ) . loader ( loader ) . header ( CONTENT_TYPE , MimeType . APPLICATION_JSON ) . send ( ) ; }
private void pushRun ( int runBase , int runLen ) { this . runBase [ stackSize ] = runBase ; this . runLen [ stackSize ] = runLen ; stackSize ++ ; }
public void disconnected ( ) { }
public static _Fields findByThriftIdOrThrow ( int fieldId ) { _Fields fields = findByThriftId ( fieldId ) ; if ( fields == null ) throw new IllegalArgumentException ( STR_ + fieldId + STR_ ) ; return fields ; }
public Response onCommand ( POP3Session session , Request request ) { String parameters = request . getArgument ( ) ; if ( session . getHandlerState ( ) == POP3Session . AUTHENTICATION_READY && parameters != null ) { session . setUser ( parameters ) ; session . setHandlerState ( POP3Session . AUTHENTICATION_USERSET ) ; return POP3Response . OK ; } else { return POP3Response . ERR ; } }
private void initializeListeners ( ) { m_node . addListener ( m_listener ) ; }
public boolean isMapExistsProperty ( Map < String , Object > map ) ;
public void clear ( ) { try { this . writeLock . lock ( ) ; this . messages . clear ( ) ; } finally { this . writeLock . unlock ( ) ; } }
public static boolean canConvert ( Object fromObj , Class < ? > to ) { int weight = getConversionWeight ( fromObj , to ) ; return ( weight < CONVERSION_NONE ) ; }
public void paintTextPaneBorder ( SynthContext context , Graphics g , int x , int y , int w , int h ) { paintBorder ( context , g , x , y , w , h , null ) ; }
public void applyHeartbeat ( Database database , Timestamp sourceTimestamp , String name ) throws SQLException { ArrayList < Column > whereClause = new ArrayList < Column > ( ) ; ArrayList < Column > values = new ArrayList < Column > ( ) ; if ( logger . isDebugEnabled ( ) ) logger . debug ( STR_ + name + STR_ + sourceTimestamp ) ; hbId . setValue ( KEY ) ; whereClause . add ( hbId ) ; hbSourceTstamp . setValue ( sourceTimestamp ) ; hbName . setValue ( name ) ; values . add ( hbSourceTstamp ) ; values . add ( hbName ) ; database . update ( hbTable , whereClause , values ) ; }
protected void excludeNotCovered ( ModifiableDoubleDBIDList candidates , double fmax , ModifiableDoubleDBIDList collect ) { for ( DoubleDBIDListIter it = candidates . iter ( ) ; it . valid ( ) ; ) { if ( it . doubleValue ( ) > fmax ) { collect . add ( it . doubleValue ( ) , it ) ; candidates . removeSwap ( it . getOffset ( ) ) ; } else { it . advance ( ) ; } } }
boolean isPersistent ( ) ;
public void highlight ( OMGraphic omg ) { }
private void ensureBlobNamespace ( ElementHandler handler , String qName ) { NamespaceDecl nsDecl = null ; String alias = qName . substring ( NUM_ , Math . max ( NUM_ , qName . indexOf ( STR_ ) ) ) ; if ( alias . equals ( STR_ ) ) { return ; } Stack < NamespaceDecl > mapping = namespaceMap . get ( alias ) ; if ( mapping != null ) { nsDecl = mapping . peek ( ) ; } assert alias . length ( ) == NUM_ || nsDecl != null : STR_ + alias + STR_ ; if ( nsDecl != null && ! nsDecl . inBlob && nsDecl . ns != null && ! handler . blobNamespaces . contains ( alias ) ) { handler . blobNamespaces . add ( alias ) ; handler . xmlBlob . getNamespaces ( ) . add ( new XmlNamespace ( alias , nsDecl . ns . getUri ( ) ) ) ; } }
void showUsage ( ) { new L10nJCommander ( ) . usage ( getName ( ) ) ; }
private static final boolean compareAndSetWaitStatus ( Node node , int expect , int update ) { return unsafe . compareAndSwapInt ( node , waitStatusOffset , expect , update ) ; }
public static void add ( Matrix a , Matrix b , Matrix result ) { for ( int i = NUM_ ; i < a . rows ; i ++ ) { for ( int j = NUM_ ; j < a . cols ; j ++ ) { result . set ( i , j , a . get ( i , j ) + b . get ( i , j ) ) ; } } }
public void reset ( ) { isFilling = BOOL_ ; length = NUM_ ; sequenceExtensionPosition = NUM_ ; }
public SortedSetDocValuesField ( String name , BytesRef bytes ) { super ( name , TYPE ) ; fieldsData = bytes ; }
public void init$Children ( ) { }
public void invalidateSession ( ) ;
public void testAccumulateAndGet ( ) { DoubleAccumulator ai = new DoubleAccumulator ( null , NUM_ ) ; ai . accumulate ( NUM_ ) ; assertEquals ( NUM_ , ai . get ( ) ) ; ai . accumulate ( - NUM_ ) ; assertEquals ( NUM_ , ai . get ( ) ) ; ai . accumulate ( NUM_ ) ; assertEquals ( NUM_ , ai . get ( ) ) ; }
E pollLast ( long timeout , TimeUnit unit ) throws InterruptedException ;
public int lookupId ( String featureName ) { int featureHash = getFeatureHash ( featureName ) ; return feature2Id . get ( featureHash ) ; }
public void startSync ( ) { if ( DebugFlags . WEB_SYNC_MANAGER ) { Log . v ( LOGTAG , STR_ + mStartSyncRefCount ) ; } if ( mHandler == null ) { return ; } if ( ++ mStartSyncRefCount == NUM_ ) { Message msg = mHandler . obtainMessage ( SYNC_MESSAGE ) ; mHandler . sendMessageDelayed ( msg , SYNC_LATER_INTERVAL ) ; } }
public abstract boolean isFunctionAvailable ( String function ) ;
final int queueSize ( ) { int n = base - top ; return ( n >= NUM_ ) ? NUM_ : - n ; }
public abstract void filesDropped ( java . io . File [ ] files ) ;
public static InlineQueryResultVoiceBuilder builder ( ) { return new InlineQueryResultVoiceBuilder ( ) ; }
public boolean isParameterized ( ) { EList < TypeRef > _typeArgs = this . getTypeArgs ( ) ; boolean _isEmpty = _typeArgs . isEmpty ( ) ; return ( ! _isEmpty ) ; }
public void resetCount ( ) { mProgress = NUM_ ; mTargetProgress = NUM_ ; invalidate ( ) ; }
private static Method findMethod ( Object instance , String name , Class < ? > ... parameterTypes ) throws NoSuchMethodException { for ( Class < ? > clazz = instance . getClass ( ) ; clazz != null ; clazz = clazz . getSuperclass ( ) ) { try { Method method = clazz . getDeclaredMethod ( name , parameterTypes ) ; if ( ! method . isAccessible ( ) ) { method . setAccessible ( BOOL_ ) ; } return method ; } catch ( NoSuchMethodException e ) { } } throw new NoSuchMethodException ( STR_ + name + STR_ + Arrays . asList ( parameterTypes ) + STR_ + instance . getClass ( ) ) ; }
private void validateState ( State current ) { ValidationUtils . validateState ( current ) ; }
public void add ( Resource child ) ;
public XYDatasetTableModel ( TableXYDataset dataset ) { this ( ) ; this . model = dataset ; this . model . addChangeListener ( this ) ; }
void stop ( ) { printAllPostponedMessages ( ) ; flushTimer . cancel ( ) ; }
public void addIceServers ( PeerConnection . IceServer iceServers ) { if ( this . iceServers == null ) { this . iceServers = new ArrayList < PeerConnection . IceServer > ( ) ; } this . iceServers . add ( NUM_ , iceServers ) ; }
public Iterator inEdges ( ) ;
protected void clickPassButton ( ) { getActivity ( ) . findViewById ( R . id . btn_pass ) . performClick ( ) ; }
private static OFActionSetNwDst decode_set_dst_ip ( String actionToDecode , OFVersion version , Logger log ) { Matcher n = Pattern . compile ( STR_ ) . matcher ( actionToDecode ) ; if ( n . matches ( ) ) { IPv4Address ipaddr = IPv4Address . of ( get_ip_addr ( n , actionToDecode , log ) ) ; OFActionSetNwDst . Builder ab = OFFactories . getFactory ( version ) . actions ( ) . buildSetNwDst ( ) ; ab . setNwAddr ( ipaddr ) ; log . debug ( STR_ , ab . build ( ) ) ; return ab . build ( ) ; } else { log . debug ( STR_ , actionToDecode ) ; return null ; } }
public static EncodedImage create ( String i ) throws IOException { return create ( Display . getInstance ( ) . getResourceAsStream ( EncodedImage . class , i ) ) ; }
public void sort ( ) { Collections . sort ( testCases ) ; }
public void addItemFromInflater ( Preference preference ) { addPreference ( preference ) ; }
private void showFeedback ( String message ) { if ( myHost != null ) { myHost . showFeedback ( message ) ; } else { System . out . println ( message ) ; } }
public ReprocessEpubMetadataDialog ( java . awt . Frame parent , boolean modal , boolean removeCss , boolean restoreCss , File defaultStyleSheet , String onlyForTag ) { super ( parent , modal ) ; setLocationRelativeTo ( parent ) ; initComponents ( ) ; this . removeCss = removeCss ; this . restoreCss = restoreCss ; this . defaultStyleSheet = defaultStyleSheet ; this . onlyForTag = onlyForTag ; }
boolean isUsedForWriting ( ) ;
public static void createTable ( SQLiteDatabase db , boolean ifNotExists ) { String constraint = ifNotExists ? STR_ : STR_ ; db . execSQL ( STR_ + constraint + TABLENAME + STR_ + STR_ + STR_ + STR_ + STR_ ) ; }
public static boolean isUriParamResource ( String resource ) { if ( resource == null ) { return BOOL_ ; } resource = NamingHelper . cleanLeadingAndTrailingNewLineAndChars ( resource . toLowerCase ( ) ) ; if ( resource . startsWith ( STR_ ) && resource . endsWith ( STR_ ) ) { return BOOL_ ; } else { return BOOL_ ; } }
public boolean isPsuedoVarRef ( ) { java . lang . String ns = m_qname . getNamespaceURI ( ) ; if ( ( null != ns ) && ns . equals ( PSUEDOVARNAMESPACE ) ) { if ( m_qname . getLocalName ( ) . startsWith ( STR_ ) ) return BOOL_ ; } return BOOL_ ; }
public static OCSPResp createOCSPResponse ( X509Certificate subject , X509Certificate issuer , X509Certificate signer , PrivateKey signerKey , CertificateStatus certStatus ) throws Exception { return createOCSPResponse ( subject , issuer , signer , signerKey , certStatus , null , null ) ; }
void commit ( ) ;
public String toString ( ) { return uri ; }
public GetFormKeyCmd ( String processDefinitionId , String taskDefinitionKey ) { setProcessDefinitionId ( processDefinitionId ) ; if ( taskDefinitionKey == null || taskDefinitionKey . length ( ) < NUM_ ) { throw new ActivitiIllegalArgumentException ( STR_ + taskDefinitionKey + STR_ ) ; } this . taskDefinitionKey = taskDefinitionKey ; }
void onViewSwipedToRight ( int position ) ;
public String xmlToCsv ( UpdateInventoryInput input ) { return input . getSupplierId ( ) + STR_ + input . getPartId ( ) + STR_ + input . getName ( ) + STR_ + input . getAmount ( ) ; }
public Period ( long startInstant , long endInstant , Chronology chrono ) { super ( startInstant , endInstant , null , chrono ) ; }
private PointF transformCoordBitmapToTouch ( float bx , float by ) { matrix . getValues ( m ) ; float origW = getDrawable ( ) . getIntrinsicWidth ( ) ; float origH = getDrawable ( ) . getIntrinsicHeight ( ) ; float px = bx / origW ; float py = by / origH ; float finalX = m [ Matrix . MTRANS_X ] + getImageWidth ( ) * px ; float finalY = m [ Matrix . MTRANS_Y ] + getImageHeight ( ) * py ; return new PointF ( finalX , finalY ) ; }
public boolean isWhitespace ( int nodeHandle ) { int identity = makeNodeIdentity ( nodeHandle ) ; int type ; if ( identity == DTM . NULL ) type = DTM . NULL ; else type = _type ( identity ) ; if ( isTextType ( type ) ) { int dataIndex = _dataOrQName ( identity ) ; int offset = m_data . elementAt ( dataIndex ) ; int length = m_data . elementAt ( dataIndex + NUM_ ) ; return m_chars . isWhitespace ( offset , length ) ; } return BOOL_ ; }
boolean hasData ( final Context context ) { return context . buffer != null ; }
public void visit ( BinaryNode < K > parent , BinaryNode < K > n ) { if ( parent != null && ! nodes . contains ( parent ) ) { visitNode ( parent ) ; } if ( ! nodes . contains ( n ) ) { visitNode ( n ) ; } if ( parent != null ) { visitEdge ( parent , n ) ; } }
public static final double [ ] rotate90Equals ( final double [ ] v1 ) { assert ( v1 . length == NUM_ ) : STR_ ; double temp = v1 [ NUM_ ] ; v1 [ NUM_ ] = v1 [ NUM_ ] ; v1 [ NUM_ ] = - temp ; return v1 ; }
public int indexOf ( String arg ) { return arguments . indexOf ( arg ) ; }
private void applyAndAnimateRemovals ( List < T > from , List < T > newItems ) { hashItems = new HashSet < > ( newItems ) ; int out = NUM_ ; for ( int i = from . size ( ) - NUM_ ; i >= NUM_ ; i -- ) { if ( mFilterAsyncTask != null && mFilterAsyncTask . isCancelled ( ) ) return ; final T item = from . get ( i ) ; if ( ! hashItems . contains ( item ) && ( ! isHeader ( item ) || ( isHeader ( item ) && headersShown ) ) ) { from . remove ( i ) ; notifications . add ( new Notification ( i , Notification . REMOVE ) ) ; out ++ ; } else if ( notifyChangeOfUnfilteredItems ) { from . set ( i , item ) ; notifications . add ( new Notification ( i , Notification . CHANGE ) ) ; } } hashItems = null ; if ( DEBUG ) Log . v ( TAG , STR_ + out ) ; }
private static boolean checkInstanceIdsReturnedFromAWS ( int numberOfInstance , List < String > instanceIds ) { if ( instanceIds == null || instanceIds . size ( ) == NUM_ ) { return BOOL_ ; } return ( instanceIds . size ( ) == numberOfInstance ) ; }
public boolean maxValue ( long val , long maxVal ) { return GenericValidator . maxValue ( val , maxVal ) ; }
static private double normalizeProb ( double [ ] prob ) { double maxp = NUM_ , sump = NUM_ ; for ( int i = NUM_ ; i < prob . length ; ++ i ) sump += prob [ i ] ; for ( int i = NUM_ ; i < prob . length ; ++ i ) { double p = prob [ i ] / sump ; if ( maxp < p ) maxp = p ; prob [ i ] = p ; } return maxp ; }
public void close ( ) { player . close ( ) ; if ( mLogger . isActivated ( ) ) { mLogger . debug ( STR_ ) ; } }
public Object findFeature ( Item item ) { if ( INTERPRET_PATHS ) { return item . findFeature ( path ) ; } Item pitem = findItem ( item ) ; Object results = null ; if ( pitem != null ) { Utilities . debug ( STR_ + pitem + STR_ + feature + STR_ ) ; FeatureProcessor fp = pitem . getOwnerRelation ( ) . getUtterance ( ) . getVoice ( ) . getFeatureProcessor ( feature ) ; if ( fp != null ) { Utilities . debug ( STR_ + feature + STR_ ) ; try { results = fp . process ( pitem ) ; } catch ( ProcessException pe ) { pitem . getOwnerRelation ( ) . getUtterance ( ) . getVoice ( ) . error ( STR_ + fp ) ; } } else { results = pitem . getFeatures ( ) . getObject ( feature ) ; } } results = ( results == null ) ? STR_ : results ; Utilities . debug ( STR_ + results + STR_ ) ; return results ; }
public final ByteBuffer order ( ByteOrder byteOrder ) { if ( byteOrder == null ) { byteOrder = ByteOrder . LITTLE_ENDIAN ; } order = byteOrder ; return this ; }
private boolean validateSubGroupsParam ( List < String > subGroups , VolumeGroup application ) { Set < String > appSubGroups = CopyVolumeGroupUtils . getReplicationGroupNames ( application , _dbClient ) ; if ( ! appSubGroups . containsAll ( subGroups ) ) { throw APIException . badRequests . invalidCopySetNamesProvided ( StringUtils . join ( subGroups . iterator ( ) , STR_ ) , ReplicaTypeEnum . FULL_COPY . toString ( ) ) ; } return ( appSubGroups . size ( ) != subGroups . size ( ) ) ; }
private static void usage ( final String msg ) { System . err . println ( msg ) ; System . err . println ( STR_ ) ; }
public String process ( String uri ) { String rewritten = uri ; if ( isRewriting ) { Matcher matcher = matchPattern . matcher ( uri ) ; rewritten = matcher . replaceAll ( rewriteTo ) ; log . debug ( STR_ + uri + STR_ + rewritten ) ; } return rewritten ; }
private void printUsage ( String i18nMsg , boolean toStdErr ) { if ( toStdErr ) { System . err . println ( i18nMsg ) ; } else { System . out . println ( i18nMsg ) ; } }
public int size ( ) ;
public void addError ( VcsException ex ) { myErrors . add ( ex ) ; }
public boolean removeBackupFiles ( ) { return removeBackupFilesArg . isPresent ( ) ; }
public static void main ( final String [ ] args ) { CoordinateTransformation ct = args . length == NUM_ ? TransformationFactory . getCoordinateTransformation ( STR_ , args [ NUM_ ] ) : null ; Osm2TransitSchedule osm2mts = new Osm2TransitSchedule ( ScheduleTools . createSchedule ( ) , ct ) ; osm2mts . parse ( args [ NUM_ ] ) ; osm2mts . createSchedule ( ) ; osm2mts . writeFile ( args [ NUM_ ] ) ; }
public boolean isItalic ( ) { return italic ; }
public HadoopProcessDescriptor localProcessDescriptor ( ) { return locProcDesc ; }
private static String readResourceProperty ( String propertyKey ) { Properties props = new Properties ( ) ; try ( InputStream resourceAsStream = PlatformUtilities . class . getResourceAsStream ( STR_ ) ) { if ( resourceAsStream == null ) { logInfo ( STR_ ) ; return null ; } else { props . load ( resourceAsStream ) ; } } catch ( IOException e ) { logWarn ( STR_ + e . getLocalizedMessage ( ) ) ; } return props . getProperty ( propertyKey ) ; }
public String [ ] listGatewaySenders ( ) ;
public static String toString ( long [ ] v , int minw ) { if ( v == null ) { return STR_ ; } int mag = magnitude ( v ) ; mag = mag >= minw ? mag : minw ; if ( mag == NUM_ ) { return STR_ ; } char [ ] digits = new char [ mag ] ; int pos = mag - NUM_ ; outer : for ( int w = NUM_ ; w < v . length ; w ++ ) { long f = NUM_ ; for ( int i = NUM_ ; i < Long . SIZE ; i ++ ) { digits [ pos ] = ( ( v [ w ] & f ) == NUM_ ) ? STR_ : STR_ ; f <<= NUM_ ; -- pos ; if ( pos < NUM_ ) { break outer ; } } } for ( ; pos >= NUM_ ; -- pos ) { digits [ pos ] = STR_ ; } return new String ( digits ) ; }
public static void removeConstraint ( Constraint constraint ) { TestChildCfgDefn . getInstance ( ) . deregisterConstraint ( constraint ) ; }
void changedStatus ( boolean enabled ) ;
protected void fireRemoveUpdate ( DocumentEvent e ) { notifyingListeners = BOOL_ ; try { Object [ ] listeners = listenerList . getListenerList ( ) ; for ( int i = listeners . length - NUM_ ; i >= NUM_ ; i -= NUM_ ) { if ( listeners [ i ] == DocumentListener . class ) { ( ( DocumentListener ) listeners [ i + NUM_ ] ) . removeUpdate ( e ) ; } } } finally { notifyingListeners = BOOL_ ; } }
public boolean isMetaphoneEqual ( String str1 , String str2 ) { return metaphone ( str1 ) . equals ( metaphone ( str2 ) ) ; }
public void add ( Permission permission ) { if ( ! ( permission instanceof PropertyPermission ) ) throw new IllegalArgumentException ( STR_ + permission ) ; if ( isReadOnly ( ) ) throw new SecurityException ( STR_ ) ; PropertyPermission pp = ( PropertyPermission ) permission ; String propName = pp . getName ( ) ; synchronized ( this ) { PropertyPermission existing = perms . get ( propName ) ; if ( existing != null ) { int oldMask = existing . getMask ( ) ; int newMask = pp . getMask ( ) ; if ( oldMask != newMask ) { int effective = oldMask | newMask ; String actions = PropertyPermission . getActions ( effective ) ; perms . put ( propName , new PropertyPermission ( propName , actions ) ) ; } } else { perms . put ( propName , pp ) ; } } if ( ! all_allowed ) { if ( propName . equals ( STR_ ) ) all_allowed = BOOL_ ; } }
public void testBogusArguments ( ) throws Exception { IllegalArgumentException expected = expectThrows ( IllegalArgumentException . class , null ) ; assertTrue ( expected . getMessage ( ) . contains ( STR_ ) ) ; }
public static final int binarySearch ( int [ ] a , int key , int begin , int end ) { int x1 = begin ; int x2 = end ; int i = x1 + ( x2 - x1 ) / NUM_ ; while ( x1 < x2 ) { if ( a [ i ] == key ) { return i ; } else if ( a [ i ] < key ) { x1 = i + NUM_ ; } else { x2 = i ; } i = x1 + ( x2 - x1 ) / NUM_ ; } return - NUM_ * ( i + NUM_ ) ; }
private void doAcquireInterruptibly ( int arg ) throws InterruptedException { final Node node = addWaiter ( Node . EXCLUSIVE ) ; boolean failed = BOOL_ ; try { for ( ; ; ) { final Node p = node . predecessor ( ) ; if ( p == head && tryAcquire ( arg ) ) { setHead ( node ) ; p . next = null ; failed = BOOL_ ; return ; } if ( shouldParkAfterFailedAcquire ( p , node ) && parkAndCheckInterrupt ( ) ) throw new InterruptedException ( ) ; } } finally { if ( failed ) cancelAcquire ( node ) ; } }
private static boolean checkForString ( final byte [ ] data , final int offset , final char [ ] chars ) { for ( int i = NUM_ ; i < chars . length ; i ++ ) { if ( data [ offset + i ] != chars [ i ] ) { return BOOL_ ; } } return BOOL_ ; }
void onUpdateClicked ( ) ;
public Message sendMessageSynchronously ( Message msg ) { Message resultMsg = SyncMessenger . sendMessageSynchronously ( mDstMessenger , msg ) ; return resultMsg ; }
public void tileUpdate ( WritableRenderedImage source , int tileX , int tileY , boolean willBeWritable ) ;
protected void logStartSessionHandshake ( StartSessionMsg inStartSessionMsg , TopologyMsg outTopoMsg ) { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STR_ + this . replicationServer . getMonitorInstanceName ( ) + STR_ + getClass ( ) . getSimpleName ( ) + STR_ + this + STR_ + STR_ + inStartSessionMsg + STR_ + outTopoMsg ) ; } }
public static Map < String , List < Point > > readOneToMany ( final InputStream stream ) { if ( stream == null ) { return Collections . emptyMap ( ) ; } final HashMap < String , List < Point > > mapping = new HashMap < > ( ) ; try ( InputStreamReader inputStreamReader = new InputStreamReader ( stream ) ; LineNumberReader reader = new LineNumberReader ( inputStreamReader ) ) { String current = reader . readLine ( ) ; while ( current != null ) { if ( current . trim ( ) . length ( ) != NUM_ ) { readMultiple ( current , mapping ) ; } current = reader . readLine ( ) ; } } catch ( final IOException ioe ) { ClientLogger . logError ( ioe ) ; System . exit ( NUM_ ) ; } finally { try { stream . close ( ) ; } catch ( final IOException e ) { ClientLogger . logError ( e ) ; } } return mapping ; }
public void disable ( ) throws IOException { synchronized ( optOutLock ) { if ( ! isOptOut ( ) ) { configuration . set ( STR_ , BOOL_ ) ; configuration . save ( configurationFile ) ; } if ( task != null ) { task . cancel ( ) ; task = null ; } } }
Region ( int start , int end ) { this . start = start ; this . end = end ; updateAvailable ( ) ; }
double m12 ( ) ;
public StatelessScrollableDataIterator ( String hQuery , SessionFactory sessionFactory , int fetchSize , int from , int size ) { super ( hQuery , sessionFactory , fetchSize , from , size ) ; }
public String damageBayDoor ( ) { String bayType = STR_ ; Vector < Bay > potential ; potential = new Vector < Bay > ( ) ; Enumeration < Transporter > iter = transports . elements ( ) ; while ( iter . hasMoreElements ( ) ) { Transporter next = iter . nextElement ( ) ; if ( next instanceof Bay ) { Bay nextBay = ( Bay ) next ; if ( nextBay . getDoors ( ) > NUM_ ) { potential . add ( nextBay ) ; } } } if ( potential . size ( ) > NUM_ ) { Bay chosenBay = potential . elementAt ( Compute . randomInt ( potential . size ( ) ) ) ; chosenBay . destroyDoor ( ) ; chosenBay . resetDoors ( ) ; chosenBay . setDoors ( chosenBay . getDoors ( ) - NUM_ ) ; bayType = chosenBay . getType ( ) ; } return bayType ; }
protected ArrayList < Intersection > filterIntersectionsOnViewFrustum ( DrawContext dc , ArrayList < Intersection > list ) { Frustum vf = dc . getView ( ) . getFrustumInModelCoordinates ( ) ; int i = NUM_ ; while ( i < list . size ( ) ) { if ( vf . contains ( list . get ( i ) . getIntersectionPoint ( ) ) || vf . contains ( list . get ( i + NUM_ ) . getIntersectionPoint ( ) ) ) i += NUM_ ; else { list . remove ( i ) ; list . remove ( i ) ; } } return list ; }
private void min ( Page p , K from ) { while ( BOOL_ ) { if ( p . isLeaf ( ) ) { int x = from == null ? NUM_ : p . binarySearch ( from ) ; if ( x < NUM_ ) { x = - x - NUM_ ; } pos = new CursorPos ( p , x , pos ) ; break ; } int x = from == null ? - NUM_ : p . binarySearch ( from ) ; if ( x < NUM_ ) { x = - x - NUM_ ; } else { x ++ ; } pos = new CursorPos ( p , x + NUM_ , pos ) ; p = p . getChildPage ( x ) ; } }
public void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGet ( request , response ) ; }
public void reportInvalidMove ( Move m ) ;
boolean canZoom ( ) ;
protected void updateUIForMode ( ) { final LinearLayout . LayoutParams lp = getLoadingLayoutLayoutParams ( ) ; if ( this == mHeaderLayout . getParent ( ) ) { removeView ( mHeaderLayout ) ; } if ( mMode . showHeaderLoadingLayout ( ) ) { addViewInternal ( mHeaderLayout , NUM_ , lp ) ; } if ( this == mFooterLayout . getParent ( ) ) { removeView ( mFooterLayout ) ; } if ( mMode . showFooterLoadingLayout ( ) ) { addViewInternal ( mFooterLayout , lp ) ; } refreshLoadingViewsSize ( ) ; mCurrentMode = ( mMode != Mode . BOTH ) ? mMode : Mode . PULL_FROM_START ; }
protected boolean isToggleSelectionEvent ( MouseEvent event ) { return ( SwingUtilities . isLeftMouseButton ( event ) && BasicGraphicsUtils . isMenuShortcutKeyDown ( event ) ) ; }
public void removeCustomTickLabel ( final String TICK_LABEL ) { if ( null == TICK_LABEL ) return ; if ( customTickLabels . contains ( TICK_LABEL ) ) customTickLabels . remove ( TICK_LABEL ) ; fireUpdateEvent ( REDRAW_EVENT ) ; }
public UniqueIdFactory ( final String prefix ) { this . prefix = prefix ; }
public AbstractRaba ( final int fromIndex , final int toIndex , final int capacity , final byte [ ] [ ] a ) { if ( a == null ) throw new IllegalArgumentException ( ) ; if ( fromIndex < NUM_ ) throw new IllegalArgumentException ( ) ; if ( fromIndex > toIndex ) throw new IllegalArgumentException ( ) ; if ( toIndex > a . length ) throw new IllegalArgumentException ( ) ; if ( capacity < toIndex - fromIndex ) throw new IllegalArgumentException ( ) ; this . fromIndex = fromIndex ; this . toIndex = toIndex ; this . capacity = capacity ; this . a = a ; }
public static boolean containsSmtpSettings ( Map < String , String > properties ) { for ( String key : properties . keySet ( ) ) { if ( key . startsWith ( SMTP_PROPERTY_PREFIX ) ) { return BOOL_ ; } } return BOOL_ ; }
public JSONArray put ( boolean value ) { put ( value ? Boolean . TRUE : Boolean . FALSE ) ; return this ; }
public static float convertPixelsToDp ( float px , Context context ) { Resources resources = context . getResources ( ) ; DisplayMetrics metrics = resources . getDisplayMetrics ( ) ; float dp = px / ( metrics . densityDpi / NUM_ ) ; return dp ; }
public ConnectionConfig ( jmri . jmrix . SerialPortAdapter p ) { super ( p ) ; }
public static X509Certificate parseCertificate ( String base64EncodedCertificate ) throws CertificateException { CertificateFactory certificateFactory = CertificateFactory . getInstance ( STR_ ) ; ByteArrayInputStream bIn = new ByteArrayInputStream ( CashBoxUtils . base64Decode ( base64EncodedCertificate , BOOL_ ) ) ; return ( X509Certificate ) certificateFactory . generateCertificate ( bIn ) ; }
public void save ( ) throws IOException , Exception { ACSParserXMLUtility . saveXMLFile ( xmlPath , doc ) ; }
public static boolean writeXMPMeta ( InputStream inputStream , OutputStream outputStream , XMPMeta meta ) { List < Section > sections = parse ( inputStream , BOOL_ ) ; sections = insertXMPSection ( sections , meta ) ; if ( sections == null ) { return BOOL_ ; } try { writeJpegFile ( outputStream , sections ) ; } catch ( IOException e ) { Log . d ( TAG , STR_ , e ) ; return BOOL_ ; } finally { if ( outputStream != null ) { try { outputStream . close ( ) ; } catch ( IOException e ) { } } } return BOOL_ ; }
public static void initialWarning ( String s ) { initialWarning ( s , null , null ) ; }
public abstract void requestServiceInfo ( String type , String name , long timeout ) ;
private void performUpdate ( final int i , final double D , final double U , final double Qh_ii ) { final double G = y [ i ] * ( w . dot ( vecs [ i ] ) + bias ) - NUM_ + D * alpha [ i ] ; final double PG ; if ( alpha [ i ] == NUM_ ) PG = Math . min ( G , NUM_ ) ; else if ( alpha [ i ] == U ) PG = Math . max ( G , NUM_ ) ; else PG = G ; if ( PG != NUM_ ) { final double alphaOld = alpha [ i ] ; alpha [ i ] = Math . min ( Math . max ( alpha [ i ] - G / Qh_ii , NUM_ ) , U ) ; final double scale = ( alpha [ i ] - alphaOld ) * y [ i ] ; w . mutableAdd ( scale , vecs [ i ] ) ; if ( useBias ) bias += scale ; } }
public MimeVersionHeader createMimeVersionHeader ( int majorVersion , int minorVersion ) throws InvalidArgumentException { if ( majorVersion < NUM_ || minorVersion < NUM_ ) throw new javax2 . sip . InvalidArgumentException ( STR_ ) ; MimeVersion m = new MimeVersion ( ) ; m . setMajorVersion ( majorVersion ) ; m . setMinorVersion ( minorVersion ) ; return m ; }
void writeTo ( byte [ ] b , int off ) { System . arraycopy ( buf , NUM_ , b , off , count ) ; }
public void testGetF20Momentary ( ) { AbstractThrottle instance = new AbstractThrottleImpl ( ) ; boolean expResult = BOOL_ ; boolean result = instance . getF20Momentary ( ) ; assertEquals ( expResult , result ) ; }
public MalformedCookieException ( String message ) { super ( message ) ; }
public Shape lookupSeriesShape ( int series ) { if ( this . shape != null ) { return this . shape ; } Shape result = getSeriesShape ( series ) ; if ( result == null && this . autoPopulateSeriesShape ) { DrawingSupplier supplier = getDrawingSupplier ( ) ; if ( supplier != null ) { result = supplier . getNextShape ( ) ; setSeriesShape ( series , result , BOOL_ ) ; } } if ( result == null ) { result = this . baseShape ; } return result ; }
private JFreeChart createBarChart ( ) { JFreeChart chart = ChartFactory . createBarChart ( null , null , null , createBarDataset ( ) , PlotOrientation . VERTICAL , BOOL_ , BOOL_ , BOOL_ ) ; AbstractAttributeStatisticsModel . setDefaultChartFonts ( chart ) ; chart . setBackgroundPaint ( null ) ; chart . setBackgroundImageAlpha ( NUM_ ) ; CategoryPlot plot = ( CategoryPlot ) chart . getPlot ( ) ; plot . setRangeGridlinesVisible ( BOOL_ ) ; plot . setDomainGridlinesVisible ( BOOL_ ) ; plot . setOutlineVisible ( BOOL_ ) ; plot . setRangeZeroBaselineVisible ( BOOL_ ) ; plot . setDomainGridlinesVisible ( BOOL_ ) ; plot . setBackgroundPaint ( COLOR_INVISIBLE ) ; plot . setBackgroundImageAlpha ( NUM_ ) ; BarRenderer renderer = ( BarRenderer ) plot . getRenderer ( ) ; renderer . setSeriesPaint ( NUM_ , AttributeGuiTools . getColorForValueType ( Ontology . NOMINAL ) ) ; renderer . setBarPainter ( new StandardBarPainter ( ) ) ; renderer . setDrawBarOutline ( BOOL_ ) ; renderer . setShadowVisible ( BOOL_ ) ; return chart ; }
public static String makeDescriptor ( String params , Class retType ) { StringBuffer sbuf = new StringBuffer ( params ) ; makeDesc ( sbuf , retType ) ; return sbuf . toString ( ) ; }
public boolean hasMetaData ( ) ;
public boolean equivalentTo ( Fitness _fitness ) { return fitness == ( ( SPEA2MultiObjectiveFitness ) _fitness ) . fitness ; }
public void removeListener ( AnimatorListener listener ) { if ( mListeners == null ) { return ; } mListeners . remove ( listener ) ; if ( mListeners . size ( ) == NUM_ ) { mListeners = null ; } }
protected boolean ensureTargetFileIsValid ( File targetFile ) { if ( targetFile . exists ( ) && targetFile . isDirectory ( ) ) { displayErrorDialog ( N4ExportMessages . Export_mustBeFile ) ; giveFocusToDestination ( ) ; return BOOL_ ; } if ( targetFile . exists ( ) ) { if ( targetFile . canWrite ( ) ) { if ( ! this . overwriteExistingFilesCheckbox . getSelection ( ) && ! queryYesNoQuestion ( N4ExportMessages . Export_alreadyExists ) ) { return BOOL_ ; } } else { displayErrorDialog ( N4ExportMessages . Export_alreadyExistsError ) ; giveFocusToDestination ( ) ; return BOOL_ ; } } return BOOL_ ; }
boolean isTime ( ) ;
public static boolean isStatic ( int flags ) { return ( flags & STATIC ) != NUM_ ; }
final protected void startOp ( final IStartOpMessage msg ) { if ( ! controller ) throw new UnsupportedOperationException ( ERR_NOT_CONTROLLER ) ; if ( msg == null ) throw new IllegalArgumentException ( ) ; if ( ! queryId . equals ( msg . getQueryId ( ) ) ) throw new IllegalArgumentException ( ) ; lock . lock ( ) ; try { if ( log . isTraceEnabled ( ) ) log . trace ( msg . toString ( ) ) ; if ( future . isDone ( ) ) throw new RuntimeException ( STR_ ) ; runState . startOp ( msg ) ; } catch ( TimeoutException ex ) { halt ( ex ) ; } finally { lock . unlock ( ) ; } }
public boolean observed ( String form ) { return table . containsKey ( form ) ; }
public static String removeLastDelimiter ( String topic ) { if ( topic . endsWith ( TOPIC_DELIMITER ) ) { topic = topic . substring ( NUM_ , topic . length ( ) - TOPIC_DELIMITER . length ( ) ) ; } return topic ; }
public static void println ( float x ) { out . println ( x ) ; }
public double walkInDefaultOrder ( final RealVectorChangingVisitor visitor ) { final int dim = getDimension ( ) ; visitor . start ( dim , NUM_ , dim - NUM_ ) ; for ( int i = NUM_ ; i < dim ; i ++ ) { setEntry ( i , visitor . visit ( i , getEntry ( i ) ) ) ; } return visitor . end ( ) ; }
public void init ( boolean forEncryption , CipherParameters params ) { if ( ! ( params instanceof KeyParameter ) ) { throw new IllegalArgumentException ( STR_ + params . getClass ( ) . getName ( ) ) ; } KeyParameter p = ( KeyParameter ) params ; this . forEncryption = forEncryption ; setKey ( p . getKey ( ) ) ; }
public static long parseDateAsEpoch ( String dateStr ) { try { return DateUtils . parseDate ( dateStr ) . getTime ( ) ; } catch ( DateParseException e ) { return NUM_ ; } }
public DbSingleton ( SQLiteDatabase mDb , Context context , DbHelper helper ) { this . mDb = mDb ; mContext = context ; mDbHelper = helper ; }
protected AccountCreationRules ( final String username , final String password , final String email ) { this . username = username . trim ( ) ; this . password = password . trim ( ) ; this . email = email . trim ( ) ; }
private JPanel noDataSourcePanel ( ) { JPanel panel = new JPanel ( ) ; panel . setLayout ( new BorderLayout ( ) ) ; JPanel labelPanel = new JPanel ( ) ; labelPanel . setLayout ( new GridBagLayout ( ) ) ; JLabel label = new JLabel ( Localisation . getString ( MapRender . class , STR_ ) ) ; label . setFont ( new Font ( STR_ , Font . BOLD , NUM_ ) ) ; labelPanel . add ( label ) ; labelPanel . setBorder ( BorderFactory . createEmptyBorder ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ; panel . add ( labelPanel , BorderLayout . CENTER ) ; return panel ; }
public void removeListener ( INotifyChangedListener notifyChangedListener ) { changeNotifier . removeListener ( notifyChangedListener ) ; }
public void success ( String message ) { sendPluginResult ( new PluginResult ( PluginResult . Status . OK , message ) ) ; }
void createReaderModeControl ( ) ;
public boolean mayAlias ( Value v1 , Value v2 , Unit u ) { Set < Set < Value > > res = getFlowBefore ( u ) ; for ( Set < Value > set : res ) { if ( set . contains ( v1 ) && set . contains ( v2 ) ) return BOOL_ ; } return BOOL_ ; }
public void ancestorResized ( HierarchyEvent e ) { ( ( HierarchyBoundsListener ) a ) . ancestorResized ( e ) ; ( ( HierarchyBoundsListener ) b ) . ancestorResized ( e ) ; }
void onAnimationFinished ( ) ;
public boolean isSetError ( ) { return this . error != null ; }
public void sendAccounts ( String email , String marketplaceId ) throws ValidationException , MailOperationException ;
public Object [ ] toArray ( ) { return list . toArray ( ) ; }
public void visitSource ( String source , String debug ) { if ( cv != null ) { cv . visitSource ( source , debug ) ; } }
public int next ( int context , int current ) { return getNextSibling ( current ) ; }
public void fill ( double val ) { Arrays . fill ( _data , NUM_ , _pos , val ) ; }
private void returnData ( Object ret ) { if ( myHost != null ) { myHost . returnData ( ret ) ; } }
public void load ( SimState state ) { super . load ( state ) ; setupPortrayals ( ) ; }
public static native boolean isIdeographic ( int codePoint ) ;
public void appendGroup ( Group group ) throws ObjectAlreadyHasException { assertNotContains ( group ) ; groups . add ( group . getName ( ) ) ; }
public LocalPathCellEditor normalizePath ( boolean value ) { myNormalizePath = value ; return this ; }
protected Map < String , Object > buildMapToStore ( Object managedData ) { Map < String , Object > toStore = new LinkedHashMap < > ( ) ; toStore . put ( INIT_ARGS_JSON_FIELD , convertNamedListToMap ( managedInitArgs ) ) ; String initializedOnStr = getInitializedOn ( ) ; if ( initializedOnStr != null ) { toStore . put ( INITIALIZED_ON_JSON_FIELD , initializedOnStr ) ; } if ( hasChangesSinceInitialization ( ) ) { toStore . put ( UPDATED_SINCE_INIT_JSON_FIELD , getUpdatedSinceInitialization ( ) ) ; } if ( managedData != null ) { if ( managedData instanceof List || managedData instanceof Set ) { toStore . put ( MANAGED_JSON_LIST_FIELD , managedData ) ; } else if ( managedData instanceof Map ) { toStore . put ( MANAGED_JSON_MAP_FIELD , managedData ) ; } else { throw new IllegalArgumentException ( STR_ + managedData . getClass ( ) . getName ( ) + STR_ ) ; } } return toStore ; }
public int intValue ( ) ;
public boolean hasNext ( ) { return hasNext ; }
private static void waitFor ( SystemProcess process , Stopwatch sw , long timeout , TimeUnit unit , String successFormat , String timeoutFormat ) throws InterruptedException , TimeoutException { if ( ! process . waitFor ( timeout , unit ) ) { throw new TimeoutException ( String . format ( timeoutFormat + STR_ , process , timeout , unit . toString ( ) . toLowerCase ( ) ) ) ; } long duration = sw . stop ( ) . elapsed ( TimeUnit . MILLISECONDS ) ; log . info ( successFormat + STR_ , process , duration ) ; }
public static boolean isTerminalLocked ( Properties ctx ) throws TerminalNotFoundException { int terminalId = getTerminalId ( ctx ) ; return isTerminalLocked ( ctx , terminalId ) ; }
default boolean registerModel ( IModel model , ResourceLocation location ) { return BOOL_ ; }
protected void engineInit ( int strength , SecureRandom random ) { if ( ( strength >= NUM_ ) && ( strength <= NUM_ ) && ( strength % NUM_ == NUM_ ) ) { this . valueN = NUM_ ; } else if ( strength == NUM_ ) { this . valueN = NUM_ ; } else { throw new InvalidParameterException ( STR_ ) ; } this . valueL = strength ; this . seedLen = valueN ; this . random = random ; }
protected AbstractXYItemLabelGenerator ( String formatString , NumberFormat xFormat , NumberFormat yFormat ) { ParamChecks . nullNotPermitted ( formatString , STR_ ) ; ParamChecks . nullNotPermitted ( xFormat , STR_ ) ; ParamChecks . nullNotPermitted ( yFormat , STR_ ) ; this . formatString = formatString ; this . xFormat = xFormat ; this . yFormat = yFormat ; }
private void skipCustomData ( ) throws IOException { int oldHandle = passHandle ; for ( ; ; ) { if ( bin . getBlockDataMode ( ) ) { bin . skipBlockData ( ) ; bin . setBlockDataMode ( BOOL_ ) ; } switch ( bin . peekByte ( ) ) { case TC_BLOCKDATA : case TC_BLOCKDATALONG : bin . setBlockDataMode ( BOOL_ ) ; break ; case TC_ENDBLOCKDATA : bin . readByte ( ) ; passHandle = oldHandle ; return ; default : readObject0 ( BOOL_ ) ; break ; } } }
protected void create ( boolean stream ) throws IOException { }
public QueryBuilder aggregation ( final Optional < Aggregation > aggregation ) { checkNotNull ( aggregation , STR_ ) ; this . aggregation = pickOptional ( this . aggregation , aggregation ) ; return this ; }
protected void handleUnrecoverableGoogleWalletError ( int errorCode ) { Intent intent = new Intent ( getActivity ( ) , CheckoutActivity . class ) ; intent . addFlags ( Intent . FLAG_ACTIVITY_CLEAR_TOP ) ; intent . putExtra ( WalletConstants . EXTRA_ERROR_CODE , errorCode ) ; intent . putExtra ( Constants . EXTRA_ITEM_ID , mItemId ) ; startActivity ( intent ) ; }
protected abstract void caseAssignConstStmt ( Value dest , Constant c ) ;
public static float convertPixelsToDp ( float px , Context context ) { Resources resources = context . getResources ( ) ; DisplayMetrics metrics = resources . getDisplayMetrics ( ) ; float dp = px / ( metrics . densityDpi / NUM_ ) ; return dp ; }
public static PSPCommunicationException convertToApi ( org . oscm . internal . types . exception . PSPCommunicationException oldEx ) { return convertExceptionToApi ( oldEx , PSPCommunicationException . class ) ; }
private boolean checkForState ( Sensor [ ] mSensors , int state ) { for ( int i = NUM_ ; i < mSensors . length ; i ++ ) { if ( mSensors [ i ] . getKnownState ( ) == state ) { return BOOL_ ; } } return BOOL_ ; }
public static void closeQuietly ( Socket socket ) { if ( socket != null ) { try { socket . close ( ) ; } catch ( Exception ignored ) { } } }
protected BasicWWTexture initializeTexture ( ) { Object imageSource = this . getImageSource ( ) ; if ( imageSource instanceof String || imageSource instanceof URL ) { URL imageURL = WorldWind . getDataFileStore ( ) . requestFile ( imageSource . toString ( ) ) ; if ( imageURL != null ) { this . texture = new BasicWWTexture ( imageURL , BOOL_ ) ; this . texture . setUseAnisotropy ( BOOL_ ) ; } } else if ( imageSource != null ) { this . texture = new BasicWWTexture ( imageSource , BOOL_ ) ; return this . texture ; } return null ; }
public byte maintenance ( ) { return maintenance ; }
void reset ( ) ;
public int available ( ) { return length ; }
protected Expression literal ( int opPos ) { opPos = getFirstChildPos ( opPos ) ; return ( XString ) getTokenQueue ( ) . elementAt ( getOp ( opPos ) ) ; }
public void onRegistrationFailed ( ImsError error ) ;
public static IMarker findMarker ( String markerId , int start , int end , IResource resource , String message , boolean includeSubtypes ) throws CoreException { IMarker [ ] markers = resource . findMarkers ( markerId , includeSubtypes , IResource . DEPTH_ZERO ) ; for ( IMarker marker : markers ) { int curStart = marker . getAttribute ( IMarker . CHAR_START , - NUM_ ) ; if ( curStart != start ) { continue ; } int curEnd = marker . getAttribute ( IMarker . CHAR_END , - NUM_ ) ; if ( curEnd != end ) { continue ; } String curMsg = marker . getAttribute ( IMarker . MESSAGE , null ) ; if ( curMsg == null || ! message . equals ( curMsg ) ) { continue ; } return marker ; } return null ; }
private void restoreStepDataFromDB ( Step step ) { com . emc . storageos . db . client . model . WorkflowStep logStep = _dbClient . queryObject ( com . emc . storageos . db . client . model . WorkflowStep . class , step . workflowStepURI ) ; if ( logStep . getExecuteMethodData ( ) != null ) { Workflow . Method executeMethod = ( Workflow . Method ) GenericSerializer . deserialize ( logStep . getExecuteMethodData ( ) ) ; step . executeMethod = executeMethod ; } else { _log . info ( STR_ + step . stepId ) ; } if ( logStep . getRollbackMethodData ( ) != null ) { Workflow . Method rollbackMethod = ( Workflow . Method ) GenericSerializer . deserialize ( logStep . getRollbackMethodData ( ) ) ; step . rollbackMethod = rollbackMethod ; } }
private TreeElement findDepthFirst ( TreeElement parent , String name ) { int len = parent . getNumChildren ( ) ; for ( int i = NUM_ ; i < len ; ++ i ) { TreeElement e = parent . getChildAt ( i ) ; if ( name . equals ( e . getName ( ) ) ) { return e ; } else if ( e . getNumChildren ( ) != NUM_ ) { TreeElement v = findDepthFirst ( e , name ) ; if ( v != null ) return v ; } } return null ; }
public void fillTupleSimply ( Tuple tuple , int indexInTuple , Object measureValue ) { tuple . setMeasureValue ( indexInTuple , measureValue ) ; }
public void debugFiner ( CharSequence message ) { log ( Level . FINER , message ) ; }
public void show ( StackPane dialogContainer ) { this . setDialogContainer ( dialogContainer ) ; animation . play ( ) ; }
private static Project createProject ( Consumer < SpotlessExtension > test ) throws Exception { Project project = ProjectBuilder . builder ( ) . withProjectDir ( new File ( STR_ ) . getAbsoluteFile ( ) ) . build ( ) ; SpotlessPlugin plugin = project . getPlugins ( ) . apply ( SpotlessPlugin . class ) ; test . accept ( plugin . getExtension ( ) ) ; plugin . createTasks ( ) ; return project ; }
public void onResponse ( ImageContainer response , boolean isImmediate ) ;
protected Query newRegexpQuery ( Term regexp ) { RegexpQuery query = new RegexpQuery ( regexp ) ; SchemaField sf = schema . getField ( regexp . field ( ) ) ; query . setRewriteMethod ( sf . getType ( ) . getRewriteMethod ( parser , sf ) ) ; return query ; }
boolean offerLast ( E e , long timeout , TimeUnit unit ) throws InterruptedException ;
public SyncHttpClient ( int httpPort , int httpsPort ) { super ( BOOL_ , httpPort , httpsPort ) ; }
public NetworkVmAllocationPolicy ( List < ? extends Host > list ) { super ( list ) ; setFreePes ( new ArrayList < Integer > ( ) ) ; for ( Host host : getHostList ( ) ) { getFreePes ( ) . add ( host . getNumberOfPes ( ) ) ; } setVmTable ( new HashMap < String , Host > ( ) ) ; setUsedPes ( new HashMap < String , Integer > ( ) ) ; }
boolean isAlerted ( ) ;
public void removeCheckingPaths ( TreePath [ ] paths ) { for ( TreePath path : paths ) { removeCheckingPath ( path ) ; } }
public void maximizeFrame ( JInternalFrame f ) { if ( f . isIcon ( ) ) { try { f . setIcon ( BOOL_ ) ; } catch ( PropertyVetoException e2 ) { } } else { f . setNormalBounds ( f . getBounds ( ) ) ; Rectangle desktopBounds = f . getParent ( ) . getBounds ( ) ; setBoundsForFrame ( f , NUM_ , NUM_ , desktopBounds . width , desktopBounds . height ) ; } try { f . setSelected ( BOOL_ ) ; } catch ( PropertyVetoException e2 ) { } }
public PagelinksParser ( InputStream inputStream ) throws IOException { init ( inputStream ) ; }
public Element store ( ) { Element e = new Element ( Xml . ROUTE ) ; e . setAttribute ( Xml . ID , getId ( ) ) ; e . setAttribute ( Xml . NAME , getName ( ) ) ; e . setAttribute ( Xml . COMMENT , getComment ( ) ) ; for ( RouteLocation rl : getLocationsBySequenceList ( ) ) { e . addContent ( rl . store ( ) ) ; } return e ; }
public TextHttpResponseHandler ( ) { this ( DEFAULT_CHARSET ) ; }
public JavaType typeFromId ( String id ) ;
void retryLoad ( ) ;
public SimpleImmutableEntry ( Entry < ? extends K , ? extends V > entry ) { this . key = entry . getKey ( ) ; this . value = entry . getValue ( ) ; }
public boolean isViewUnder ( View view , int x , int y ) { if ( view == null ) { return BOOL_ ; } return x >= view . getLeft ( ) && x < view . getRight ( ) && y >= view . getTop ( ) && y < view . getBottom ( ) ; }
void clear ( ) ;
public void mark ( long n ) { tickIfNecessary ( ) ; count . addAndGet ( n ) ; m1Rate . update ( n ) ; m5Rate . update ( n ) ; m15Rate . update ( n ) ; }
static State mapIntToValue ( final int stateInt ) { for ( State value : State . values ( ) ) { if ( stateInt == value . getIntValue ( ) ) { return value ; } } return RESET ; }
public abstract void onFailure ( int statusCode , Header [ ] headers , T t ) ;
public static void exportContent ( DialogueSystem system , String file , String tag ) { Document doc = XMLUtils . newXMLDocument ( ) ; Set < String > parameterIds = new HashSet < String > ( system . getState ( ) . getParameterIds ( ) ) ; Set < String > otherVarsIds = new HashSet < String > ( system . getState ( ) . getChanceNodeIds ( ) ) ; otherVarsIds . removeAll ( parameterIds ) ; Set < String > variables = ( tag . equals ( STR_ ) ) ? parameterIds : otherVarsIds ; Node paramXML = system . getState ( ) . generateXML ( doc , variables ) ; doc . renameNode ( paramXML , null , tag ) ; doc . appendChild ( paramXML ) ; XMLUtils . writeXMLDocument ( doc , file ) ; }
public boolean isMyTurn ( ) { if ( game . isPhaseSimultaneous ( ) ) { return game . getTurnForPlayer ( localPlayerNumber ) != null ; } return ( game . getTurn ( ) != null ) && game . getTurn ( ) . isValid ( localPlayerNumber , game ) ; }
public ServiceRef basicGetServiceRef ( ) { return serviceRef ; }
public void addAll ( final Iterable < BSPTree < S > > iterator ) { for ( final BSPTree < S > node : iterator ) { add ( node ) ; } }
public void onViewPositionChanged ( View changedView , int left , int top , int dx , int dy ) { }
private static int parseInt ( String value , int beginIndex , int endIndex ) throws NumberFormatException { if ( beginIndex < NUM_ || endIndex > value . length ( ) || beginIndex > endIndex ) { throw new NumberFormatException ( value ) ; } int i = beginIndex ; int result = NUM_ ; int digit ; if ( i < endIndex ) { digit = Character . digit ( value . charAt ( i ++ ) , NUM_ ) ; if ( digit < NUM_ ) { throw new NumberFormatException ( STR_ + value . substring ( beginIndex , endIndex ) ) ; } result = - digit ; } while ( i < endIndex ) { digit = Character . digit ( value . charAt ( i ++ ) , NUM_ ) ; if ( digit < NUM_ ) { throw new NumberFormatException ( STR_ + value . substring ( beginIndex , endIndex ) ) ; } result *= NUM_ ; result -= digit ; } return - result ; }
public void done ( ) ;
public void addAll ( OVector v ) { expandFor ( size + v . size - NUM_ , null ) ; System . arraycopy ( v . vector , NUM_ , vector , size - v . size , v . size ) ; }
public UsersSearchQuery hometown ( String value ) { return unsafeParam ( STR_ , value ) ; }
public ConnectionConfig ( ) { super ( ) ; }
public String convertToIso8601 ( long time ) { TimeZone tz = TimeZone . getTimeZone ( STR_ ) ; DateFormat df = new SimpleDateFormat ( STR_ ) ; df . setTimeZone ( tz ) ; return df . format ( time ) ; }
public final void testValidateLowercaseNotAllowingSpacesFails ( ) { char [ ] allowedCharacters = new char [ ] { STR_ } ; LetterOrNumberValidator characterOrNumberValidator = new LetterOrNumberValidator ( STR_ , Case . LOWERCASE , BOOL_ , allowedCharacters ) ; assertFalse ( characterOrNumberValidator . validate ( STR_ ) ) ; }
boolean isEmpty ( ) ;
private void disableUnsupportedButtons ( ) { try { if ( mTurnButton != null && mPlayer != null && ! mPlayer . canPause ( ) ) { mTurnButton . setEnabled ( BOOL_ ) ; } } catch ( IncompatibleClassChangeError ex ) { } }
public void limitTo ( int to ) { if ( to < NUM_ ) to = NUM_ ; mTo = to ; }
public boolean isCookieTimeToLiveEnabled ( ) { return ac . getLoginState ( ) . isCookieTimeToLiveEnabled ( ) ; }
public ElementRule ( String name , XMLSyntaxRule [ ] rules , int min , int max ) { this . name = name ; this . rules = rules ; this . min = min ; this . max = max ; }
private void onAnimationFinished ( ) { if ( mSlidingT >= NUM_ ) enterDistilledMode ( ) ; updateBottomButtonBar ( ) ; }
private void onStopAttacked ( final IEntity attacker ) { attackers . remove ( attacker ) ; }
ENTITY update ( ENTITY entity ) throws SpeedmentException ;
public final int readUnsignedShort ( ) throws IOException { mPosition += NUM_ ; d . readFully ( w , NUM_ , NUM_ ) ; return ( ( w [ NUM_ ] & NUM_ ) << NUM_ | ( w [ NUM_ ] & NUM_ ) ) ; }
public String encodeBody ( ) { return encodeBody ( new StringBuffer ( ) ) . toString ( ) ; }
public TextFieldSmartTableCell ( String text , int textPosition ) { textField = new JTextField ( text ) ; textField . addFocusListener ( fl ) ; textField . setScrollOffset ( NUM_ ) ; textJL = new JLabel ( text ) ; panel = new JPanel ( new FlowLayout ( textPosition ) ) ; panel . add ( textJL ) ; }
int deleteAll ( Class < ? > clazz , boolean shouldNotify ) throws StormException ;
public void clearHandlers ( ) { _problemHandlers = null ; }
public OutputStreamWriter ( OutputStream out , CharsetEncoder enc ) { super ( out ) ; if ( enc == null ) throw new NullPointerException ( STR_ ) ; se = StreamEncoder . forOutputStreamWriter ( out , this , enc ) ; }
public StatusBar ( ) { super ( ) ; super . setPreferredSize ( new Dimension ( NUM_ , NUM_ ) ) ; setMessage ( STR_ ) ; }
public abstract void reset ( ) ;
private void updateProgress ( int progress ) { if ( myHost != null && progress != previousProgress ) { myHost . updateProgress ( progress ) ; } previousProgress = progress ; }
private FoodSource nearFoodSource ( ) { Object [ ] objects = this . getObjectsWithinMyDistance ( NUM_ , BOOL_ , BOOL_ , BOOL_ ) ; objects = Filter . filter ( objects , FoodSource . class ) ; FoodSource fs = null ; if ( objects . length > NUM_ ) { fs = ( FoodSource ) objects [ r . nextInt ( objects . length ) ] ; } return fs ; }
public void removePropertyChangeListener ( PropertyChangeListener pcl ) { m_pcSupport . removePropertyChangeListener ( pcl ) ; }
public static Calendar toCalendar ( Date date , TimeZone timeZone , Locale locale ) { Calendar cal = getCalendarInstance ( timeZone , locale ) ; if ( date != null ) { cal . setTime ( date ) ; } return cal ; }
void onSubmitMultiRespSent ( SubmitMultiResult submitMultiResult , SMPPServerSession source ) ;
public boolean startsWith ( String prefix ) { return startsWith ( prefix , NUM_ ) ; }
public void pick ( ) throws WarpScriptException ;
public void updateConsistencyGroup ( Workflow workflow , URI vplexURI , URI cgURI , List < URI > addVolumesList , List < URI > removeVolumesList , String opId ) throws InternalException ;
T clickAndPresent ( By click , By wait ) ;
private void toggle ( ) { clearAnimation ( ) ; if ( ! isBackShowing ) { transitionToBack ( ) ; } else { undrawCheckMark ( ) ; } }
public static void verify ( final ClassReader cr , final boolean dump , final PrintWriter pw ) { verify ( cr , null , dump , pw ) ; }
public SymmetricalWordAlignment processAndAlign ( String input ) ;
public static Object create ( String className , Object [ ] constructorArgs , Class < ? > [ ] argClasses ) { return create ( className , constructorArgs , argClasses , null , null ) ; }
public final void onResume ( ) { mChronosListener . onResume ( mGUIClient ) ; }
public CTagTransferable ( final List < INaviModule > modules ) { Preconditions . checkNotNull ( modules , STR_ ) ; m_modules = new ArrayList < INaviModule > ( modules ) ; }
PNCounter decrement ( ) ;
public void onConversationVisible ( Peer peer ) { this . visiblePeer = peer ; }
boolean send ( String deviceId , Map < String , ? > properties , byte [ ] payload , String contentType ) ;
public void onProviderDisabled ( String provider ) { }
JarWithFile ( PathImpl backing ) { super ( backing ) ; }
Map < String , Boolean > evictCache ( AsyncContext context , String name ) throws UnmappedInterfaceException , UnableToCreateInstanceException ;
public FrameBodyTRSO ( byte textEncoding , String text ) { super ( textEncoding , text ) ; }
private void handleMouseMoved ( MouseEvent e ) { if ( this . liveHandler != null && this . liveHandler . isEnabled ( ) ) { this . liveHandler . handleMouseMoved ( this , e ) ; } for ( MouseHandlerFX handler : this . auxiliaryMouseHandlers ) { if ( handler . isEnabled ( ) ) { handler . handleMouseMoved ( this , e ) ; } } }
public void addKeyValueObserver ( String keyPath , NSKeyValueObserver observer , NSKeyValueObservingOptions options ) { if ( keyPath == null ) { throw new NullPointerException ( STR_ ) ; } if ( observer == null ) { throw new NullPointerException ( STR_ ) ; } if ( keyValueObservers == null ) { keyValueObservers = new HashSet < > ( ) ; } KeyValueObserverWrapper wrapper = null ; synchronized ( keyValueObservers ) { for ( KeyValueObserverWrapper w : keyValueObservers ) { if ( w . observer == observer ) { wrapper = w ; break ; } } if ( wrapper != null ) { wrapper . keyPaths . add ( keyPath ) ; } else { wrapper = new KeyValueObserverWrapper ( observer , keyPath ) ; addStrongRef ( wrapper ) ; keyValueObservers . add ( wrapper ) ; } } addObserver ( wrapper , keyPath , options , null ) ; }
protected void handleMesosFailure ( String taskId ) { int attempt = TaskUtils . getAttemptForTaskId ( taskId ) ; BaseContainer container = containersInfo . get ( TaskUtils . getContainerIndexForTaskId ( taskId ) ) ; boolean hasAttemptsLeft = attempt < container . retries ; if ( hasAttemptsLeft ) { LOG . warning ( String . format ( STR_ , container . name , attempt + NUM_ ) ) ; String newTaskId = TaskUtils . getTaskId ( container . name , attempt + NUM_ ) ; scheduleNewTask ( newTaskId ) ; } else { LOG . severe ( STR_ + attempt ) ; } }
private void readLandUseData ( ) throws FileNotFoundException { System . out . println ( STR_ ) ; GeomGridField landuseGridField = new GeomGridField ( ) ; readData ( landuseGridField , LAND_USE_DATA_FILE_NAME ) ; for ( int y = NUM_ ; y < landscape . getHeight ( ) ; y ++ ) { for ( int x = NUM_ ; x < landscape . getWidth ( ) ; x ++ ) { if ( landscape . get ( x , y ) != null ) { Tile tile = ( Tile ) landscape . get ( x , y ) ; tile . landuse = ( ( IntGrid2D ) landuseGridField . getGrid ( ) ) . get ( x , y ) ; } } } }
void createSceneSSBO ( ) { this . ssbo = glGenBuffers ( ) ; glBindBuffer ( GL_ARRAY_BUFFER , ssbo ) ; glBufferData ( GL_ARRAY_BUFFER , NUM_ * ( NUM_ + NUM_ ) * mesh . numVertices * NUM_ , GL_DYNAMIC_DRAW ) ; glBindBuffer ( GL_ARRAY_BUFFER , NUM_ ) ; }
public boolean sendQuestEndDialog ( QuestEnv env , int [ ] questItemsToRemove ) { Player player = env . getPlayer ( ) ; for ( int item : questItemsToRemove ) { long count = player . getInventory ( ) . getItemCountByItemId ( item ) ; if ( count > NUM_ ) { player . getInventory ( ) . decreaseByItemId ( item , count ) ; } } return sendQuestEndDialog ( env ) ; }
private ViewDragHelper ( Context context , ViewGroup forParent , Callback cb ) { if ( forParent == null ) { throw new IllegalArgumentException ( STR_ ) ; } if ( cb == null ) { throw new IllegalArgumentException ( STR_ ) ; } mParentView = forParent ; mCallback = cb ; final ViewConfiguration vc = ViewConfiguration . get ( context ) ; final float density = context . getResources ( ) . getDisplayMetrics ( ) . density ; mEdgeSize = ( int ) ( EDGE_SIZE * density + NUM_ ) ; mTouchSlop = vc . getScaledTouchSlop ( ) ; mMaxVelocity = vc . getScaledMaximumFlingVelocity ( ) ; mMinVelocity = vc . getScaledMinimumFlingVelocity ( ) ; mScroller = ScrollerCompat . create ( context , sInterpolator ) ; }
protected int findClosest ( Color c ) { if ( colorTab == null ) return - NUM_ ; int r = c . getRed ( ) ; int g = c . getGreen ( ) ; int b = c . getBlue ( ) ; int minpos = NUM_ ; int dmin = NUM_ * NUM_ * NUM_ ; int len = colorTab . length ; for ( int i = NUM_ ; i < len ; ) { int dr = r - ( colorTab [ i ++ ] & NUM_ ) ; int dg = g - ( colorTab [ i ++ ] & NUM_ ) ; int db = b - ( colorTab [ i ] & NUM_ ) ; int d = dr * dr + dg * dg + db * db ; int index = i / NUM_ ; if ( usedEntry [ index ] && ( d < dmin ) ) { dmin = d ; minpos = index ; } i ++ ; } return minpos ; }
public boolean isOpenWaitingQueue ( ) { return isOpenWaitingQueue ; }
public E update ( ) throws IOException , ServiceException { if ( state . service == null ) { throw new ServiceException ( CoreErrorDomain . ERR . entryNotAssociated ) ; } Link editLink = getEditLink ( ) ; if ( editLink == null ) { throw new UnsupportedOperationException ( STR_ ) ; } URL editUrl = new URL ( editLink . getHref ( ) ) ; return ( E ) state . service . update ( editUrl , this ) ; }
void map ( ) ;
void subscribeCurrentRelativeHumidity ( HomekitCharacteristicChangeCallback callback ) ;
private void showFeedback ( String message ) { if ( myHost != null ) { myHost . showFeedback ( message ) ; } else { System . out . println ( message ) ; } }
public int find ( String string ) { if ( string == null ) { return - NUM_ ; } for ( int i = NUM_ ; i != m_stringOffsets . length ; ++ i ) { int offset = m_stringOffsets [ i ] ; int length = getShort ( m_strings , offset ) ; if ( length != string . length ( ) ) { continue ; } int j = NUM_ ; for ( ; j != length ; ++ j ) { offset += NUM_ ; if ( string . charAt ( j ) != getShort ( m_strings , offset ) ) { break ; } } if ( j == length ) { return i ; } } return - NUM_ ; }
public Long addRoomWithModerationAndExternalType ( String SID , String name , Long roomtypes_id , String comment , Long numberOfPartizipants , Boolean ispublic , Boolean appointment , Boolean isDemoRoom , Integer demoTime , Boolean isModeratedRoom , String externalRoomType ) { try { Long users_id = sessionManagement . checkSession ( SID ) ; Long user_level = userManagement . getUserLevelByID ( users_id ) ; if ( authLevelManagement . checkWebServiceLevel ( user_level ) ) { return roommanagement . addExternalRoom ( name , roomtypes_id , comment , numberOfPartizipants , ispublic , null , appointment , isDemoRoom , demoTime , isModeratedRoom , null , null , externalRoomType , BOOL_ , BOOL_ , BOOL_ , STR_ , BOOL_ , BOOL_ , BOOL_ ) ; } } catch ( Exception err ) { log . error ( STR_ , err ) ; } return new Long ( - NUM_ ) ; }
public static long [ ] [ ] convertTo2DArrayForm ( List < long [ ] > npf ) { long [ ] [ ] ret = null ; if ( null != npf && npf . size ( ) > NUM_ ) { ret = npf . toArray ( new long [ npf . size ( ) ] [ ] ) ; } return ret ; }
private void showFeedback ( String message ) { if ( myHost != null ) { myHost . showFeedback ( message ) ; } else { System . out . println ( message ) ; } }
int size ( ) ;
public void onAccessibilityStatusChanged ( boolean enabled ) { mToolbar . onAccessibilityStatusChanged ( enabled ) ; }
void qsort2 ( int left , int right ) { if ( right <= left ) { return ; } int pivotIndex = pi . selectPivotIndex ( ar , left , right ) ; pivotIndex = partition ( left , right , pivotIndex ) ; qsortThread ( left , pivotIndex - NUM_ ) ; qsortThread ( pivotIndex + NUM_ , right ) ; }
public static Metrics isBoring ( CharSequence text , TextPaint paint , TextDirectionHeuristic textDir ) { return isBoring ( text , paint , textDir , null ) ; }
public abstract String resourceTypeName ( ) ;
public Cursor query ( Query query ) { Cursor underlyingCursor = query . runQuery ( contentResolver , UNDERLYING_COLUMNS , downloadsUriProvider . getDownloadsByBatchUri ( ) ) ; if ( underlyingCursor == null ) { return null ; } PublicFacingStatusTranslator statusTranslator = new PublicFacingStatusTranslator ( ) ; return new CursorTranslator ( underlyingCursor , downloadsUriProvider . getDownloadsByBatchUri ( ) , statusTranslator ) ; }
public NASPortTypeAttribute ( int portType ) { super ( OctetUtils . toOctets ( AttributeType . NAS_PORT_TYPE , portType ) ) ; this . portType = portType ; }
public PKCS7 ( byte [ ] bytes ) throws ParsingException { try { DerInputStream derin = new DerInputStream ( bytes ) ; parse ( derin ) ; } catch ( IOException ioe1 ) { ParsingException pe = new ParsingException ( STR_ ) ; pe . initCause ( ioe1 ) ; throw pe ; } }
private int removeArticle ( final char s [ ] , final int len ) { if ( len > NUM_ && endsWith ( s , len , STR_ ) ) return len - NUM_ ; if ( len > NUM_ ) { if ( endsWith ( s , len , STR_ ) || endsWith ( s , len , STR_ ) || endsWith ( s , len , STR_ ) || endsWith ( s , len , STR_ ) || endsWith ( s , len , STR_ ) ) return len - NUM_ ; } if ( len > NUM_ && endsWith ( s , len , STR_ ) ) return len - NUM_ ; return len ; }
public void syncUnreadReportCount ( ) { unReadReports = reportRepository . getUnreadCount ( ) ; }
public static synchronized boolean isEventObserved ( Class < ? extends MvcEvent > eventType ) { return observedEvents == null ? BOOL_ : observedEvents . contains ( eventType ) ; }
void hoverAggregate ( VisualItem item , boolean b ) { if ( ! PARAM . AGGR . equals ( item . getGroup ( ) ) ) { VisualNode node = map ( item ) ; if ( node != null && ( node . isNetwork ( ) || node . isHost ( ) ) ) { aggregateTable . getItem ( node . getVisualAgg ( getId ( ) ) ) . setHover ( b ) ; } } }
private void scanOperator ( ) { while ( BOOL_ ) { reader . putChar ( BOOL_ ) ; Name newname = reader . name ( ) ; TokenKind tk1 = tokens . lookupKind ( newname ) ; if ( tk1 == TokenKind . IDENTIFIER ) { reader . sp -- ; break ; } tk = tk1 ; reader . scanChar ( ) ; if ( ! isSpecial ( reader . ch ) ) break ; } }
public static Builder fromString ( String s ) { HashMap < String , String > config = DataUtils . parseMap ( s ) ; Builder builder = new Builder ( ) ; builder . config . putAll ( config ) ; return builder ; }
protected void finalize ( ) { if ( cmmProfile != null ) { CMSManager . getModule ( ) . freeProfile ( cmmProfile ) ; } else if ( profileActivator != null ) { ProfileDeferralMgr . unregisterDeferral ( profileActivator ) ; } }
void showToast ( String message ) ;
public DecisionSupport ( Map hCategoryEstimations , String sSuggestedCategory , String sCorrectCategory ) { CategoryEstimations = new TreeMap ( ) ; CategoryEstimations . putAll ( hCategoryEstimations ) ; SuggestedCategory = new String ( sSuggestedCategory ) ; CorrectCategory = new String ( sCorrectCategory ) ; }
public static void applyUserSettings ( Environment env , Map < String , Object > context ) throws TemplateException { Locale locale = ( Locale ) context . get ( STR_ ) ; if ( locale == null ) { locale = Locale . getDefault ( ) ; } env . setLocale ( locale ) ; TimeZone timeZone = ( TimeZone ) context . get ( STR_ ) ; if ( timeZone == null ) { timeZone = TimeZone . getDefault ( ) ; } env . setTimeZone ( timeZone ) ; }
void computeNextElement ( ) { while ( BOOL_ ) { if ( currentBits != NUM_ ) { mask = currentBits & - currentBits ; return ; } else if ( ++ index < bits . length ) { currentBits = bits [ index ] ; } else { mask = NUM_ ; return ; } } }
public static boolean areEquivalent ( Property p1 , Property p2 ) { return getPropertySqlDef ( p1 ) . equals ( getPropertySqlDef ( p2 ) ) ; }
private void push ( final int type ) { if ( outputStack == null ) { outputStack = new int [ NUM_ ] ; } int n = outputStack . length ; if ( outputStackTop >= n ) { int [ ] t = new int [ Math . max ( outputStackTop + NUM_ , NUM_ * n ) ] ; System . arraycopy ( outputStack , NUM_ , t , NUM_ , n ) ; outputStack = t ; } outputStack [ outputStackTop ++ ] = type ; int top = owner . inputStackTop + outputStackTop ; if ( top > owner . outputStackMax ) { owner . outputStackMax = top ; } }
public com . sun . identity . saml2 . jaxb . xmlenc . EncryptionMethodType . KeySize createEncryptionMethodTypeKeySize ( java . math . BigInteger value ) throws javax . xml . bind . JAXBException { return new com . sun . identity . saml2 . jaxb . xmlenc . impl . EncryptionMethodTypeImpl . KeySizeImpl ( value ) ; }
public synchronized void switchDisconnected ( IOFSwitch sw ) { if ( role == Role . SLAVE ) { counters . switchDisconnectedWhileSlave . updateCounterWithFlush ( ) ; return ; } long dpid = sw . getId ( ) ; evSwitch . updateEventWithFlush ( new SwitchEvent ( dpid , STR_ ) ) ; counters . switchDisconnected . updateCounterWithFlush ( ) ; IOFSwitch oldSw = this . activeSwitches . get ( dpid ) ; if ( oldSw != sw ) { log . debug ( STR_ + STR_ , sw , oldSw ) ; return ; } log . debug ( STR_ , sw ) ; swConnectCache . update ( sw . getId ( ) ) ; this . activeSwitches . remove ( sw . getId ( ) ) ; removeSwitchFromStore ( sw . getId ( ) ) ; sw . cancelAllStatisticsReplies ( ) ; addUpdateToQueue ( new SwitchUpdate ( sw . getId ( ) , SwitchUpdateType . REMOVED ) ) ; }
public boolean has ( String memberName ) { return members . containsKey ( memberName ) ; }
void rad ( ) throws ParseException ;
public int readUnsignedIntToInt ( ) { int result = shiftIntoInt ( data , position , NUM_ ) ; position += NUM_ ; if ( result < NUM_ ) { throw new IllegalArgumentException ( STR_ + result ) ; } return result ; }
public JITOptions ( ) { }
public final boolean containsKey ( String name ) { return mMap . containsKey ( name ) ; }
public void handlePacketData ( ByteBuf dataStream ) throws Exception ;
public MutableInt3D ( final Int2D p ) { x = p . x ; y = p . y ; z = NUM_ ; }
private static boolean eq ( Object o1 , Object o2 ) { return o1 == null ? o2 == null : o1 . equals ( o2 ) ; }
Iter ( ) { for ( ; ; ) { next = findFirst ( ) ; if ( next == null ) break ; Object x = next . value ; if ( x != null && x != next ) { nextValue = ( V ) x ; break ; } } }
public int headerOffset ( ) { return this . header ( ) . offset ( ) ; }
public void clear_derived_data ( ) { for ( BrdItemAwtreeInfoLeaf curr_tree_info : awtree_leaves ) curr_tree_info . precalculated_tree_shapes = null ; art_item_clear ( ) ; }
static public IContentProvider asInterface ( IBinder obj ) { if ( obj == null ) { return null ; } IContentProvider in = ( IContentProvider ) obj . queryLocalInterface ( descriptor ) ; if ( in != null ) { return in ; } return new ContentProviderProxy ( obj ) ; }
public static String formatFileSize ( long longSize , int decimalPos ) { Messages messages = AppBeans . get ( Messages . NAME ) ; NumberFormat fmt = NumberFormat . getNumberInstance ( ) ; if ( decimalPos >= NUM_ ) { fmt . setMaximumFractionDigits ( decimalPos ) ; } final double size = longSize ; double val = size / ( NUM_ * NUM_ ) ; if ( val > NUM_ ) { return fmt . format ( val ) . concat ( STR_ + messages . getMessage ( FileDownloadHelper . class , STR_ ) ) ; } val = size / NUM_ ; if ( val > NUM_ ) { return fmt . format ( val ) . concat ( STR_ + messages . getMessage ( FileDownloadHelper . class , STR_ ) ) ; } return fmt . format ( size ) . concat ( STR_ + messages . getMessage ( FileDownloadHelper . class , STR_ ) ) ; }
public void addRequest ( ActionRequest request ) { addRequest ( request , null ) ; }
public String toBASE64EncodedString ( ) throws FSMsgException { if ( ( providerId == null ) || ( providerId . length ( ) == NUM_ ) ) { FSUtils . debug . error ( STR_ + STR_ + requestID ) ; String [ ] args = { requestID } ; throw new FSMsgException ( STR_ , args ) ; } if ( ( requestID == null ) || ( requestID . length ( ) == NUM_ ) ) { requestID = SAMLUtils . generateID ( ) ; if ( requestID == null ) { FSUtils . debug . error ( STR_ + STR_ ) ; throw new FSMsgException ( STR_ , null ) ; } } return Base64 . encode ( this . toXMLString ( ) . getBytes ( ) ) ; }
public JSlider createSlider ( ) { JSlider slider = new JSlider ( m_model ) ; slider . addFocusListener ( getSliderAdjuster ( ) ) ; return slider ; }
public Boolean isAcrdIntrstInd ( ) { return acrdIntrstInd ; }
public static String OSX_DOCK_ICON ( MinecraftDirectory minecraftDir , Set < Asset > assetIndex ) { Objects . requireNonNull ( minecraftDir ) ; Objects . requireNonNull ( assetIndex ) ; for ( Asset asset : assetIndex ) { if ( STR_ . equals ( asset . getVirtualPath ( ) ) ) { return STR_ + minecraftDir . getAsset ( asset ) . getAbsolutePath ( ) ; } } return null ; }
public static PrefixTree newTree ( Set < String > keys , DateTimeParseContext context ) { PrefixTree tree = newTree ( context ) ; for ( String k : keys ) { tree . add0 ( k , k ) ; } return tree ; }
public static boolean isProblemStatus ( int parseStatus ) { switch ( parseStatus ) { case IParseConstants . COULD_NOT_FIND_MODULE : case IParseConstants . SEMANTIC_WARNING : case IParseConstants . SEMANTIC_ERROR : case IParseConstants . SYNTAX_ERROR : case IParseConstants . UNKNOWN_ERROR : return BOOL_ ; case IParseConstants . UNPARSED : case IParseConstants . PARSED : case IParseConstants . UNKNOWN : return BOOL_ ; default : return BOOL_ ; } }
public int currentlyInBuffer ( ) { assert writePos >= readPos ; return writePos - readPos ; }
public BitmapAjaxCallback ( ) { type ( Bitmap . class ) . memCache ( BOOL_ ) . fileCache ( BOOL_ ) . url ( STR_ ) ; }
public static void checkSupportedTargetMimeType ( VirtualFile targetFile ) throws CompilerException { String [ ] mimeTypes = getTargetMimeTypes ( ) ; for ( int i = NUM_ , length = mimeTypes . length ; i < length ; i ++ ) { if ( mimeTypes [ i ] . equals ( targetFile . getMimeType ( ) ) ) { return ; } } UnsupportedFileType ex = new UnsupportedFileType ( targetFile . getName ( ) ) ; ThreadLocalToolkit . log ( ex ) ; throw ex ; }
protected abstract DoubleDBIDList objectsForPCA ( DBIDRef id ) ;
public static String identity ( String str ) { return Normalizer . normalize ( str . trim ( ) . toLowerCase ( ) , Normalizer . Form . NFD ) . replaceAll ( STR_ , STR_ ) ; }
protected boolean decrementTaskDone ( ImageShadowTask imageShadowTask ) { synchronized ( mShadowTaskMap ) { int remainingTasks = imageShadowTask . getProtocol ( ) . addCount ( - NUM_ ) ; if ( remainingTasks == NUM_ ) { mShadowTaskMap . remove ( imageShadowTask . getSession ( ) ) ; imageShadowTask . getProtocol ( ) . signal ( ) ; return BOOL_ ; } else { return BOOL_ ; } } }
boolean hasReferences ( ) ;
public static final void drawShape ( GL2 gl , Shape s , boolean points ) { if ( s instanceof Circle ) { RenderUtilities . drawCircle ( gl , ( Circle ) s , points , BOOL_ ) ; } else if ( s instanceof Rectangle ) { RenderUtilities . drawRectangle ( gl , ( Rectangle ) s , points ) ; } else if ( s instanceof Polygon ) { RenderUtilities . drawPolygon ( gl , ( Polygon ) s , points ) ; } else if ( s instanceof Segment ) { RenderUtilities . drawLineSegment ( gl , ( Segment ) s , points ) ; } else { } }
public String globalInfo ( ) { return STR_ + STR_ + STR_ + STR_ + getTechnicalInformation ( ) . toString ( ) ; }
public static long convertAddr ( final int addr ) { final long laddr = addr ; if ( laddr < NUM_ ) { final long ret = ( - laddr ) << ALLOCATION_SCALEUP ; return ret ; } else { return laddr & NUM_ ; } }
public static List < String > readLines ( File file ) throws IOException { return readLines ( file , Charset . defaultCharset ( ) ) ; }
K last ( ) ;
public void addArc ( RectF oval , float startAngle , float sweepAngle ) { if ( oval == null ) { throw new NullPointerException ( STR_ ) ; } isSimplePath = BOOL_ ; native_addArc ( mNativePath , oval , startAngle , sweepAngle ) ; }
public static Uri addMessageToUri ( ContentResolver resolver , Uri uri , String address , String body , String subject , Long date , boolean read , boolean deliveryReport , long threadId ) { ContentValues values = new ContentValues ( NUM_ ) ; values . put ( ADDRESS , address ) ; if ( date != null ) { values . put ( DATE , date ) ; } values . put ( READ , read ? Integer . valueOf ( NUM_ ) : Integer . valueOf ( NUM_ ) ) ; values . put ( SUBJECT , subject ) ; values . put ( BODY , body ) ; if ( deliveryReport ) { values . put ( STATUS , STATUS_PENDING ) ; } if ( threadId != - NUM_ ) { values . put ( THREAD_ID , threadId ) ; } return resolver . insert ( uri , values ) ; }
private boolean isSupported ( ) { return WebSocket . isSupported ( ) ; }
public String toString ( int indentFactor ) throws JSONException { return toString ( indentFactor , NUM_ ) ; }
private void removeLastTimestampValidationData ( ) { final Element toRemove = xadesSignature . getLastTimestampValidationData ( ) ; if ( toRemove != null ) { unsignedSignaturePropertiesDom . removeChild ( toRemove ) ; } }
public abstract boolean localIsLiveIn ( BciBlock block , int local ) ;
void clear ( ) ;
public static String convertFrameID24To23 ( String identifier ) { String id ; if ( identifier . length ( ) < NUM_ ) { return null ; } id = ID3Frames . convertv24Tov23 . get ( identifier ) ; if ( id == null ) { if ( ID3v23Frames . getInstanceOf ( ) . getIdToValueMap ( ) . containsKey ( identifier ) ) { id = identifier ; } } return id ; }
private boolean hasNextInetSocketAddress ( ) { return socketAddresses != null ; }
public ProxyClassGenerator ( Elements elementUtils , String qualifiedClassName ) { this . qualifiedClassName = qualifiedClassName ; this . elementUtils = elementUtils ; TypeElement classElement = this . elementUtils . getTypeElement ( qualifiedClassName ) ; this . simpleClassName = classElement . getSimpleName ( ) . toString ( ) ; this . generatedClassName = this . simpleClassName + CLASS_SUFFIX ; PackageElement pkg = this . elementUtils . getPackageOf ( classElement ) ; this . packageName = pkg . isUnnamed ( ) ? null : pkg . getQualifiedName ( ) . toString ( ) ; }
public BrowsableData ( ListProvider dataprov , SaveProvider saveprov , Comparator c ) { m_dataprov = dataprov ; m_saveprov = saveprov ; m_comparer = c ; m_bIsAdjusting = BOOL_ ; m_aData = new ArrayList ( ) ; }
public boolean isGroupChatAutoAccepted ( ) { return readBoolean ( RcsSettingsData . AUTO_ACCEPT_GROUP_CHAT ) ; }
public String toString ( ) { StringBuilder s = new StringBuilder ( ) ; for ( int i = NUM_ ; i < d ; i ++ ) s . append ( data [ i ] + STR_ ) ; return s . toString ( ) ; }
void updateItem ( Barcode barcode ) { mBarcode = barcode ; postInvalidate ( ) ; }
private void writeObject ( ObjectOutputStream out ) throws IOException { out . defaultWriteObject ( ) ; registrarID . writeBytes ( out ) ; }
public List < ValidationErrorMessage > validateValue ( String value ) { errorMessageIds . clear ( ) ; if ( dataRestrictions . isRequired ( ) && valueNullOrEmpty ( value ) ) { errorMessageIds . add ( new ValidationErrorMessage ( STR_ , id , null ) ) ; } else { if ( ! valueNullOrEmpty ( value ) ) { for ( AbstractValidationRule rule : dataRestrictions . getValidationRules ( ) ) { if ( ! rule . validate ( value ) ) { errorMessageIds . add ( new ValidationErrorMessage ( rule . getMessageId ( ) , id , rule ) ) ; } } } } return errorMessageIds ; }
public void clear ( ) { init ( ) ; setAddrPattern ( STR_ ) ; setArguments ( new Object [ NUM_ ] ) ; }
private float limitedScale ( float targetScale ) { targetScale = Math . max ( minScale ( ) , targetScale ) ; targetScale = Math . min ( maxScale , targetScale ) ; return targetScale ; }
public static GitkitUser verifyGitkitToken ( final String gitkitToken ) throws GitkitClientException , FileNotFoundException { GitkitClient gitkitClient = GitkitClient . newBuilder ( ) . setGoogleClientId ( BackendConstants . GOOGLE_CLIENT_ID ) . setServiceAccountEmail ( BackendConstants . GOOGLE_SERVICE_ACCOUNT ) . setKeyStream ( Thread . currentThread ( ) . getContextClassLoader ( ) . getResourceAsStream ( BackendConstants . GOOGLE_SERVICE_ACCOUNT_KEY_FILEPATH ) ) . setWidgetUrl ( STR_ ) . setCookieName ( STR_ ) . build ( ) ; return gitkitClient . validateToken ( gitkitToken ) ; }
public static InExpression in ( Expression value , Expression ... set ) { return new InExpression ( value , BOOL_ , set ) ; }
protected void fireMenuDragMouseEntered ( MenuDragMouseEvent event ) { Object [ ] listeners = listenerList . getListenerList ( ) ; for ( int i = listeners . length - NUM_ ; i >= NUM_ ; i -= NUM_ ) { if ( listeners [ i ] == MenuDragMouseListener . class ) { ( ( MenuDragMouseListener ) listeners [ i + NUM_ ] ) . menuDragMouseEntered ( event ) ; } } }
private void doReleaseShared ( ) { for ( ; ; ) { Node h = head ; if ( h != null && h != tail ) { int ws = h . waitStatus ; if ( ws == Node . SIGNAL ) { if ( ! compareAndSetWaitStatus ( h , Node . SIGNAL , NUM_ ) ) continue ; unparkSuccessor ( h ) ; } else if ( ws == NUM_ && ! compareAndSetWaitStatus ( h , NUM_ , Node . PROPAGATE ) ) continue ; } if ( h == head ) break ; } }
public boolean isHighlighted ( ) { return this . highlighted ; }
void initialize ( HTTPRequest request , String tld ) { setAuthorizationHeader ( request , getMarksDbLordnCredentials ( tld ) ) ; }
void replaceAllChildrenToChildrenOf ( ASTNode anotherParent ) ;
public void SwitchTo ( int lexState ) { if ( lexState >= NUM_ || lexState < NUM_ ) throw new TokenMgrError ( STR_ + lexState + STR_ , TokenMgrError . INVALID_LEXICAL_STATE ) ; else curLexState = lexState ; }
public Pyramid ( Position centerPosition , double northSouthRadius , double verticalRadius , double eastWestRadius ) { if ( centerPosition == null ) { String message = Logging . getMessage ( STR_ ) ; Logging . logger ( ) . severe ( message ) ; throw new IllegalArgumentException ( message ) ; } if ( northSouthRadius <= NUM_ || eastWestRadius <= NUM_ || verticalRadius <= NUM_ ) { String message = Logging . getMessage ( STR_ , STR_ ) ; Logging . logger ( ) . severe ( message ) ; throw new IllegalArgumentException ( message ) ; } this . centerPosition = centerPosition ; this . northSouthRadius = northSouthRadius ; this . verticalRadius = verticalRadius ; this . eastWestRadius = eastWestRadius ; this . setUpGeometryCache ( ) ; }
public QueryService offset ( Integer offset ) { this . offset = offset ; return this ; }
public void validateRestoreSnapshotSession ( List < BlockObject > snapSessionSourceObjs , Project project ) ;
public static IPackageFragmentRoot addClassFolder ( IJavaProject jproject , String containerName , IPath sourceAttachPath , IPath sourceAttachRoot ) throws CoreException { IProject project = jproject . getProject ( ) ; IContainer container = null ; if ( containerName == null || containerName . length ( ) == NUM_ ) { container = project ; } else { IFolder folder = project . getFolder ( containerName ) ; if ( ! folder . exists ( ) ) { CoreUtility . createFolder ( folder , BOOL_ , BOOL_ , null ) ; } container = folder ; } IClasspathEntry cpe = JavaCore . newLibraryEntry ( container . getFullPath ( ) , sourceAttachPath , sourceAttachRoot ) ; addToClasspath ( jproject , cpe ) ; return jproject . getPackageFragmentRoot ( container ) ; }
public IComment editComment ( final IComment comment , final String newComment ) throws com . google . security . zynamics . binnavi . API . disassembly . CouldntSaveDataException { try { return m_node . editComment ( comment , newComment ) ; } catch ( final CouldntSaveDataException exception ) { throw new com . google . security . zynamics . binnavi . API . disassembly . CouldntSaveDataException ( exception ) ; } }
public boolean overScrollBy ( int deltaX , int deltaY , int scrollX , int scrollY , int scrollRangeX , int scrollRangeY , int maxOverScrollX , int maxOverScrollY , boolean isTouchEvent ) { maxOverScrollX = maxOverScrollY = NUM_ ; final boolean overScroll = mOverScrollable . superOverScrollBy ( deltaX , deltaY , scrollX , scrollY , scrollRangeX , scrollRangeY , maxOverScrollX , maxOverScrollY , isTouchEvent ) ; if ( ! mEnableFlingOverScroll ) { return overScroll ; } if ( ! overScroll ) { if ( mState == OS_FLING ) { log ( STR_ ) ; } } else { if ( ! isTouchEvent ) { if ( mState != OS_FLING ) { log ( STR_ + deltaY ) ; final int velocityY = - ( int ) ( deltaY / NUM_ ) ; onAbsorb ( velocityY ) ; } } } return overScroll ; }
void onWelcomeScreenPageScrollStateChanged ( int pageIndex , int state ) ;
public boolean isLeaf ( ) { return ! hasChildren ( ) ; }
public void write ( java . lang . String str , int off , int len ) throws java . io . IOException { if ( off > NUM_ || len != str . length ( ) ) { str = str . substring ( off , len ) ; } os . write ( str . getBytes ( enc ) ) ; }
Chat ( ChatManager chatManager , String participant , String threadID ) { this . chatManager = chatManager ; this . participant = participant ; this . threadID = threadID ; }
public static String [ ] initPathsFromProperties ( Properties p , String propName , String [ ] defaultPaths ) { String [ ] ret = stringArrayFromProperties ( p , propName , STR_ ) ; if ( ret == null ) { ret = defaultPaths ; } return ret ; }
public MersenneTwister ( int seed ) { mt = new int [ N ] ; setSeed ( seed ) ; }
public void delete ( Set < IPrivilege > privileges ) throws EntitlementException { Subject adminSubject = getAdminSubject ( ) ; String realm = getRealm ( ) ; for ( IPrivilege p : privileges ) { String dn = null ; if ( p instanceof Privilege ) { dn = delete ( p . getName ( ) , BOOL_ ) ; } else { dn = deleteReferral ( p . getName ( ) , BOOL_ ) ; } if ( indexCacheSize > NUM_ ) { ResourceSaveIndexes sIndex = p . getResourceSaveIndexes ( adminSubject , DNMapper . orgNameToRealmName ( realm ) ) ; if ( sIndex != null ) { if ( p instanceof Privilege ) { indexCache . clear ( sIndex , dn ) ; } else { referralIndexCache . clear ( sIndex , dn ) ; } } } } }
private void cleanupDiscovery ( StorageSystem system ) { try { system . setReachableStatus ( BOOL_ ) ; _dbClient . persistObject ( system ) ; } catch ( DatabaseException e ) { _logger . error ( STR_ , e ) ; } }
public DataIOException ( String message ) { super ( message ) ; }
public boolean isVirtualApp ( ) { return virtualApp ; }
private String concatStrings ( String repeatedToken , int repeatedTimes ) { String result = STR_ ; for ( int i = NUM_ ; i < repeatedTimes ; i ++ ) { result += repeatedToken ; } return result ; }
public abstract void unregisterInternalPlugin ( String path ) ;
public CpcRunner ( Graph graph , Parameters params , KnowledgeBoxModel knowledgeBoxModel ) { super ( graph , params , knowledgeBoxModel ) ; }
public ServiceSchemaModificationWrapper ( String serviceName , String schemaName ) { this ( serviceName , schemaName , new HashSet < AttributeSchemaImpl > ( ) ) ; }
public static double footToMeter ( double foot ) { return NUM_ * foot ; }
static WindowsPath createFromNormalizedPath ( WindowsFileSystem fs , String path ) { return createFromNormalizedPath ( fs , path , null ) ; }
public AppRate starRating ( boolean starRating , int maxStars , int minStarsForPositive ) { this . starRating = starRating ; this . maxStars = maxStars ; this . minStarsForPositive = minStarsForPositive ; return this ; }
private void startCheckingStatus ( ) { future = executor . submit ( null ) ; }
public static native Object dataGet ( long pool , String key ) ;
public static String buildSelectorFromAttributeTypeAndValue ( String attributeType , String attributeValue ) { StringBuilder strb = new StringBuilder ( ) ; strb . append ( OPEN_BRACKET ) ; strb . append ( attributeType ) ; strb . append ( EQUAL ) ; strb . append ( attributeValue ) ; strb . append ( CLOSE_BRACKET ) ; return strb . toString ( ) ; }
public JCDiagnostic create ( DiagnosticType kind , DiagnosticSource source , DiagnosticPosition pos , String key , Object ... args ) { return create ( kind , null , EnumSet . noneOf ( DiagnosticFlag . class ) , source , pos , key , args ) ; }
public void addMarker ( String tag ) { if ( VolleyLog . MarkerLog . ENABLED ) { mEventLog . add ( tag , Thread . currentThread ( ) . getId ( ) ) ; } }
public void flattenTransform ( ) { if ( get ( TRANSFORM ) != null ) { path . transform ( get ( TRANSFORM ) ) ; set ( TRANSFORM , null ) ; } invalidate ( ) ; }
public void removeItem ( int which , float velocityX ) { if ( mDragState == IDLE || mDragState == DRAGGING ) { if ( mDragState == IDLE ) { mSrcPos = getHeaderViewsCount ( ) + which ; mFirstExpPos = mSrcPos ; mSecondExpPos = mSrcPos ; mFloatPos = mSrcPos ; View v = getChildAt ( mSrcPos - getFirstVisiblePosition ( ) ) ; if ( v != null ) { v . setVisibility ( View . INVISIBLE ) ; } } mDragState = REMOVING ; mRemoveVelocityX = velocityX ; if ( mInTouchEvent ) { switch ( mCancelMethod ) { case ON_TOUCH_EVENT : super . onTouchEvent ( mCancelEvent ) ; break ; case ON_INTERCEPT_TOUCH_EVENT : super . onInterceptTouchEvent ( mCancelEvent ) ; break ; } } if ( mRemoveAnimator != null ) { mRemoveAnimator . start ( ) ; } else { doRemoveItem ( which ) ; } } }
public void freeLastRow ( ) { acquireReference ( ) ; try { nativeFreeLastRow ( mWindowPtr ) ; } finally { releaseReference ( ) ; } }
public boolean supportsSchemasInPrivilegeDefinitions ( ) throws SQLException { return BOOL_ ; }
public static RedisReport create ( ) { return create ( null ) ; }
private static boolean hasAttr ( SvcReg reg , EntryClass eclass , int fldidx , Object value ) { EntryRep [ ] sets = reg . item . attributeSets ; for ( int i = sets . length ; -- i >= NUM_ ; ) { EntryRep set = sets [ i ] ; if ( eclass . isAssignableFrom ( set . eclass ) && ( ( value == null && set . fields [ fldidx ] == null ) || ( value != null && value . equals ( set . fields [ fldidx ] ) ) ) ) return BOOL_ ; } return BOOL_ ; }
public void postRotate ( float deltaAngle , float px , float py ) { if ( deltaAngle != NUM_ ) { mCurrentImageMatrix . postRotate ( deltaAngle , px , py ) ; setImageMatrix ( mCurrentImageMatrix ) ; if ( mTransformImageListener != null ) { mTransformImageListener . onRotate ( getMatrixAngle ( mCurrentImageMatrix ) ) ; } } }
private byte [ ] checkOwnerPassword ( byte [ ] ownerPassword , byte [ ] firstDocIdValue , int keyBitLength , int revision , byte [ ] oValue , byte [ ] uValue , int pValue , boolean encryptMetadata ) throws GeneralSecurityException , EncryptionUnsupportedByProductException , PDFParseException { final byte [ ] rc4KeyBytes = getInitialOwnerPasswordKeyBytes ( ownerPassword , keyBitLength , revision ) ; final Cipher rc4 = createRC4Cipher ( ) ; initDecryption ( rc4 , createRC4Key ( rc4KeyBytes ) ) ; final byte [ ] possibleUserPassword ; if ( revision == NUM_ ) { possibleUserPassword = crypt ( rc4 , oValue ) ; } else if ( revision >= NUM_ ) { possibleUserPassword = new byte [ NUM_ ] ; System . arraycopy ( oValue , NUM_ , possibleUserPassword , NUM_ , possibleUserPassword . length ) ; rc4unshuffle ( rc4 , possibleUserPassword , rc4KeyBytes ) ; } else { throw new EncryptionUnsupportedByProductException ( STR_ + revision ) ; } return checkUserPassword ( possibleUserPassword , firstDocIdValue , keyBitLength , revision , oValue , uValue , pValue , encryptMetadata ) ; }
public ViPRCall ( ViPRCoreClient client ) { if ( client == null ) { throw new IllegalArgumentException ( STR_ ) ; } this . client = client ; }
protected void generateFields ( ) { StringBuilder injection = new StringBuilder ( ) ; if ( ! mContext . isActivity ( ) && ! mContext . getFieldNameList ( ) . contains ( STR_ ) ) { injection . delete ( NUM_ , injection . length ( ) ) ; injection . append ( STR_ ) ; getPsiClass ( ) . add ( mFactory . createFieldFromText ( injection . toString ( ) , getPsiClass ( ) ) ) ; } for ( Element element : mElements ) { if ( element . isDeclared ) { continue ; } injection . delete ( NUM_ , injection . length ( ) ) ; injection . append ( STR_ ) ; injection . append ( getFieldTypeName ( element ) ) ; injection . append ( STR_ ) ; injection . append ( element . fieldName ) ; injection . append ( STR_ ) ; getPsiClass ( ) . add ( mFactory . createFieldFromText ( injection . toString ( ) , getPsiClass ( ) ) ) ; } }
public void addGameScreenText ( final double x , final double y , final String text , final NotificationType type , final boolean isTalking ) ;
public static < S extends Declaration , S2 extends S > SymbolReference < S > solved ( S2 symbolDeclaration ) { return new SymbolReference ( Optional . of ( symbolDeclaration ) ) ; }
public static UnaryExpression isEmpty ( String propertyName ) { return new UnaryExpression ( Operator . EMPTY , propertyName ) ; }
private void showFeedback ( String message ) { if ( myHost != null ) { myHost . showFeedback ( message ) ; } else { System . out . println ( message ) ; } }
public HTMLElement createTFoot ( ) ;
private void drawCenterRect ( Canvas canvas ) { int center = getHeight ( ) / NUM_ ; int offset = ( int ) ( getItemHeight ( ) / NUM_ * NUM_ ) ; Paint paint = new Paint ( ) ; paint . setColor ( getResources ( ) . getColor ( R . color . province_line_border ) ) ; paint . setStrokeWidth ( ( float ) NUM_ ) ; canvas . drawLine ( NUM_ , center - offset , getWidth ( ) , center - offset , paint ) ; canvas . drawLine ( NUM_ , center + offset , getWidth ( ) , center + offset , paint ) ; }
public boolean isValid ( ) { return leftGas != null && rightGas != null ; }
void deiconifyFrame ( JInternalFrame f ) ;
private int klattRule0 ( Element segment ) { return getPropertyAsInteger ( STR_ ) ; }
ActionFuture < RefreshResponse > refresh ( RefreshRequest request ) ;
public void afterPropertiesSet ( ) { }
private static void writeByte ( int x ) { assert x >= NUM_ && x < NUM_ ; if ( n == NUM_ ) { try { out . write ( x ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return ; } for ( int i = NUM_ ; i < NUM_ ; i ++ ) { boolean bit = ( ( x > > > ( NUM_ - i - NUM_ ) ) & NUM_ ) == NUM_ ; writeBit ( bit ) ; } }
protected void startTransactionTimer ( ) { if ( this . transactionTimerStarted . compareAndSet ( BOOL_ , BOOL_ ) ) { TimerTask myTimer = new TransactionTimer ( ) ; if ( sipStack . getTimer ( ) != null ) { sipStack . getTimer ( ) . schedule ( myTimer , BASE_TIMER_INTERVAL , BASE_TIMER_INTERVAL ) ; } } }
void removeListener ( LinkedModeListener listener ) ;
public void begin ( int accessFlags , int name , int descriptor , int [ ] exceptions , AttributeWriter aw ) { ++ methodCount ; output . writeShort ( accessFlags ) ; output . writeShort ( name ) ; output . writeShort ( descriptor ) ; isAbstract = ( accessFlags & AccessFlag . ABSTRACT ) != NUM_ ; int attrCount = isAbstract ? NUM_ : NUM_ ; if ( exceptions != null ) ++ attrCount ; writeAttribute ( output , aw , attrCount ) ; if ( exceptions != null ) writeThrows ( exceptions ) ; if ( ! isAbstract ) { if ( codeIndex == NUM_ ) codeIndex = constPool . addUtf8Info ( CodeAttribute . tag ) ; startPos = output . getPos ( ) ; output . writeShort ( codeIndex ) ; output . writeBlank ( NUM_ ) ; } catchPos = - NUM_ ; catchCount = NUM_ ; }
public ProcessExecutionUserErrorError ( Operator operator , UserError cause ) { super ( operator , NUM_ , cause . getOperator ( ) != null ? cause . getOperator ( ) . getName ( ) : STR_ , operator . getName ( ) , cause . getMessage ( ) ) ; this . cause = cause ; }
public static double acosInRange ( double value ) { if ( value <= - NUM_ ) { return Math . PI ; } else if ( value >= NUM_ ) { return NUM_ ; } else { return FastMath . acos ( value ) ; } }
public void testValueOfDocType12 ( ) throws Exception { DocType docType = new DocType ( STR_ , ApplicationXmlVersion . V1_2 . getPublicId ( ) , ApplicationXmlVersion . V1_2 . getSystemId ( ) ) ; assertEquals ( ApplicationXmlVersion . V1_2 , ApplicationXmlVersion . valueOf ( docType ) ) ; }
private static void outputHelp ( ) { System . out . println ( STR_ ) ; System . out . println ( STR_ ) ; System . out . println ( STR_ ) ; System . out . println ( STR_ ) ; System . out . println ( STR_ ) ; System . out . println ( STR_ ) ; System . out . println ( STR_ ) ; }
public Properties toProperties ( DataSource data ) { Properties properties = new Properties ( ) ; PropertyUtils . setPropertyIfNotNull ( properties , DatasourcePropertySet . JNDI_LOCATION , data . getJndiLocation ( ) ) ; PropertyUtils . setPropertyIfNotNull ( properties , DatasourcePropertySet . CONNECTION_TYPE , data . getConnectionType ( ) ) ; PropertyUtils . setPropertyIfNotNull ( properties , DatasourcePropertySet . TRANSACTION_SUPPORT , data . getTransactionSupport ( ) ) ; PropertyUtils . setPropertyIfNotNull ( properties , DatasourcePropertySet . DRIVER_CLASS , data . getDriverClass ( ) ) ; PropertyUtils . setPropertyIfNotNull ( properties , DatasourcePropertySet . URL , data . getUrl ( ) ) ; PropertyUtils . setPropertyIfNotNull ( properties , DatasourcePropertySet . USERNAME , data . getUsername ( ) ) ; PropertyUtils . setPropertyIfNotNull ( properties , DatasourcePropertySet . PASSWORD , data . getPassword ( ) ) ; PropertyUtils . setPropertyIfNotNull ( properties , DatasourcePropertySet . ID , data . getId ( ) ) ; PropertyUtils . setPropertyIfNotNull ( properties , DatasourcePropertySet . CONNECTION_PROPERTIES , getConnectionPropertiesAsASemicolonDelimitedString ( data ) ) ; return properties ; }
public int find ( int cur ) { assert ( cur >= NUM_ && cur < parent . length ) ; int p = parent [ cur ] , tmp ; while ( cur != p ) { tmp = p ; p = parent [ cur ] = parent [ p ] ; cur = tmp ; } return cur ; }
public void notifyServiceDestroy ( ) { if ( timer != null ) timer . cancel ( ) ; timer = null ; notifyHardwareStateChanged ( ) ; serviceWeakReference = null ; }
public static void downloadAsync ( ImageRequest request ) { if ( request == null ) { return ; } RequestKey key = new RequestKey ( request . getImageUri ( ) , request . getCallerTag ( ) ) ; synchronized ( pendingRequests ) { DownloaderContext downloaderContext = pendingRequests . get ( key ) ; if ( downloaderContext != null ) { downloaderContext . request = request ; downloaderContext . isCancelled = BOOL_ ; downloaderContext . workItem . moveToFront ( ) ; } else { enqueueCacheRead ( request , key , request . isCachedRedirectAllowed ( ) ) ; } } }
public static Number multiply ( Character left , Character right ) { return multiply ( Integer . valueOf ( left ) , right ) ; }
public void append ( String str ) { Document doc = getDocument ( ) ; if ( doc != null ) { try { doc . insertString ( doc . getLength ( ) , str , null ) ; } catch ( BadLocationException e ) { } } }
public String query ( SolrQueryRequest req ) throws Exception { return query ( req . getParams ( ) . get ( CommonParams . QT ) , req ) ; }
public static ByteBuffer allocate ( int capacity ) { if ( capacity < NUM_ ) { throw new IllegalArgumentException ( STR_ + capacity ) ; } return new ByteArrayBuffer ( new byte [ capacity ] ) ; }
public void removeProtocolEventListener ( final DebugEventListener listener ) { pipeFetcherThread . removeProtocolEventListener ( listener ) ; }
public byte [ ] engineCanonicalizeXPathNodeSet ( Set < Node > xpathNodeSet , String inclusiveNamespaces ) throws CanonicalizationException { throw new CanonicalizationException ( STR_ ) ; }
public boolean isSet ( _Fields field ) { if ( field == null ) { throw new IllegalArgumentException ( ) ; } switch ( field ) { default : ; } throw new IllegalStateException ( ) ; }
protected List < String > formatSubdiagnostics ( JCDiagnostic d , Locale l ) { List < String > subdiagnostics = List . nil ( ) ; int maxDepth = config . getMultilineLimit ( MultilineLimit . DEPTH ) ; if ( maxDepth == - NUM_ || depth < maxDepth ) { depth ++ ; try { int maxCount = config . getMultilineLimit ( MultilineLimit . LENGTH ) ; int count = NUM_ ; for ( JCDiagnostic d2 : d . getSubdiagnostics ( ) ) { if ( maxCount == - NUM_ || count < maxCount ) { subdiagnostics = subdiagnostics . append ( formatSubdiagnostic ( d , d2 , l ) ) ; count ++ ; } else break ; } } finally { depth -- ; } } return subdiagnostics ; }
protected void handleStyledAttributes ( TypedArray a ) { }
protected BaseDuration ( long duration ) { super ( ) ; iMillis = duration ; }
public static Pos3D read ( NBTTagCompound tag ) { return new Pos3D ( tag . getDouble ( STR_ ) , tag . getDouble ( STR_ ) , tag . getDouble ( STR_ ) ) ; }
public static Object parse ( String s ) { StringReader in = new StringReader ( s ) ; return parse ( in ) ; }
private AvailablePortFinder ( ) { }
private int skipQuotedString ( String str , int pos ) { int n = str . length ( ) ; pos += NUM_ ; while ( pos < n ) { if ( str . charAt ( pos ) == STR_ ) { if ( pos + NUM_ < n && str . charAt ( pos + NUM_ ) == STR_ ) { pos += NUM_ ; continue ; } return pos + NUM_ ; } pos += NUM_ ; } return n ; }
String toDot ( ) { StringBuilder buf = new StringBuilder ( ) ; for ( Type t : inferenceContext . undetvars ) { UndetVar uv = ( UndetVar ) t ; buf . append ( String . format ( STR_ , uv . qtype , uv . getBounds ( InferenceBound . UPPER ) , uv . getBounds ( InferenceBound . LOWER ) , uv . getBounds ( InferenceBound . EQ ) ) ) ; } return GraphUtils . toDot ( nodes , STR_ + hashCode ( ) , buf . toString ( ) ) ; }
private static double computeCorrelationDistanceBetweenClasses ( String classA , String classB , Table < String , String , Double > seriesAndClass2Value ) { final Set < String > series = seriesAndClass2Value . rowKeySet ( ) ; final ArrayList < Double > xValues = new ArrayList < > ( series . size ( ) ) ; final ArrayList < Double > yValues = new ArrayList < > ( series . size ( ) ) ; for ( String seriesName : series ) { xValues . add ( seriesAndClass2Value . get ( seriesName , classA ) ) ; yValues . add ( seriesAndClass2Value . get ( seriesName , classB ) ) ; } return NUM_ - Correlation . computePersonsCorrelationCoefficent ( series . size ( ) , xValues , yValues ) ; }
public void addSpacer ( ToolStripSpacer toolStripSpacer ) { Canvas canvas = new Canvas ( ) ; canvas . setWidth ( NUM_ ) ; canvas . setHeight ( NUM_ ) ; canvas . setBorder ( STR_ ) ; canvas . setExtraSpace ( toolStripSpacer . getSpace ( ) ) ; addMember ( canvas ) ; }
public int hashCode ( ) { int hash = getClass ( ) . getName ( ) . hashCode ( ) ; if ( verify ) { hash += NUM_ ; } if ( methodConstraintsSpecified ) { hash += NUM_ << NUM_ ; if ( methodConstraints != null ) { hash += methodConstraints . hashCode ( ) ; } } for ( int i = permissions . length ; -- i >= NUM_ ; ) { hash += permissions [ i ] . hashCode ( ) ; } return hash ; }
public void aggregate ( Evaluation evaluation ) { ( ( weka . classifiers . evaluation . AggregateableEvaluation ) m_delegate ) . aggregate ( evaluation . m_delegate ) ; }
public Matrix3d ( ) { this . m00 = NUM_ ; this . m01 = NUM_ ; this . m02 = NUM_ ; this . m10 = NUM_ ; this . m11 = NUM_ ; this . m12 = NUM_ ; this . m20 = NUM_ ; this . m21 = NUM_ ; this . m22 = NUM_ ; }
public void allowDetachToRelease ( boolean allowRelease ) { m_allowRelease = allowRelease ; }
public void init ( ) { if ( mContext == null ) { return ; } if ( mName . isEmpty ( ) ) { mName = mContext . getPackageName ( ) ; } if ( mMode == INVALID_VALUE || ( mMode != MODE_PRIVATE && mMode != MODE_WORLD_READABLE && mMode != MODE_WORLD_WRITEABLE ) ) { mMode = MODE_PRIVATE ; } mSharedPreferences = mContext . getSharedPreferences ( mName , mMode ) ; }
public DtoPromotionServiceImpl ( final DtoFactory dtoFactory , final GenericService < Promotion > promotionGenericService , final AdaptersRepository adaptersRepository ) { super ( dtoFactory , promotionGenericService , adaptersRepository ) ; }
public Dialog ( Component parent , String title , String media ) { super ( JOptionPane . getFrameForComponent ( parent ) , title ) ; listeners . put ( STR_ , new OKButtonAction ( ) ) ; listeners . put ( STR_ , new CancelButtonAction ( ) ) ; CSSMediaPanel panel = new CSSMediaPanel ( ) ; panel . setMedia ( media ) ; getContentPane ( ) . add ( panel , BorderLayout . CENTER ) ; getContentPane ( ) . add ( createButtonsPanel ( ) , BorderLayout . SOUTH ) ; }
public void shutdown ( ) throws Exception { ( new Thread ( this , STR_ ) ) . start ( ) ; }
public static void main ( String [ ] args ) { runJavadoc ( new AllJavadoc ( ) , args ) ; }
ScheduledFutureTask ( Callable < V > callable , long ns ) { super ( callable ) ; this . time = ns ; this . period = NUM_ ; this . sequenceNumber = sequencer . getAndIncrement ( ) ; }
public mxCellState removeState ( Object cell ) { return ( cell != null ) ? ( mxCellState ) states . remove ( cell ) : null ; }
public void expandAllDumpNodes ( boolean expand ) { TreeNode root = ( TreeNode ) tree . getModel ( ) . getRoot ( ) ; expandAll ( tree , new TreePath ( root ) , expand ) ; }
public Mono < HandlerResult > applyExceptionHandler ( Throwable failure ) { return ( hasExceptionHandler ( ) ? this . exceptionHandler . apply ( failure ) : Mono . error ( failure ) ) ; }
public Node findNode ( String id ) { List < Node > list = sqlTemplate . query ( getSql ( STR_ , STR_ ) , new NodeRowMapper ( ) , id ) ; return ( Node ) getFirstEntry ( list ) ; }
public void visitFormalTypeParameter ( String name ) { }
public Boolean isSsd ( ) { return ssd ; }
public Toast makeText ( CharSequence text , int duration ) ;
private void onTrigger4FocusLost ( ) { final CharSequence targetName = mAppsAdapter . getLabel ( TARGET_POSITION ) ; addInstruction ( R . string . accessibility_tutorial_lesson_1_text_5_exited , BOOL_ , targetName ) ; mAllApps . setAccessibilityDelegate ( mTargetIconFocusDelegate ) ; }
public void sendLoopEnd ( byte aIndex ) ;
int applyAsInt ( T t ) ;
boolean canGameStart ( ) ;
void addDataObjects ( List < ? extends DefaultData > dataObjects ) ;
ConsumedT < I , A > apply ( Input < I > input ) ;
private void updateFromRaDec ( float ra , float dec ) { float raRadians = ra * Geometry . DEGREES_TO_RADIANS ; float decRadians = dec * Geometry . DEGREES_TO_RADIANS ; this . x = MathUtil . cos ( raRadians ) * MathUtil . cos ( decRadians ) ; this . y = MathUtil . sin ( raRadians ) * MathUtil . cos ( decRadians ) ; this . z = MathUtil . sin ( decRadians ) ; }
public boolean isSystemRepairable ( int system , int loc ) { for ( int i = NUM_ ; i < getNumberOfCriticals ( loc ) ; i ++ ) { CriticalSlot ccs = getCritical ( loc , i ) ; if ( ( ccs != null ) && ( ccs . getType ( ) == CriticalSlot . TYPE_SYSTEM ) && ( ccs . getIndex ( ) == system ) && ! ccs . isRepairable ( ) ) { return BOOL_ ; } } return BOOL_ ; }
GitUrlVendorInfo withGivenUrlSSH ( boolean givenUrlSSH ) ;
public static Stats of ( int ... values ) { StatsAccumulator acummulator = new StatsAccumulator ( ) ; acummulator . addAll ( values ) ; return acummulator . snapshot ( ) ; }
private String toUrl ( String testFile ) throws MalformedURLException { return new File ( TestUtil . TEST_DATA_FOLDER + STR_ , testFile ) . toURI ( ) . toURL ( ) . toString ( ) ; }
Grid addEmptyValue ( ) ;
public Evaluation_ImplBase ( File baseDirectory ) { this . baseDirectory = baseDirectory ; }
public void optimize ( TupleExpr tupleExpr , Dataset dataset , BindingSet bindings ) { tupleExpr . visit ( new SameTermFilterVisitor ( ) ) ; }
public void addShape3D ( float x , float y , float z , Shape2D shape , float depth , int shapeTextureWidth , int shapeTextureHeight , int sideTextureWidth , int sideTextureHeight , int direction ) { addShape3D ( x , y , z , shape , depth , shapeTextureWidth , shapeTextureHeight , sideTextureWidth , sideTextureHeight , direction , null ) ; }
private void onRangeChanged ( ) { mAdapter . setRange ( mMinDate , mMaxDate ) ; setDate ( mSelectedDay , BOOL_ , BOOL_ , BOOL_ ) ; updateButtonVisibility ( mViewPager . getCurrentItem ( ) ) ; }
public static void println ( Object self ) { if ( self instanceof Writer ) { PrintWriter pw = new GroovyPrintWriter ( ( Writer ) self ) ; pw . println ( ) ; } else { System . out . println ( ) ; } }
protected int read ( ) { int curByte = NUM_ ; try { curByte = in . read ( ) ; } catch ( IOException e ) { status = STATUS_FORMAT_ERROR ; } return curByte ; }
public static boolean verifyVolumesInCG ( List < Volume > volumes , BlockConsistencyGroup cg , DbClient dbClient ) { List < Volume > cgVolumes = BlockConsistencyGroupUtils . getActiveVplexVolumesInCG ( cg , dbClient , null ) ; return verifyVolumesInCG ( volumes , cgVolumes , dbClient ) ; }
public String namespace ( ) { return theNamespace ; }
private static boolean isInCornerTargetZone ( float x , float y , float handleX , float handleY , float targetRadius ) { if ( Math . abs ( x - handleX ) <= targetRadius && Math . abs ( y - handleY ) <= targetRadius ) { return BOOL_ ; } return BOOL_ ; }
public ProxyTrustInvocationHandler ( RemoteMethodControl main , ProxyTrust boot ) { if ( main == null || boot == null ) { throw new NullPointerException ( STR_ ) ; } else if ( ! ( main instanceof TrustEquivalence ) ) { throw new IllegalArgumentException ( STR_ ) ; } else if ( ! ( boot instanceof RemoteMethodControl ) ) { throw new IllegalArgumentException ( STR_ ) ; } else if ( ! ( boot instanceof TrustEquivalence ) ) { throw new IllegalArgumentException ( STR_ ) ; } this . main = main ; this . boot = boot ; }
public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( STR_ ) ; buffer . append ( STR_ ) . append ( m_al ) ; buffer . append ( STR_ ) ; return buffer . toString ( ) ; }
protected void removeStmts ( List < IfStmt > deadStmts ) { Chain units = sb . getUnits ( ) ; Iterator < IfStmt > deadIt = deadStmts . iterator ( ) ; while ( deadIt . hasNext ( ) ) { Unit dead = deadIt . next ( ) ; units . remove ( dead ) ; dead . clearUnitBoxes ( ) ; } }
final void cleanupOperation ( double newS , double oldS ) { double newM = lnd . getM ( ) + ( oldS * oldS / NUM_ ) - ( newS * newS / NUM_ ) ; lnd . setM ( newM ) ; }
public HttpServlet ( ) { }
public Phase advancePhase ( Phase phase ) { if ( phase == left ) { return self ; } if ( phase == right ) { return done ; } return right ; }
public boolean isReadable ( Type type , int index ) { int currentIndex = NUM_ ; for ( Pair < Type , Object > packetValue : readableObjects ) { if ( packetValue . getKey ( ) . getBaseClass ( ) == type . getBaseClass ( ) ) { if ( currentIndex == index ) { return BOOL_ ; } currentIndex ++ ; } } return BOOL_ ; }
protected TimerTask ( ) { }
public ClusterConfig ( List < Node > nodes , short thisNodeId ) throws SyncException { init ( nodes , thisNodeId , AuthScheme . NO_AUTH , null , null ) ; }
public void launch ( Pos3D target ) ;
private void handleMobileCellScroll ( ) { mIsMobileScrolling = handleMobileCellScroll ( mHoverCellCurrentBounds ) ; }
public static boolean checkFrontCamera ( Context context ) { if ( context . getPackageManager ( ) . hasSystemFeature ( PackageManager . FEATURE_CAMERA_FRONT ) ) { return BOOL_ ; } else { return BOOL_ ; } }
private void checkImportSuccess ( ) { EndToEndTestUtils . waitTextToDisappear ( trackListActivity . getString ( R . string . generic_progress_title ) ) ; EndToEndTestUtils . SOLO . waitForText ( trackListActivity . getString ( R . string . import_success ) . split ( STR_ ) [ NUM_ ] ) ; EndToEndTestUtils . getButtonOnScreen ( trackListActivity . getString ( R . string . generic_ok ) , BOOL_ , BOOL_ ) ; instrumentation . waitForIdleSync ( ) ; }
public void onFinish ( ) { }
private void updateInternalBuffers ( ) { drawBuffer = getBackBuffer ( ) ; if ( drawBuffer instanceof VolatileImage ) { drawVBuffer = ( VolatileImage ) drawBuffer ; } else { drawVBuffer = null ; } }
public static Button createPushButton ( Composite parent , String label , String tooltip , Image image ) { Button button = createPushButton ( parent , label , image ) ; button . setToolTipText ( tooltip ) ; return button ; }
public boolean load ( Element catalogTrees ) { loadCatalogTrees ( catalogTrees ) ; return BOOL_ ; }
public final void removeAllElements ( ) { m_Objects = new int [ m_Objects . length ] ; m_Size = NUM_ ; }
public boolean replaceIn ( final StringBuffer source ) { if ( source == null ) { return BOOL_ ; } return replaceIn ( source , NUM_ , source . length ( ) ) ; }
public ComposedCallbackBuilder ( ) { }
public Criteria createCriteria ( ) { Criteria criteria = createCriteriaInternal ( ) ; if ( oredCriteria . size ( ) == NUM_ ) { oredCriteria . add ( criteria ) ; } return criteria ; }
public boolean containsAttribute ( Object name , Object value ) { return attributes . containsAttribute ( name , value ) ; }
private void initialize ( String component ) { SkinSpecification skinSpec = SkinXMLHandler . getSkin ( component , BOOL_ ) ; setBorder ( new MegamekBorder ( skinSpec ) ) ; loadIcon ( skinSpec ) ; isBGTiled = skinSpec . tileBackground ; if ( skinSpec . fontColors . size ( ) >= NUM_ ) { buttonColor = skinSpec . fontColors . get ( NUM_ ) ; } else { buttonColor = defaultColor ; } if ( skinSpec . fontColors . size ( ) >= NUM_ ) { disabledColor = skinSpec . fontColors . get ( NUM_ ) ; } else { disabledColor = defaultDisabledColor ; } if ( skinSpec . fontColors . size ( ) >= NUM_ ) { activeColor = skinSpec . fontColors . get ( NUM_ ) ; } else { activeColor = defaultActiveColor ; } }
void sendToComparer ( byte [ ] data ) ;
public boolean waitClusterForming ( long timeWait , TimeUnit unit , int iterations , int servers ) throws Exception { if ( activeMQServer . getClusterManager ( ) . getClusterConnections ( ) == null || activeMQServer . getClusterManager ( ) . getClusterConnections ( ) . size ( ) == NUM_ ) { return servers == NUM_ ; } for ( int i = NUM_ ; i < iterations ; i ++ ) { for ( ClusterConnection connection : activeMQServer . getClusterManager ( ) . getClusterConnections ( ) ) { if ( connection . getTopology ( ) . getMembers ( ) . size ( ) == servers ) { return BOOL_ ; } Thread . sleep ( unit . toMillis ( timeWait ) ) ; } } return BOOL_ ; }
public boolean isEqual ( AttributeSet attr ) { return attributes . isEqual ( attr ) ; }
private static String mapToGetString ( Map < String , String > params ) { return params . entrySet ( ) . stream ( ) . map ( null ) . collect ( Collectors . joining ( STR_ ) ) ; }
private void removeTvShow ( TvShow tvShow ) { synchronized ( root ) { TvShowTreeNode child = ( TvShowTreeNode ) nodeMap . get ( tvShow ) ; DefaultMutableTreeNode parent = root ; if ( child != null ) { int index = getIndexOfChild ( parent , child ) ; nodeMap . remove ( tvShow ) ; for ( TvShowEpisode episode : new ArrayList < > ( tvShow . getEpisodes ( ) ) ) { nodeMap . remove ( episode ) ; episode . removePropertyChangeListener ( propertyChangeListener ) ; } tvShow . removePropertyChangeListener ( propertyChangeListener ) ; child . removeAllChildren ( ) ; child . removeFromParent ( ) ; if ( index > - NUM_ ) { TreeModelEvent event = new TreeModelEvent ( this , parent . getPath ( ) , new int [ ] { index } , new Object [ ] { child } ) ; for ( TreeModelListener listener : listeners ) { try { listener . treeNodesRemoved ( event ) ; } catch ( NullPointerException | ArrayIndexOutOfBoundsException npe ) { } } } } } }
public static String toString ( int x ) { return toString ( x , NUM_ ) ; }
public void removeTagDefinition ( int tagId ) { getTagInfo ( ) . delete ( tagId ) ; }
public boolean isDirty ( ) { return dirty ; }
protected Instance normalizeInstance ( Instance instance ) throws Exception { if ( ( m_nNonDiscreteAttribute > - NUM_ ) && ( instance . attribute ( m_nNonDiscreteAttribute ) . type ( ) != Attribute . NOMINAL ) ) { m_DiscretizeFilter . input ( instance ) ; instance = m_DiscretizeFilter . output ( ) ; } m_MissingValuesFilter . input ( instance ) ; instance = m_MissingValuesFilter . output ( ) ; return instance ; }
static String format ( String key ) { return ( textResources . getString ( key ) ) ; }
public void testBulkRegister1 ( ) { try { new Phaser ( ) . bulkRegister ( - NUM_ ) ; shouldThrow ( ) ; } catch ( IllegalArgumentException success ) { } }
void done ( SabresException e ) ;
public static void logAndDisplay ( LogLevel logLevel , String tag , String message ) { if ( sLogOutput != null ) { sLogOutput . printAndPromptLog ( logLevel , tag , message ) ; } else { println ( logLevel , tag , message ) ; } }
public void nodeToBeRemoved ( Node node ) { if ( traversalSupport != null ) { traversalSupport . nodeToBeRemoved ( node ) ; } }
public final float length ( ) { return MathUtils . sqrt ( x * x + y * y ) ; }
public frameset removeElement ( String hashcode ) { removeElementFromRegistry ( hashcode ) ; return ( this ) ; }
private static boolean compareStringCase ( final String val , final int comparator , final String attr ) { final String value = comparator == APPROX ? stripWhitespaces ( val ) : val ; final String attribute = comparator == APPROX ? stripWhitespaces ( attr ) : attr ; switch ( comparator ) { case APPROX : case EQUALS : return RFC1960Filter . stringCompare ( value . toCharArray ( ) , NUM_ , attribute . toCharArray ( ) , NUM_ ) == NUM_ ; case GREATER : return RFC1960Filter . stringCompare ( value . toCharArray ( ) , NUM_ , attribute . toCharArray ( ) , NUM_ ) <= NUM_ ; case LESS : return RFC1960Filter . stringCompare ( value . toCharArray ( ) , NUM_ , attribute . toCharArray ( ) , NUM_ ) >= NUM_ ; default : throw new IllegalStateException ( STR_ ) ; } }
public Viennet2 ( ) { super ( NUM_ , NUM_ ) ; }
public void appendBit ( int bit ) { if ( ! ( bit == NUM_ || bit == NUM_ ) ) { throw new IllegalArgumentException ( STR_ ) ; } int numBitsInLastByte = sizeInBits & NUM_ ; if ( numBitsInLastByte == NUM_ ) { appendByte ( NUM_ ) ; sizeInBits -= NUM_ ; } array [ sizeInBits > > NUM_ ] |= ( byte ) ( bit << ( NUM_ - numBitsInLastByte ) ) ; ++ sizeInBits ; }
public void hideImageCover ( ) { mBackgroundBitmap = null ; setVisibility ( GONE ) ; mAnimationType = IDLE ; }
public abstract IStatus search ( IFile [ ] scope , TextSearchRequestor requestor , Pattern searchPattern , IProgressMonitor monitor ) ;
private void processBottomLayDownMode ( float xvel , float yvel ) { if ( xvel == NUM_ && getOpenStatus ( ) == Status . Middle ) close ( ) ; int l = getPaddingLeft ( ) , t = getPaddingTop ( ) ; if ( xvel < NUM_ && mDragEdge == DragEdge . Right ) l -= mDragDistance ; if ( xvel > NUM_ && mDragEdge == DragEdge . Left ) l += mDragDistance ; if ( yvel > NUM_ && mDragEdge == DragEdge . Top ) t += mDragDistance ; if ( yvel < NUM_ && mDragEdge == DragEdge . Bottom ) t -= mDragDistance ; mDragHelper . smoothSlideViewTo ( getSurfaceView ( ) , l , t ) ; invalidate ( ) ; }
public float [ ] generateTransformedValuesBubble ( List < ? extends Entry > entries , float phaseX , float phaseY , int from , int to ) { final int count = ( int ) Math . ceil ( to - from ) * NUM_ ; float [ ] valuePoints = new float [ count ] ; for ( int j = NUM_ ; j < count ; j += NUM_ ) { Entry e = entries . get ( j / NUM_ + from ) ; if ( e != null ) { valuePoints [ j ] = ( float ) ( e . getXIndex ( ) - from ) * phaseX + from ; valuePoints [ j + NUM_ ] = e . getVal ( ) * phaseY ; } } getValueToPixelMatrix ( ) . mapPoints ( valuePoints ) ; return valuePoints ; }
abstract void updateCropWindow ( float x , float y , float targetAspectRatio , Rect imageRect , float snapRadius ) ;
public abstract ASN1Primitive toASN1Primitive ( ) ;
public final void recalculate ( ) { final boolean wasFrozen = frozen ; calculated = frozen = BOOL_ ; try { calculate ( ) ; } finally { frozen = wasFrozen ; notifyObservers ( ) ; } }
void msrpTransferProgress ( long currentSize , long totalSize ) ;
public FreeCellNode next ( ) { String line = sc . nextLine ( ) ; StringTokenizer st = new StringTokenizer ( line , STR_ ) ; int val = Integer . valueOf ( st . nextToken ( ) ) ; if ( val != deal ) { throw new NoSuchElementException ( STR_ + deal + STR_ ) ; } int [ ] deals = new int [ NUM_ ] ; int idx = NUM_ ; while ( st . hasMoreTokens ( ) ) { deals [ idx ++ ] = Integer . valueOf ( st . nextToken ( ) ) ; } deal ++ ; return Deal . initialize ( deals ) ; }
public boolean isNext ( char c ) { if ( ! hasNext ( ) ) return BOOL_ ; return lcText [ pos + NUM_ ] == c ; }
protected Population createInitialPopulation ( int popSize , int individualSize ) { Population initPop = new Population ( popSize , individualSize ) ; for ( int i = NUM_ ; i < popSize ; i ++ ) { double [ ] values = new double [ individualSize ] ; for ( int j = NUM_ ; j < values . length ; j ++ ) { values [ j ] = random . nextDoubleInRange ( minValue , maxValue ) ; } initPop . setValues ( i , values ) ; } return initPop ; }
private void returnData ( Object ret ) { if ( myHost != null ) { myHost . returnData ( ret ) ; } }
public static Sequence zero ( Type c ) { return new Sequence ( ) . extend ( TypedOperation . createNullOrZeroInitializationForType ( c ) , new ArrayList < Variable > ( ) ) ; }
public void sendContactMessage ( ContactForm contactForm ) ;
public static < T extends Object & net . sourceforge . retroweaver . harmony . runtime . java . lang . Comparable < ? super T > > T max ( Collection < ? extends T > collection ) { Iterator < ? extends T > it = collection . iterator ( ) ; T max = it . next ( ) ; while ( it . hasNext ( ) ) { T next = it . next ( ) ; if ( max . compareTo ( next ) < NUM_ ) { max = next ; } } return max ; }
boolean hasGraphicalNotation ( ) ;
public InflaterOutputStream ( OutputStream out , Inflater infl ) { this ( out , infl , NUM_ ) ; }
private boolean areWeUsingGemFireSecurityProfile ( ServletContextEvent event ) { String profile = null ; WebApplicationContext ctx = WebApplicationContextUtils . getWebApplicationContext ( event . getServletContext ( ) ) ; if ( ctx . getEnvironment ( ) != null ) { String [ ] profiles = ctx . getEnvironment ( ) . getActiveProfiles ( ) ; if ( profiles != null && profiles . length > NUM_ ) { StringBuilder sb = new StringBuilder ( ) ; for ( String p : profiles ) sb . append ( p ) . append ( STR_ ) ; LOGGER . info ( STR_ + sb . toString ( ) ) ; profile = ctx . getEnvironment ( ) . getActiveProfiles ( ) [ NUM_ ] ; LOGGER . info ( STR_ + profile ) ; } else { LOGGER . info ( STR_ ) ; return BOOL_ ; } } if ( PulseConstants . APPLICATION_PROPERTY_PULSE_SEC_PROFILE_GEMFIRE . equals ( profile ) ) { LOGGER . info ( STR_ ) ; return BOOL_ ; } return BOOL_ ; }
public INotification notification ( ) { return holder ; }
public TextFormat ( Font font , boolean antialias ) { this . font = font ; this . antialias = antialias ; }
public static boolean clipRange ( double [ ] x , double minVal , double maxVal ) { boolean modified = BOOL_ ; if ( x == null ) { return modified ; } for ( int i = NUM_ ; i < x . length ; i ++ ) { if ( x [ i ] < minVal ) { x [ i ] = minVal ; modified = BOOL_ ; } else if ( x [ i ] > maxVal ) { x [ i ] = maxVal ; modified = BOOL_ ; } } return modified ; }
protected Size2D arrangeNR ( BlockContainer container , Graphics2D g2 , RectangleConstraint constraint ) { RectangleConstraint c1 = constraint . toUnconstrainedHeight ( ) ; Size2D size1 = arrange ( container , g2 , c1 ) ; if ( constraint . getHeightRange ( ) . contains ( size1 . getHeight ( ) ) ) { return size1 ; } else { double h = constraint . getHeightRange ( ) . constrain ( size1 . getHeight ( ) ) ; RectangleConstraint c2 = constraint . toFixedHeight ( h ) ; return arrange ( container , g2 , c2 ) ; } }
public Object runSafely ( Catbert . FastStack stack ) throws Exception { return Boolean . valueOf ( Seeker . getInstance ( ) . getUseDTVMajorMinorChans ( ) ) ; }
private void populateAvailableDataStores ( ) { DataAccessFactory fac ; logger . debug ( STR_ ) ; Iterator < DataStoreFactorySpi > iterator = DataStoreFinder . getAvailableDataStores ( ) ; while ( iterator . hasNext ( ) ) { fac = ( DataAccessFactory ) iterator . next ( ) ; logger . debug ( STR_ + fac . getDisplayName ( ) ) ; availableDataStoreList . add ( fac . getDisplayName ( ) ) ; } }
public Transform ( double scaleX , double scaleY , double translateX , double translateY ) { super ( scaleX , scaleY , NUM_ , NUM_ , translateX , translateY ) ; }
public static Byte valueOf ( byte i ) { return null ; }
private void renderTaggedGraphNodeNode ( final CTaggedGraphNodeNode node ) { final INaviViewNode rawNode = node . getGraphNode ( ) . getRawNode ( ) ; if ( rawNode . isTagged ( ) && rawNode . isSelected ( ) ) { setForeground ( COLOR_TAGGED_SELECTED_ALL ) ; } else if ( rawNode . isTagged ( ) && ! rawNode . isVisible ( ) ) { setForeground ( COLOR_TAGGED_INVISIBLE ) ; } setToolTipText ( buildToolTip ( node . getGraphNode ( ) ) ) ; }
private SecurityHeaderType extractSecurityHeader ( SOAPMessageContext ctx ) { assert ctx != null ; final Node secHeaderNode = extractSecurityNode ( ctx ) ; final SecurityHeaderType header = extractFromSOAPHeader ( ctx , WSSE_SECURITY_QNAME , jaxbSecurityHeaderCtx , secHeaderNode , securityHeaderSchema . newValidator ( ) ) ; validateWsseSecurity ( secHeaderNode ) ; return header ; }
private String buildMessage ( Locale locale , String separator ) { final StringBuilder sb = new StringBuilder ( ) ; int count = NUM_ ; final int len = msgPatterns . size ( ) ; for ( int i = NUM_ ; i < len ; i ++ ) { final Localizable pat = msgPatterns . get ( i ) ; final Object [ ] args = msgArguments . get ( i ) ; final MessageFormat fmt = new MessageFormat ( pat . getLocalizedString ( locale ) , locale ) ; sb . append ( fmt . format ( args ) ) ; if ( ++ count < len ) { sb . append ( separator ) ; } } return sb . toString ( ) ; }
public void clear ( ) { synchronized ( lock ) { for ( int i = NUM_ ; i < size ; i ++ ) { elementData [ i ] = null ; } size = NUM_ ; } }
public boolean checkLogin ( int accountId , int loginOk ) { return this . accountId == accountId && this . loginOk == loginOk ; }
public static < A1 , A2 , A3 , B1 , B2 , B3 , C1 , C2 , C3 > T3 < C1 , C2 , C3 > merge$ ( T3 < A1 , A2 , A3 > a , T3 < B1 , B2 , B3 > b , BiFunction < A1 , B1 , C1 > fn1 , BiFunction < A2 , B2 , C2 > fn2 , BiFunction < A3 , B3 , C3 > fn3 ) { return of$ ( null , null , null ) ; }
public void add ( ContainerAtom atom ) { containerChildren . add ( atom ) ; }
public void removeChild ( CCNode child , boolean cleanup ) { if ( child == null ) return ; if ( children_ . contains ( child ) ) detachChild ( child , cleanup ) ; }
public void score ( int s ) { score = s ; }
public void incSentBytes ( long bytes ) ;
protected void undo ( MqttPublish message ) throws MqttPersistenceException { final String methodName = STR_ ; synchronized ( queueLock ) { log . fine ( CLASS_NAME , methodName , STR_ , new Object [ ] { new Integer ( message . getMessageId ( ) ) , new Integer ( message . getMessage ( ) . getQos ( ) ) } ) ; if ( message . getMessage ( ) . getQos ( ) == NUM_ ) { outboundQoS1 . remove ( new Integer ( message . getMessageId ( ) ) ) ; } else { outboundQoS2 . remove ( new Integer ( message . getMessageId ( ) ) ) ; } pendingMessages . removeElement ( message ) ; persistence . remove ( getSendPersistenceKey ( message ) ) ; tokenStore . removeToken ( message ) ; checkQuiesceLock ( ) ; } }
public ECPublicKeyImpl ( byte [ ] encoded ) throws InvalidKeyException { decode ( encoded ) ; }
public void putAll ( RegisterSpecSet set ) { int max = set . getMaxSize ( ) ; for ( int i = NUM_ ; i < max ; i ++ ) { RegisterSpec spec = set . get ( i ) ; if ( spec != null ) { put ( spec ) ; } } }
public static void colorIcons ( Activity activity , Menu menu , int color ) { ToolbarTinter . on ( menu ) . setIconsColor ( color ) . apply ( activity ) ; }
public static final SSLContext createSSLContext ( final String protocol , final String provider , final KeyManager [ ] keyManagers , final TrustManager [ ] trustManagers ) { try { SSLContext context = SSLContext . getInstance ( protocol , provider ) ; context . init ( keyManagers , trustManagers , new SecureRandom ( ) ) ; return context ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
public static HttpRequest put ( final CharSequence baseUrl , final Map < ? , ? > params , final boolean encode ) { String url = append ( baseUrl , params ) ; return put ( encode ? encode ( url ) : url ) ; }
protected void validate_return ( MessageCatalog [ ] param ) { }
private void handleErrorFinish ( ) { Log . d ( TAG , STR_ ) ; Toast . makeText ( getApplicationContext ( ) , LOST_CONTACT_STRING , Toast . LENGTH_LONG ) . show ( ) ; returnToStartupActivity ( ) ; }
public static TupleSchema of ( String name , TupleSlot ... slots ) { checkNotNull ( name , STR_ ) ; checkNotNull ( slots , STR_ ) ; Map < String , Integer > slotLookup = IntStream . range ( NUM_ , slots . length ) . collect ( null , null , null ) ; checkArgument ( slots . length == slotLookup . size ( ) , STR_ ) ; return new TupleSchema ( name , slots , slotLookup ) ; }
protected void readPageConfigurationFromRequest ( ) { pageConfigurationForm . readFromRequest ( context . getRequest ( ) ) ; }
public MultiDomainServerState ( String cookie ) throws DirectoryException { list = new ConcurrentSkipListMap < > ( splitGenStateToServerStates ( cookie ) ) ; }
public abstract void stopListeningTo ( Component c ) ;
public void terminateServer ( ) { process . destroy ( ) ; }
public Matrix3f ( ) { mMat = new float [ NUM_ ] ; loadIdentity ( ) ; }
private static XeSource source ( final Domain domain ) throws IOException { final String name = domain . name ( ) ; return new XeDirectives ( new Directives ( ) . add ( STR_ ) . add ( STR_ ) . set ( name ) . up ( ) . append ( new XeLink ( STR_ , new Href ( STR_ ) . with ( STR_ , name ) ) . toXembly ( ) ) . up ( ) ) ; }
public SBP ( KernelTrick kernel , CacheMode cacheMode , int iterations , double v ) { super ( kernel , cacheMode ) ; setIterations ( iterations ) ; setNu ( v ) ; }
public double toDouble ( ) ;
void add ( CTSOperation operation ) { OperationMonitor rate ; synchronized ( operationRate ) { rate = operationRate . get ( operation ) ; if ( rate == null ) { rate = operationRateFactory . createOperationRate ( ) ; operationRate . put ( operation , rate ) ; } } rate . increment ( ) ; }
private void selectRadioButton ( ActionEvent event , boolean next ) { Object eventSrc = event . getSource ( ) ; if ( ! isValidRadioButtonObj ( eventSrc ) ) return ; ButtonGroupInfo btnGroupInfo = new ButtonGroupInfo ( ( JRadioButton ) eventSrc ) ; btnGroupInfo . selectNewButton ( next ) ; }
private void savePreviousImageValues ( ) { if ( matrix != null && viewHeight != NUM_ && viewWidth != NUM_ ) { matrix . getValues ( m ) ; prevMatrix . setValues ( m ) ; prevMatchViewHeight = matchViewHeight ; prevMatchViewWidth = matchViewWidth ; prevViewHeight = viewHeight ; prevViewWidth = viewWidth ; } }
public static void logRequestInfo ( HTTPRequestInfo requestInfo ) { for ( HTTPAccessLogPublisher < ? > publisher : loggerStorage . getLogPublishers ( ) ) { publisher . logRequestInfo ( requestInfo ) ; } }
public void testNullStoredBytesField ( ) throws Exception { Directory dir = newDirectory ( ) ; Analyzer analyzer = new MockAnalyzer ( random ( ) ) ; IndexWriter iw = new IndexWriter ( dir , new IndexWriterConfig ( analyzer ) ) ; Document doc = new Document ( ) ; iw . addDocument ( doc ) ; expectThrows ( NullPointerException . class , null ) ; assertNull ( iw . getTragicException ( ) ) ; iw . close ( ) ; DirectoryReader r = DirectoryReader . open ( dir ) ; assertEquals ( NUM_ , r . numDocs ( ) ) ; r . close ( ) ; dir . close ( ) ; }
public void actionPerformed ( ActionEvent ev ) { ClusterViewer viewer = getViewer ( ) ; PageFormat pageFormat = ProgramProperties . getPageFormat ( ) ; PrinterJob job = PrinterJob . getPrinterJob ( ) ; if ( pageFormat != null ) job . setPrintable ( viewer , pageFormat ) ; else job . setPrintable ( viewer ) ; if ( job . printDialog ( ) ) { try { job . print ( ) ; } catch ( Exception ex ) { Basic . caught ( ex ) ; NotificationsInSwing . showError ( viewer . getFrame ( ) , STR_ + ex ) ; } } }
public void simulateMethod ( SootMethod method , ReferenceVariable thisVar , ReferenceVariable returnVar , ReferenceVariable params [ ] ) { String subSignature = method . getSubSignature ( ) ; if ( subSignature . equals ( STR_ ) ) { java_lang_reflect_Array_get ( method , thisVar , returnVar , params ) ; return ; } else if ( subSignature . equals ( STR_ ) ) { java_lang_reflect_Array_set ( method , thisVar , returnVar , params ) ; return ; } else if ( subSignature . equals ( STR_ ) ) { java_lang_reflect_Array_newArray ( method , thisVar , returnVar , params ) ; return ; } else if ( subSignature . equals ( STR_ ) ) { java_lang_reflect_Array_multiNewArray ( method , thisVar , returnVar , params ) ; return ; } else { defaultMethod ( method , thisVar , returnVar , params ) ; return ; } }
public boolean hasThumbnail ( ) { return mData . hasCompressedThumbnail ( ) ; }
public static final JIPClause create ( final JIPTerm term ) { return new JIPClause ( Clause . getClause ( term . getRealTerm ( ) , BOOL_ ) ) ; }
private static long calcSize ( long size , long skip , long limit ) { return size >= NUM_ ? Math . max ( - NUM_ , Math . min ( size - skip , limit ) ) : - NUM_ ; }
private void removeBestTestSuite ( String testName ) { File file = getFileForTargetBestTest ( testName ) ; if ( ! file . exists ( ) ) { logger . debug ( STR_ + file . getAbsolutePath ( ) ) ; } else { boolean deleted = file . delete ( ) ; if ( ! deleted ) { logger . warn ( STR_ + file . getAbsolutePath ( ) ) ; } } }
public boolean isBold ( ) { return bold ; }
public LexicographicalComparator ( ) { super ( ) ; }
public void passScoreAfterParsing ( Text url , Content content , Parse parse ) { parse . getData ( ) . getContentMeta ( ) . set ( Nutch . SCORE_KEY , content . getMetadata ( ) . get ( Nutch . SCORE_KEY ) ) ; }
public OUTPUT convert ( INPUT tuple ) ;
public kbd addElement ( String hashcode , String element ) { addElementToRegistry ( hashcode , element ) ; return ( this ) ; }
public void reply ( CanReply m ) { }
void sendClose ( MultiplexConnectionInfo info ) throws IOException { info . out . disconnect ( ) ; synchronized ( dataOut ) { if ( alive && ! info . closed ) try { dataOut . writeByte ( CLOSE ) ; dataOut . writeShort ( info . id ) ; dataOut . flush ( ) ; info . closed = BOOL_ ; } catch ( IOException e ) { multiplexLog . log ( Log . BRIEF , STR_ , e ) ; shutDown ( ) ; throw e ; } } }
public DNameConstraints ( JDialog parent ) { super ( parent ) ; setTitle ( res . getString ( STR_ ) ) ; initComponents ( ) ; }
public void combine ( Stats o ) { max = Math . max ( max , o . max ) ; min = Math . min ( min , o . min ) ; m = m * ( n / ( double ) ( n + o . n ) ) + o . m * ( o . n / ( double ) ( n + o . n ) ) ; s = Double . NaN ; n += o . n ; }
public int width ( ) { return mColumns ; }
public SparseLongArray ( int initialCapacity ) { initialCapacity = ArrayUtils . idealLongArraySize ( initialCapacity ) ; mKeys = new int [ initialCapacity ] ; mValues = new long [ initialCapacity ] ; mSize = NUM_ ; }
void removeRelationship ( Relationship relationship ) ;
public void testGetAttributeNS2 ( ) throws Throwable { String namespaceURI = STR_ ; String localName = STR_ ; String qualifiedName = STR_ ; Document doc ; Attr newAttribute ; NodeList elementList ; Element testAddr ; String attrValue ; doc = ( Document ) load ( STR_ , builder ) ; newAttribute = doc . createAttributeNS ( namespaceURI , qualifiedName ) ; elementList = doc . getElementsByTagName ( STR_ ) ; testAddr = ( Element ) elementList . item ( NUM_ ) ; assertNotNull ( STR_ , testAddr ) ; testAddr . setAttributeNodeNS ( newAttribute ) ; elementList = doc . getElementsByTagName ( STR_ ) ; testAddr = ( Element ) elementList . item ( NUM_ ) ; attrValue = testAddr . getAttributeNS ( namespaceURI , localName ) ; assertEquals ( STR_ , STR_ , attrValue ) ; }
void revisitNode ( final Node n , final AStarNodeData data , final RouterPriorityQueue < Node > pendingNodes , final double time , final double cost , final double expectedRemainingCost , final Link outLink ) { pendingNodes . remove ( n ) ; data . visit ( outLink , cost , time , getIterationId ( ) ) ; data . setExpectedRemainingCost ( expectedRemainingCost ) ; pendingNodes . add ( n , getPriority ( data ) ) ; }
public void addTransaction ( Transaction t ) { addTransaction ( t , BOOL_ ) ; }
public AlipayBuilder paymentType ( PaymentType type ) { alipay . paymentType = type . value ( ) ; return this ; }
public void queryAABB ( QueryCallback callback , ParticleQueryCallback particleCallback , AABB aabb ) { wqwrapper . broadPhase = m_contactManager . m_broadPhase ; wqwrapper . callback = callback ; m_contactManager . m_broadPhase . query ( wqwrapper , aabb ) ; m_particleSystem . queryAABB ( particleCallback , aabb ) ; }
public Adler32 ( ) { }
protected void inorder ( TreeNode < E > root ) { if ( root == null ) return ; inorder ( root . left ) ; System . out . print ( root . element + STR_ ) ; inorder ( root . right ) ; }
public static boolean isSameDiagonal ( char [ ] board ) { for ( int i = NUM_ ; i < board . length ; i ++ ) { if ( isOccupied ( board [ i ] ) ) { for ( int j = NUM_ ; j < board . length ; j ++ ) { if ( isOccupied ( board [ j ] ) && Math . abs ( getColumn ( j ) - getColumn ( i ) ) == Math . abs ( getRow ( j ) - getRow ( i ) ) && j != i ) { return BOOL_ ; } } } } return BOOL_ ; }
public static Clause not ( String clause ) { return new NotClause ( where ( clause ) ) ; }
public IPsecStatus checkStatus ( ) { log . info ( STR_ ) ; IPsecStatus status = new IPsecStatus ( ) ; String vdcConfigVersion = loadVdcConfigVersionFromZK ( ) ; status . setVersion ( vdcConfigVersion ) ; String ipsecKeyUpdatedTime = ipsecConfig . getIpsecKeyUpdatedTime ( ) ; String ipsecStatus = ipsecConfig . getIpsecStatus ( ) ; if ( ipsecStatus != null && ipsecStatus . equals ( STATUS_DISABLED ) ) { status . setStatus ( ipsecStatus ) ; } else { List < String > disconnectedNodes = checkIPsecStatus ( ) ; if ( CollectionUtils . isEmpty ( disconnectedNodes ) ) { status . setStatus ( STATUS_GOOD ) ; } else { status . setStatus ( STATUS_DEGRADED ) ; status . setDisconnectedNodes ( disconnectedNodes ) ; } if ( ipsecKeyUpdatedTime == null ) { ipsecKeyUpdatedTime = vdcConfigVersion ; } status . setUpdatedTime ( ipsecKeyUpdatedTime ) ; } return status ; }
private int measureHeight ( int measureSpec ) { float result ; int specMode = MeasureSpec . getMode ( measureSpec ) ; int specSize = MeasureSpec . getSize ( measureSpec ) ; if ( specMode == MeasureSpec . EXACTLY ) { result = specSize ; } else { result = mPaintSelected . getStrokeWidth ( ) + getPaddingTop ( ) + getPaddingBottom ( ) ; if ( specMode == MeasureSpec . AT_MOST ) { result = Math . min ( result , specSize ) ; } } return ( int ) Math . ceil ( result ) ; }
public boolean decodeXWapInitiatorURI ( int startIndex ) { return decodeTextString ( startIndex ) ; }
protected void initializeRequestContext ( RequestContext requestContext ) { super . initializeRequestContext ( requestContext ) ; ViewBeanManager viewBeanManager = new ViewBeanManager ( requestContext , PACKAGE_NAME ) ; ( ( RequestContextImpl ) requestContext ) . setViewBeanManager ( viewBeanManager ) ; }
public boolean hasAltitude ( ) { return mHasAltitude ; }
public String post ( String url , String json , Map < String , String > headers , Map < String , String > params , final int expectedStatusCode ) { HttpPost post = new HttpPost ( url ) ; if ( json != null ) { post . setEntity ( new StringEntity ( json , ContentType . APPLICATION_JSON ) ) ; } setHeaders ( post , headers ) ; setParams ( post , params ) ; return method ( post , expectedStatusCode ) ; }
protected boolean checkFuncNum ( ) { return this . ckFinderFuncNum != null ; }
public void assertTitle ( String title ) { TestUtils . assertTitle ( title ) ; }
public RemoteHttpServletResponse ( HttpServletResponse response ) { super ( response ) ; }
public abstract void assignPortsToHost ( Map < Initiator , List < StoragePort > > assignments , Map < URI , List < Initiator > > netToNewInitiators , Map < URI , List < StoragePort > > netToAllocatedPorts , ExportPathParams pathParams , Map < Initiator , List < StoragePort > > existingAssignments , URI hostURI , Map < Initiator , NetworkLite > initiatorToNetworkLiteMap ) ;
public static < T > FutureW < T > fromIterable ( final Iterable < T > iterable ) { iterable . iterator ( ) ; return FutureW . ofResult ( Eval . fromIterable ( iterable ) ) . map ( null ) ; }
void onItemSelected ( Spinner parent , View view , int position , long id ) ;
public abstract void poll ( ) ;
public ExifTag ( String name ) { this ( name , null ) ; }
public synchronized void addAllSeries ( List < XYSeries > series ) { mSeries . addAll ( series ) ; }
public int replaceAll ( String regularExpression , String replaceText , boolean selectionOnly ) { System . err . println ( STR_ ) ; return NUM_ ; }
public NotificationChain basicSetExpression ( Expression newExpression , NotificationChain msgs ) { Expression oldExpression = expression ; expression = newExpression ; if ( eNotificationRequired ( ) ) { ENotificationImpl notification = new ENotificationImpl ( this , Notification . SET , N4JSPackage . POSTFIX_EXPRESSION__EXPRESSION , oldExpression , newExpression ) ; if ( msgs == null ) msgs = notification ; else msgs . add ( notification ) ; } return msgs ; }
void encode ( ByteBuf buffer ) ;
public void delete ( ) throws IOException { close ( ) ; deleteContents ( directory ) ; }
public static Bitmap decodeFile ( String path , BitmapFactory . Options options ) { if ( available ( ) ) { return nativeDecodeFile ( path , options ) ; } else { return BitmapFactory . decodeFile ( path , options ) ; } }
public HttpRequest basic ( final String name , final String password ) { return authorization ( STR_ + Base64 . encode ( name + STR_ + password ) ) ; }
private void storeSendDetails ( final String topic , final MqttMessage msg , final IMqttDeliveryToken messageToken , final String invocationContext , final String activityToken ) { savedTopics . put ( messageToken , topic ) ; savedSentMessages . put ( messageToken , msg ) ; savedActivityTokens . put ( messageToken , activityToken ) ; savedInvocationContexts . put ( messageToken , invocationContext ) ; }
public Object runSafely ( Catbert . FastStack stack ) throws Exception { Person p = getPerson ( stack ) ; SeriesInfo si = getSeriesInfo ( stack ) ; if ( si == null || p == null ) return Boolean . FALSE ; return si . hasActorInCharacterImage ( p ) ? Boolean . TRUE : Boolean . FALSE ; }
public static < T extends Object > Republisher < T > createRepublisher ( Publisher < T > publisher , String eventName ) { return new RepublisherImpl < T > ( publisher , eventName ) ; }
public synchronized void addListener ( final CommentListener listener ) { listeners . addListener ( listener ) ; }
public static ZyGraphBuilderManager instance ( ) { return m_instance ; }
public org . apache . nutch . storage . WebPage . Builder clearParseStatus ( ) { parseStatus = null ; fieldSetFlags ( ) [ NUM_ ] = BOOL_ ; return this ; }
public boolean isStateActive ( State state ) { switch ( state ) { case main_region_A : return stateVector [ NUM_ ] == State . main_region_A ; case main_region_B : return stateVector [ NUM_ ] . ordinal ( ) >= State . main_region_B . ordinal ( ) && stateVector [ NUM_ ] . ordinal ( ) <= State . main_region_B_r2_D2 . ordinal ( ) ; case main_region_B_r1_C1 : return stateVector [ NUM_ ] == State . main_region_B_r1_C1 ; case main_region_B_r1_C2 : return stateVector [ NUM_ ] == State . main_region_B_r1_C2 ; case main_region_B_r2_D1 : return stateVector [ NUM_ ] == State . main_region_B_r2_D1 ; case main_region_B_r2_D2 : return stateVector [ NUM_ ] == State . main_region_B_r2_D2 ; default : return BOOL_ ; } }
public static PojoField findFieldByName ( Collection < PojoField > fields , String name ) { for ( PojoField field : fields ) if ( field . dbName ( ) . equals ( name ) ) return field ; return null ; }
public void writeEnumNoTag ( final int value ) throws IOException { writeInt32NoTag ( value ) ; }
public Destination createDestination ( Session session , JmsTransactionTestSupport support ) throws JMSException { if ( isTopic ) { return support . createDestination ( session , ActiveMQDestination . TOPIC_TYPE ) ; } else { return support . createDestination ( session , ActiveMQDestination . QUEUE_TYPE ) ; } }
public InputStreamInputSplit ( InputStream is , URI path ) { this . is = is ; this . location = new URI [ ] { path } ; }
abstract protected void clearViewer ( ) ;
private static String toSp ( int n ) { return String . format ( STR_ + UNIT_SP , n ) ; }
protected HARegionQueue createHARegionQueue ( String name ) throws IOException , ClassNotFoundException , CacheException , InterruptedException { HARegionQueue regionqueue = HARegionQueue . getHARegionQueueInstance ( name , cache , HARegionQueue . BLOCKING_HA_QUEUE , BOOL_ ) ; return regionqueue ; }
public static String retainAllChars ( String str , String retainChars ) { int pos = indexOfChars ( str , retainChars ) ; if ( pos == - NUM_ ) { return STR_ ; } StringBuilder buf = new StringBuilder ( ) ; do { buf . append ( str . charAt ( pos ) ) ; pos = indexOfChars ( str , retainChars , pos + NUM_ ) ; } while ( pos != - NUM_ ) ; return buf . toString ( ) ; }
protected static boolean matchUserLanguage ( String s , String userLanguages ) { StringTokenizer st = new StringTokenizer ( userLanguages , STR_ ) ; while ( st . hasMoreTokens ( ) ) { String t = st . nextToken ( ) ; if ( s . startsWith ( t ) ) { if ( s . length ( ) > t . length ( ) ) { return ( s . charAt ( t . length ( ) ) == STR_ ) ; } return BOOL_ ; } } return BOOL_ ; }
public int next ( ) { int node ; while ( ( node = super . next ( ) ) != END ) { node = makeNodeIdentity ( node ) ; int parent = _parent ( node ) ; int child = _firstch ( parent ) ; int pos = NUM_ ; do { int type = _type ( child ) ; if ( ELEMENT_NODE == type ) pos ++ ; } while ( ( pos < _pos ) && ( child = _nextsib ( child ) ) != END ) ; if ( node == child ) return node ; } return ( END ) ; }
public void onLastItemVisible ( ) ;
public static void addSubscriber ( Workflow workflow , Observer workflowSubscriber ) { SUBSCRIBERS . put ( workflow , workflowSubscriber ) ; }
public Path [ ] indexPaths ( Index index ) { assert assertEnvIsLocked ( ) ; Path [ ] indexPaths = new Path [ nodePaths . length ] ; for ( int i = NUM_ ; i < nodePaths . length ; i ++ ) { indexPaths [ i ] = nodePaths [ i ] . indicesPath . resolve ( index . name ( ) ) ; } return indexPaths ; }
public final PointF sourceToViewCoord ( float sx , float sy ) { return sourceToViewCoord ( sx , sy , new PointF ( ) ) ; }
public synchronized void clear ( ) { size = NUM_ ; Arrays . fill ( table , null ) ; }
public String dump ( byte [ ] der ) throws Asn1Exception , IOException { try { ASN1Primitive derObject = ASN1Primitive . fromByteArray ( der ) ; if ( derObject . getEncoded ( ) . length < der . length ) { throw new Asn1Exception ( res . getString ( STR_ ) ) ; } return dump ( derObject ) ; } catch ( IOException ex ) { throw new Asn1Exception ( res . getString ( STR_ ) , ex ) ; } }
private void checkPausedOrCanceled ( State state ) throws StopRequest { if ( mService . getControl ( ) == DownloaderService . CONTROL_PAUSED ) { int status = mService . getStatus ( ) ; switch ( status ) { case DownloaderService . STATUS_PAUSED_BY_APP : throw new StopRequest ( mService . getStatus ( ) , STR_ ) ; } } }
public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Fear_A_TO_SELF ( String skillcaster , String skillname ) { return new SM_SYSTEM_MESSAGE ( NUM_ , skillcaster , skillname ) ; }
public void removeSelectionChangeListener ( final SelectionChangeListener listener ) { checkWidget ( ) ; if ( listener == null ) { SWT . error ( SWT . ERROR_NULL_ARGUMENT ) ; } if ( selectionChangeListeners == null ) { return ; } selectionChangeListeners . remove ( listener ) ; }
protected void uploadAndRegisterTestData ( String s3KeyPrefix ) throws Exception { uploadAndRegisterTestData ( s3KeyPrefix , testManifestFiles ) ; }
protected void showTabs ( ) { if ( getPageCount ( ) > NUM_ ) { setPageText ( NUM_ , getString ( STR_ ) ) ; if ( getContainer ( ) instanceof CTabFolder ) { ( ( CTabFolder ) getContainer ( ) ) . setTabHeight ( SWT . DEFAULT ) ; Point point = getContainer ( ) . getSize ( ) ; getContainer ( ) . setSize ( point . x , point . y - NUM_ ) ; } } }
public static String compressChars ( String s , char c ) { int len = s . length ( ) ; StringBuilder sb = new StringBuilder ( len ) ; boolean wasChar = BOOL_ ; for ( int i = NUM_ ; i < len ; i ++ ) { char c1 = s . charAt ( i ) ; if ( c1 == c ) { if ( wasChar ) { continue ; } wasChar = BOOL_ ; } else { wasChar = BOOL_ ; } sb . append ( c1 ) ; } if ( sb . length ( ) == len ) { return s ; } return sb . toString ( ) ; }
public static void main ( String [ ] args ) { TestOverridenPrivateMethods tester = new TestOverridenPrivateMethods ( ) ; run ( tester , ARGS , TEST , NEGATED_TEST ) ; tester . printSummary ( ) ; }
public static void write ( OutputStream out , InputStream is , long length , boolean noBackslashEscapes ) throws IOException { out . write ( QUOTE ) ; byte [ ] buffer = new byte [ NUM_ ] ; long bytesLeft = length ; int len ; for ( ; ; ) { int bytesToRead = ( int ) Math . min ( bytesLeft , buffer . length ) ; if ( bytesToRead == NUM_ ) { break ; } len = is . read ( buffer , NUM_ , bytesToRead ) ; if ( len <= NUM_ ) { break ; } writeBytesEscaped ( out , buffer , len , noBackslashEscapes ) ; bytesLeft -= len ; } out . write ( QUOTE ) ; }
public boolean nonEmpty ( ) { return count != NUM_ ; }
private static boolean hasResponseBody ( int requestMethod , int responseCode ) { return requestMethod != Request . Method . HEAD && ! ( HttpStatus . SC_CONTINUE <= responseCode && responseCode < HttpStatus . SC_OK ) && responseCode != HttpStatus . SC_NO_CONTENT && responseCode != HttpStatus . SC_NOT_MODIFIED ; }
public ContentInfo ( byte [ ] bytes ) { DerValue octetString = new DerValue ( DerValue . tag_OctetString , bytes ) ; this . contentType = DATA_OID ; this . content = octetString ; }
private static InteractiveSpartanizer addNanoPatterns ( final InteractiveSpartanizer ¢ ) { return ¢ . add ( ConditionalExpression . class , new DefaultsTo ( ) , new SafeReference ( ) , null ) . add ( Assignment . class , new AssignmentLazyEvaluation ( ) , null ) . add ( CastExpression . class , new Coercion ( ) , null ) . add ( EnhancedForStatement . class , new ApplyToEach ( ) , null ) . add ( IfStatement . class , new IfNullThrow ( ) , new IfNullReturn ( ) , new IfNullReturnNull ( ) , new ExecuteWhen ( ) , null ) . add ( MethodDeclaration . class , new MethodEmpty ( ) , new Getter ( ) , new Setter ( ) , new Mapper ( ) , new Exploder ( ) , new Examiner ( ) , new Delegator ( ) , new Carrier ( ) , null ) ; }
public < T extends DataObject > T findById ( URI id ) { if ( id == null ) { throw new DataAccessException ( STR_ ) ; } Class < T > modelClass = getModelClass ( id ) ; if ( modelClass != null ) { return of ( modelClass ) . findById ( id ) ; } else { return null ; } }
public PacProxySelector ( String pacUrl ) { if ( pacUrl == null ) { throw new NullPointerException ( ) ; } this . pacUrl = pacUrl ; }
public static ServiceInfo create ( final String type , final String name , final int port , final int weight , final int priority , final Map < String , ? > props ) { return new ServiceInfoImpl ( type , name , STR_ , port , weight , priority , BOOL_ , props ) ; }
public void save ( ) throws WarpScriptException ;
public synchronized void replaceTemplates ( CodeTemplate [ ] newTemplates ) { templates . clear ( ) ; if ( newTemplates != null ) { for ( int i = NUM_ ; i < newTemplates . length ; i ++ ) { templates . add ( newTemplates [ i ] ) ; } } sortTemplates ( ) ; }
public Rect [ ] newArray ( int size ) { return new Rect [ size ] ; }
public boolean equals ( Object o2 ) { if ( o2 != null && o2 instanceof IconGroup ) { IconGroup ig2 = ( IconGroup ) o2 ; if ( ig2 . getName ( ) . equals ( getName ( ) ) && separateLargeIcons == ig2 . hasSeparateLargeIcons ( ) ) { if ( separateLargeIcons ) { if ( ! largeIconSubDir . equals ( ig2 . largeIconSubDir ) ) return BOOL_ ; } return path . equals ( ig2 . path ) ; } } return BOOL_ ; }
void registerListener ( String switcherName , SwitcherListener listener ) ;
public Object runSafely ( Catbert . FastStack stack ) throws Exception { return Wizard . getInstance ( ) . getAllArtists ( ) ; }
public static void main ( String [ ] args ) { javax . swing . JApplet theApplet = new AppletGUI ( ) ; theApplet . init ( ) ; javax . swing . JFrame window = new javax . swing . JFrame ( ComputerPlayer . engineName ) ; window . setContentPane ( theApplet ) ; window . setDefaultCloseOperation ( javax . swing . JFrame . EXIT_ON_CLOSE ) ; window . pack ( ) ; window . setVisible ( BOOL_ ) ; }
public double lat ( ) ;
public ReceiveWorker ( final ClientReader inputStream , final LinkedBlockingQueue < DebuggerReply > eventQueue ) { workerInputStream = Preconditions . checkNotNull ( inputStream , STR_ ) ; this . eventQueue = Preconditions . checkNotNull ( eventQueue , STR_ ) ; parserFactory = new ParserFactory ( inputStream ) ; }
private void selectionChanged ( ) { int index = list . getSelectionIndex ( ) ; int size = list . getItemCount ( ) ; removeButton . setEnabled ( index >= NUM_ ) ; editButton . setEnabled ( index >= NUM_ ) ; upButton . setEnabled ( size > NUM_ && index > NUM_ ) ; downButton . setEnabled ( size > NUM_ && index >= NUM_ && index < size - NUM_ ) ; }
public HistogramModel ( ) { this ( null , null , DEFAULT_BINS ) ; }
static < T > T [ ] arraysCopyOf ( T [ ] original , int newLength ) { T [ ] copy = newArray ( original , newLength ) ; System . arraycopy ( original , NUM_ , copy , NUM_ , Math . min ( original . length , newLength ) ) ; return copy ; }
public AsyncResult PublishAsync ( RequestHeader RequestHeader , SubscriptionAcknowledgement ... SubscriptionAcknowledgements ) { PublishRequest req = new PublishRequest ( RequestHeader , SubscriptionAcknowledgements ) ; return channel . serviceRequestAsync ( req ) ; }
private static < T > SortedSet < T > cast ( Iterable < T > iterable ) { return ( SortedSet < T > ) iterable ; }
public void expm1 ( final double [ ] operand , final int operandOffset , final double [ ] result , final int resultOffset ) { double [ ] function = new double [ NUM_ + order ] ; function [ NUM_ ] = FastMath . expm1 ( operand [ operandOffset ] ) ; Arrays . fill ( function , NUM_ , NUM_ + order , FastMath . exp ( operand [ operandOffset ] ) ) ; compose ( operand , operandOffset , function , result , resultOffset ) ; }
public void insert_dyn_any ( org . omg . DynamicAny . DynAny value ) throws org . omg . DynamicAny . DynAnyPackage . TypeMismatch , org . omg . DynamicAny . DynAnyPackage . InvalidValue { org . omg . CORBA . portable . ServantObject $so = _servant_preinvoke ( STR_ , _opsClass ) ; DynEnumOperations $self = ( DynEnumOperations ) $so . servant ; try { $self . insert_dyn_any ( value ) ; } finally { _servant_postinvoke ( $so ) ; } }
public Criteria createCriteria ( ) { Criteria criteria = createCriteriaInternal ( ) ; if ( oredCriteria . size ( ) == NUM_ ) { oredCriteria . add ( criteria ) ; } return criteria ; }
public static _Fields findByName ( String name ) { return byName . get ( name ) ; }
Location withZ ( double z ) ;
void signRequest ( Request . Builder builder ) ;
public static RawHeaders fromBytes ( InputStream in ) throws IOException { RawHeaders headers ; do { headers = new RawHeaders ( ) ; headers . setStatusLine ( Util . readAsciiLine ( in ) ) ; readHeaders ( in , headers ) ; } while ( headers . getResponseCode ( ) == HttpEngine . HTTP_CONTINUE ) ; return headers ; }
public boolean isLastFrag ( ) { return lastFrag ; }
public void onDestroy ( ) { }
protected void processMap ( ByteBuffer buffer , int bufferStartPage ) { int byteCount = NUM_ ; while ( buffer . hasRemaining ( ) ) { byte b = buffer . get ( ) ; if ( b != ( byte ) NUM_ ) { for ( int i = NUM_ ; i < NUM_ ; i ++ ) { if ( ( b & ( NUM_ << i ) ) != NUM_ ) { int pageNumberOffset = ( byteCount * NUM_ + i ) + bufferStartPage ; int pageNumber = bitIndexToPageNumber ( pageNumberOffset , PageChannel . INVALID_PAGE_NUMBER ) ; if ( ! isPageWithinRange ( pageNumber ) ) { throw new IllegalStateException ( STR_ + pageNumber + STR_ + _startPage + STR_ + _endPage ) ; } _pageNumbers . set ( pageNumberOffset ) ; } } } byteCount ++ ; } }
public char skipTo ( char to ) throws JSONException { char c ; try { long startIndex = this . index ; long startCharacter = this . character ; long startLine = this . line ; this . reader . mark ( NUM_ ) ; do { c = this . next ( ) ; if ( c == NUM_ ) { this . reader . reset ( ) ; this . index = startIndex ; this . character = startCharacter ; this . line = startLine ; return c ; } } while ( c != to ) ; } catch ( IOException exc ) { throw new JSONException ( exc ) ; } this . back ( ) ; return c ; }
EmoResource header ( String header , Object value ) ;
public int addNodeInDocOrder ( Node node , XPathContext support ) { if ( ! m_mutable ) throw new RuntimeException ( XSLMessages . createXPATHMessage ( XPATHErrorResources . ER_NODESET_NOT_MUTABLE , null ) ) ; return addNodeInDocOrder ( node , BOOL_ , support ) ; }
protected void uninstallComponents ( ) { uninstallTabContainer ( ) ; if ( scrollableTabLayoutEnabled ( ) ) { tabPane . remove ( tabScroller . viewport ) ; tabPane . remove ( tabScroller . scrollForwardButton ) ; tabPane . remove ( tabScroller . scrollBackwardButton ) ; tabScroller = null ; } }
public void onAccessibilityEvent ( AccessibilityEvent event ) ;
void deleteSettings ( ClientType clientType , String name ) ;
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public boolean isBurning ( Coords coords ) { return burning . get ( coords ) ; }
public TurkishLowerCaseFilterFactory ( Map < String , String > args ) { super ( args ) ; if ( ! args . isEmpty ( ) ) { throw new IllegalArgumentException ( STR_ + args ) ; } }
public void add ( double value ) { if ( value < lower || Double . isNaN ( lower ) ) { lower = value ; } if ( value > upper || Double . isNaN ( upper ) ) { upper = value ; } }
public PhotosSearchQuery ( VkApiClient client , UserActor actor ) { super ( client , STR_ , SearchResponse . class ) ; accessToken ( actor . getAccessToken ( ) ) ; }
public void addChannel ( IChannel channel ) { if ( ! this . channels . contains ( channel ) && ! ( channel instanceof IVoiceChannel ) && ! ( channel instanceof IPrivateChannel ) ) this . channels . add ( channel ) ; }
public static String decode ( byte [ ] utf8 ) throws CharacterCodingException { return decode ( ByteBuffer . wrap ( utf8 ) , BOOL_ ) ; }
static boolean isRunningInsideMatlab ( ) { boolean available ; try { Class < ? > matlabClass = Class . forName ( STR_ ) ; Method isAvailableMethod = matlabClass . getMethod ( STR_ ) ; available = ( Boolean ) isAvailableMethod . invoke ( null ) ; } catch ( Throwable t ) { available = BOOL_ ; } return available ; }
public void onPageSelected ( int position ) ;
public void delete ( ) { if ( tx . isReadOnly ( ) && ! isTempTable ( ) ) throw new UnsupportedOperationException ( ) ; if ( fhp == null ) fhp = openHeaderForModification ( ) ; RecordId deletedRid = currentRecordId ( ) ; tx . recoveryMgr ( ) . logLogicalStart ( ) ; rp . delete ( fhp . getLastDeletedSlot ( ) ) ; fhp . setLastDeletedSlot ( currentRecordId ( ) ) ; tx . recoveryMgr ( ) . logRecordFileDeletionEnd ( ti . tableName ( ) , deletedRid . block ( ) . number ( ) , deletedRid . id ( ) ) ; closeHeader ( ) ; }
RockerOutput render ( ) throws RenderingException ;
public void stateChanged ( ChangeEvent e ) { setVolumeValue ( ) ; }
public static Drawable toDrawable ( Bitmap bitmap ) { return bitmap == null ? null : new BitmapDrawable ( null , bitmap ) ; }
static protected long countResults ( final GraphQueryResult result ) throws Exception { try { long count = NUM_ ; while ( result . hasNext ( ) ) { result . next ( ) ; count ++ ; } return count ; } finally { result . close ( ) ; } }
private void openPokemonGoApp ( ) { Intent i = getPackageManager ( ) . getLaunchIntentForPackage ( STR_ ) ; if ( i != null ) { startActivity ( i ) ; } }
private void addLoyaltyCards ( int cardsToAdd ) { for ( int index = cardsToAdd ; index > NUM_ ; index -- ) { String storeName = String . format ( STR_ , index ) ; String note = String . format ( STR_ , index ) ; boolean result = db . insertLoyaltyCard ( storeName , note , BARCODE_DATA , BARCODE_TYPE ) ; assertTrue ( result ) ; } assertEquals ( cardsToAdd , db . getLoyaltyCardCount ( ) ) ; }
private void makeUserGroup ( ) { Query userGroupQuery ; if ( this . userGroupQuery == null ) { userGroupQuery = Query . Builder . create ( ) . setTerm ( ServiceDocument . FIELD_NAME_SELF_LINK , this . userSelfLink ) . build ( ) ; } else { userGroupQuery = this . userGroupQuery ; } UserGroupState group = new UserGroupState ( ) ; group . query = userGroupQuery ; group . documentSelfLink = this . userGroupSelfLink ; URI userGroupFactoryUri = UriUtils . buildUri ( this . host , ServiceUriPaths . CORE_AUTHZ_USER_GROUPS ) ; Operation postGroup = Operation . createPost ( userGroupFactoryUri ) . setBody ( group ) . setReferer ( this . referer ) . setCompletion ( null ) ; addReplicationFactor ( postGroup ) ; this . host . sendRequest ( postGroup ) ; }
boolean isAccessibilityFocused ( ) { return ( mPrivateFlags2 & PFLAG2_ACCESSIBILITY_FOCUSED ) != NUM_ ; }
public void stopRefresh ( ) { if ( mPullRefreshing ) { mPullRefreshing = BOOL_ ; resetHeaderHeight ( ) ; } }
IHttpRequestResponse makeHttpRequest ( IHttpService httpService , byte [ ] request ) ;
boolean supportsIntegrityEnhancementFacility ( ) throws SQLException ;
public static CertStore createStore ( String [ ] fileNames ) throws Exception { return createStore ( STR_ , fileNames ) ; }
public XYLocation west ( ) { return new XYLocation ( xCoOrdinate - NUM_ , yCoOrdinate ) ; }
public boolean hasNext ( ) { return hasNextTlsMode ( ) || hasNextInetSocketAddress ( ) || hasNextProxy ( ) || hasNextPostponed ( ) ; }
public abstract void onSuccess ( int statusCode , Header [ ] headers , String rawJsonResponse , JSON_TYPE response ) ;
public MemberScopeRequest enforceInstance ( ) { if ( ! staticAccess ) { return this ; } return new MemberScopeRequest ( originalReceiverTypeRef , context , checkVisibility , BOOL_ ) ; }
public LocalTypeSet ( List < Local > locals , List < Type > types ) { super ( locals . size ( ) * types . size ( ) ) ; this . locals = locals ; this . types = types ; if ( ! Scene . v ( ) . hasFastHierarchy ( ) ) { Scene . v ( ) . setFastHierarchy ( new FastHierarchy ( ) ) ; } }
public TestStackResponse TestStack ( RequestHeader RequestHeader , UnsignedInteger TestId , Integer Iteration , Variant Input ) throws ServiceFaultException , ServiceResultException { TestStackRequest req = new TestStackRequest ( RequestHeader , TestId , Iteration , Input ) ; return ( TestStackResponse ) channel . serviceRequest ( req ) ; }
public static List < String [ ] > createFormulaListContent ( List < String > serializedFormulaList , String labelingScheme ) { List < Formula > formulaList = ModelHelper . deserializeFormulaList ( serializedFormulaList ) ; return ( createListContent ( formulaList , labelingScheme ) ) ; }
public static double entropyOverColumns ( double [ ] [ ] matrix ) { double returnValue = NUM_ , sumForColumn , total = NUM_ ; for ( int j = NUM_ ; j < matrix [ NUM_ ] . length ; j ++ ) { sumForColumn = NUM_ ; for ( int i = NUM_ ; i < matrix . length ; i ++ ) { sumForColumn += matrix [ i ] [ j ] ; } returnValue = returnValue - lnFunc ( sumForColumn ) ; total += sumForColumn ; } if ( Utils . eq ( total , NUM_ ) ) { return NUM_ ; } return ( returnValue + lnFunc ( total ) ) / ( total * log2 ) ; }
public static void removeLineTag ( String sFile ) { try { FileReader frIn = new FileReader ( sFile ) ; BufferedReader brIn = new BufferedReader ( frIn ) ; String sLine ; while ( ( sLine = brIn . readLine ( ) ) != null ) { String [ ] sSplitLine = sLine . split ( STR_ ) ; sLine = STR_ ; for ( int iCnt = NUM_ ; iCnt < sSplitLine . length ; iCnt ++ ) { sLine += sSplitLine [ iCnt ] ; } System . out . println ( sLine ) ; } } catch ( FileNotFoundException fnfE ) { System . err . println ( fnfE . getMessage ( ) ) ; fnfE . printStackTrace ( ) ; System . exit ( NUM_ ) ; } catch ( IOException ioe ) { System . err . println ( ioe . getMessage ( ) ) ; ioe . printStackTrace ( ) ; System . exit ( NUM_ ) ; } }
public int length ( ) { return namesAndValues . size ( ) / NUM_ ; }
E takeFirst ( ) throws InterruptedException ;
public CFilterByInstructionAction ( final JTextField filterField ) { super ( STR_ ) ; m_filterField = filterField ; }
public void resetOriginals ( ) { mStartingStartTrim = NUM_ ; mStartingEndTrim = NUM_ ; mStartingRotation = NUM_ ; setStartTrim ( NUM_ ) ; setEndTrim ( NUM_ ) ; setRotation ( NUM_ ) ; }
public static void addRowTimes ( Matrix matrix , long diag , long fromCol , long row , double factor ) { long cols = matrix . getColumnCount ( ) ; for ( long col = fromCol ; col < cols ; col ++ ) { matrix . setAsDouble ( matrix . getAsDouble ( row , col ) - factor * matrix . getAsDouble ( diag , col ) , row , col ) ; } }
public static double staticNextInt ( int N , int M , int n ) { synchronized ( shared ) { return shared . nextInt ( N , M , n ) ; } }
public StunResponseEvent ( StunStack stunStack , RawMessage rawMessage , Response response , Request request , TransactionID transactionID ) { super ( stunStack , rawMessage , response ) ; this . request = request ; super . setTransactionID ( transactionID ) ; }
public IdentificadorBean ( ) { }
public static void colorSnackbar ( Context context , Snackbar snackbar ) { snackbar . setActionTextColor ( ContextCompat . getColor ( context , R . color . white ) ) ; }
public void onItemLoot ( Player player ) { getAndCheckAchievementsInCategory ( player , Category . ITEM ) ; }
public boolean accept ( final File file ) { return ( file . isDirectory ( ) ) || extensions . contains ( getExtension ( file ) ) ; }
protected void restoreModelSettings ( TableModel model , Hashtable < String , Object > settings ) { int sortCol ; boolean asc ; String search ; boolean regexp ; sortCol = NUM_ ; asc = BOOL_ ; search = null ; regexp = BOOL_ ; if ( settings != null ) { sortCol = ( Integer ) settings . get ( KEY_SORTCOL ) ; asc = ( Boolean ) settings . get ( KEY_SORTORDER ) ; if ( model instanceof SearchableTableModel ) { search = ( String ) settings . get ( KEY_SEARCHSTRING ) ; regexp = ( Boolean ) settings . get ( KEY_SEARCHREGEXP ) ; } } if ( getSortNewTableModel ( ) ) m_Model . sort ( sortCol , asc ) ; if ( model instanceof SearchableTableModel ) ( ( SearchableTableModel ) model ) . search ( search , regexp ) ; if ( getUseOptimalColumnWidths ( ) ) setOptimalColumnWidth ( ) ; }
public boolean isOccupied ( ) { return lock . isLocked ( ) ; }
private static byte positionToByte ( int position ) { return ( byte ) ( position % NUM_ ) ; }
void verifyThreadAccess ( ) ;
public static void launchNavigation ( Context context , double latitude , double longitude ) { Intent intent = createLaunchNavigationIntent ( latitude , longitude ) ; checkContext ( context , intent ) ; context . startActivity ( intent ) ; }
public void unsubscribe ( String name , Listener l ) { synchronized ( _listeners ) { List list = ( List ) _listeners . get ( name ) ; if ( list != null ) { list . remove ( l ) ; if ( list . size ( ) == NUM_ ) { unsubscribe ( name ) ; } } } }
public DoubleMatrix jblas_cholesky ( ) { return org . jblas . Decompose . cholesky ( new DoubleMatrix ( this . getArray ( ) ) ) ; }
private static void updateAllUIs ( ) { Frame appFrames [ ] = Frame . getFrames ( ) ; for ( Frame frame : appFrames ) { updateWindowUI ( frame ) ; } }
public static SynapseDialog createSynapseDialog ( final List < Synapse > selectedSynapses ) { SynapseDialog sd = new SynapseDialog ( selectedSynapses ) ; sd . addListeners ( ) ; return sd ; }
public boolean isPointInsideBorderShape ( Point2D point ) { for ( int i = NUM_ ; i < shapes . size ( ) ; i ++ ) { if ( boundaries . get ( i ) . isInsideBorder ( point ) ) { if ( shapes . get ( i ) . isInsideBorder ( point ) ) { return BOOL_ ; } } } return BOOL_ ; }
private ErrorHandler ( ErrorHandler parentErrorHandler ) { this ( ) ; this . parentErrorHandler = parentErrorHandler ; }
public ConvertToCovMatixAction ( DataEditor editor ) { super ( STR_ ) ; if ( editor == null ) { throw new NullPointerException ( ) ; } this . dataEditor = editor ; }
void customize ( ) { if ( form . customized == null ) { LambdaForm newForm = form . customize ( this ) ; updateForm ( newForm ) ; } else { assert ( form . customized == this ) ; } }
protected void onClickSettingsButton ( View v ) { if ( LOGD ) Log . d ( TAG , STR_ ) ; if ( mLauncherCallbacks != null ) { mLauncherCallbacks . onClickSettingsButton ( v ) ; } else { startActivity ( new Intent ( this , SettingsActivity . class ) ) ; } }
public boolean isEmpty ( ) { return roleEdit . getText ( ) . toString ( ) . trim ( ) . equals ( STR_ ) ; }
public abstract Enumeration < K > keys ( ) ;
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( hc_nodeappendchild . class , args ) ; }
public void attrAdded ( Attr node , String newv ) { if ( ! changing && baseVal != null ) { baseVal . invalidate ( ) ; } fireBaseAttributeListeners ( ) ; if ( ! hasAnimVal ) { fireAnimatedAttributeListeners ( ) ; } }
protected void drawRadioField ( PdfCanvas canvas , float width , float height , boolean on ) { canvas . saveState ( ) ; if ( on ) { canvas . resetFillColorRgb ( ) . circle ( width / NUM_ , height / NUM_ , Math . min ( width , height ) / NUM_ ) . fill ( ) ; } canvas . restoreState ( ) ; }
public URI searchForLabel ( String label , String language , String type ) { URIBuilder builder = apiBuilder ( ) ; builder . addParameter ( STR_ , STR_ ) ; builder . addParameter ( STR_ , label ) ; builder . addParameter ( STR_ , language ) ; builder . addParameter ( STR_ , type ) ; return build ( builder ) ; }
protected final void requestDeferred ( ) { long r = REQUESTED . getAndSet ( this , NUM_ ) ; if ( r != NUM_ ) { s . request ( r ) ; } }
public static void explainFallback ( Activity activity ) { explainFallback ( activity , MESSAGE_FALLBACK ) ; }
void startList ( ) ;
public static < T > void acceptChildren ( T visitor , IVisitable < T > child ) { if ( child != null ) { child . accept ( visitor ) ; } }
public BeanContextSupport ( ) { this ( null , null , BOOL_ , BOOL_ ) ; }
public ColorEditor ( Dialog owner , CompiereColor color ) { super ( owner , STR_ , BOOL_ ) ; init ( color ) ; }
public Map < String , Object > makeValid ( Map < String , ? extends Object > source , String mode , boolean includeInternal , List < Object > errorMessages ) { return makeValid ( source , mode , includeInternal , errorMessages , null ) ; }
public boolean equals ( ShoppingCartItem item ) { if ( item == null ) return BOOL_ ; return this . equals ( item . getProductId ( ) , item . additionalProductFeatureAndAppls , item . attributes , item . prodCatalogId , item . selectedAmount , item . getItemType ( ) , item . getItemGroup ( ) , item . getIsPromo ( ) ) ; }
public void removeFromAggregate ( int row , VisualItem member ) { validRowCheck ( row , BOOL_ ) ; int ar = getAggregatedRow ( row , member ) ; if ( ar >= NUM_ ) { m_aggregated . removeRow ( ar ) ; fireTableEvent ( row , row , EventConstants . ALL_COLUMNS , EventConstants . UPDATE ) ; } }
public PowerVmAllocationPolicyAbstract ( List < ? extends Host > list ) { super ( list ) ; }
public boolean isInAllowed ( int x , int y ) { for ( Shape r : arrivingBarriers ) { if ( r . contains ( x , y ) ) { return BOOL_ ; } } return BOOL_ ; }
public NumberRangeModel ( float lo , float hi , float min , float max ) { this ( new Float ( lo ) , new Float ( hi ) , new Float ( min ) , new Float ( max ) ) ; }
protected AddressOption ( OptionSet set , String name , String desc , Address defaultValue ) { super ( set , ADDRESS_OPTION , name , desc ) ; this . value = this . defaultValue = defaultValue ; }
public SingleDataSourceAction ( Class < X > scope ) { super ( scope ) ; }
public void addContainer ( ImageContainer container ) { mContainers . add ( container ) ; }
protected ListSelectionModel createSelectionModel ( ) { return new DefaultListSelectionModel ( ) ; }
private void incrementValue ( int inc ) { if ( inc > NUM_ ) { nread += inc ; if ( nread > size ) { size = nread ; } fireStateChanged ( ) ; } }
public static ReportMailingJobConfiguration newInstance ( final String name , final String value ) { return new ReportMailingJobConfiguration ( name , value ) ; }
void nextInstruction ( ) ;
public StringAttributeRule ( String name , String description , boolean optional ) { this ( name , description , null , optional , NUM_ , Integer . MAX_VALUE ) ; }
public void update ( HashMap < String , MCAModelRenderer > parts , IMCAnimatedEntity entity ) { }
public void runTest ( ) throws Throwable { Document doc ; Node oldChild ; Node newChild ; NodeList elementList ; Node elementNode ; Node replacedNode ; doc = ( Document ) load ( STR_ , BOOL_ ) ; newChild = doc . createElement ( STR_ ) ; oldChild = doc . createElement ( STR_ ) ; elementList = doc . getElementsByTagName ( STR_ ) ; elementNode = elementList . item ( NUM_ ) ; { boolean success = BOOL_ ; try { replacedNode = elementNode . replaceChild ( newChild , oldChild ) ; } catch ( DOMException ex ) { success = ( ex . code == DOMException . NOT_FOUND_ERR ) ; } assertTrue ( STR_ , success ) ; } }
private void bootstrap ( ) { List < String > keysToProcess = new LinkedList < > ( ) ; keysToProcess . add ( SERVER_URL_OPT ) ; processConfigMessages ( keysToProcess ) ; if ( coordinatorServerURL == null ) { throw new IllegalStateException ( STR_ ) ; } log . info ( STR_ ) ; }
protected abstract String createMenuItemText ( int index , T item ) ;
private void calcYValueSum ( ) { mYValueSum = NUM_ ; for ( int i = NUM_ ; i < mDataSets . size ( ) ; i ++ ) { mYValueSum += Math . abs ( mDataSets . get ( i ) . getYValueSum ( ) ) ; } }
private INaviViewNode findStartNode ( final List < INaviViewNode > nodes ) { for ( final INaviViewNode node : nodes ) { for ( final INaviEdge edge : node . getOutgoingEdges ( ) ) { if ( edge . getType ( ) == EdgeType . ENTER_INLINED_FUNCTION ) { return node ; } } } throw new IllegalStateException ( STR_ ) ; }
public boolean replaceOnce ( String text , String repl ) { return this . replace ( text , repl , NUM_ ) != NUM_ ; }
void adjustOrPutValue ( final long key , final long adjustAmount ) { final int arrayMask = keys . length - NUM_ ; int probe = ( int ) hash ( key ) & arrayMask ; int drift = NUM_ ; while ( states [ probe ] != NUM_ && keys [ probe ] != key ) { probe = ( probe + NUM_ ) & arrayMask ; drift ++ ; assert ( drift < DRIFT_LIMIT ) : STR_ + drift + STR_ ; } if ( states [ probe ] == NUM_ ) { assert ( numActive <= loadThreshold ) : STR_ + numActive + STR_ + loadThreshold ; keys [ probe ] = key ; values [ probe ] = adjustAmount ; states [ probe ] = ( short ) drift ; numActive ++ ; } else { assert ( keys [ probe ] == key ) ; values [ probe ] += adjustAmount ; } }
public boolean isEnabled ( ) { RequestParameters params = new RequestParameters ( ) ; ServiceResultIterator resultItr = this . getServices ( ) . get ( params ) ; if ( resultItr == null || ! resultItr . hasNext ( ) ) { return BOOL_ ; } ServiceResult res = resultItr . next ( ) ; StringHandle handle = new StringHandle ( ) ; String enabled = res . getContent ( handle ) . get ( ) ; return Boolean . parseBoolean ( enabled ) ; }
byte [ ] serialize ( Object obj ) throws Exception ;
public static void doSwap ( ByteBuffer bBuf ) { bBuf . rewind ( ) ; int n = bBuf . limit ( ) ; for ( int i = NUM_ ; i < n ; i += NUM_ ) { byte b = bBuf . get ( i ) ; bBuf . put ( i , bBuf . get ( i + NUM_ ) ) ; bBuf . put ( i + NUM_ , b ) ; b = bBuf . get ( i + NUM_ ) ; bBuf . put ( i + NUM_ , bBuf . get ( i + NUM_ ) ) ; bBuf . put ( i + NUM_ , b ) ; } }
void addListener ( IProjectListener listener ) ;
public BlockDifficulty ( final long difficulty ) { this ( difficulty , BOOL_ ) ; }
public static TelUri parse ( String uri ) { String scheme = STR_ ; if ( uri . length ( ) < scheme . length ( ) || ! uri . substring ( NUM_ , scheme . length ( ) ) . equalsIgnoreCase ( scheme ) ) { throw Messages . INSTANCE . getIllegalArgumentException ( NUM_ , scheme ) ; } Builder builder = new Builder ( ) ; ClearableStringBuilder buffer = new ClearableStringBuilder ( ) ; String paramName = null ; for ( int i = scheme . length ( ) ; i < uri . length ( ) ; i ++ ) { char c = uri . charAt ( i ) ; if ( c == STR_ && builder . number != null && paramName == null ) { paramName = buffer . getAndClear ( ) ; continue ; } if ( c == STR_ ) { handleEndOfParameter ( buffer , paramName , builder ) ; paramName = null ; continue ; } buffer . append ( c ) ; } handleEndOfParameter ( buffer , paramName , builder ) ; return builder . build ( ) ; }
public void expandAcronymSync ( View v ) { final String acronym = Utils . uppercaseInput ( this , mEditText . getText ( ) . toString ( ) . trim ( ) , BOOL_ ) ; if ( acronym != null ) { Log . d ( TAG , STR_ + acronym ) ; if ( getOps ( ) . expandAcronymSync ( acronym ) == BOOL_ ) Utils . showToast ( this , STR_ ) ; mEditText . requestFocus ( ) ; mEditText . selectAll ( ) ; } }
public static String [ ] trimItems ( String [ ] arr ) { for ( int i = NUM_ ; i < arr . length ; i ++ ) { arr [ i ] = arr [ i ] . trim ( ) ; } return arr ; }
public static int colorARGBtoABGR ( int colorARGB ) { return ( ( colorARGB & NUM_ ) ) | ( ( colorARGB & NUM_ ) << NUM_ ) | ( ( colorARGB & NUM_ ) > > NUM_ ) ; }
public ConversationFactory withFirstPrompt ( Prompt firstPrompt ) { this . firstPrompt = firstPrompt ; return this ; }
public static void toast ( String message , int displayTime , int severity , Throwable ex ) { toast ( GBApplication . getContext ( ) , message , displayTime , severity , ex ) ; }
public static long convertMillisToTicks ( long milliseconds ) { double nearestTickTime = round ( milliseconds , NUM_ ) ; return ( long ) ( ( nearestTickTime / NUM_ ) * NUM_ ) ; }
private static < E extends FType > boolean isUserDefinedType ( FTypeRef typeRef , Class < E > clazz ) { if ( typeRef == null ) return BOOL_ ; FType type = getActualDerived ( typeRef ) ; if ( type != null ) { if ( clazz . isInstance ( type ) ) { return BOOL_ ; } } return BOOL_ ; }
final boolean pollAndExecCC ( ForkJoinTask < ? > root ) { ForkJoinTask < ? > [ ] a ; int b ; Object o ; outer : while ( ( b = base ) - top < NUM_ && ( a = array ) != null ) { long j = ( ( ( a . length - NUM_ ) & b ) << ASHIFT ) + ABASE ; if ( ( o = U . getObject ( a , j ) ) == null || ! ( o instanceof CountedCompleter ) ) break ; for ( CountedCompleter < ? > t = ( CountedCompleter < ? > ) o , r = t ; ; ) { if ( r == root ) { if ( base == b && U . compareAndSwapObject ( a , j , t , null ) ) { base = b + NUM_ ; t . doExec ( ) ; return BOOL_ ; } else break ; } if ( ( r = r . completer ) == null ) break outer ; } } return BOOL_ ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public static native boolean randMake ( String filename , int len , boolean base64 ) ;
public void resetTimestamp ( ) { timestamp = NUM_ ; }
public static void readSocket ( ThreadPoolExecutor executor , final DatagramSocket socket , Consumer < DatagramPacket > consumer ) { String localSocketAddress = socket . getLocalSocketAddress ( ) . toString ( ) ; logger . debug ( STR_ , localSocketAddress ) ; executor . execute ( null ) ; }
public static void cleanUpCustomTempDirectories ( ) { if ( tempDirectoryList != null ) { log . info ( STR_ ) ; try { for ( File tempFile : tempDirectoryList ) if ( tempFile . exists ( ) ) { log . info ( STR_ + tempFile . getCanonicalPath ( ) ) ; deleteDirectory ( tempFile ) ; } tempDirectoryList . clear ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } else log . info ( STR_ ) ; log . info ( STR_ ) ; }
public boolean isRegionInvalidate ( ) { return this . opType == OP_TYPE_INVALIDATE && isRegion ( ) ; }
boolean isTopSorted ( boolean forward ) ;
public boolean hasOriginalEvent ( ) { return super . hasElement ( OriginalEvent . KEY ) ; }
public boolean isProtected ( ) { return Modifier . isProtected ( getAccessFlags ( ) ) ; }
void destroy ( ) { AndroidSyncSettings . unregisterObserver ( mContext , this ) ; mSignInManager . removeSignInStateObserver ( this ) ; mSignInManager = null ; }
public String toShortString ( ) { return toShortString ( new StringBuilder ( NUM_ ) ) ; }
public Matrix plus ( Matrix B ) { checkMatrixDimensions ( B ) ; Matrix X = new Matrix ( m , n ) ; double [ ] [ ] C = X . getArray ( ) ; for ( int i = NUM_ ; i < m ; i ++ ) { for ( int j = NUM_ ; j < n ; j ++ ) { C [ i ] [ j ] = A [ i ] [ j ] + B . A [ i ] [ j ] ; } } return X ; }
private void collectCompatibleExceptions ( ClassDeclaration [ ] from , ClassDeclaration [ ] with , Vector < ClassDeclaration > list ) throws ClassNotFound { for ( int i = NUM_ ; i < from . length ; i ++ ) { ClassDefinition exceptionDef = from [ i ] . getClassDefinition ( env ) ; if ( ! list . contains ( from [ i ] ) ) { for ( int j = NUM_ ; j < with . length ; j ++ ) { if ( exceptionDef . subClassOf ( env , with [ j ] ) ) { list . addElement ( from [ i ] ) ; break ; } } } } }
void unsubscribeCarbonMonoxideDetectedState ( ) ;
void show ( ) ;
private Copier ( ) { instanceNotAllowed ( getClass ( ) ) ; }
public ArrayList < float [ ] > forwardPoly ( float [ ] rawllpts , boolean isFilled ) ;
public abstract void write ( OutputStream out ) throws IOException ;
void onLoadMore ( ) ;
private static boolean isBetaVersion ( ) { return Constants . PROJECT_NAME_VERSION . toLowerCase ( ) . contains ( STR_ ) ; }
public void testSingleLineStringManyPointRoundTrip ( ) throws SAXException , IOException , ParserConfigurationException { LineStringGenerator pg = new LineStringGenerator ( ) ; pg . setGeometryFactory ( geometryFactory ) ; pg . setBoundingBox ( new Envelope ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ; pg . setGenerationAlgorithm ( LineStringGenerator . HORZ ) ; pg . setNumberPoints ( NUM_ ) ; LineString pt = ( LineString ) pg . create ( ) ; checkRoundTrip ( pt ) ; }
public ProgressEvent ( ProgressSource source , URL url , String method , String contentType , ProgressSource . State state , long progress , long expected ) { super ( source ) ; this . url = url ; this . method = method ; this . contentType = contentType ; this . progress = progress ; this . expected = expected ; this . state = state ; }
private static int calcNumAdditionalMillerRabinRounds ( int bitLength ) { int roundsLeft = NUM_ ; if ( bitLength >= NUM_ ) { roundsLeft = NUM_ ; } else if ( bitLength >= NUM_ ) { roundsLeft = NUM_ ; } return roundsLeft ; }
public void addArticleNote ( int id , String note ) { if ( ! isDBAvailable ( ) ) return ; SQLiteDatabase db = getOpenHelper ( ) . getWritableDatabase ( ) ; write . lock ( ) ; try { db . beginTransaction ( ) ; markArticles ( STR_ + id , STR_ , note ) ; db . setTransactionSuccessful ( ) ; } finally { try { db . endTransaction ( ) ; } finally { write . unlock ( ) ; } } }
public TFSRepository connect ( final IProject project ) { return connect ( project , BOOL_ ) ; }
void onCommit ( ) ;
public InvalidNameException ( String explanation ) { super ( explanation ) ; }
void seek ( long filePos ) { file . seek ( filePos * Constants . FILE_BLOCK_SIZE ) ; }
public void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { response . setContentType ( STR_ ) ; PrintWriter out = response . getWriter ( ) ; out . println ( STR_ ) ; out . println ( STR_ ) ; out . println ( STR_ ) ; out . println ( STR_ ) ; out . print ( STR_ ) ; out . print ( this . getClass ( ) ) ; out . println ( STR_ ) ; out . println ( STR_ ) ; out . println ( STR_ ) ; out . flush ( ) ; out . close ( ) ; }
public void browserBack ( PeerComponent browserPeer ) { }
private boolean isPageActive ( ) { boolean isActive = BOOL_ ; if ( mPageReference == null || mPageReference . get ( ) == null ) { return isActive ; } return mPageReference . get ( ) . isActive ( ) ; }
public static void checkNewDataUnderlying ( SupportUpdateListener updateListener , EventBean [ ] expectedValues ) { EventBean [ ] newData = updateListener . getLastNewData ( ) ; Object [ ] expectedUnderlying = getUnderlying ( expectedValues ) ; Object [ ] newUnderlying = getUnderlying ( newData ) ; EPAssertionUtil . assertEqualsExactOrder ( expectedUnderlying , newUnderlying ) ; updateListener . setLastNewData ( null ) ; }
public void cancelSensorTimer ( String sname ) ;
public int listIDsSize ( final String hostport , final int depth ) { int count = NUM_ ; TreeMap < Integer , TreeSet < String > > list = directory . get ( hostport ) ; if ( list != null ) { for ( Map . Entry < Integer , TreeSet < String > > entry : list . entrySet ( ) ) { if ( depth != - NUM_ && entry . getKey ( ) != depth ) continue ; count += entry . getValue ( ) . size ( ) ; } } return count ; }
public Pool ( int initialCapacity ) { this ( initialCapacity , Integer . MAX_VALUE ) ; }
public void showTextOnFeed ( String message , int x , int y , Color backgroundColor , Color textColor , Font font ) { showTextOnFeed ( message ) ; Platform . runLater ( null ) ; }
public E removeMinimum ( ) { if ( this . root == null ) return null ; return this . removeMinimum ( this . root ) . comparable ; }
public Float ( float x1 , float y1 , float x2 , float y2 ) { setLine ( x1 , y1 , x2 , y2 ) ; }
public JobManagerServlet ( BaleenJobManager manager ) { super ( STR_ , manager , JobManagerServlet . class ) ; }
protected void handleResize ( double newratio ) { if ( currentSubplot == null ) { ResultWindow . this . overview . setRatio ( newratio ) ; } }
public boolean isBatchConflationEnabled ( ) ;
public static boolean checkContentCanBePulledDown ( PtrFrameLayout frame , View content , View header ) { return ! canChildScrollUp ( content ) ; }
public boolean show ( Bundle savedInstanceState , int requestCode ) { boolean shouldShow = shouldShow ( savedInstanceState ) ; if ( shouldShow ) { welcomeScreenStarted = BOOL_ ; startActivity ( requestCode ) ; } return shouldShow ; }
public Iterator < Map . Entry < K , Integer > > entryIterator ( ) { return refSet . entrySet ( ) . iterator ( ) ; }
private static BufferedImage makeSquare ( BufferedImage input ) { if ( input . getHeight ( ) == input . getWidth ( ) ) { return input ; } else { int max = Math . max ( input . getHeight ( ) , input . getWidth ( ) ) ; int dx = ( max - input . getWidth ( ) ) / NUM_ ; int dy = ( max - input . getHeight ( ) ) / NUM_ ; return createImg ( max , max , input . getType ( ) , null ) ; } }
protected void mergeScannedResults ( List < Result > scannedResultList ) { long start = System . currentTimeMillis ( ) ; LOGGER . debug ( STR_ ) ; for ( int i = NUM_ ; i < scannedResultList . size ( ) ; i ++ ) { mergedScannedResult . merge ( scannedResultList . get ( i ) ) ; } LOGGER . debug ( STR_ + ( System . currentTimeMillis ( ) - start ) ) ; }
private void updateFont ( Font font ) { StyledDocument doc = ( StyledDocument ) getComponent ( ) . getDocument ( ) ; Style style = doc . getStyle ( StyleContext . DEFAULT_STYLE ) ; if ( style == null ) { return ; } if ( font == null ) { style . removeAttribute ( StyleConstants . FontFamily ) ; style . removeAttribute ( StyleConstants . FontSize ) ; style . removeAttribute ( StyleConstants . Bold ) ; style . removeAttribute ( StyleConstants . Italic ) ; } else { StyleConstants . setFontFamily ( style , font . getName ( ) ) ; StyleConstants . setFontSize ( style , font . getSize ( ) ) ; StyleConstants . setBold ( style , font . isBold ( ) ) ; StyleConstants . setItalic ( style , font . isItalic ( ) ) ; } }
void debug ( String msg , Throwable t ) ;
public ParsedQuery ( TupleExpr tupleExpr , Dataset dataset ) { this ( null , tupleExpr , dataset ) ; }
public static int roll1D100 ( ) { return rand . nextInt ( NUM_ ) + NUM_ ; }
public void addField ( FieldDefinition field ) { getFields ( ) . add ( field ) ; }
public void markDelivered ( ) { mResponseDelivered = BOOL_ ; }
public boolean isEmpty ( ) { return this . size == NUM_ ; }
public HGAssert subgraph ( HGHandle ... atoms ) { HashSet < HGHandle > S = new HashSet < HGHandle > ( ) ; for ( HGHandle h : atoms ) S . add ( h ) ; for ( HGHandle h : atoms ) { for ( HGHandle inc : graph . getIncidenceSet ( h ) ) if ( ! S . contains ( inc ) ) throw new AssertionError ( STR_ + inc + STR_ + h + STR_ ) ; Object x = graph . get ( h ) ; if ( x instanceof HGLink ) { HGLink l = ( HGLink ) x ; for ( int i = NUM_ ; i < l . getArity ( ) ; i ++ ) if ( ! S . contains ( l . getTargetAt ( i ) ) ) throw new AssertionError ( STR_ + h + STR_ + l . getTargetAt ( i ) + STR_ ) ; } } return this ; }
protected void okPressedAndApproved ( ) { ownGefaehrdung . setId ( textNumber . getText ( ) ) ; ownGefaehrdung . setTitel ( textName . getText ( ) ) ; ownGefaehrdung . setBeschreibung ( textDescription . getText ( ) ) ; ownGefaehrdung . setOwnkategorie ( textCategory . getText ( ) ) ; try { ownGefaehrdung = OwnGefaehrdungHome . getInstance ( ) . save ( ownGefaehrdung ) ; } catch ( Exception e ) { ExceptionUtil . log ( e , Messages . NewGefaehrdungDialog_7 ) ; } ownGefaehrdungen . add ( ownGefaehrdung ) ; }
protected void insertTrackPoint ( Location location ) { insertLocation ( location ) ; if ( trackData . track . getStartId ( ) == - NUM_ ) { flushLocations ( trackData ) ; } }
public void endMonitoringOf ( final InetSocketAddress socketAddress , final int inode ) { candidateSockets . endMonitoringOfSocketIdentifier ( fromInet4SocketAddressAndInode ( socketAddress , inode ) ) ; }
void doBindService ( ) { bindService ( new Intent ( TabHostActivity . this , MasterBrainService . class ) , mConnection , Context . BIND_AUTO_CREATE ) ; mIsBound = BOOL_ ; }
private List < PrinterRec > scanPrinters ( ) { PrinterResult result = new MdnsServices ( ) . scan ( ) ; return result . getPrinters ( ) ; }
ClusterSearchShardsRequestBuilder prepareSearchShards ( ) ;
public boolean isAssured ( ) { return assuredFlag ; }
public ISchedulingRule copyRule ( IResource source , IResource destination ) { if ( source . getType ( ) == IResource . ROOT || destination . getType ( ) == IResource . ROOT ) return root ; return factoryFor ( destination ) . copyRule ( source , destination ) ; }
public void startTethering ( java . lang . String [ ] dhcpRanges ) throws android . os . RemoteException ;
private void adjustForLeftFadingEdge ( View childInSelectedRow , int leftSelectionPixel , int rightSelectionPixel ) { if ( childInSelectedRow . getLeft ( ) < leftSelectionPixel ) { int spaceToLeft = leftSelectionPixel - childInSelectedRow . getLeft ( ) ; int spaceToRight = rightSelectionPixel - childInSelectedRow . getRight ( ) ; int offset = Math . min ( spaceToLeft , spaceToRight ) ; offsetChildrenLeftAndRight ( offset ) ; } }
protected static Dfp atanInternal ( final Dfp a ) { Dfp y = new Dfp ( a ) ; Dfp x = new Dfp ( y ) ; Dfp py = new Dfp ( y ) ; for ( int i = NUM_ ; i < NUM_ ; i += NUM_ ) { x = x . multiply ( a ) ; x = x . multiply ( a ) ; x = x . negate ( ) ; y = y . add ( x . divide ( i ) ) ; if ( y . equals ( py ) ) { break ; } py = new Dfp ( y ) ; } return y ; }
public UMSException ( String message , Throwable rootCause ) { super ( message ) ; xcptMessage = message ; this . rootCause = rootCause ; }
public static int csnsUTF8 ( int nbFields ) { return CSN . STRING_ENCODING_LENGTH * nbFields + NUM_ ; }
public void reply ( NceReply r ) { if ( ! r . isUnsolicited ( ) ) { int bits ; synchronized ( this ) { bits = r . pollValue ( ) ; awaitingReply = BOOL_ ; this . notify ( ) ; } currentAIU . markChanges ( bits ) ; if ( log . isDebugEnabled ( ) ) { String str = jmri . util . StringUtil . twoHexFromInt ( ( bits > > NUM_ ) & NUM_ ) ; str += STR_ ; str = jmri . util . StringUtil . appendTwoHexFromInt ( bits & NUM_ , str ) ; log . debug ( STR_ + str + STR_ ) ; } } }
public LongConstant addLong ( long value ) { LongConstant entry = getLongByValue ( value ) ; if ( entry != null ) return entry ; entry = new LongConstant ( this , _entries . size ( ) , value ) ; addConstant ( entry ) ; addConstant ( null ) ; return entry ; }
public RiddersSolver ( ) { this ( DEFAULT_ABSOLUTE_ACCURACY ) ; }
public TextLabelFactory ( FontRenderContext frc , char [ ] text , Bidi bidi , int flags ) { this . frc = frc ; this . text = text . clone ( ) ; this . bidi = bidi ; this . flags = flags ; this . lineBidi = bidi ; this . lineStart = NUM_ ; this . lineLimit = text . length ; }
protected void notifyScrollingListenersAboutEnd ( ) { for ( OnWheelScrollListener listener : scrollingListeners ) { listener . onScrollingFinished ( this ) ; } }
public AndroidAuthenticator ( Context context , Account account , String authTokenType ) { this ( context , account , authTokenType , BOOL_ ) ; }
void fixRelationships ( Vertex type ) ;
private File createZipFileHandle ( ) throws IOException { File zipFile = File . createTempFile ( STR_ , STR_ , tmpOutputFolder . getRoot ( ) ) ; assertTrue ( zipFile . delete ( ) ) ; return zipFile ; }
public LibraryLocation ( IPath libraryPath , IPath sourcePath , IPath packageRoot ) { this ( libraryPath , sourcePath , packageRoot , null ) ; }
private float sourceToViewY ( float sy ) { if ( vTranslate == null ) { return Float . NaN ; } return ( sy * scale ) + vTranslate . y ; }
private boolean hasNextInetSocketAddress ( ) { return nextInetSocketAddressIndex < inetSocketAddresses . size ( ) ; }
public void addAnnotation ( String annotation , double x , double y ) { mAnnotations . add ( annotation ) ; mStringXY . put ( x , y ) ; }
public CTagContainerNodeMenuBuilder ( final JTree projectTree , final IDatabase database ) { super ( projectTree ) ; m_database = database ; }
void triggerWildcardExpander ( final Collection < File > allFiles , final WildcardContext wildcardContext ) throws IOException { LOG . debug ( STR_ , allFiles ) ; if ( allFiles . isEmpty ( ) ) { final String message = String . format ( STR_ , wildcardContext . getWildcard ( ) ) ; LOG . warn ( message ) ; throw new IOException ( message ) ; } if ( wildcardExpanderHandler != null ) { try { wildcardExpanderHandler . apply ( allFiles ) ; } catch ( final IOException e ) { throw e ; } catch ( final Exception e ) { LOG . debug ( STR_ , e ) ; throw new IOException ( STR_ + e . getMessage ( ) ) ; } } }
public void loadDemoFiles ( ) throws IOException { File fromDir = new File ( XmlFile . xmlDir ( ) , STR_ ) ; copyBackupSet ( fromDir , getOperationsRoot ( ) ) ; log . debug ( STR_ , _demoPanelFileName ) ; File src = new File ( fromDir , _demoPanelFileName ) ; File dst = new File ( getOperationsRoot ( ) , _demoPanelFileName ) ; FileHelper . copy ( src . getAbsolutePath ( ) , dst . getAbsolutePath ( ) , BOOL_ ) ; }
public void init ( Controller c ) { super . init ( c ) ; display = new Display2D ( NUM_ , NUM_ , this ) ; displayFrame = display . createFrame ( ) ; displayFrame . setTitle ( STR_ ) ; c . registerFrame ( displayFrame ) ; displayFrame . setVisible ( BOOL_ ) ; display . attach ( tractsPortrayal , STR_ ) ; display . attach ( roadsPortrayal , STR_ ) ; display . attach ( agentPortrayal , STR_ ) ; trafficChart = new TimeSeriesChartGenerator ( ) ; trafficChart . setTitle ( STR_ ) ; trafficChart . setYAxisLabel ( STR_ ) ; trafficChart . setXAxisLabel ( STR_ ) ; JFrame chartFrame = trafficChart . createFrame ( this ) ; chartFrame . pack ( ) ; c . registerFrame ( chartFrame ) ; }
void addEditorUpdateAction ( EditorUpdateAction action ) ;
public RecordPage ( BlockId blk , TableInfo ti , Transaction tx , boolean doLog ) { this . blk = blk ; this . tx = tx ; this . ti = ti ; this . doLog = doLog ; currentBuff = tx . bufferMgr ( ) . pin ( blk ) ; Schema sch = ti . schema ( ) ; int pos = NUM_ ; myOffsetMap = new HashMap < String , Integer > ( ) ; for ( String fldname : sch . fields ( ) ) { myOffsetMap . put ( fldname , pos ) ; pos += Page . maxSize ( sch . type ( fldname ) ) ; } pos = pos < MIN_REC_SIZE ? MIN_REC_SIZE : pos ; slotSize = pos + FLAG_SIZE ; }
public static < N extends ASTNode > searchAncestors < N > specificallyFor ( final List < N > ¢ ) { return new ByNodeInstances < > ( ¢ ) ; }
public void valueOf ( final Type type ) { if ( type . getSort ( ) == Type . OBJECT || type . getSort ( ) == Type . ARRAY ) { return ; } if ( type == Type . VOID_TYPE ) { push ( ( String ) null ) ; } else { Type boxed = getBoxedType ( type ) ; invokeStatic ( boxed , new Method ( STR_ , boxed , new Type [ ] { type } ) ) ; } }
public static void main ( String [ ] args ) { String input = args [ NUM_ ] ; DigicorePathDependentNetworkReader_v1 nr = new DigicorePathDependentNetworkReader_v1 ( ) ; nr . readFile ( input ) ; nr . network . writeNetworkStatisticsToConsole ( ) ; }
void remove ( String name ) ;
public static final native void joinThreadPool ( ) ;
public void addMapping ( String facetId , String facetValueId ) { setAttribute ( facetId , facetValueId ) ; }
public void addException ( ClassType type ) { addExceptionNoBidirectionalUpdate ( type ) ; type . addMethodThrowingExceptionNoBidirectionalUpdate ( this ) ; }
public void removeClient ( String clientType ) throws AMConsoleException ;
public boolean isDetectorClassSubtypeOf ( Class < ? > otherClass ) { if ( FindBugs . isNoAnalysis ( ) ) { throw new IllegalStateException ( STR_ ) ; } return otherClass . isAssignableFrom ( detectorCreator . getDetectorClass ( ) ) ; }
private void updateDebugger ( final DebuggerTemplate template ) { if ( ( m_debugger == null ) || ! m_debugger . isConnected ( ) ) { if ( template == null ) { m_debugger = null ; } else { m_debugger = new TcpDebugger ( template , new ModuleTargetSettings ( m_module ) ) ; m_debugger . setAddressTranslator ( m_module , m_fileBase , m_imageBase ) ; } for ( final IModuleListener listener : m_listeners ) { try { listener . changedDebugger ( m_module , m_debugger ) ; } catch ( final Exception exception ) { CUtilityFunctions . logException ( exception ) ; } } } }
public abstract void remove ( String path , boolean afterCoreClose ) throws IOException ;
public int engineSize ( ) { int size = NUM_ ; try { for ( KeyStore keystore : keystores . values ( ) ) { size += keystore . size ( ) ; } } catch ( KeyStoreException e ) { throw new IllegalStateException ( e ) ; } return size ; }
double [ ] estimateResiduals ( ) ;
private void addTenantCertChainsContainer ( ) { ILdapMessage message = null ; try { message = getTenantCertChainsContainer ( getLduDn ( ) ) ; String objNewDn = String . format ( STR_ , tenantName , this . rootDn ) ; Map < String , LdapMod [ ] > containerObjects = getLdapObjects ( message , objNewDn ) ; if ( containerObjects != null && containerObjects . size ( ) > NUM_ ) { addObjects ( containerObjects ) ; } } finally { closeMessage ( message ) ; } }
public void handleButton2Request ( RequestInvocationEvent event ) throws ModelControlException { boolean forwarded = BOOL_ ; submitCycle = BOOL_ ; bFilter = BOOL_ ; try { Subject subject = createSubject ( ) ; if ( subject != null ) { CachedPolicy cachedPolicy = getCachedPolicy ( ) ; Policy policy = cachedPolicy . getPolicy ( ) ; String name = ( String ) propertySheetModel . getValue ( SUBJECT_NAME ) ; policy . addSubject ( name , subject , isExclusive ( ) ) ; backTrail ( ) ; forwardToPolicyViewBean ( ) ; forwarded = BOOL_ ; } } catch ( NameAlreadyExistsException e ) { setInlineAlertMessage ( CCAlert . TYPE_ERROR , STR_ , getModel ( ) . getErrorString ( e ) ) ; } catch ( InvalidNameException e ) { setInlineAlertMessage ( CCAlert . TYPE_ERROR , STR_ , getModel ( ) . getErrorString ( e ) ) ; } catch ( AMConsoleException e ) { setInlineAlertMessage ( CCAlert . TYPE_ERROR , STR_ , e . getMessage ( ) ) ; } finally { if ( ! forwarded ) { forwardTo ( ) ; } } }
public boolean hasLoadedAllItems ( ) ;
public String numBoostingIterationsTipText ( ) { return STR_ + STR_ ; }
public void clearCache ( int cacheSize ) { paramCache = new Parameters [ cacheSize ] ; commandCache = new JasminCommand [ cacheSize ] ; cached = new boolean [ cacheSize ] ; }
public static int nextIndexId ( ) { return msgIdx . getAndIncrement ( ) ; }
public void save_for_undo ( UndoObjectStorable p_object ) { disable_redo ( ) ; UndoObjectNode curr_node = objects_map . get ( p_object ) ; if ( curr_node == null ) { System . out . println ( STR_ ) ; return ; } if ( curr_node . undo_level < stack_level ) { UndoObjectNode old_node = new UndoObjectNode ( ( UndoObjectStorable ) p_object . copy ( ) , curr_node . undo_level ) ; old_node . undo_object = curr_node . undo_object ; old_node . redo_object = curr_node ; curr_node . undo_object = old_node ; curr_node . undo_level = stack_level ; return ; } }
static AnimationStyle mapIntToValue ( int modeInt ) { switch ( modeInt ) { case NUM_ : return ROTATE ; case NUM_ : return FLIP ; default : return Custom ; } }
public void printil ( String s ) { javaLine ++ ; writer . print ( SPACES . substring ( NUM_ , indent ) ) ; writer . println ( s ) ; }
public abstract void removeNetworkTopologyListener ( NetworkTopologyListener listener ) ;
public PrincipalUser ( PrincipalUser creator , String userName , String email ) { super ( creator ) ; setUserName ( userName ) ; setEmail ( email ) ; }
public void clearAll ( ) { scriptString = null ; clearIOS ( ) ; }
public static URL [ ] findResourceBases ( String baseResource , ClassLoader loader ) { ArrayList < URL > list = new ArrayList < URL > ( ) ; try { Enumeration < URL > urls = loader . getResources ( baseResource ) ; while ( urls . hasMoreElements ( ) ) { URL url = urls . nextElement ( ) ; list . add ( findResourceBase ( url , baseResource ) ) ; } } catch ( IOException e ) { throw new RuntimeException ( e ) ; } return list . toArray ( new URL [ list . size ( ) ] ) ; }
public java . lang . String toString ( ) { return toString ( BOOL_ , BOOL_ ) ; }
public MGF1ParameterSpec ( String mdName ) { if ( mdName == null ) { throw new NullPointerException ( STR_ ) ; } this . mdName = mdName ; }
public abstract void remove ( String key ) ;
public void onDismissed ( Snackbar snackbar , int event ) { ReactSnackbarModule . this . sendEvent ( EVENT_HIDDEN , null ) ; }
public static API v ( ) { return v ; }
public void inc ( ) { if ( running ) inc ( NUM_ ) ; }
public XmlParser ( StreamProperties props , XmlEventSource eventSource ) { Preconditions . checkNotNull ( props , STR_ ) ; Preconditions . checkNotNull ( eventSource , STR_ ) ; this . props = props ; this . eventSource = eventSource ; }
Collection < String > filter ( Collection < String > fullList ) ;
public XMLFilterImpl ( XMLReader parent ) { setParent ( parent ) ; }
public void testDrainToN ( ) { LinkedBlockingDeque q = new LinkedBlockingDeque ( ) ; for ( int i = NUM_ ; i < SIZE + NUM_ ; ++ i ) { for ( int j = NUM_ ; j < SIZE ; j ++ ) assertTrue ( q . offer ( new Integer ( j ) ) ) ; ArrayList l = new ArrayList ( ) ; q . drainTo ( l , i ) ; int k = ( i < SIZE ) ? i : SIZE ; assertEquals ( l . size ( ) , k ) ; assertEquals ( q . size ( ) , SIZE - k ) ; for ( int j = NUM_ ; j < k ; ++ j ) assertEquals ( l . get ( j ) , new Integer ( j ) ) ; while ( q . poll ( ) != null ) ; } }
public void addSwipeListener ( SwipeListener listener ) { if ( mListeners == null ) { mListeners = new ArrayList < SwipeListener > ( ) ; } mListeners . add ( listener ) ; }
public void fixupVariables ( java . util . Vector vars , int globalsSize ) { super . fixupVariables ( vars , globalsSize ) ; if ( null != m_arg2 ) m_arg2 . fixupVariables ( vars , globalsSize ) ; }
public static boolean isAcceptCsvGzip ( HttpServletRequest request ) { return request != null && ( ( request . getPathInfo ( ) != null && request . getPathInfo ( ) . endsWith ( STR_ ) ) || ( request . getHeader ( STR_ ) != null && request . getHeader ( STR_ ) . contains ( STR_ ) ) ) ; }
public void removeLayoutComponent ( Component comp ) { if ( constraints != null ) { constraints . remove ( comp ) ; } }
public abstract void shortWrite ( ObjectReference ref , short value , Word metaDataA , Word metaDataB , int mode ) ;
public TweetCardFilter ( boolean tweet , boolean summary , boolean photo , boolean player , boolean promotion , StatsReceiver statsReceiver ) { super ( statsReceiver ) ; this . tweet = tweet ; this . summary = summary ; this . photo = photo ; this . player = player ; this . promotion = promotion ; }
private void checkOpen ( ) { if ( closed ) throw new ClosedWatchServiceException ( ) ; }
public Matrix zoomIn ( float x , float y ) { Matrix save = new Matrix ( ) ; save . set ( mMatrixTouch ) ; save . postScale ( NUM_ , NUM_ , x , y ) ; return save ; }
public void onPageSelected ( int position ) ;
public synchronized void flush ( ) throws IOException { checkNotClosed ( ) ; trimToSize ( ) ; journalWriter . flush ( ) ; }
private void showFeedback ( String message ) { if ( myHost != null ) { myHost . showFeedback ( message ) ; } else { System . out . println ( message ) ; } }
public java . lang . Object newInstance ( java . lang . Class javaContentInterface ) throws javax . xml . bind . JAXBException { return super . newInstance ( javaContentInterface ) ; }
public static void d ( String tag , String msg ) { if ( sLevel > LEVEL_DEBUG ) { return ; } Log . d ( tag , msg ) ; }
boolean isNodeExpanded ( TreeNode node ) ;
public int length ( ) { return fLength ; }
public Boolean isEnableAPDTimeoutForHosts ( ) { return enableAPDTimeoutForHosts ; }
public boolean isBackgroundImageDetermineSize ( ) { return backgroundImageDetermineSize ; }
public IntLiteral createIntLiteral ( ) { IntLiteralImpl intLiteral = new IntLiteralImpl ( ) ; return intLiteral ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
void removeEntitySubscriber ( EntitySubscriber subscriber ) ;
public Result modify ( ModifyRequest request ) throws LdapException { addTransactionIdControl ( request ) ; return connection . modify ( request ) ; }
public void apply ( VerletParticle3D p ) ;
public static String randomAlphanumerical ( final int len ) { final StringBuilder sb = new StringBuilder ( len ) ; for ( int i = NUM_ ; i < len ; i ++ ) { sb . append ( AB . charAt ( random . nextInt ( AB . length ( ) ) ) ) ; } return sb . toString ( ) ; }
public abstract FileSystemProvider provider ( ) ;
public void postSerializationInit ( ) { super . postSerializationInit ( ) ; initTreeMap ( ) ; Iterator < Double > i = imageMap . keySet ( ) . iterator ( ) ; while ( i . hasNext ( ) ) { Double key = i . next ( ) ; imageMap . get ( key ) . initializeImages ( ) ; } }
public void store ( byte value , Offset offset ) { }
public void notifyModalBlocked ( Dialog blocker , boolean blocked ) { }
public boolean addressTypeUnique ( ) { return BOOL_ ; }
private void populateResultsBox ( IVScanResult ivScanResult ) { ivScanResult . sortCombinations ( ) ; populateResultsHeader ( ivScanResult ) ; if ( ivScanResult . getCount ( ) == NUM_ ) { populateSingleIVMatch ( ivScanResult ) ; } else { populateMultipleIVMatch ( ivScanResult ) ; } setResultScreenPercentageRange ( ivScanResult ) ; adjustSeekbarsThumbs ( ) ; hideSeeAllLinkIfFlagSet ( ivScanResult ) ; populateAdvancedInformation ( ivScanResult ) ; populatePrevScanNarrowing ( ) ; }
private void ensureBuckets ( long start , long end ) { start -= start % bucketDuration ; end += ( bucketDuration - ( end % bucketDuration ) ) % bucketDuration ; for ( long now = start ; now < end ; now += bucketDuration ) { final int index = Arrays . binarySearch ( bucketStart , NUM_ , bucketCount , now ) ; if ( index < NUM_ ) { insertBucket ( ~ index , now ) ; } } }
public void send ( OutputStream os ) throws IOException { PacketOutputStream writer = ( PacketOutputStream ) os ; writer . startPacket ( packSeq ) ; writer . write ( password . getBytes ( ) ) ; writer . write ( NUM_ ) ; writer . finishPacketWithoutRelease ( BOOL_ ) ; writer . releaseBuffer ( ) ; }
public FrameBodyTRDA ( ) { }
public static Button button ( String text , String tip , EventHandler < ActionEvent > onAct ) { Button btn = new Button ( text ) ; btn . setOnAction ( onAct ) ; tooltip ( btn , tip ) ; return btn ; }
public boolean isImplicationDefiniteClause ( ) { return isDefiniteClause ( ) && cachedNegativeSymbols . size ( ) >= NUM_ ; }
public void release ( ) { Toast . release ( ) ; }
public final void layerProtocol ( boolean secure ) { if ( ! this . connected ) { throw new IllegalStateException ( STR_ ) ; } this . layered = LayerType . LAYERED ; this . secure = secure ; }
public abstract void onFailure ( int statusCode , Header [ ] headers , Throwable throwable , String rawJsonData , JSON_TYPE errorResponse ) ;
public static AudioInputStream createSingleAudioInputStream ( Vector < AudioInputStream > audioInputStreams ) { if ( audioInputStreams == null ) throw new NullPointerException ( STR_ ) ; if ( audioInputStreams . isEmpty ( ) ) throw new IllegalArgumentException ( STR_ ) ; AudioInputStream singleStream ; if ( audioInputStreams . size ( ) == NUM_ ) singleStream = audioInputStreams . get ( NUM_ ) ; else { AudioFormat audioFormat = audioInputStreams . get ( NUM_ ) . getFormat ( ) ; singleStream = new SequenceAudioInputStream ( audioFormat , audioInputStreams ) ; } return singleStream ; }
public void print ( PrintWriter out ) { XMLWriter writer = new XMLWriter ( out ) ; try { writer . write ( ( XMLElement ) document . getChildren ( ) . get ( NUM_ ) , BOOL_ ) ; } catch ( IOException e ) { InternalError error = new InternalError ( ) ; error . initCause ( e ) ; throw error ; } }
public void removeSwipeListener ( SwipeListener listener ) { if ( mListeners == null ) { return ; } mListeners . remove ( listener ) ; }
public Builder notificationSound ( String value ) { notificationParams . put ( STR_ , value ) ; return this ; }
CSSStyleDeclaration createCSSStyleDeclaration ( ) ;
public UnicodeReader ( InputStream in ) throws IOException { this ( in , null ) ; }
public void deleteField ( Mp4FieldKey mp4Key ) throws KeyNotFoundException { if ( mp4Key == null ) { throw new KeyNotFoundException ( ) ; } super . deleteField ( mp4Key . getFieldName ( ) ) ; }
private void validateNotificationActions ( List < JobAction > jobActions ) { Assert . notEmpty ( jobActions , STR_ ) ; Set < JobAction > validatedJobActionsSet = new LinkedHashSet < > ( ) ; for ( JobAction jobAction : jobActions ) { Assert . hasText ( jobAction . getNamespace ( ) , STR_ ) ; jobAction . setNamespace ( jobAction . getNamespace ( ) . trim ( ) ) ; Assert . hasText ( jobAction . getJobName ( ) , STR_ ) ; jobAction . setJobName ( jobAction . getJobName ( ) . trim ( ) ) ; JobAction lowercaseJobDefinitionKey = new JobAction ( ) ; lowercaseJobDefinitionKey . setNamespace ( jobAction . getNamespace ( ) . toLowerCase ( ) ) ; lowercaseJobDefinitionKey . setJobName ( jobAction . getJobName ( ) . toLowerCase ( ) ) ; if ( validatedJobActionsSet . contains ( lowercaseJobDefinitionKey ) ) { throw new IllegalArgumentException ( String . format ( STR_ , jobAction . getNamespace ( ) , jobAction . getJobName ( ) ) ) ; } validatedJobActionsSet . add ( lowercaseJobDefinitionKey ) ; } }
public static RegressionDataSet readR ( int numeric_target_column , Reader reader , int lines_to_skip , Set < Integer > cat_cols ) throws IOException { return readR ( numeric_target_column , reader , DEFAULT_DELIMITER , lines_to_skip , DEFAULT_COMMENT , cat_cols ) ; }
public Source < T > andAlternateWithSource ( Source < T > rhs ) { return Compositions . interleave ( this , rhs ) ; }
public JavaContext ( TemplateContextType type , IDocument document , int completionOffset , int completionLength , ICompilationUnit compilationUnit ) { super ( type , document , completionOffset , completionLength , compilationUnit ) ; }
final public int off ( ) { return NUM_ ; }
public Anniversary ( String text ) { super ( text ) ; }
public GlassFish3xStandaloneLocalConfiguration ( String home ) { super ( home ) ; }
boolean isTweetUiEnabled ( ) { if ( isInEditMode ( ) ) return BOOL_ ; try { dependencyProvider . getTweetUi ( ) ; } catch ( IllegalStateException e ) { Fabric . getLogger ( ) . e ( TAG , e . getMessage ( ) ) ; setEnabled ( BOOL_ ) ; return BOOL_ ; } return BOOL_ ; }
public DateTime toDate ( Object o , boolean alsoNumbers , TimeZone tz , DateTime defaultValue ) ;
public SnippetHighlighter ( ) { drawsLayeredHighlights = BOOL_ ; }
public RpcChannel ( byte [ ] rpcId , Channel channel , RpcCallback callback ) { this . channel = channel ; this . callback = callback ; this . rpcId = rpcId ; channel . addChannelListener ( this ) ; }
public void show ( ) { show ( sDefaultTimeout ) ; }
public static final NamespaceEphemeralData acquireNameSpace ( ZooKeeper zkc , String path , NamespaceEphemeralData value ) throws KeeperException , InterruptedException , JsonGenerationException , JsonMappingException , IOException { String data = jsonMapper . writeValueAsString ( value ) ; createZnodeOptimistic ( zkc , path , data , CreateMode . EPHEMERAL ) ; return value ; }
public void tagDefineBits ( int id , byte [ ] imageData ) throws IOException ;
private byte encryptByte ( byte data , int blockOff ) { return ( byte ) ( FRE [ blockOff ] ^ data ) ; }
public ServerState duplicate ( ) { final ServerState newState = new ServerState ( ) ; newState . serverIdToCSN . putAll ( serverIdToCSN ) ; return newState ; }
CView generate ( int viewId , String name , String description , ViewType viewType , GraphType graphType , java . util . Date creationDate , java . util . Date modificationDate , int blockCount , int edgeCount , Set < CTag > tags , Set < CTag > nodeTags , boolean starState ) ;
Entry ( K k , V v , Entry n ) { key = k ; val = v ; next = n ; }
private int addElement ( DefaultListModel < String > model , String element ) { if ( model . isEmpty ( ) ) { model . addElement ( element ) ; return NUM_ ; } else { for ( int j = NUM_ ; j < model . getSize ( ) ; j ++ ) { int compareValue = String . CASE_INSENSITIVE_ORDER . compare ( model . getElementAt ( j ) . toString ( ) , element ) ; if ( compareValue > NUM_ ) { model . add ( j , element ) ; return j ; } if ( j == model . getSize ( ) - NUM_ ) { model . add ( j + NUM_ , element ) ; return j + NUM_ ; } } } return - NUM_ ; }
public static net . aimeizi . person . QueryParameter . Builder newBuilder ( ) { return new net . aimeizi . person . QueryParameter . Builder ( ) ; }
protected int _nextsib ( int identity ) { int info = ( identity >= m_size ) ? NOTPROCESSED : m_nextsib . elementAt ( identity ) ; while ( info == NOTPROCESSED ) { boolean isMore = nextNode ( ) ; if ( identity >= m_size && ! isMore ) return NULL ; else { info = m_nextsib . elementAt ( identity ) ; if ( info == NOTPROCESSED && ! isMore ) return NULL ; } } return info ; }
public TypedEventListener ( EventListener < E > wrappedListener , Class < E > eventClass ) { this . eventClass = eventClass ; this . wrappedListener = wrappedListener ; }
public final boolean isDaemon ( ) { return daemon ; }
double heuristic ( Node x , Node y ) { return x . loc . distanceTo ( y . loc ) ; }
private void nodeY ( Node r ) { Edge e ; double h = r . getTop ( ) + m_yRatio ; for ( int noa = NUM_ ; ( e = r . getChild ( noa ) ) != null ; noa ++ ) { if ( e . getTarget ( ) . getParent ( NUM_ ) == e ) { e . getTarget ( ) . setTop ( h ) ; if ( ! e . getTarget ( ) . getVisible ( ) ) { } } } }
protected abstract T createForRule ( RuleIdeInfo rule ) ;
protected SVGGraphicsElement ( String prefix , AbstractDocument owner ) { super ( prefix , owner ) ; initializeLiveAttributes ( ) ; }
private void backSubstitution ( int p ) throws ArithmeticException { int n = rows . length ; double [ ] answer = new double [ n ] ; double x ; for ( int i = n - NUM_ ; i >= NUM_ ; i -- ) { x = rows [ i ] [ n + p ] ; for ( int j = i + NUM_ ; j < n ; j ++ ) x -= answer [ j ] * rows [ i ] [ j ] ; answer [ i ] = x / rows [ i ] [ i ] ; } solutions [ p ] = new Vector ( answer ) ; return ; }
int toInt ( NibbleArray nibbles ) ;
public void stopRefresh ( ) { if ( mPullRefreshing == BOOL_ ) { mPullRefreshing = BOOL_ ; resetHeaderHeight ( ) ; } }
public void storeOriginals ( ) { mStartingStartTrim = mStartTrim ; mStartingEndTrim = mEndTrim ; mStartingRotation = mRotation ; }
public abstract Object evaluate ( ) throws SpellCompilationException ;
public LengthParser ( ) { lengthHandler = DefaultLengthHandler . INSTANCE ; }
private Object readResolve ( ) throws ObjectStreamException { if ( this . equals ( DateTickUnitType . YEAR ) ) { return DateTickUnitType . YEAR ; } else if ( this . equals ( DateTickUnitType . MONTH ) ) { return DateTickUnitType . MONTH ; } else if ( this . equals ( DateTickUnitType . DAY ) ) { return DateTickUnitType . DAY ; } else if ( this . equals ( DateTickUnitType . HOUR ) ) { return DateTickUnitType . HOUR ; } else if ( this . equals ( DateTickUnitType . MINUTE ) ) { return DateTickUnitType . MINUTE ; } else if ( this . equals ( DateTickUnitType . SECOND ) ) { return DateTickUnitType . SECOND ; } else if ( this . equals ( DateTickUnitType . MILLISECOND ) ) { return DateTickUnitType . MILLISECOND ; } return null ; }
public void initialize ( ) { directory = XTIFFDirectory . create ( ) ; setCompression ( COMPRESSION_NONE ) ; setWriteTiled ( BOOL_ ) ; }
public synchronized void closeDriver ( ) { if ( camera != null ) { camera . release ( ) ; camera = null ; } }
public void showMenu ( ) { showMenu ( BOOL_ ) ; }
int size ( ) ;
public static void write ( float lt , float ln , Image image , int image_width , int image_height , LinkProperties properties , DataOutputStream dos ) throws IOException , InterruptedException { int [ ] pixels = new int [ image_width * image_height ] ; PixelGrabber pixelgrabber = new PixelGrabber ( image , NUM_ , NUM_ , image_width , image_height , pixels , NUM_ , image_width ) ; pixelgrabber . grabPixels ( ) ; LinkRaster . write ( lt , ln , image_width , image_height , pixels , properties , dos ) ; }
public void attributeAsClassAt ( int columnIndex ) { ( ( DataTableModel ) getModel ( ) ) . attributeAsClassAt ( columnIndex ) ; }
public synchronized void removeSeries ( XYSeries series ) { mSeries . remove ( series ) ; }
public static boolean isArchiveExtension ( String fileExtension ) { return Archive . ARCHIVE_EXTENSION_SET . contains ( fileExtension ) ; }
public static String toHex ( byte [ ] buf ) { return toHex ( buf , NUM_ , buf . length ) ; }
public void printClass ( Class < ? > cl ) throws IOException { if ( ! cl . isArray ( ) ) print ( cl . getName ( ) . replace ( STR_ , STR_ ) ) ; else { printClass ( cl . getComponentType ( ) ) ; print ( STR_ ) ; } }
LocalItem makeTemp ( Type type ) { VarSymbol v = new VarSymbol ( Flags . SYNTHETIC , names . empty , type , env . enclMethod . sym ) ; code . newLocal ( v ) ; return items . makeLocalItem ( v ) ; }
final void helpJoinOnce ( WorkQueue joiner , ForkJoinTask < ? > task ) { int s ; if ( joiner != null && task != null && ( s = task . status ) >= NUM_ ) { ForkJoinTask < ? > prevJoin = joiner . currentJoin ; joiner . currentJoin = task ; do { } while ( ( s = task . status ) >= NUM_ && ! joiner . isEmpty ( ) && joiner . tryRemoveAndExec ( task ) ) ; if ( s >= NUM_ && ( s = task . status ) >= NUM_ ) { helpSignal ( task , joiner . poolIndex ) ; if ( ( s = task . status ) >= NUM_ && ( task instanceof CountedCompleter ) ) s = helpComplete ( task , LIFO_QUEUE ) ; } if ( s >= NUM_ && joiner . isEmpty ( ) ) { do { } while ( task . status >= NUM_ && tryHelpStealer ( joiner , task ) > NUM_ ) ; } joiner . currentJoin = prevJoin ; } }
private Constraint ( ) { }
public void add ( float summand ) { this . points [ NUM_ ] += summand ; this . points [ NUM_ ] += summand ; this . points [ NUM_ ] += summand ; }
public static SM_SYSTEM_MESSAGE STR_COMPOUND_ERROR_NOT_ENOUGH_MONEY ( int i , int j ) { return new SM_SYSTEM_MESSAGE ( NUM_ , new DescriptionId ( i ) , new DescriptionId ( j ) ) ; }
protected void destroy ( ) { if ( LogService . MAIN_LOGGER_NAME . equals ( this . logWriterLoggerName ) && LogService . isUsingGemFireDefaultConfig ( ) ) { LogService . restoreConsoleAppender ( ) ; } for ( AppenderContext context : this . appenderContexts ) { context . getLoggerContext ( ) . removePropertyChangeListener ( this ) ; context . getLoggerConfig ( ) . removeAppender ( appenderName ) ; } for ( AppenderContext context : this . appenderContexts ) { context . getLoggerContext ( ) . updateLoggers ( ) ; } stop ( ) ; cleanUp ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STR_ ) ; } }
public CircularWindow ( LatLng center , double radiusInDegrees ) { this . setCenter ( center ) ; this . setRadius ( radiusInDegrees ) ; }
private static String randomElement ( ArrayList < String > list ) { int index = random . nextInt ( list . size ( ) ) ; return list . get ( index ) ; }
public String encodeAsString ( final byte [ ] pArray ) { return StringUtils . newStringUtf8 ( encode ( pArray ) ) ; }
public BreakpointConditionSetReply ( final int packetId , final int errorCode ) { super ( packetId , errorCode ) ; }
private boolean useTabHeading ( SettingsItem parent ) { if ( parent . getType ( ) . equals ( Type . SUB_GROUP ) ) { return BOOL_ ; } else if ( subGroupTabNameUsed ) { return BOOL_ ; } else if ( useSubGroups ) { return BOOL_ ; } else { return BOOL_ ; } }
public static void deleteOrderlines ( Properties ctx , MOrder order , String trxName ) throws OperationException { boolean isEmpty = OrderManager . isOrderEmpty ( ctx , order . get_ID ( ) , trxName ) ; if ( isEmpty ) { return ; } if ( order . isProcessed ( ) ) { throw new OperationException ( STR_ ) ; } String sql = STR_ + order . get_ID ( ) ; int no = DB . executeUpdate ( sql , trxName ) ; if ( no == - NUM_ ) { throw new OperationException ( STR_ ) ; } }
public TopologyMemberImpl updateBackup ( final TopologyMemberImpl memberInput ) { final String nodeId = memberInput . getNodeId ( ) ; if ( logger . isTraceEnabled ( ) ) { logger . trace ( this + STR_ + nodeId + STR_ + memberInput ) ; } synchronized ( this ) { TopologyMemberImpl currentMember = getMember ( nodeId ) ; if ( currentMember == null ) { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STR_ + nodeId + STR_ + memberInput , new Exception ( STR_ ) ) ; } currentMember = memberInput ; topology . put ( nodeId , currentMember ) ; } TopologyMemberImpl newMember = new TopologyMemberImpl ( nodeId , currentMember . getBackupGroupName ( ) , currentMember . getScaleDownGroupName ( ) , currentMember . getLive ( ) , memberInput . getBackup ( ) ) ; newMember . setUniqueEventID ( System . currentTimeMillis ( ) ) ; topology . remove ( nodeId ) ; topology . put ( nodeId , newMember ) ; sendMemberUp ( nodeId , newMember ) ; return newMember ; } }
private static void checkSTSPort ( WsInfo info ) { if ( info . getServicePort ( ) != ServicePort . STS ) { String text = STR_ + ServicePort . STS ; logger . error ( text ) ; throw new WebServiceException ( text ) ; } }
public void saveData ( File file ) throws IOException { synchronized ( accumulators ) { ObjectOutputStream oos = null ; try { oos = new ObjectOutputStream ( new FileOutputStream ( file ) ) ; oos . writeObject ( accumulators ) ; } finally { if ( oos != null ) { oos . close ( ) ; } } } }
abstract void implRun ( ) throws Throwable ;
public final int size ( ) { return m_firstFree ; }
public static void updateCartCountNotification ( ) { MainActivity instance = MainActivity . getInstance ( ) ; if ( instance != null ) { instance . getCartCount ( BOOL_ ) ; } else { Timber . e ( MSG_MAIN_ACTIVITY_INSTANCE_IS_NULL ) ; } }
public static void queueBitmap ( String key , Bitmap bmp ) { mBitmapQueue . put ( key , bmp ) ; }
private static void padInt ( StringBuilder buffer , int value , int length ) { String strValue = Integer . toString ( value ) ; for ( int i = length - strValue . length ( ) ; i > NUM_ ; i -- ) { buffer . append ( STR_ ) ; } buffer . append ( strValue ) ; }
public Collection < ObjectReference > dumpRoots ( int width ) { List < ObjectReference > roots = new ArrayList < ObjectReference > ( ) ; for ( int i = NUM_ ; i < values . length ; i ++ ) { Value value = get ( i ) ; String name = method . getSlotName ( i ) ; if ( value != null && value instanceof ObjectValue ) { ObjectReference ref = ( ( ObjectValue ) value ) . getObjectValue ( ) ; System . err . printf ( STR_ , name , ObjectModel . formatObject ( width , ref ) ) ; if ( ! ref . isNull ( ) ) roots . add ( ref ) ; } } return roots ; }
private void createEventSessionConfig ( ) throws IOException { eventSessionConfig = new EventSessionConfig ( ) ; eventSessionConfig . setFifo ( BOOL_ ) ; eventSessionConfig . setReplicateNotifyTemplate ( BOOL_ ) ; eventSessionConfig . setTriggerNotifyTemplate ( BOOL_ ) ; }
public void ancestorResized ( HierarchyEvent e ) { }
public AsyncRequest requestStatusHandler ( RequestStatusHandler handler ) { this . asyncTaskStatusHandler = handler ; return this ; }
void onReject ( Set < Instance > rejectedInstances ) ;
public static void main ( String [ ] args ) throws Exception { int res = ToolRunner . run ( new MetastoreReplicationJob ( ) , args ) ; System . exit ( res ) ; }
public void cancel ( ) { canceled = BOOL_ ; }
private List reduceToGeometries ( List geomTree ) { List geoms = new ArrayList ( ) ; for ( Iterator i = geomTree . iterator ( ) ; i . hasNext ( ) ; ) { Object o = i . next ( ) ; Geometry geom = null ; if ( o instanceof List ) { geom = unionTree ( ( List ) o ) ; } else if ( o instanceof Geometry ) { geom = ( Geometry ) o ; } geoms . add ( geom ) ; } return geoms ; }
public static String intToString ( int i , int radix ) { if ( radix < Character . MIN_RADIX || radix > Character . MAX_RADIX ) { radix = NUM_ ; } if ( radix == NUM_ ) { return intToString ( i ) ; } boolean negative = BOOL_ ; if ( i < NUM_ ) { negative = BOOL_ ; } else { i = - i ; } int bufLen = radix < NUM_ ? NUM_ : NUM_ ; char [ ] buf = new char [ bufLen ] ; int cursor = bufLen ; do { int q = i / radix ; buf [ -- cursor ] = DIGITS [ radix * q - i ] ; i = q ; } while ( i != NUM_ ) ; if ( negative ) { buf [ -- cursor ] = STR_ ; } return new String ( cursor , bufLen - cursor , buf ) ; }
protected void patchCommandLineForVirtualenv ( GeneralCommandLine commandLine , String sdkHome ) { PythonSdkType . patchCommandLineForVirtualenv ( commandLine , sdkHome , isPassParentEnvs ( ) ) ; }
public void readData ( DataInput din ) throws IOException { function = din . readUnsignedShort ( ) ; data = ( short ) ( din . readShort ( ) & NUM_ ) ; }
public synchronized void addObject ( Object obj ) { fifo . addElement ( obj ) ; nbObjects ++ ; notifyAll ( ) ; }
public Vector cross ( Vector with ) { float x = vals [ I2 ] * with . vals [ I3 ] - vals [ I3 ] * with . vals [ I2 ] ; float y = vals [ I3 ] * with . vals [ I1 ] - vals [ I1 ] * with . vals [ I3 ] ; float z = vals [ I1 ] * with . vals [ I2 ] - vals [ I2 ] * with . vals [ I1 ] ; return new Vector ( x , y , z ) ; }
protected void doDropFlow ( IOFSwitch sw , OFPacketIn pi , FloodlightContext cntx ) { if ( log . isTraceEnabled ( ) ) { log . trace ( STR_ , new Object [ ] { pi , sw } ) ; } if ( sw == null ) { log . warn ( STR_ , pi ) ; return ; } OFFlowMod . Builder fmb = sw . getOFFactory ( ) . buildFlowModify ( ) ; List < OFAction > actions = new ArrayList < OFAction > ( ) ; U64 cookie = AppCookie . makeCookie ( APP_ID , NUM_ ) ; fmb . setCookie ( cookie ) . setIdleTimeout ( ForwardingBase . FLOWMOD_DEFAULT_IDLE_TIMEOUT ) . setHardTimeout ( ForwardingBase . FLOWMOD_DEFAULT_HARD_TIMEOUT ) . setBufferId ( OFBufferId . NO_BUFFER ) . setMatch ( pi . getMatch ( ) ) . setActions ( actions ) ; if ( log . isTraceEnabled ( ) ) { log . trace ( STR_ + STR_ , new Object [ ] { sw , pi . getMatch ( ) , pi , fmb . build ( ) } ) ; } sw . write ( fmb . build ( ) ) ; return ; }
public boolean generate ( Projection proj ) { return BOOL_ ; }
public static String formatPixel ( int pixel ) { return String . format ( STR_ , Integer . toHexString ( pixel ) ) . replace ( STR_ , STR_ ) ; }
public Example ( DataRow data , ExampleSet parentExampleSet ) { this . data = data ; this . parentExampleSet = parentExampleSet ; }
public void execute ( TransformerImpl transformer ) throws TransformerException { try { SerializationHandler rth = transformer . getResultTreeHandler ( ) ; if ( m_disableOutputEscaping ) { rth . processingInstruction ( javax . xml . transform . Result . PI_DISABLE_OUTPUT_ESCAPING , STR_ ) ; } rth . characters ( m_ch , NUM_ , m_ch . length ) ; if ( m_disableOutputEscaping ) { rth . processingInstruction ( javax . xml . transform . Result . PI_ENABLE_OUTPUT_ESCAPING , STR_ ) ; } } catch ( SAXException se ) { throw new TransformerException ( se ) ; } }
String resolveTypeName ( Class < ? extends ConfiguredBean > clazz ) throws ConfigException ;
public Vector3 ( Vector3 clone ) { this ( clone . getX ( ) , clone . getY ( ) , clone . getZ ( ) ) ; }
public NGramFilterFactory ( Map < String , String > args ) { super ( args ) ; minGramSize = getInt ( args , STR_ , NGramTokenFilter . DEFAULT_MIN_NGRAM_SIZE ) ; maxGramSize = getInt ( args , STR_ , NGramTokenFilter . DEFAULT_MAX_NGRAM_SIZE ) ; if ( ! args . isEmpty ( ) ) { throw new IllegalArgumentException ( STR_ + args ) ; } }
private static char [ ] zzUnpackCMap ( String packed ) { char [ ] map = new char [ NUM_ ] ; int i = NUM_ ; int j = NUM_ ; while ( i < NUM_ ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > NUM_ ) ; } return map ; }
public int platformId ( int index ) { return this . data . readUShort ( Offset . nameRecordPlatformId . offset + this . offsetForNameRecord ( index ) ) ; }
public static String quoteIfJavaKeyword ( String name ) { return JVMModuleUtil . quoteIfJavaKeyword ( name ) ; }
mxICell insertEdge ( mxICell edge , boolean isOutgoing ) ;
public static Builder from ( URI swaggerUri ) { Validate . notNull ( swaggerUri , STR_ ) ; String scheme = swaggerUri . getScheme ( ) ; if ( scheme != null && swaggerUri . getScheme ( ) . startsWith ( STR_ ) ) { try { return from ( swaggerUri . toURL ( ) ) ; } catch ( MalformedURLException e ) { throw new RuntimeException ( STR_ , e ) ; } } else if ( scheme != null && swaggerUri . getScheme ( ) . startsWith ( STR_ ) ) { return from ( Paths . get ( swaggerUri ) ) ; } else { return from ( URIUtils . convertUriWithoutSchemeToFileScheme ( swaggerUri ) ) ; } }
public void load ( File file ) throws IOException { InputStream inStream = new FileInputStream ( file ) ; properties . load ( inStream ) ; }
void addBreakpoint ( VirtualFile file , int lineNumber , AsyncCallback < Breakpoint > callback ) ;
public JSONException syntaxError ( String message ) { return new JSONException ( message + this . toString ( ) ) ; }
public DataType ( Class < T > clazz , BiConsumer < PacketBuffer , T > writer , Function < PacketBuffer , T > reader ) { this . clazz = clazz ; this . writer = writer ; this . reader = reader ; }
public int compareTo ( Object o ) { if ( ! ( o instanceof Segment ) ) { return - NUM_ ; } Segment s = ( Segment ) o ; if ( ( ( s . endCode >= startCode ) && ( s . endCode <= endCode ) ) || ( ( s . startCode >= startCode ) && ( s . startCode <= endCode ) ) ) { return NUM_ ; } if ( endCode > s . endCode ) { return NUM_ ; } else if ( endCode < s . endCode ) { return - NUM_ ; } else { return NUM_ ; } }
boolean supportsExtendedSQLGrammar ( ) throws SQLException ;
private void onJobStateUpdate ( PrintJob printJob , JobStateEnum state ) { if ( state == null ) { mJobs . remove ( printJob . getId ( ) ) ; printJob . cancel ( ) ; } else { if ( state == JobStateEnum . CANCELED ) { mJobs . remove ( printJob . getId ( ) ) ; printJob . cancel ( ) ; } else if ( state == JobStateEnum . COMPLETED || state == JobStateEnum . ABORTED ) { mJobs . remove ( printJob . getId ( ) ) ; printJob . complete ( ) ; } } }
public String searchTerminationTipText ( ) { return STR_ + STR_ ; }
public BinaryNode binaryNode ( byte [ ] data ) { return BinaryNode . valueOf ( data ) ; }
protected void addInternal ( double dist , int id ) { if ( size == dists . length ) { grow ( ) ; } dists [ size ] = dist ; ids [ size ] = id ; ++ size ; }
public AbsoluteInheritedDefaultBehaviorProvider ( String pathString , String propertyName ) { this . pathString = pathString ; this . propertyName = propertyName ; }
public MapOptions streetViewControl ( boolean streetViewControl ) { this . streetViewControl = streetViewControl ; return this ; }
public static void main ( String ... a ) throws Exception { TestBase . createCaller ( ) . init ( ) . test ( ) ; }
public static String convertPathCharsFromLink ( String path ) { String uriPath ; try { uriPath = ( new URI ( path ) ) . getPath ( ) ; } catch ( URISyntaxException ex ) { return null ; } return UriUtils . trimPathSlashes ( uriPath ) . replace ( STR_ , STR_ ) ; }
public Bitmap put ( String key , Bitmap value ) { return cache . put ( key , value ) ; }
private void loadPaySelectInfo ( ) { log . info ( STR_ ) ; if ( m_C_PaySelection_ID <= NUM_ ) return ; loadPaySelectInfo ( m_C_PaySelection_ID ) ; fBank . setText ( bank ) ; fCurrency . setText ( currency ) ; fBalance . setValue ( balance ) ; m_frame . pack ( ) ; loadPaymentRule ( ) ; }
private void sendMessage ( BeanMessageID type , Buffer payload ) { Buffer buffer = new Buffer ( ) ; buffer . writeByte ( ( type . getRawValue ( ) > > NUM_ ) & NUM_ ) ; buffer . writeByte ( type . getRawValue ( ) & NUM_ ) ; if ( payload != null ) { try { buffer . writeAll ( payload ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } GattSerialMessage serialMessage = GattSerialMessage . fromPayload ( buffer . readByteArray ( ) ) ; gattClient . getSerialProfile ( ) . sendMessage ( serialMessage . getBuffer ( ) ) ; }
public void write ( short u0 , short u1 , short u2 , short u3 , short u4 ) { write ( u0 ) ; write ( u1 ) ; write ( u2 ) ; write ( u3 ) ; write ( u4 ) ; }
public void addTransition ( int source , int dest , BytesRef term ) { if ( term == null ) { throw new NullPointerException ( STR_ ) ; } builder . addTransition ( source , dest , getTermID ( term ) ) ; }
public void addProcessInteractionListener ( final ProcessInteractionListener l ) { if ( l == null ) { throw new IllegalArgumentException ( STR_ ) ; } processInteractionListeners . add ( l ) ; }
public static void writeReverseInt ( IoBuffer out , int value ) { byte [ ] bytes = new byte [ NUM_ ] ; IoBuffer rev = IoBuffer . allocate ( NUM_ ) ; rev . putInt ( value ) ; rev . flip ( ) ; bytes [ NUM_ ] = rev . get ( ) ; bytes [ NUM_ ] = rev . get ( ) ; bytes [ NUM_ ] = rev . get ( ) ; bytes [ NUM_ ] = rev . get ( ) ; out . put ( bytes ) ; rev . free ( ) ; rev = null ; }
public Connection createConnection ( String addr , int ttl , int numAddrs ) throws SdpException { ConnectionField connectionImpl = new ConnectionField ( ) ; connectionImpl . setAddress ( addr ) ; return connectionImpl ; }
public static < E > int moveElement ( List < E > list , int oldPos , int newPos ) { if ( list == null ) { throw new IllegalArgumentException ( STR_ ) ; } if ( list . isEmpty ( ) || list . size ( ) == NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } if ( oldPos < NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } if ( oldPos >= list . size ( ) ) { throw new IllegalArgumentException ( STR_ ) ; } if ( oldPos != newPos ) { E itemToBeMoved = list . remove ( oldPos ) ; if ( newPos < NUM_ ) { newPos = NUM_ ; } if ( newPos >= list . size ( ) ) { newPos = list . size ( ) ; } list . add ( newPos , itemToBeMoved ) ; } return newPos ; }
void registerConsumer ( EventConsumer consumer , String publisherName , String [ ] eventTypes ) ;
public void or ( Criteria criteria ) { oredCriteria . add ( criteria ) ; }
public abstract boolean isValid ( ) ;
public static void assumeConnectivity ( ) { assumeConnectivity ( STR_ , NUM_ ) ; }
public static PricedEvent updatePricedEvent ( VOPricedEvent voPE , PricedEvent pEvt ) throws ValidationException , ConcurrentModificationException { verifyVersionAndKey ( pEvt , voPE ) ; validatePricedEvent ( voPE ) ; pEvt . setEventPrice ( voPE . getEventPrice ( ) ) ; return pEvt ; }
public final void closeFallbackInputStream ( ) throws DataFallbackException { if ( getInput ( ) != null ) { try { if ( LOG . isDebugEnabled ( ) ) LOG . debug ( STR_ + dataFile . getName ( ) ) ; getInput ( ) . close ( ) ; } catch ( IOException e ) { throw new DataFallbackException ( e . getMessage ( ) ) ; } finally { setInput ( null ) ; } } }
public boolean add_via_padstack ( LibPadstack p_padstack ) { if ( p_padstack == null ) return BOOL_ ; if ( get_via_padstack ( p_padstack . pads_name ) != null ) return BOOL_ ; via_padstacks . add ( p_padstack ) ; return BOOL_ ; }
public void callEvent ( final Event event ) throws EventException { if ( event instanceof Cancellable ) { if ( ( ( Cancellable ) event ) . isCancelled ( ) && isIgnoringCancelled ( ) ) { return ; } } executor . execute ( listener , event ) ; }
void encode ( DerOutputStream out ) throws IOException { out . putOctetString ( octetString ) ; }
protected void checkCapacity ( ) { if ( size >= threshold ) { int newCapacity = data . length * NUM_ ; if ( newCapacity <= MAXIMUM_CAPACITY ) { ensureCapacity ( newCapacity ) ; } } }
void previousPage ( PageBtreeCursor cursor , int pageId ) { int i ; for ( i = entryCount ; i >= NUM_ ; i -- ) { if ( childPageIds [ i ] == pageId ) { i -- ; break ; } } if ( i < NUM_ ) { if ( parentPageId == PageBtree . ROOT ) { cursor . setCurrent ( null , NUM_ ) ; return ; } PageBtreeNode previous = ( PageBtreeNode ) index . getPage ( parentPageId ) ; previous . previousPage ( cursor , getPos ( ) ) ; return ; } PageBtree page = index . getPage ( childPageIds [ i ] ) ; PageBtreeLeaf leaf = page . getLastLeaf ( ) ; cursor . setCurrent ( leaf , leaf . entryCount - NUM_ ) ; }
public BlockView ( Element elem , int axis ) { super ( elem , axis ) ; }
private boolean journalRebuildRequired ( ) { final int redundantOpCompactThreshold = NUM_ ; return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries . size ( ) ; }
public static final String findSrlName ( String stream , Race race ) { for ( Entrant entrant : race . getEntrants ( ) ) { if ( stream . equalsIgnoreCase ( entrant . twitch ) ) { return entrant . name ; } } return null ; }
public boolean containsIgnoredSections ( ) { return containsIgnoredSections ; }
public void query ( WebSocket session , HeadersAmp headers , String from , long qid , String to , String methodName , PodRef podCaller , Object ... args ) throws IOException { }
private List < BuckBlock > buildSubBlocks ( ) { final List < BuckBlock > blocks = new ArrayList < BuckBlock > ( ) ; for ( ASTNode child = myNode . getFirstChildNode ( ) ; child != null ; child = child . getTreeNext ( ) ) { final IElementType childType = child . getElementType ( ) ; if ( child . getTextRange ( ) . isEmpty ( ) ) { continue ; } if ( childType == TokenType . WHITE_SPACE ) { continue ; } if ( childType == BuckTypes . GLOB_BLOCK ) { continue ; } blocks . add ( buildSubBlock ( child ) ) ; } return Collections . unmodifiableList ( blocks ) ; }
private void clipViewOnTheRight ( Rect curViewBound , float curViewWidth , int right ) { curViewBound . right = ( int ) ( right - mClipPadding ) ; curViewBound . left = ( int ) ( curViewBound . right - curViewWidth ) ; }
Object parseDefaultString ( FieldType fieldType , String defaultStr ) throws SQLException ;
WString Inform ( Pointer handle ) ;
public static ClassLoader classLoader ( Class < ? > cls ) { ClassLoader cached = cache . get ( cls ) ; if ( cached == null ) { ClassLoader old = cache . putIfAbsent ( cls , cached = detectClassLoader ( cls ) ) ; if ( old != null ) cached = old ; } return cached ; }
public void registerSensorsForNode ( SerialNode node ) { java . util . Iterator < String > iter = getSystemNameList ( ) . iterator ( ) ; SerialNode tNode = null ; while ( iter . hasNext ( ) ) { String sName = iter . next ( ) ; if ( sName == null ) { log . error ( STR_ ) ; } else { log . debug ( STR_ + sName ) ; if ( ( sName . charAt ( NUM_ ) == STR_ ) && ( sName . charAt ( NUM_ ) == STR_ ) ) { tNode = SerialAddress . getNodeFromSystemName ( sName ) ; if ( tNode == node ) { node . registerSensor ( getBySystemName ( sName ) , ( SerialAddress . getBitFromSystemName ( sName ) - NUM_ ) ) ; } } } } }
public _MelLexer ( java . io . Reader in ) { this . zzReader = in ; }
public static byte [ ] decodeWebSafe ( String s ) throws Base64DecoderException { byte [ ] bytes = s . getBytes ( ) ; return decodeWebSafe ( bytes , NUM_ , bytes . length ) ; }
public BufferAllocator newChildAllocator ( String name , long initReservation , long maxAllocation ) ;
public String info ( ) { Project project = StorageManager . getDatabaseProject ( ) ; if ( project == null ) { return STR_ ; } StringBuilder sb = new StringBuilder ( ) ; sb . append ( STR_ + ProjectUtil . getNumberTestableClasses ( project ) + STR_ ) ; sb . append ( STR_ + ProjectUtil . getNumberTestableClasses ( project ) + STR_ ) ; sb . append ( STR_ + ProjectUtil . getNumberGeneratedTestSuites ( project ) + STR_ ) ; sb . append ( STR_ + ProjectUtil . getOverallCoverage ( project ) + STR_ ) ; return sb . toString ( ) ; }
public static < K , V > ImmutableBiMap < K , V > of ( K k1 , V v1 ) { return new RegularImmutableBiMap < K , V > ( ImmutableMap . of ( k1 , v1 ) ) ; }
public Vertex applyNEW ( List < Relationship > arguments , Map < Vertex , Vertex > variables , Network network ) { Vertex newVertex = null ; newVertex = network . createVertex ( ) ; for ( Relationship argument : arguments ) { Vertex type = argument . getTarget ( ) . applyQuotient ( variables , network ) ; newVertex . addRelationship ( Primitive . INSTANTIATION , type ) ; if ( ! type . hasRelationship ( Primitive . INSTANTIATION , Primitive . CLASSIFICATION ) ) { Collection < Relationship > specializations = type . getRelationships ( Primitive . INSTANTIATION ) ; if ( specializations != null ) { for ( Relationship specialization : specializations ) { type . addRelationship ( Primitive . SPECIALIZATION , specialization . getTarget ( ) ) ; } type . addRelationship ( Primitive . INSTANTIATION , Primitive . CLASSIFICATION ) ; } } } return newVertex ; }
public boolean isValidating ( ) { return getFeature ( XmlPullParser . FEATURE_VALIDATION ) ; }
private void returnData ( Object ret ) { if ( myHost != null ) { myHost . returnData ( ret ) ; } }
void onColorChanged ( Field field , int oldColor , int newColor ) ;
public boolean isFatalError ( ) { return fSeverity == RefactoringStatus . FATAL ; }
static public boolean isInnerCause ( Throwable t , Class cls ) { return getInnerCause ( t , cls ) != null ; }
public static _Fields findByName ( String name ) { return byName . get ( name ) ; }
public void write ( char cbuf [ ] , int off , int len ) { if ( ( off < NUM_ ) || ( off > cbuf . length ) || ( len < NUM_ ) || ( ( off + len ) > cbuf . length ) || ( ( off + len ) < NUM_ ) ) { throw new IndexOutOfBoundsException ( ) ; } else if ( len == NUM_ ) { return ; } buf . append ( cbuf , off , len ) ; }
public boolean isMinYSet ( ) { return isMinYSet ( NUM_ ) ; }
public QueryStringQueryBuilder tieBreaker ( float tieBreaker ) { this . tieBreaker = tieBreaker ; return this ; }
HandlerRegistration addClickHandler ( ClickHandler handler ) ;
boolean containsSdfsMetadata ( String sBucket ) ;
static AsynchronousFileChannel newAsynchronousFileChannel ( String pathForWindows , String pathToCheck , Set < ? extends OpenOption > options , long pSecurityDescriptor , ThreadPool pool ) throws IOException { Flags flags = Flags . toFlags ( options ) ; flags . overlapped = BOOL_ ; if ( ! flags . read && ! flags . write ) { flags . read = BOOL_ ; } if ( flags . append ) throw new UnsupportedOperationException ( STR_ ) ; FileDescriptor fdObj ; try { fdObj = open ( pathForWindows , pathToCheck , flags , pSecurityDescriptor ) ; } catch ( WindowsException x ) { x . rethrowAsIOException ( pathForWindows ) ; return null ; } try { return WindowsAsynchronousFileChannelImpl . open ( fdObj , flags . read , flags . write , pool ) ; } catch ( IOException x ) { long handle = fdAccess . getHandle ( fdObj ) ; CloseHandle ( handle ) ; throw x ; } }
public void addLDAPEntryChangedListener ( LDAPEntryChangedListener listener ) { listeners . add ( listener ) ; }
public void build ( Instruction insts ) { Instruction i ; i = insts ; icount = NUM_ ; while ( i != null ) { icount ++ ; i = i . next ; } if ( icount > NUM_ ) { instructions = new Instruction [ icount ] ; int k ; k = NUM_ ; i = insts ; while ( i != null ) { instructions [ k ] = i ; k ++ ; i = i . next ; } i = insts ; while ( i != null ) { i . offsetToPointer ( this ) ; i = i . next ; } } }
private void grow ( ) { int oldCapacity = queue . length ; int newCapacity = oldCapacity + ( oldCapacity > > NUM_ ) ; if ( newCapacity < NUM_ ) newCapacity = Integer . MAX_VALUE ; queue = Arrays . copyOf ( queue , newCapacity ) ; }
private final void smoothScrollTo ( int scrollValue , long duration ) { smoothScrollTo ( scrollValue , duration , NUM_ , null ) ; }
public boolean isEmittable ( ) { return kind != BACKWARD_ACTION && kind != FORWARD_ACTION ; }
public static List < Declaration > lookupOverloadedByName ( List < Declaration > members , String name ) { List < Declaration > result = null ; for ( Declaration dec : members ) { if ( isResolvable ( dec ) && isNamed ( name , dec ) ) { if ( result == null ) { result = new ArrayList < Declaration > ( NUM_ ) ; } result . add ( dec ) ; } } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
public static List < Response > executeBatchAndWait ( RequestBatch requests ) { Validate . notEmptyAndContainsNoNulls ( requests , STR_ ) ; HttpURLConnection connection = null ; try { connection = toHttpConnection ( requests ) ; } catch ( Exception ex ) { List < Response > responses = Response . constructErrorResponses ( requests . getRequests ( ) , null , new FacebookException ( ex ) ) ; runCallbacks ( requests , responses ) ; return responses ; } List < Response > responses = executeConnectionAndWait ( connection , requests ) ; return responses ; }
static void terminateBits ( int numDataBytes , BitArray bits ) throws WriterException { int capacity = numDataBytes << NUM_ ; if ( bits . getSize ( ) > capacity ) { throw new WriterException ( STR_ + bits . getSize ( ) + STR_ + capacity ) ; } for ( int i = NUM_ ; i < NUM_ && bits . getSize ( ) < capacity ; ++ i ) { bits . appendBit ( BOOL_ ) ; } int numBitsInLastByte = bits . getSize ( ) & NUM_ ; if ( numBitsInLastByte > NUM_ ) { for ( int i = numBitsInLastByte ; i < NUM_ ; i ++ ) { bits . appendBit ( BOOL_ ) ; } } int numPaddingBytes = numDataBytes - bits . getSizeInBytes ( ) ; for ( int i = NUM_ ; i < numPaddingBytes ; ++ i ) { bits . appendBits ( ( i & NUM_ ) == NUM_ ? NUM_ : NUM_ , NUM_ ) ; } if ( bits . getSize ( ) != capacity ) { throw new WriterException ( STR_ ) ; } }
public CommandInvoker ( Action command , CommandSession commandSession ) { this . command = command ; this . options = new ArrayList < > ( ) ; this . arguments = new ArrayList < > ( ) ; this . outputStream = new ByteArrayOutputStream ( ) ; this . errorStream = new ByteArrayOutputStream ( ) ; this . commandSession = commandSession ; introspect ( ) ; }
public void add ( int pos , Box b ) { children . add ( pos , b ) ; b . parent = this ; b . elderParent = elderParent ; }
protected void addError ( String message , Throwable e ) { errorTable . add ( new Status ( IStatus . ERROR , STR_ , NUM_ , message , e ) ) ; }
private int bitCycleLeft ( int x , int times , int d ) { int mask = ( NUM_ << d ) - NUM_ ; int mout = x & mask ; times %= d ; int hi = mout > > ( d - times ) ; int low = ( mout << times ) & mask ; int ret = x & ~ mask ; ret |= low ; ret |= hi ; return ret ; }
public void checkNumberArgs ( int argNum ) throws WrongNumberArgsException { }
default LazyOperations < T > lazyOperations ( ) { return new LazyOperations < T > ( ReactiveSeq . fromIterable ( traversable ( ) ) ) ; }
public synchronized void addSeries ( XYSeries series ) { mSeries . add ( series ) ; }
public static void startChatService ( ) { final Intent intent = new Intent ( sStaticContext , ChatService . class ) ; intent . putExtra ( AppConstants . Keys . HEART_BEAT , AppConstants . HEART_BEAT ) ; sStaticContext . startService ( intent ) ; }
int numIterations ( ) ;
int extractEnergy ( ItemStack container , int maxExtract , boolean simulate ) ;
public static boolean canSustainPlantOn ( IBlockAccess world , int x , int y , int z , ForgeDirection dir , IPlantable plant , Block soil ) { return soil != null && soil . canSustainPlant ( world , x , y , z , dir , plant ) ; }
default < IN , OUT > void use ( Predicate < IN > predicate , Middleware < IN , OUT > middleware ) { use ( predicate , null , middleware ) ; }
public void doWaitForSynchronized ( Class < ? extends BlockObject > clazz , StorageSystem storageObj , URI target , TaskCompleter completer ) ;
public hr addElement ( String hashcode , Element element ) { addElementToRegistry ( hashcode , element ) ; return ( this ) ; }
private static void long_to_bytes ( long anUnsignedInt , byte [ ] buf , int offset ) { buf [ offset ] = ( byte ) ( ( anUnsignedInt & NUM_ ) > > > NUM_ ) ; buf [ offset + NUM_ ] = ( byte ) ( ( anUnsignedInt & NUM_ ) > > > NUM_ ) ; buf [ offset + NUM_ ] = ( byte ) ( ( anUnsignedInt & NUM_ ) > > > NUM_ ) ; buf [ offset + NUM_ ] = ( byte ) ( ( anUnsignedInt & NUM_ ) ) ; }
public DoublingRetrySchedule ( long startInterval , long maxInterval ) { this ( startInterval , maxInterval , NUM_ ) ; }
public PersistentCookieStore ( Context context ) { cookiePrefs = context . getSharedPreferences ( COOKIE_PREFS , NUM_ ) ; cookies = new ConcurrentHashMap < String , Cookie > ( ) ; String storedCookieNames = cookiePrefs . getString ( COOKIE_NAME_STORE , null ) ; if ( storedCookieNames != null ) { String [ ] cookieNames = TextUtils . split ( storedCookieNames , STR_ ) ; for ( String name : cookieNames ) { String encodedCookie = cookiePrefs . getString ( COOKIE_NAME_PREFIX + name , null ) ; if ( encodedCookie != null ) { Cookie decodedCookie = decodeCookie ( encodedCookie ) ; if ( decodedCookie != null ) { cookies . put ( name , decodedCookie ) ; } } } clearExpired ( new Date ( ) ) ; } }
public void fadeInLayer ( int index ) { mTransitionState = TRANSITION_STARTING ; mIsLayerOn [ index ] = BOOL_ ; invalidateSelf ( ) ; }
public boolean isFigureSelected ( Figure checkFigure ) ;
private static double distance ( Point p1 , Point p2 ) { double d ; d = ( p1 . x - p2 . x ) * ( p1 . x - p2 . x ) ; d += ( p1 . y - p2 . y ) * ( p1 . y - p2 . y ) ; d = Math . sqrt ( d ) ; return d ; }
public void copyContent ( ) { if ( ! isPanelSelected ( ) ) { return ; } getCurrentPanel ( ) . copyContent ( ) ; }
public void updateValue ( final Object value , final boolean isSelected , boolean sync ) { if ( isReadOnly ( ) ) { return ; } if ( GenericFormFactory . isTextForm ( formType ) ) { textString = ( String ) value ; if ( textString != null && textString . equals ( lastTextString ) ) { sync = BOOL_ ; } lastTextString = textString ; } else { textString = ( String ) value ; this . isSelected = isSelected ; if ( isSelected != lastIsSelected && lastTextString != null && textString != null && textString . equals ( lastTextString ) ) { sync = BOOL_ ; } lastTextString = textString ; lastIsSelected = isSelected ; } if ( ( sync && guiType != FormFactory . ULC ) && guiComp != null ) { syncGUI ( value ) ; } }
final double internalNextDouble ( double origin , double bound ) { double r = ( nextLong ( ) > > > NUM_ ) * DOUBLE_UNIT ; if ( origin < bound ) { r = r * ( bound - origin ) + origin ; if ( r >= bound ) r = Double . longBitsToDouble ( Double . doubleToLongBits ( bound ) - NUM_ ) ; } return r ; }
public Color green ( int green ) { return rgba ( red ( ) , green , blue ( ) , alpha ( ) ) ; }
void stateChangeFailed ( IFileBuffer buffer ) ;
IDocument clone ( IDocument original ) ;
public Double ( ) { }
public OLSMultipleLinearRegression ( final double threshold ) { this . threshold = threshold ; }
protected TemplateContext ( TemplateContextType contextType ) { fContextType = contextType ; fReadOnly = BOOL_ ; }
default < T > POrderedSetX < T > toPOrderedSetX ( final Function < ? super Tuple2 < ? super K , ? super V > , ? extends T > fn ) { return POrderedSetX . narrow ( stream ( ) . map ( fn ) . toPOrderedSetX ( ) ) ; }
public static Scope container ( Declaration decl ) { return decl . getContainer ( ) ; }
public EdgeCachedLocator ( int iCacheMaxSize ) { CacheMaxSize = iCacheMaxSize ; Cache = new HashMap ( ) ; CacheAccess = new TreeMap ( ) ; ElementAccessTime = new HashMap ( ) ; }
void populateRegionSubRegions ( RegionSubRegionSnapshot parentSnapShot , Set regions , GemFireCacheImpl cache ) { if ( cancelled ) return ; Region subRegion = null ; RegionSubRegionSnapshot subRegionSnapShot = null ; for ( Iterator iter = regions . iterator ( ) ; iter . hasNext ( ) ; ) { subRegion = ( Region ) iter . next ( ) ; try { subRegionSnapShot = new RegionSubRegionSnapshot ( subRegion ) ; parentSnapShot . addSubRegion ( subRegionSnapShot ) ; Set subRegions = subRegion . subregions ( BOOL_ ) ; populateRegionSubRegions ( subRegionSnapShot , subRegions , cache ) ; } catch ( Exception e ) { logger . debug ( STR_ , subRegion . getFullPath ( ) , e ) ; } } }
public void reduceSelection ( Collection < GraphNode > reduction ) ;
public void logTrace ( Object message ) { logInternal ( TRACE , message , null ) ; }
public TimestampValidityState ( DataInput is ) throws IOException { myTimestamp = is . readLong ( ) ; }
public void addAllOf ( IntArrayList xElements , IntArrayList yElements , IntArrayList zElements ) { int listSize = xElements . size ( ) ; if ( this . size + listSize >= this . capacity ) flush ( ) ; this . target . addAllOf ( xElements , yElements , zElements ) ; }
public void ifPresentOrElse ( Consumer < ? super T > consumer , Runnable emptyAction ) { if ( value != null ) consumer . accept ( value ) ; else emptyAction . run ( ) ; }
public static IssuingDistributionPoint decode ( byte [ ] encoding ) throws IOException { IssuingDistributionPoint idp = ( IssuingDistributionPoint ) ASN1 . decode ( encoding ) ; idp . encoding = encoding ; return idp ; }
public FluentBiFunction < T1 , T2 , R > before ( final BiConsumer < T1 , T2 > action ) { return withFn ( null ) ; }
public static List < String > readLines ( URL self ) throws IOException { return IOGroovyMethods . readLines ( newReader ( self ) ) ; }
public void connectionClosed ( ProtobufParser < MessageType > handler ) ;
public IdentityHashMap ( ) { init ( DEFAULT_CAPACITY ) ; }
public void addFish ( WeightedRandomFishable fish ) ;
private void doSignal ( Node first ) { do { if ( ( firstWaiter = first . nextWaiter ) == null ) lastWaiter = null ; first . nextWaiter = null ; } while ( ! transferForSignal ( first ) && ( first = firstWaiter ) != null ) ; }
public int value ( ) { return value ; }
public ModifyDNOperationBasis ( ClientConnection clientConnection , long operationID , int messageID , List < Control > requestControls , ByteString rawEntryDN , ByteString rawNewRDN , boolean deleteOldRDN , ByteString rawNewSuperior ) { super ( clientConnection , operationID , messageID , requestControls ) ; this . rawEntryDN = rawEntryDN ; this . rawNewRDN = rawNewRDN ; this . deleteOldRDN = deleteOldRDN ; this . rawNewSuperior = rawNewSuperior ; entryDN = null ; newRDN = null ; newSuperior = null ; responseControls = new ArrayList < > ( ) ; cancelRequest = null ; modifications = null ; }
public abstract void error ( String message ) ;
private void dispatch ( Dibit symbol ) { mBroadcaster . receive ( symbol ) ; }
protected boolean includeImportTable ( ) throws SQLException { if ( includeSchemas == null ) { return BOOL_ ; } if ( includeSchemas . contains ( importTables . getString ( STR_ ) ) == BOOL_ ) { return BOOL_ ; } else { return BOOL_ ; } }
public void test_SelectDistinct ( ) throws SQLException { String selectQuery = STR_ + DatabaseCreator . CUSTOMERS_TABLE ; ResultSet result = statement . executeQuery ( selectQuery ) ; HashSet < Integer > values = new HashSet < Integer > ( ) ; values . add ( Integer . valueOf ( NUM_ ) ) ; values . add ( Integer . valueOf ( NUM_ ) ) ; values . add ( Integer . valueOf ( NUM_ ) ) ; while ( result . next ( ) ) { Integer rating = result . getInt ( STR_ ) ; assertTrue ( STR_ , values . contains ( rating ) ) ; assertTrue ( STR_ , values . remove ( rating ) ) ; } result . close ( ) ; assertTrue ( STR_ , values . isEmpty ( ) ) ; }
public void replace ( NavigationStack stack ) { check ( ) ; history . kill ( ) ; dispatcher . dispatch ( add ( History . NAV_TYPE_PUSH , stack ) ) ; }
void visitJumpInsn ( int opcode , Label label ) ;
public void clear ( ) { m_openrows = null ; m_firstid = NUM_ ; m_curid = - NUM_ ; }
private Movie startMovieRequest ( String id ) throws InternetConnectionException { if ( isThereInternetConnection ( mContext ) ) { try { return mWebServicesApiCallsImpl . getMovieDetail ( id ) ; } catch ( RetrofitError e ) { throw new InternetConnectionException ( e . getMessage ( ) ) ; } } else { throw new InternetConnectionException ( mContext . getString ( R . string . internet_connection_error ) ) ; } }
public void refresh ( ) { if ( textArea != null ) textArea . setCaretPosition ( NUM_ ) ; }
public static RobotParser createEager ( final RobotProjectHolder projectHolder ) { RobotParserConfig cfg = new RobotParserConfig ( ) ; cfg . setEagerImport ( BOOL_ ) ; return create ( projectHolder , cfg ) ; }
public void onRedButtonClick ( View v ) { if ( isSubscribed ( ) ) { centerButton . setBackgroundDrawable ( getResources ( ) . getDrawable ( R . drawable . redbutton ) ) ; update ( ) ; } else { generateSubscribeDialog ( ) ; } }
private boolean equal ( long [ ] array1 , long [ ] array2 ) { if ( array1 . length != array2 . length ) { return BOOL_ ; } for ( int i = NUM_ ; i < array1 . length ; i ++ ) { if ( array1 [ i ] != array2 [ i ] ) { return BOOL_ ; } } return BOOL_ ; }
public int compare ( Object o1 , Object o2 ) { double diff ; Message m1 , m2 ; if ( o1 instanceof Tuple ) { m1 = ( ( Tuple < Message , Connection > ) o1 ) . getKey ( ) ; m2 = ( ( Tuple < Message , Connection > ) o2 ) . getKey ( ) ; } else if ( o1 instanceof Message ) { m1 = ( Message ) o1 ; m2 = ( Message ) o2 ; } else { throw new SimError ( STR_ + STR_ ) ; } diff = m1 . getReceiveTime ( ) - m2 . getReceiveTime ( ) ; if ( diff == NUM_ ) { return NUM_ ; } return ( diff < NUM_ ? - NUM_ : NUM_ ) ; }
public PdfArray ( Rectangle rectangle ) { list = new ArrayList < > ( NUM_ ) ; add ( new PdfNumber ( rectangle . getLeft ( ) ) ) ; add ( new PdfNumber ( rectangle . getBottom ( ) ) ) ; add ( new PdfNumber ( rectangle . getRight ( ) ) ) ; add ( new PdfNumber ( rectangle . getTop ( ) ) ) ; }
public boolean isPair ( ) { assert ( error == null ) ; return isPair ; }
public Bitmap icon ( ) { if ( mDecodedIcon != null ) return mDecodedIcon ; mDecodedIcon = ShortcutHelper . decodeBitmapFromString ( mEncodedIcon ) ; return mDecodedIcon ; }
public UploadSingleInitiationRequest createUploadSingleInitiationRequest ( ) { return createUploadSingleInitiationRequest ( AbstractServiceTest . NAMESPACE , AbstractServiceTest . BDEF_NAME , AbstractServiceTest . FORMAT_USAGE_CODE , AbstractServiceTest . FORMAT_FILE_TYPE_CODE , AbstractServiceTest . FORMAT_VERSION , AbstractServiceTest . NAMESPACE , AbstractServiceTest . BDEF_NAME_2 , AbstractServiceTest . FORMAT_USAGE_CODE_2 , AbstractServiceTest . FORMAT_FILE_TYPE_CODE_2 , AbstractServiceTest . FORMAT_VERSION_2 , AbstractServiceTest . FILE_NAME ) ; }
public String pullRequestUrl ( String account , String collection , String repoId , String pullRequest ) { Objects . requireNonNull ( repoId , STR_ ) ; Objects . requireNonNull ( pullRequest , STR_ ) ; return getTeamBaseUrl ( account , collection ) + format ( PULL_REQUEST , repoId , pullRequest ) + getApiVersion ( ) ; }
protected void addValuePropertyDescriptor ( Object object ) { itemPropertyDescriptors . add ( createItemPropertyDescriptor ( ( ( ComposeableAdapterFactory ) adapterFactory ) . getRootAdapterFactory ( ) , getResourceLocator ( ) , getString ( STR_ ) , getString ( STR_ , STR_ , STR_ ) , TypesPackage . Literals . TYPE_CONSTRAINT__VALUE , BOOL_ , BOOL_ , BOOL_ , ItemPropertyDescriptor . GENERIC_VALUE_IMAGE , null , null ) ) ; }
static void putTarget ( int typeRef , TypePath typePath , ByteVector out ) { switch ( typeRef > > > NUM_ ) { case NUM_ : case NUM_ : case NUM_ : out . putShort ( typeRef > > > NUM_ ) ; break ; case NUM_ : case NUM_ : case NUM_ : out . putByte ( typeRef > > > NUM_ ) ; break ; case NUM_ : case NUM_ : case NUM_ : case NUM_ : case NUM_ : out . putInt ( typeRef ) ; break ; default : out . put12 ( typeRef > > > NUM_ , ( typeRef & NUM_ ) > > NUM_ ) ; break ; } if ( typePath == null ) { out . putByte ( NUM_ ) ; } else { int length = typePath . b [ typePath . offset ] * NUM_ + NUM_ ; out . putByteArray ( typePath . b , typePath . offset , length ) ; } }
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( createElementNS01 . class , args ) ; }
private String queryCachedNetworkVip ( ) { String networkVipToReturn = null ; if ( _cachedNetworkVip == null ) { _log . debug ( STR_ ) ; PropertyInfo props = null ; try { props = _coordinator . getPropertyInfo ( ) ; } catch ( Exception e ) { _log . error ( STR_ , e ) ; return null ; } if ( props == null ) { _log . error ( STR_ ) ; return null ; } networkVipToReturn = props . getProperty ( OVF_NETWORK_VIP ) ; synchronized ( this ) { _cachedNetworkVip = networkVipToReturn ; } if ( networkVipToReturn == null || networkVipToReturn . equals ( STR_ ) ) { _log . debug ( STR_ ) ; return null ; } } else { _log . debug ( STR_ , _cachedNetworkVip ) ; networkVipToReturn = _cachedNetworkVip ; } return networkVipToReturn ; }
public static byte [ ] extractBinaryHttpEntityBody ( HttpContent httpContent ) { return BrowserMobHttpUtil . extractReadableBytes ( httpContent . content ( ) ) ; }
boolean fire ( Player player , Sentence sentence , Entity entity ) ;
public static String separatorsToUnix ( String path ) { if ( path == null || path . indexOf ( WINDOWS_SEPARATOR ) == - NUM_ ) { return path ; } return path . replace ( WINDOWS_SEPARATOR , UNIX_SEPARATOR ) ; }
OutputStream openOutputStream ( ) throws IOException ;
public ImportTask ( T importItem ) { super ( ) ; if ( importItem == null ) { throw new java . lang . ExceptionInInitializerError ( STR_ ) ; } this . importItem = importItem ; notifyCreated ( ) ; }
protected final int computeHashCode ( ) { int hash = NUM_ ; hash = hash * NUM_ + this . collidable . hashCode ( ) ; hash = hash * NUM_ + this . fixture . hashCode ( ) ; return hash ; }
ActionFuture < SuggestResponse > suggest ( SuggestRequest request ) ;
private static void addGroup ( String testName ) { String testNameSplit [ ] = testName . replace ( STR_ , STR_ ) . split ( STR_ ) ; String group = testNameSplit [ NUM_ ] ; for ( int i = NUM_ ; i < LEVEL ; i ++ ) { group = group + STR_ + testNameSplit [ i ] ; } if ( ! groups . contains ( group ) ) { groups . add ( group ) ; groupNames . put ( group , getDisplayGroupName ( group ) ) ; } }
void removeAutopadding ( ) { unset ( ) ; for ( int counter = springs . size ( ) - NUM_ ; counter >= NUM_ ; counter -- ) { Spring spring = springs . get ( counter ) ; if ( spring instanceof AutoPreferredGapSpring ) { if ( ( ( AutoPreferredGapSpring ) spring ) . getUserCreated ( ) ) { ( ( AutoPreferredGapSpring ) spring ) . reset ( ) ; } else { springs . remove ( counter ) ; } } else if ( spring instanceof Group ) { ( ( Group ) spring ) . removeAutopadding ( ) ; } } }
private void movePrefixedSettingsToNewTable ( SQLiteDatabase db , String sourceTable , String destTable , String [ ] prefixesToMove ) { SQLiteStatement insertStmt = null ; SQLiteStatement deleteStmt = null ; db . beginTransaction ( ) ; try { insertStmt = db . compileStatement ( STR_ + destTable + STR_ + sourceTable + STR_ ) ; deleteStmt = db . compileStatement ( STR_ + sourceTable + STR_ ) ; for ( String prefix : prefixesToMove ) { insertStmt . bindLong ( NUM_ , prefix . length ( ) + NUM_ ) ; insertStmt . bindString ( NUM_ , prefix ) ; insertStmt . execute ( ) ; deleteStmt . bindLong ( NUM_ , prefix . length ( ) + NUM_ ) ; deleteStmt . bindString ( NUM_ , prefix ) ; deleteStmt . execute ( ) ; } db . setTransactionSuccessful ( ) ; } finally { db . endTransaction ( ) ; if ( insertStmt != null ) { insertStmt . close ( ) ; } if ( deleteStmt != null ) { deleteStmt . close ( ) ; } } }
protected void handleALL_SESSION_DATA ( SessionMessage msg , Member sender ) throws ClassNotFoundException , IOException { counterReceive_EVT_ALL_SESSION_DATA ++ ; if ( log . isDebugEnabled ( ) ) { log . debug ( sm . getString ( STR_ , getName ( ) ) ) ; } byte [ ] data = msg . getSession ( ) ; deserializeSessions ( data ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( sm . getString ( STR_ , getName ( ) ) ) ; } }
private ByteString evaluateResponse ( ByteString response ) throws SaslException { if ( response == null ) { response = ByteString . empty ( ) ; } final byte [ ] evalResponse = saslServer . evaluateResponse ( response . toByteArray ( ) ) ; if ( evalResponse == null ) { return ByteString . empty ( ) ; } else { return ByteString . wrap ( evalResponse ) ; } }
void ignore ( Throwable exception ) ;
String attributeValue ( QName qName , String defaultValue ) ;
public CBDialogBuilder showCancelButton ( boolean showCancelButton ) { this . showCancelButton = showCancelButton ; return this ; }
public static String xml ( Object o ) { return Gestion . getXStream ( ) . toXML ( o ) ; }
public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Element firstNode ; Node testNode ; NamedNodeMap attributes ; Attr domesticAttr ; Attr setAttr ; Node setNode ; doc = ( Document ) load ( STR_ , BOOL_ ) ; elementList = doc . getElementsByTagName ( STR_ ) ; firstNode = ( Element ) elementList . item ( NUM_ ) ; domesticAttr = doc . createAttribute ( STR_ ) ; domesticAttr . setValue ( STR_ ) ; setAttr = firstNode . setAttributeNode ( domesticAttr ) ; elementList = doc . getElementsByTagName ( STR_ ) ; testNode = elementList . item ( NUM_ ) ; attributes = testNode . getAttributes ( ) ; { boolean success = BOOL_ ; try { setNode = attributes . setNamedItem ( domesticAttr ) ; } catch ( DOMException ex ) { success = ( ex . code == DOMException . INUSE_ATTRIBUTE_ERR ) ; } assertTrue ( STR_ , success ) ; } }
public boolean encryptData ( ) { return encryptData ; }
public static void showToast ( Context context , String message ) { Toast . makeText ( context , message , Toast . LENGTH_SHORT ) . show ( ) ; }
protected PreparedStatement prepareBatchedInsertSQL ( MySQLConnection localConn , int numBatches ) throws SQLException { synchronized ( checkClosed ( ) . getConnectionMutex ( ) ) { PreparedStatement pstmt = new PreparedStatement ( localConn , STR_ + this . originalSql , this . currentCatalog , this . parseInfo . getParseInfoForBatch ( numBatches ) ) ; pstmt . setRetrieveGeneratedKeys ( this . retrieveGeneratedKeys ) ; pstmt . rewrittenBatchSize = numBatches ; return pstmt ; } }
double [ ] [ ] generateInstances ( int [ ] indices ) throws Exception ;
protected IdCachedServicesDecorator ( IdCachedServices delegate ) { super ( delegate ) ; }
public XMLString concat ( String str ) { return new XMLStringDefault ( m_str . concat ( str ) ) ; }
public static native void logEchoAll ( JavaScriptObject value ) ;
public Memory memory ( ) { return memory ; }
public void onStart ( Interaction iact ) { }
public int hashCode ( ) { return NUM_ ; }
public IllegalAuthConfTypeException ( String message ) { super ( message ) ; }
public Boolean isEnabled ( ) { return enabled ; }
String transform ( String message ) ;
public void addListener ( final ITagManagerListener listener ) { m_listeners . addListener ( listener ) ; }
private void showFeedback ( String message ) { if ( myHost != null ) { myHost . showFeedback ( message ) ; } else { System . out . println ( message ) ; } }
public String addResourceLink ( String resourceLinkName , String type ) throws MalformedObjectNameException { NamingResourcesImpl nresources = ( NamingResourcesImpl ) this . resource ; if ( nresources == null ) { return null ; } ContextResourceLink resourceLink = nresources . findResourceLink ( resourceLinkName ) ; if ( resourceLink != null ) { throw new IllegalArgumentException ( STR_ + resourceLinkName + STR_ ) ; } resourceLink = new ContextResourceLink ( ) ; resourceLink . setName ( resourceLinkName ) ; resourceLink . setType ( type ) ; nresources . addResourceLink ( resourceLink ) ; ManagedBean managed = registry . findManagedBean ( STR_ ) ; ObjectName oname = MBeanUtils . createObjectName ( managed . getDomain ( ) , resourceLink ) ; return ( oname . toString ( ) ) ; }
public static int decodeHighBits ( long l ) { long key = l & NUM_ ; key >>= NUM_ ; return ( int ) key ; }
public LBMonitor updateMonitor ( LBMonitor monitor ) ;
private void configureLeftAnimations ( ) { for ( int i = NUM_ ; i < leftItems . size ( ) ; i ++ ) { MenuItem menuItem = leftItems . get ( i ) ; menuItem . setNextItem ( null ) ; if ( i + NUM_ != leftItems . size ( ) ) menuItem . setNextItem ( leftItems . get ( i + NUM_ ) ) ; } }
public Double toDouble ( ) { return Double . valueOf ( doubleValue ( ) ) ; }
public DateTimeField minuteOfDay ( ) { return UnsupportedDateTimeField . getInstance ( DateTimeFieldType . minuteOfDay ( ) , minutes ( ) ) ; }
public void invalidate ( String group ) { Iterator items = items ( group , ValidatedPredicate . TRUE ) ; while ( items . hasNext ( ) ) { VisualItem item = ( VisualItem ) items . next ( ) ; item . setValidated ( BOOL_ ) ; } }
public abstract boolean isAllowed ( ModifyDNOperation modifyDNOperation ) throws DirectoryException ;
protected void flashIcon ( ) { isIconVisible = ! isIconVisible ; repaint ( ) ; }
private List < ExecutionImpl > findProcesses ( CnATreeElement leftElement , CnATreeElement controlGroup ) { String value = GsmService . createProcessId ( leftElement , controlGroup ) ; return searchProcessByVariable ( IGenericProcess . VAR_PROCESS_ID , value ) ; }
private void accountForTimeSpentWorking ( long nanosSpentWorking , long nanosSpentSleeping ) { this . samplerStats . tookSample ( nanosSpentWorking , getStatisticsManager ( ) . getStatisticsCount ( ) , nanosSpentSleeping ) ; }
void update ( String name , long blockId , int blockOffset , byte [ ] buffer , int offset , int length ) ;
public static double rem ( double x , double y ) { double tmp = x / y ; if ( MathLib . abs ( tmp ) <= Long . MAX_VALUE ) return x - MathLib . round ( tmp ) * y ; else return NaN ; }
private static boolean isContinuationChar ( byte b ) { return - NUM_ <= b && b <= - NUM_ ; }
public DeleteRepositoryRequestBuilder ( ElasticsearchClient client , DeleteRepositoryAction action ) { super ( client , action , new DeleteRepositoryRequest ( ) ) ; }
protected void createContextMenuFor ( StructuredViewer viewer ) { MenuManager contextMenu = new MenuManager ( STR_ ) ; contextMenu . add ( new Separator ( STR_ ) ) ; contextMenu . setRemoveAllWhenShown ( BOOL_ ) ; contextMenu . addMenuListener ( this ) ; Menu menu = contextMenu . createContextMenu ( viewer . getControl ( ) ) ; viewer . getControl ( ) . setMenu ( menu ) ; getSite ( ) . registerContextMenu ( contextMenu , new UnwrappingSelectionProvider ( viewer ) ) ; int dndOperations = DND . DROP_COPY | DND . DROP_MOVE | DND . DROP_LINK ; Transfer [ ] transfers = new Transfer [ ] { LocalTransfer . getInstance ( ) , LocalSelectionTransfer . getTransfer ( ) , FileTransfer . getInstance ( ) } ; viewer . addDragSupport ( dndOperations , transfers , new ViewerDragAdapter ( viewer ) ) ; viewer . addDropSupport ( dndOperations , transfers , new EditingDomainViewerDropAdapter ( editingDomain , viewer ) ) ; }
public final void readFully ( byte [ ] b , int off , int len ) throws java . io . IOException { return ; }
public boolean isMXBean ( ) { return isMXBean ; }
public Ping ( ) { this . hasNonce = BOOL_ ; }
public LinkedList < Patch > patch_deepCopy ( LinkedList < Patch > patches ) { LinkedList < Patch > patchesCopy = new LinkedList < Patch > ( ) ; for ( Patch aPatch : patches ) { Patch patchCopy = new Patch ( ) ; for ( Diff aDiff : aPatch . diffs ) { Diff diffCopy = new Diff ( aDiff . operation , aDiff . text ) ; patchCopy . diffs . add ( diffCopy ) ; } patchCopy . start1 = aPatch . start1 ; patchCopy . start2 = aPatch . start2 ; patchCopy . length1 = aPatch . length1 ; patchCopy . length2 = aPatch . length2 ; patchesCopy . add ( patchCopy ) ; } return patchesCopy ; }
public Closure < V > rcurry ( final Object argument ) { return rcurry ( new Object [ ] { argument } ) ; }
public static final double sum ( double [ ] a ) { double sum = NUM_ ; for ( int i = NUM_ ; i < a . length ; ++ i ) { sum += a [ i ] ; } return sum ; }
public boolean isVisible ( SootClass from , ClassMember m ) { from . checkLevel ( SootClass . HIERARCHY ) ; m . getDeclaringClass ( ) . checkLevel ( SootClass . HIERARCHY ) ; if ( ! isVisible ( from , m . getDeclaringClass ( ) ) ) return BOOL_ ; if ( m . isPublic ( ) ) return BOOL_ ; if ( m . isPrivate ( ) ) { return from . equals ( m . getDeclaringClass ( ) ) ; } if ( m . isProtected ( ) ) { return isClassSubclassOfIncluding ( from , m . getDeclaringClass ( ) ) ; } return from . getJavaPackageName ( ) . equals ( m . getDeclaringClass ( ) . getJavaPackageName ( ) ) ; }
public static < S extends HasDragStopHandlers & HasHandlers > void fire ( S source , JavaScriptObject jsObj ) { if ( TYPE != null ) { DragStop event = new DragStop ( jsObj ) ; source . fireEvent ( event ) ; } }
public Uri build ( ) { if ( opaquePart != null ) { if ( this . scheme == null ) { throw new UnsupportedOperationException ( STR_ ) ; } return new OpaqueUri ( scheme , opaquePart , fragment ) ; } else { PathPart path = this . path ; if ( path == null || path == PathPart . NULL ) { path = PathPart . EMPTY ; } else { if ( hasSchemeOrAuthority ( ) ) { path = PathPart . makeAbsolute ( path ) ; } } return new HierarchicalUri ( scheme , authority , path , query , fragment ) ; } }
public static List propertyDescriptors ( int apiLevel ) { return PROPERTY_DESCRIPTORS ; }
protected void sequence_TStructMemberList_ThisTypeRefStructural_TypeRef_TypeRefWithoutModifiers ( ISerializationContext context , ThisTypeRefStructural semanticObject ) { genericSequencer . createSequence ( context , semanticObject ) ; }
public void dismissNoBluetoothNotification ( Context context ) { if ( MurmurService . CONSOLIDATE_ERRORS ) { ServiceWatchDog . getInstance ( ) . notifyHardwareStateChanged ( ) ; return ; } int notificationId = R . string . notification_no_bluetooth_message ; NotificationManager mNotificationManager = ( NotificationManager ) context . getSystemService ( Context . NOTIFICATION_SERVICE ) ; mNotificationManager . cancel ( notificationId ) ; }
public static double p ( double Y [ ] [ ] , int j , int k ) { int N = Y . length ; double p = NUM_ ; for ( int i = NUM_ ; i < N ; i ++ ) { if ( ( int ) Math . round ( Y [ i ] [ j ] ) == k ) { p += NUM_ ; } } return p / N ; }
boolean disableWebViewCache ( ) ;
Undoable onDismiss ( ListView listView , int position ) ;
public Object call ( String key ) { return call ( key , new Object [ ] { } ) ; }
public static boolean isMarkup ( int c ) { return c == STR_ || c == STR_ || c == STR_ ; }
public RestoreCompletionNotification ( URI uri ) { super ( uri ) ; }
public void removeNode ( UUID nodeId ) ;
boolean isActive ( ) ;
void onChartDoubleTapped ( MotionEvent me ) ;
public void addRangeRestriction ( String ColumnName , Object Code , Object Code_to ) { Restriction r = new Restriction ( ColumnName , Code , Code_to , null , null , null , BOOL_ , NUM_ ) ; m_list . add ( r ) ; }
protected void validate_return ( StorageCapability [ ] param ) { }
public void resumeCQ ( int cqState , ServerCQ cQuery ) ;
public boolean hasHadResponseDelivered ( ) { return mResponseDelivered ; }
public CustomSwitchPreference ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
private IMAPFolder reopenFolder ( ) throws MessagingException { if ( store == null || ! store . isConnected ( ) ) { store = connect ( ) ; } IMAPFolder folder = ( IMAPFolder ) store . getFolder ( Configuration . root ( ) . getString ( IMAP_FOLDER_KEY , IMAP_FOLDER_DEFAULT ) ) ; folder . open ( Folder . READ_ONLY ) ; return folder ; }
private void addTextToString ( String text , StringBuilder stringBuilder ) { if ( stringBuilder . length ( ) > NUM_ ) { stringBuilder . append ( STR_ ) ; } stringBuilder . append ( text ) ; }
private static void checkNotNull ( Object v ) { if ( v == null ) throw new NullPointerException ( ) ; }
void declare ( Fields fields ) ;
public < T > Iterator < T > readValuesAs ( TypeReference < ? > valueTypeRef ) throws IOException , JsonProcessingException { ObjectCodec codec = getCodec ( ) ; if ( codec == null ) { throw new IllegalStateException ( STR_ ) ; } return codec . readValues ( this , valueTypeRef ) ; }
private void computeHandlerLiveSet ( ) { if ( ir . getHandlerLivenessComputed ( ) && currentBlock . hasExceptionHandlers ( ) ) { Enumeration < BasicBlock > e = currentBlock . getExceptionalOut ( ) ; while ( e . hasMoreElements ( ) ) { ExceptionHandlerBasicBlock handlerBlock = ( ExceptionHandlerBasicBlock ) e . nextElement ( ) ; handlerLiveSet . add ( handlerBlock . getLiveSet ( ) ) ; } } }
public com . sun . identity . saml2 . jaxb . metadata . XACMLPDPDescriptorType createXACMLPDPDescriptorType ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . saml2 . jaxb . metadata . impl . XACMLPDPDescriptorTypeImpl ( ) ; }
public abstract Object clone ( ) ;
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( textindexsizeerrnegativeoffset . class , args ) ; }
public IgniteInternalFuture < ? > awaitAckAsync ( UUID nodeId ) { TxFinishSync sync = nodeMap . get ( nodeId ) ; if ( sync == null ) return null ; return sync . awaitAckAsync ( ) ; }
public PlaDirection direction ( ) { return line_dir ; }
public JpegReader ( byte [ ] data ) { _data = data ; }
public static ComputeState provisionMachine ( VerificationHost host , ComputeState vmState , boolean isMock , List < String > instancesToCleanUp ) throws InterruptedException , TimeoutException , Throwable { return provisionMachine ( host , null , vmState , isMock , instancesToCleanUp ) ; }
public static boolean isEmpty ( Object o ) { return ObjectType . isEmpty ( o ) ; }
public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stun_END_ME_TO_B ( String skilltarget ) { return new SM_SYSTEM_MESSAGE ( NUM_ , skilltarget ) ; }
void addFieldToClassMembers ( Node classMembers , Node field ) { for ( Node n : classMembers . children ( ) ) { if ( n . isMemberFunctionDef ( ) ) { classMembers . addChildBefore ( field , n ) ; return ; } } classMembers . addChildToBack ( field ) ; }
public boolean isCapturedViewUnder ( int x , int y ) { return isViewUnder ( mCapturedView , x , y ) ; }
protected boolean deselectColinearAttributes ( boolean [ ] selectedAttributes , double [ ] coefficients ) { double maxSC = NUM_ ; int maxAttr = - NUM_ , coeff = NUM_ ; for ( int i = NUM_ ; i < selectedAttributes . length ; i ++ ) { if ( selectedAttributes [ i ] ) { double SC = Math . abs ( coefficients [ coeff ] * m_StdDevs [ i ] / m_ClassStdDev ) ; if ( SC > maxSC ) { maxSC = SC ; maxAttr = i ; } coeff ++ ; } } if ( maxAttr >= NUM_ ) { selectedAttributes [ maxAttr ] = BOOL_ ; if ( m_Debug ) { System . out . println ( STR_ + ( maxAttr + NUM_ ) + STR_ + maxSC ) ; } return BOOL_ ; } return BOOL_ ; }
public static double normalizeZero ( double value ) { return value == NUM_ ? NUM_ : value ; }
public static SandboxProgram pass ( SandboxProgram inst , String program , Terminal terminal , ProgramInstance instance , String args , boolean threaded , Consumer < SandboxProgram > poolHook ) { inst . restricted = BOOL_ ; inst . contextTerminal = terminal ; instance . interpreted = inst ; inst . runRaw ( instance . stdout , instance . stdin , args , terminal . getComputer ( ) , instance , program , threaded , poolHook ) ; return inst ; }
public void afterLast ( ) throws GenericEntityException { try { resultSet . afterLast ( ) ; } catch ( SQLException e ) { if ( ! closed ) { this . close ( ) ; Debug . logWarning ( STR_ + e . toString ( ) , module ) ; } throw new GenericEntityException ( STR_ , e ) ; } }
public static Bound fromQuery ( String query ) { return new Bound ( ) . fromQuery ( query ) ; }
public static GankFragment newInstance ( int year , int month , int day ) { GankFragment fragment = new GankFragment ( ) ; Bundle args = new Bundle ( ) ; args . putInt ( ARG_YEAR , year ) ; args . putInt ( ARG_MONTH , month ) ; args . putInt ( ARG_DAY , day ) ; fragment . setArguments ( args ) ; return fragment ; }
public void add ( HistoryReference href ) { synchronized ( hrefList ) { hrefList . add ( href ) ; fireTableRowsInserted ( hrefList . size ( ) - NUM_ , hrefList . size ( ) - NUM_ ) ; } }
void encode ( ArithEncoder encoder , int symbol ) ;
public abstract void init ( Bundle savedInstanceState ) ;
public void testSetPageAuditExecutionListMax ( ) { System . out . println ( STR_ ) ; AuditServiceThreadQueueImpl instance = new AuditServiceThreadQueueImpl ( ) ; int pageAuditExecutionListMax = NUM_ ; instance . setPageAuditExecutionListMax ( pageAuditExecutionListMax ) ; assertEquals ( pageAuditExecutionListMax , instance . getPageAuditExecutionListMax ( ) ) ; }
protected void sendNow ( String entityName , int cloudSimTag ) { send ( entityName , NUM_ , cloudSimTag , null ) ; }
public void reset ( ) { clearCaches ( ) ; }
public static < T , D extends Number > D addAndGet ( GigaSpace gigaSpace , IdQuery < T > idQuery , String path , D delta ) { return addAndGet ( gigaSpace , idQuery , path , delta , ChangeModifiers . NONE , NUM_ , TimeUnit . MILLISECONDS ) ; }
public int createHeaderHash ( ) { StringBuilder s = new StringBuilder ( ) ; s . append ( this . contentType ) ; s . append ( STR_ ) ; for ( Argument arg : arguments ) { s . append ( arg . getType ( ) ) ; s . append ( STR_ ) ; s . append ( arg . getName ( ) ) ; s . append ( STR_ ) ; } return s . toString ( ) . hashCode ( ) ; }
public void addReferralPrivilege ( ReferralPrivilege referralPrivilege ) { referralPrivileges . add ( referralPrivilege ) ; }
public boolean isSubscribable ( ) throws AMException , SSOException { return getBooleanAttribute ( SUBSCRIBABLE_ATTRIBUTE ) ; }
private void calculateColor ( int coord ) { coord = coord - mBarPointerHaloRadius ; if ( coord < NUM_ ) { coord = NUM_ ; } else if ( coord > mBarLength ) { coord = mBarLength ; } mColor = Color . HSVToColor ( new float [ ] { mHSVColor [ NUM_ ] , ( mPosToSatFactor * coord ) , NUM_ } ) ; }
public void removePeopleContainerRule ( Guid guid , String filter ) throws UMSException { PCMappingTable mt = PCMappingTable . getPCMappingTable ( this ) ; mt . removeRule ( guid , filter ) ; }
public static _Fields findByThriftIdOrThrow ( int fieldId ) { _Fields fields = findByThriftId ( fieldId ) ; if ( fields == null ) throw new IllegalArgumentException ( STR_ + fieldId + STR_ ) ; return fields ; }
public static Timestamp stringToTimeStamp ( String dateTimeString , String dateTimeFormat , TimeZone tz , Locale locale ) throws ParseException { DateFormat dateFormat = toDateTimeFormat ( dateTimeFormat , tz , locale ) ; Date parsedDate = dateFormat . parse ( dateTimeString ) ; return new Timestamp ( parsedDate . getTime ( ) ) ; }
public LabelValueComparator ( final Locale locale ) { c = Collator . getInstance ( locale ) ; }
public int deleteById ( DatabaseConnection databaseConnection , ID id , ObjectCache objectCache ) throws SQLException { if ( mappedDelete == null ) { mappedDelete = MappedDelete . build ( databaseType , tableInfo ) ; } return mappedDelete . deleteById ( databaseConnection , id , objectCache ) ; }
NodeRenderer create ( HtmlNodeRendererContext context ) ;
public WeightedRandomChoice ( double weight ) { this . weight = weight ; }
private void upgradeCameraSettingsFiles ( SettingsManager settingsManager , Context context ) { String [ ] cameraIds = context . getResources ( ) . getStringArray ( R . array . camera_id_entryvalues ) ; for ( int i = NUM_ ; i < cameraIds . length ; i ++ ) { SharedPreferences oldCameraPreferences = settingsManager . openPreferences ( OLD_CAMERA_PREFERENCES_PREFIX + cameraIds [ i ] ) ; SharedPreferences newCameraPreferences = settingsManager . openPreferences ( SettingsManager . getCameraSettingScope ( cameraIds [ i ] ) ) ; copyPreferences ( oldCameraPreferences , newCameraPreferences ) ; } }
public static Charset toCharset ( final Charset charset ) { return charset == null ? Charset . defaultCharset ( ) : charset ; }
public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = STR_ + ( ifExists ? STR_ : STR_ ) + STR_ ; db . execSQL ( sql ) ; }
public static int deserializeInt ( byte [ ] buffer ) { Preconditions . checkArgument ( buffer . length == Type . INTEGER . getByteSize ( ) ) ; return deserializeInt ( buffer , new MutableInt ( NUM_ ) ) ; }
public void rollbackToSavepoint ( String name ) { if ( savepoints == null ) { throw DbException . get ( ErrorCode . SAVEPOINT_IS_INVALID_1 , name ) ; } final Savepoint savepoint = savepoints . get ( name ) ; if ( savepoint == null ) { throw DbException . get ( ErrorCode . SAVEPOINT_IS_INVALID_1 , name ) ; } if ( transaction != null ) { transaction . rollbackToSavepoint ( name ) ; } savepoints . remove ( name ) ; }
public static int identifyPid ( ) throws PidUnavailableException { return identifyPid ( ManagementFactory . getRuntimeMXBean ( ) . getName ( ) ) ; }
void deleteDataValues ( OrganisationUnit organisationUnit ) ;
public static void startObservationsAndOrdersSync ( ) { ContentResolver . cancelSync ( getAccount ( ) , Contracts . CONTENT_AUTHORITY ) ; Bundle b = new Bundle ( ) ; b . putBoolean ( ContentResolver . SYNC_EXTRAS_MANUAL , BOOL_ ) ; b . putBoolean ( ContentResolver . SYNC_EXTRAS_EXPEDITED , BOOL_ ) ; b . putBoolean ( SyncPhase . SYNC_OBSERVATIONS . name ( ) , BOOL_ ) ; b . putBoolean ( SyncPhase . SYNC_ORDERS . name ( ) , BOOL_ ) ; LOG . i ( STR_ ) ; ContentResolver . requestSync ( getAccount ( ) , Contracts . CONTENT_AUTHORITY , b ) ; }
synchronized public Event end ( ) { if ( complete ) { throw new IllegalStateException ( ) ; } complete = BOOL_ ; endTime = System . currentTimeMillis ( ) ; if ( startTime == NUM_ ) { startTime = endTime ; } try { sendEvent ( ) ; } catch ( Throwable t ) { log . warn ( t ) ; } return this ; }
public void loadClass ( Class < ? > cls ) { try { classLoader . loadClass ( cls . getName ( ) ) ; } catch ( ClassNotFoundException e ) { LogContext . debug ( STR_ + cls + STR_ ) ; } }
public GTRowBlock ( GTInfo info ) { this . info = info ; this . primaryKey = new ByteArray ( ) ; this . cellBlocks = new ByteArray [ info . colBlocks . length ] ; for ( int i = NUM_ ; i < this . cellBlocks . length ; i ++ ) { this . cellBlocks [ i ] = new ByteArray ( ) ; } }
protected abstract TValue create ( TKey key ) ;
public static int saturate ( int c , float saturation ) { float [ ] hsb = Color . RGBtoHSB ( red ( c ) , green ( c ) , blue ( c ) , null ) ; return ColorLib . hsb ( hsb [ NUM_ ] , saturation , hsb [ NUM_ ] ) ; }
private void addContainerproperties ( ) { container . addContainerProperty ( SPUILabelDefinitions . NAME , String . class , null ) ; container . addContainerProperty ( SPUILabelDefinitions . VAR_CREATED_BY , String . class , null ) ; container . addContainerProperty ( SPUILabelDefinitions . VAR_CREATED_DATE , Date . class , null ) ; container . addContainerProperty ( SPUILabelDefinitions . VAR_LAST_MODIFIED_BY , String . class , null , BOOL_ , BOOL_ ) ; container . addContainerProperty ( SPUILabelDefinitions . VAR_LAST_MODIFIED_DATE , String . class , null , BOOL_ , BOOL_ ) ; container . addContainerProperty ( SPUILabelDefinitions . VAR_TARGET_STATUS , TargetUpdateStatus . class , null ) ; container . addContainerProperty ( SPUILabelDefinitions . VAR_DESC , String . class , STR_ , BOOL_ , BOOL_ ) ; container . addContainerProperty ( ASSIGN_DIST_SET , DistributionSet . class , null , BOOL_ , BOOL_ ) ; container . addContainerProperty ( INSTALL_DIST_SET , DistributionSet . class , null , BOOL_ , BOOL_ ) ; container . addContainerProperty ( SPUILabelDefinitions . ASSIGNED_DISTRIBUTION_NAME_VER , String . class , STR_ ) ; container . addContainerProperty ( SPUILabelDefinitions . INSTALLED_DISTRIBUTION_NAME_VER , String . class , null ) ; }
public void testWriteReadObject ( ) throws Exception { check ( EntityWriteReadObject . class ) ; }
protected void constructHops ( ) { try { dmlTranslator . constructHops ( dmlProgram ) ; } catch ( LanguageException e ) { throw new MLContextException ( STR_ , e ) ; } catch ( ParseException e ) { throw new MLContextException ( STR_ , e ) ; } }
default String disassembleInstalledCode ( CodeCacheProvider codeCache , CompilationResult compResult , InstalledCode installedCode ) { return null ; }
public MessageBuilder appendMention ( TextChannel channel ) { builder . append ( STR_ ) . append ( channel . getId ( ) ) . append ( STR_ ) ; mentionedTextChannels . add ( channel ) ; return this ; }
public static WeightEvaluationQuery makeWeightEvaluationQuery ( DruidAggregationQuery < ? > query ) { DruidAggregationQuery < ? > innerQuery = query . getInnermostQuery ( ) ; int weight = Utils . getSubsetByType ( innerQuery . getAggregations ( ) , SketchAggregation . class ) . size ( ) ; return new WeightEvaluationQuery ( innerQuery , weight ) ; }
private void updateOperatorRevenueShare ( Organization org , BigDecimal operatorRevenueShare ) throws NonUniqueBusinessKeyException , ValidationException { if ( operatorRevenueShareIsInvalid ( operatorRevenueShare , org . getGrantedRoleTypes ( ) ) ) { ValidationException validationException = new ValidationException ( ValidationException . ReasonEnum . INVALID_OPERATOR_REVENUE_SHARE , null , null ) ; logger . logError ( Log4jLogger . SYSTEM_LOG , validationException , LogMessageIdentifier . ERROR_UPDATE_ORGANIZATION_FAILED_INVALID_OPERATOR_REVENUE_SHARE ) ; throw validationException ; } else if ( operatorRevenueShare != null ) { if ( org . getOperatorPriceModel ( ) != null ) { org . getOperatorPriceModel ( ) . setRevenueShare ( operatorRevenueShare ) ; } else { createOperatorPriceModel ( org , operatorRevenueShare ) ; } } }
public static boolean useScriptedRandom ( ) { return System . getProperty ( SCRIPTED_RANDOM_PROPERTY ) != null && System . getProperty ( SCRIPTED_RANDOM_PROPERTY ) . trim ( ) . length ( ) > NUM_ ; }
public boolean isPending ( int reqId ) { return getPending ( reqId ) != null ; }
public static boolean isNativeFontSchemeSupported ( ) { return Display . impl . isNativeFontSchemeSupported ( ) ; }
public void send ( ClusterMessage msg ) ;
static boolean compareLocaleNames ( Locale locale , String name ) { return name . equalsIgnoreCase ( locale . toString ( ) ) || name . equalsIgnoreCase ( getName ( locale ) ) ; }
public static void saveIconOnlyPref ( boolean logoutOnExit ) { Preferences prefs = getPrefs ( ) ; prefs . putBoolean ( getCustomUserKey ( ICON_ONLY_KEY ) , logoutOnExit ) ; flushPrefs ( prefs ) ; }
protected float verifyScaleFactorMaxBitmapHeight ( float scaleFactor , int maxBitmapHeight , int srcBitmapHeight ) { float maxBitmapHeightF = maxBitmapHeight ; if ( maxBitmapHeightF == NUM_ ) { maxBitmapHeightF = srcBitmapHeight * DEFAULT_MAX_SCALE_FACTOR ; } if ( ( scaleFactor * srcBitmapHeight ) > maxBitmapHeightF ) { scaleFactor = maxBitmapHeightF / ( float ) srcBitmapHeight ; } return scaleFactor ; }
public School subject ( String subject ) { this . subject = subject ; return this ; }
final boolean completeRelay ( Object r ) { return UNSAFE . compareAndSwapObject ( this , RESULT , null , encodeRelay ( r ) ) ; }
void addToPrototypeCallback ( ) ;
public static boolean isLowSurrogate ( int c ) { return ( NUM_ <= c && c <= NUM_ ) ; }
boolean isActive ( ) ;
public void rotateLeft ( int places , int startIndex , int endIndex ) { for ( int x = NUM_ ; x < places ; x ++ ) { rotateLeft ( startIndex , endIndex ) ; } }
void initializeColumns ( int length ) ;
public synchronized void initializeTextNodeComment ( final INaviTextNode textnode , final List < IComment > comments ) { Preconditions . checkNotNull ( textnode , STR_ ) ; initializeComment ( new TextNodeCommentingStrategy ( textnode ) , comments ) ; }
protected int widestDim ( double [ ] [ ] nodeRanges , double [ ] [ ] universe ) { final int classIdx = m_Instances . classIndex ( ) ; double widest = NUM_ ; int w = - NUM_ ; if ( m_NormalizeNodeWidth ) { for ( int i = NUM_ ; i < nodeRanges . length ; i ++ ) { double newWidest = nodeRanges [ i ] [ WIDTH ] / universe [ i ] [ WIDTH ] ; if ( newWidest > widest ) { if ( i == classIdx ) continue ; widest = newWidest ; w = i ; } } } else { for ( int i = NUM_ ; i < nodeRanges . length ; i ++ ) { if ( nodeRanges [ i ] [ WIDTH ] > widest ) { if ( i == classIdx ) continue ; widest = nodeRanges [ i ] [ WIDTH ] ; w = i ; } } } return w ; }
public TransactionOptimisticException ( String msg ) { super ( msg ) ; }
public DatasetListPanel ( Experiment exp ) { this ( ) ; setExperiment ( exp ) ; }
public BufferedRuleBasedScannerExt ( int size ) { super ( ) ; setBufferSize ( size ) ; }
public static < T > Selector . Builder < T > builder ( List < T > options ) { return new Builder ( options ) ; }
int readEntry ( int position , int offset ) throws ArrayIndexOutOfBoundsException { { if ( offset >= slotsize ) throw new ArrayIndexOutOfBoundsException ( XMLMessages . createXMLMessage ( XMLErrorResources . ER_OFFSET_BIGGER_THAN_SLOT , null ) ) ; position *= slotsize ; int chunkpos = position > > lowbits ; int slotpos = position & lowmask ; int [ ] chunk = chunks . elementAt ( chunkpos ) ; return chunk [ slotpos + offset ] ; } }
public boolean isUpperbound ( ) ;
public void testIdWithTwoSlashes ( ) { String jndiName = STR_ ; String propertyString = DatasourcePropertySet . JNDI_LOCATION + STR_ + jndiName ; DataSource ds = dataSourceConverter . fromPropertyString ( propertyString ) ; assertEquals ( STR_ , ds . getId ( ) ) ; }
public RequestHandle head ( String url , RequestParams params , ResponseHandlerInterface responseHandler ) { return head ( null , url , params , responseHandler ) ; }
void reset ( ) ;
public void addPreDestroyMethod ( String clazz , String method ) ;
public void closeSilent ( Reader r ) ;
protected void onSessionStateChange ( SessionState state , Exception exception ) { }
public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; doc = ( Document ) load ( STR_ , BOOL_ ) ; elementList = doc . getElementsByTagName ( STR_ ) ; assertSize ( STR_ , NUM_ , elementList ) ; }
private < T > String elementToString ( JAXBElement < T > element ) throws Exception { StringWriter writer = new StringWriter ( ) ; marshaller . marshal ( element , writer ) ; return writer . toString ( ) ; }
public static boolean asBoolean ( byte [ ] array ) { return array . length > NUM_ ; }
public static byte [ ] encode ( byte [ ] input , int flags ) { return encode ( input , NUM_ , input . length , flags ) ; }
public PearsonsCorrelation ( ) { super ( ) ; correlationMatrix = null ; nObs = NUM_ ; }
public final Iterator < String > schemesIterator ( ) { return mDataSchemes != null ? mDataSchemes . iterator ( ) : null ; }
private void loop ( final ServerSocket server ) throws IOException { try { this . back . accept ( server . accept ( ) ) ; } catch ( final SocketTimeoutException ex ) { assert ex != null ; } }
public Task createDisk ( String projectId , DiskCreateSpec diskCreateSpec ) throws IOException { String path = String . format ( STR_ , getBasePath ( ) , projectId ) ; HttpResponse response = this . restClient . perform ( RestClient . Method . POST , path , serializeObjectAsJson ( diskCreateSpec ) ) ; this . restClient . checkResponse ( response , HttpStatus . SC_CREATED ) ; return parseTaskFromHttpResponse ( response ) ; }
private void checkGETBodyWithAwait ( final String requestUrl , final String body ) { await ( ) . atMost ( Duration . TEN_SECONDS ) . until ( null , equalTo ( body ) ) ; }
CdmaSmsCbProgramResults ( Parcel in ) { mCategory = in . readInt ( ) ; mLanguage = in . readInt ( ) ; mCategoryResult = in . readInt ( ) ; }
public double [ ] toEulerAngles ( ) { double [ ] ret = new double [ NUM_ ] ; ret [ NUM_ ] = Math . atan2 ( NUM_ * points [ NUM_ ] * getW ( ) - NUM_ * points [ NUM_ ] * points [ NUM_ ] , NUM_ - NUM_ * ( points [ NUM_ ] * points [ NUM_ ] ) - NUM_ * ( points [ NUM_ ] * points [ NUM_ ] ) ) ; ret [ NUM_ ] = Math . asin ( NUM_ * points [ NUM_ ] * points [ NUM_ ] + NUM_ * points [ NUM_ ] * getW ( ) ) ; ret [ NUM_ ] = Math . atan2 ( NUM_ * points [ NUM_ ] * getW ( ) - NUM_ * points [ NUM_ ] * points [ NUM_ ] , NUM_ - NUM_ * ( points [ NUM_ ] * points [ NUM_ ] ) - NUM_ * ( points [ NUM_ ] * points [ NUM_ ] ) ) ; return ret ; }
private float interpolate ( ) { long currTime = System . currentTimeMillis ( ) ; float elapsed = ( currTime - startTime ) / ZOOM_TIME ; elapsed = Math . min ( NUM_ , elapsed ) ; return interpolator . getInterpolation ( elapsed ) ; }
public Builder withAccessKey ( String accessKey ) { config . setAccessKey ( accessKey ) ; return this ; }
private void returnData ( Object ret ) { if ( myHost != null ) { myHost . returnData ( ret ) ; } }
public boolean removeClient ( LaunchConfiguration lc ) { assert ( lc != null ) ; synchronized ( mapLock ) { return ( launchConfigurationToDevModeClient . remove ( lc ) != null ) ; } }
protected static String normalizeUrlEnding ( String link ) { if ( link . indexOf ( STR_ ) > - NUM_ ) link = link . substring ( NUM_ , link . indexOf ( STR_ ) ) ; if ( link . endsWith ( STR_ ) ) link = link . substring ( NUM_ , link . length ( ) - NUM_ ) ; if ( link . endsWith ( STR_ ) ) link = link . substring ( NUM_ , link . length ( ) - NUM_ ) ; return link ; }
public boolean accept ( String aPath ) { boolean ok = BOOL_ ; if ( includes != null ) { ok = BOOL_ ; for ( String include : includes ) { if ( matcher . match ( include , aPath ) ) { ok = BOOL_ ; break ; } } } if ( ok && excludes != null ) { for ( String exclude : excludes ) { if ( matcher . match ( exclude , aPath ) ) { ok = BOOL_ ; break ; } } } return ok ; }
public boolean isSet ( _Fields field ) { if ( field == null ) { throw new IllegalArgumentException ( ) ; } switch ( field ) { case HEADER : return isSetHeader ( ) ; case STORE : return isSetStore ( ) ; case VALUES : return isSetValues ( ) ; case RESPONSE_TO : return isSetResponseTo ( ) ; } throw new IllegalStateException ( ) ; }
public ContainerVm findVmForContainer ( Container container ) { for ( ContainerVm containerVm : getContainerVmList ( ) ) { if ( containerVm . isSuitableForContainer ( container ) ) { return containerVm ; } } return null ; }
public void removeListeners ( String tag ) { }
public ConsecutiveTimeFramer ( ) { super ( ) ; setAlighnmentOffset ( ) ; }
public static long [ ] nandI ( long [ ] v , long [ ] o ) { int i = NUM_ ; for ( ; i < o . length ; i ++ ) { v [ i ] &= ~ o [ i ] ; } return v ; }
public static JTabbedPane createTabbedPane ( int tabPlacement ) { switch ( tabPlacement ) { case JTabbedPane . LEFT : case JTabbedPane . RIGHT : Object textIconGap = UIManager . get ( STR_ ) ; Insets tabInsets = UIManager . getInsets ( STR_ ) ; UIManager . put ( STR_ , NUM_ ) ; UIManager . put ( STR_ , new Insets ( tabInsets . left , tabInsets . top , tabInsets . right , tabInsets . bottom ) ) ; JTabbedPane tabPane = new JTabbedPane ( tabPlacement ) ; UIManager . put ( STR_ , textIconGap ) ; UIManager . put ( STR_ , tabInsets ) ; return tabPane ; default : return new JTabbedPane ( tabPlacement ) ; } }
public Sound ( File file , SoundType type ) throws IOException { super ( file , type ) ; }
public final void quickPop ( int n ) { m_firstFree -= n ; }
public void receiveErrorqueryAssociatedLunsForPort ( java . lang . Exception e ) { }
public void onScanCompleted ( String path , Uri uri ) ;
public static char [ ] encode ( byte [ ] in ) { return encode ( in , NUM_ , in . length ) ; }
protected PhotosSaveMarketAlbumPhotoQuery hash ( String value ) { return unsafeParam ( STR_ , value ) ; }
protected static Color color ( int r , int g , int b ) { return new Color ( r , g , b ) ; }
public static final CefRequestContext createContext ( CefRequestContextHandler handler ) { return CefRequestContext_N . createNative ( handler ) ; }
void onAddSourceClicked ( ) ;
protected ArrayDBIDs affectedkNN ( List < ? extends KNNList > extract , DBIDs remove ) { HashSetModifiableDBIDs ids = DBIDUtil . newHashSet ( ) ; for ( KNNList drps : extract ) { for ( DBIDIter iter = drps . iter ( ) ; iter . valid ( ) ; iter . advance ( ) ) { ids . add ( iter ) ; } } ids . removeDBIDs ( remove ) ; return DBIDUtil . newArray ( ids ) ; }
private void push ( final int type ) { if ( outputStack == null ) { outputStack = new int [ NUM_ ] ; } int n = outputStack . length ; if ( outputStackTop >= n ) { int [ ] t = new int [ Math . max ( outputStackTop + NUM_ , NUM_ * n ) ] ; System . arraycopy ( outputStack , NUM_ , t , NUM_ , n ) ; outputStack = t ; } outputStack [ outputStackTop ++ ] = type ; int top = owner . inputStackTop + outputStackTop ; if ( top > owner . outputStackMax ) { owner . outputStackMax = top ; } }
public Counter createCounter ( ) { return new CounterImpl ( initialValue ) ; }
public static void drawStringUnderlineCharAt ( JComponent c , Graphics g , String text , int underlinedIndex , int x , int y ) { invokeSwingUtilities2StaticMethod ( STR_ , new Class [ ] { JComponent . class , Graphics . class , String . class , int . class , int . class , int . class } , new Object [ ] { c , g , text , underlinedIndex , x , y } ) ; }
PrimitiveSink putString ( CharSequence charSequence , Charset charset ) ;
public Object runSafely ( Catbert . FastStack stack ) throws Exception { return new Long ( Seeker . getInstance ( ) . getUsedVideoDiskspace ( ) ) ; }
public EnumLiteralPropertyAttribute createEnumLiteralPropertyAttribute ( ) { EnumLiteralPropertyAttributeImpl enumLiteralPropertyAttribute = new EnumLiteralPropertyAttributeImpl ( ) ; return enumLiteralPropertyAttribute ; }
public CommonGramsQueryFilter ( CommonGramsFilter input ) { super ( input ) ; }
protected void preorder ( TreeNode < E > root ) { if ( root == null ) return ; System . out . print ( root . element + STR_ ) ; preorder ( root . left ) ; preorder ( root . right ) ; }
public ResponsePacket visit ( SetTransaction request , QuerySession session ) { ResponsePacket response = new ResponsePacket ( ) ; session . setTransaction ( request . getTransaction ( ) ) ; response . setIntResult ( NUM_ ) ; return response ; }
protected static Vector convertToVector ( Object [ ] [ ] anArray ) { if ( anArray == null ) { return null ; } Vector < Vector > v = new Vector < Vector > ( anArray . length ) ; for ( Object [ ] o : anArray ) { v . addElement ( convertToVector ( o ) ) ; } return v ; }
public static InvalidScopeException create ( final String message , final OAuth2Request request ) { final Set < String > responseTypes = Utils . splitResponseType ( request . < String > getParameter ( RESPONSE_TYPE ) ) ; return new InvalidScopeException ( message , Utils . isOAuth2FragmentErrorType ( responseTypes ) ? FRAGMENT : QUERY ) ; }
public void guardMode ( ) { SummonsService . guardMode ( getOwner ( ) ) ; }
DataSet simulateData ( int sampleSize , boolean latentDataSaved ) ;
public boolean isDrawMarkerViewEnabled ( ) { return mDrawMarkerViews ; }
public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case NUM_ : return HEADER ; case NUM_ : return STORE_NAME ; case NUM_ : return KEY ; default : return null ; } }
public com . sun . identity . liberty . ws . common . jaxb . secext . AttributedString createAttributedString ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . liberty . ws . common . jaxb . secext . impl . AttributedStringImpl ( ) ; }
public ElementKindStatsViewer ( Composite parent , int style ) { super ( parent , style ) ; setLayout ( new GridLayout ( ) ) ; Table elementKindTable = new Table ( this , SWT . MULTI | SWT . BORDER | SWT . V_SCROLL ) ; elementKindTable . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , BOOL_ , BOOL_ ) ) ; elementKindTable . setHeaderVisible ( BOOL_ ) ; EditColTableDef . setupTable ( TABLE_DEF , elementKindTable ) ; elementKindViewer = new TableViewer ( elementKindTable ) ; elementKindViewer . setContentProvider ( new ArrayContentProvider ( ) ) ; LabelProvider labelProvider = new LabelProvider ( ) ; elementKindViewer . setLabelProvider ( labelProvider ) ; configSorters ( elementKindTable ) ; setSortColumn ( elementKindTable . getColumn ( NUM_ ) , NUM_ , SWT . DOWN ) ; }
public static List < MatchedEventMap > generateMatchEvents ( MatchedEventMap matchEvent , Object [ ] eventsPerChild , int indexFrom ) { ArrayList < List < MatchedEventMap > > listArray = new ArrayList < List < MatchedEventMap > > ( ) ; int index = NUM_ ; for ( int i = NUM_ ; i < eventsPerChild . length ; i ++ ) { Object eventsChild = eventsPerChild [ i ] ; if ( indexFrom != i && eventsChild != null ) { if ( eventsChild instanceof MatchedEventMap ) { listArray . add ( index ++ , Collections . singletonList ( ( MatchedEventMap ) eventsChild ) ) ; } else { listArray . add ( index ++ , ( List < MatchedEventMap > ) eventsChild ) ; } } } List < MatchedEventMap > results = new ArrayList < MatchedEventMap > ( ) ; generateMatchEvents ( listArray , NUM_ , results , matchEvent ) ; return results ; }
public PdfCanvas curveTo ( double x1 , double y1 , double x2 , double y2 , double x3 , double y3 ) { contentStream . getOutputStream ( ) . writeDouble ( x1 ) . writeSpace ( ) . writeDouble ( y1 ) . writeSpace ( ) . writeDouble ( x2 ) . writeSpace ( ) . writeDouble ( y2 ) . writeSpace ( ) . writeDouble ( x3 ) . writeSpace ( ) . writeDouble ( y3 ) . writeSpace ( ) . writeBytes ( c ) ; return this ; }
public CopyOperation ( File objectFile , File destDir , boolean overwrite ) { super ( objectFile ) ; this . destination = new File ( destDir , objectFile . getName ( ) ) ; this . overwrite = overwrite ; }
public boolean checkDuplicate ( T obj ) { return BOOL_ ; }
void onRideInformationLoaded ( ) ;
public void markAsApplicationClass ( ) { setFlag ( APPLICATION_CLASS , BOOL_ ) ; }
protected void createNode ( DefaultMutableTreeNode top , String title , String info , String content , int lineCount ) { DefaultMutableTreeNode threadInfo = null ; threadInfo = new DefaultMutableTreeNode ( new ThreadInfo ( title , info , content , lineCount , getThreadTokens ( title ) ) ) ; top . add ( threadInfo ) ; }
private KafkaIO ( ) { }
public boolean isClosed ( ) { return journalWriter == null ; }
public void addPortal ( Portal portal ) { String name = getDisplayName ( ) ; if ( ! name . equals ( portal . getFromBlockName ( ) ) && ! name . equals ( portal . getToBlockName ( ) ) ) { log . warn ( portal . toString ( ) + STR_ + getDisplayName ( ) ) ; return ; } String pName = portal . getName ( ) ; if ( pName != null ) { for ( int i = NUM_ ; i < _portals . size ( ) ; i ++ ) { if ( pName . equals ( _portals . get ( i ) . getName ( ) ) ) { return ; } } } int oldSize = _portals . size ( ) ; _portals . add ( portal ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( STR_ + portal . getName ( ) + STR_ + getDisplayName ( ) + STR_ ) ; } firePropertyChange ( STR_ , Integer . valueOf ( oldSize ) , Integer . valueOf ( _portals . size ( ) ) ) ; }
public TopHitsBuilder addSort ( SortBuilder sort ) { sourceBuilder ( ) . sort ( sort ) ; return this ; }
public static int readShort ( byte [ ] bytes ) { return ( ( bytes [ NUM_ ] << NUM_ ) & NUM_ ) | ( bytes [ NUM_ ] & NUM_ ) ; }
public Enumeration listOptions ( ) { Vector newVector = new Vector ( NUM_ ) ; newVector . addElement ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ; newVector . addElement ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ; return newVector . elements ( ) ; }
boolean unbanChatMember ( int userId ) ;
JCNewClass makeNewClass ( Type ctype , List < JCExpression > args ) { JCNewClass tree = make . NewClass ( null , null , make . QualIdent ( ctype . tsym ) , args , null ) ; tree . constructor = rs . resolveConstructor ( make_pos , attrEnv , ctype , TreeInfo . types ( args ) , List . < Type > nil ( ) ) ; tree . type = ctype ; return tree ; }
public Operand popRef ( ) { Operand r = pop ( ) ; if ( VM . VerifyAssertions ) opt_assert ( r . isRef ( ) || r . isAddress ( ) ) ; return r ; }
private java . lang . String registerPrefix ( javax . xml . stream . XMLStreamWriter xmlWriter , java . lang . String namespace ) throws javax . xml . stream . XMLStreamException { java . lang . String prefix = xmlWriter . getPrefix ( namespace ) ; if ( prefix == null ) { prefix = generatePrefix ( namespace ) ; while ( xmlWriter . getNamespaceContext ( ) . getNamespaceURI ( prefix ) != null ) { prefix = org . apache . axis2 . databinding . utils . BeanUtil . getUniquePrefix ( ) ; } xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } return prefix ; }
public void doCancel ( final Tradestrategy tradestrategy ) { try { if ( m_brokerModel . isRealtimeBarsRunning ( tradestrategy ) ) { m_brokerModel . onCancelRealtimeBars ( tradestrategy ) ; this . setStatusBarMessage ( STR_ + tradestrategy . getContract ( ) . getSymbol ( ) , BasePanel . INFORMATION ) ; } if ( tradingdayPanel . isStrategyWorkerRunning ( tradestrategy ) ) { tradingdayPanel . killAllStrategyWorkersForTradestrategy ( tradestrategy ) ; this . setStatusBarMessage ( STR_ + tradestrategy . getContract ( ) . getSymbol ( ) , BasePanel . INFORMATION ) ; } } catch ( Exception ex ) { this . setErrorMessage ( STR_ , ex . getMessage ( ) , ex ) ; } }
protected Object convertToType ( Class type , Object value ) throws Throwable { return value . toString ( ) ; }
protected void checkBackupFileExist ( final String backupTag , final String fullBackupTag ) { File backupFolder = new File ( backupContext . getBackupDir ( ) , backupTag ) ; if ( ! backupFolder . exists ( ) ) { return ; } File backupFile = new File ( backupFolder , fullBackupTag + BackupConstants . COMPRESS_SUFFIX ) ; if ( backupFile . exists ( ) ) { throw BackupException . fatals . backupFileAlreadyExist ( backupFile . getName ( ) ) ; } }
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( attrspecifiedvalueremove . class , args ) ; }
public In ( URL url ) { try { URLConnection site = url . openConnection ( ) ; InputStream is = site . getInputStream ( ) ; scanner = new Scanner ( new BufferedInputStream ( is ) , CHARSET_NAME ) ; scanner . useLocale ( LOCALE ) ; } catch ( IOException ioe ) { System . err . println ( STR_ + url ) ; } }
private boolean checkDisposed ( ) { return composite . isDisposed ( ) ; }
public boolean tryUnlockWrite ( ) { long s ; WNode h ; if ( ( ( s = state ) & WBIT ) != NUM_ ) { state = ( s += WBIT ) == NUM_ ? ORIGIN : s ; if ( ( h = whead ) != null && h . status != NUM_ ) release ( h ) ; return BOOL_ ; } return BOOL_ ; }
public void showError ( Drawable errorImageDrawable , String errorTextTitle , String errorTextContent , String errorButtonText , OnClickListener onClickListener ) { switchState ( ERROR , errorImageDrawable , errorTextTitle , errorTextContent , errorButtonText , onClickListener , Collections . < Integer > emptyList ( ) ) ; }
public Element create ( String prefix , Document doc ) { return new SVGOMCursorElement ( prefix , ( AbstractDocument ) doc ) ; }
public static boolean loadRgbzMetadata ( final Context context , Uri contentUri , Metadata metadata ) { if ( RefocusHelper . isRGBZ ( context , contentUri ) ) { metadata . setHasRgbzData ( BOOL_ ) ; return BOOL_ ; } return BOOL_ ; }
protected void reportReturn ( String methodCall ) { reportAllReturns ( methodCall , STR_ ) ; }
public boolean removed ( ) ;
private int adjustAlpha ( int color , float factor ) { int alpha = Math . round ( Color . alpha ( color ) * factor ) ; int red = Color . red ( color ) ; int green = Color . green ( color ) ; int blue = Color . blue ( color ) ; return Color . argb ( alpha , red , green , blue ) ; }
public SchemaBuilder addMatchingRuleUse ( final String definition , final boolean overwrite ) { return addMatchingRuleUse ( definition , overwrite , null ) ; }
abstract public StringBuilder appendTo ( StringBuilder buf , VectorFieldTypeInformation < BitVector > meta ) ;
private ZonedDateTime resolveOffset ( ZoneOffset offset ) { if ( offset . equals ( this . offset ) == BOOL_ && zone . getRules ( ) . isValidOffset ( dateTime , offset ) ) { return new ZonedDateTime ( dateTime , offset , zone ) ; } return this ; }
public void runAllSlot ( ) { moveToId ( NUM_ ) ; System . out . println ( STR_ + currentSlot + STR_ ) ; while ( isValidSlot ( ) ) { if ( currentSlot % NUM_ == NUM_ ) System . out . print ( currentSlot + STR_ ) ; int flag = ( Integer ) getVal ( currentPos ( ) , INTEGER ) . asJavaVal ( ) ; System . out . print ( flag + STR_ ) ; if ( ( currentSlot + NUM_ ) % NUM_ == NUM_ ) System . out . println ( ) ; currentSlot ++ ; } System . out . println ( STR_ + currentSlot + STR_ ) ; }
protected void addNamePropertyDescriptor ( Object object ) { itemPropertyDescriptors . add ( createItemPropertyDescriptor ( ( ( ComposeableAdapterFactory ) adapterFactory ) . getRootAdapterFactory ( ) , getResourceLocator ( ) , getString ( STR_ ) , getString ( STR_ , STR_ , STR_ ) , EipPackage . Literals . ENDPOINT__NAME , BOOL_ , BOOL_ , BOOL_ , ItemPropertyDescriptor . GENERIC_VALUE_IMAGE , null , null ) ) ; }
public BoundingBox mul ( Matrix4 matrix ) { updateCorners ( ) ; this . inf ( ) ; for ( Vector3 l_pnt : crn ) { l_pnt . mul ( matrix ) ; min . set ( min ( min . x , l_pnt . x ) , min ( min . y , l_pnt . y ) , min ( min . z , l_pnt . z ) ) ; max . set ( max ( max . x , l_pnt . x ) , max ( max . y , l_pnt . y ) , max ( max . z , l_pnt . z ) ) ; } crn_dirty = BOOL_ ; return this . set ( min , max ) ; }
public void testBogusArguments ( ) throws Exception { IllegalArgumentException expected = expectThrows ( IllegalArgumentException . class , null ) ; assertTrue ( expected . getMessage ( ) . contains ( STR_ ) ) ; }
public void resetZoom ( ) { normalizedScale = NUM_ ; fitImageToView ( ) ; }
public static float tan ( float fValue ) { return ( float ) Math . tan ( fValue ) ; }
public void addShape3D ( float x , float y , float z , ArrayList < Coord2D > coordinates , float depth , int shapeTextureWidth , int shapeTextureHeight , int sideTextureWidth , int sideTextureHeight , int direction , float [ ] faceLengths ) { addShape3D ( x , y , z , new Shape2D ( coordinates ) , depth , shapeTextureWidth , shapeTextureHeight , sideTextureWidth , sideTextureHeight , direction , faceLengths ) ; }
private static boolean covers ( String [ ] sup , String [ ] sub ) { outer : for ( int i = sub . length ; i > NUM_ ; ) { String onm = sub [ -- i ] ; String ocls = sub [ -- i ] ; for ( int j = sup . length ; j > NUM_ ; ) { String nm = sup [ -- j ] ; String cls = sup [ -- j ] ; if ( cls . equals ( ocls ) && ( nm == null || ( onm != null && nm . equals ( onm ) ) ) ) { continue outer ; } } return BOOL_ ; } return BOOL_ ; }
public String trueCase ( String input , int inputId ) { Sequence < IString > source = IStrings . tokenize ( input ) ; RichTranslation < IString , String > translation = inferer . translate ( source , inputId , null , new UnconstrainedOutputSpace < IString , String > ( ) , null ) ; return translation . translation . toString ( ) ; }
Object [ ] toArray ( ) ;
public boolean isInvitedVendorsOnly ( ) { Object oo = get_Value ( COLUMNNAME_IsInvitedVendorsOnly ) ; if ( oo != null ) { if ( oo instanceof Boolean ) return ( ( Boolean ) oo ) . booleanValue ( ) ; return STR_ . equals ( oo ) ; } return BOOL_ ; }
protected boolean canUseDiamond ( ) { return fCanUseDiamond ; }
public void stopTag ( boolean close ) throws IOException ;
public int decrementAndGet ( T obj ) { for ( ; ; ) { int current = get ( obj ) ; int next = current - NUM_ ; if ( compareAndSet ( obj , current , next ) ) return next ; } }
public void adr ( Register dst , int imm21 ) { emitInt ( ADR . encoding | PcRelImmOp | rd ( dst ) | getPcRelativeImmEncoding ( imm21 ) ) ; }
final int submit ( T item ) { int stat ; if ( ( stat = offer ( item ) ) == NUM_ ) { putItem = item ; timeout = NUM_ ; putStat = NUM_ ; ForkJoinPool . helpAsyncBlocker ( executor , this ) ; if ( ( stat = putStat ) == NUM_ ) { try { ForkJoinPool . managedBlock ( this ) ; } catch ( InterruptedException ie ) { timeout = INTERRUPTED ; } stat = putStat ; } if ( timeout < NUM_ ) Thread . currentThread ( ) . interrupt ( ) ; } return stat ; }
public byte [ ] toBytecode ( ) throws IOException , CannotCompileException { ByteArrayOutputStream barray = new ByteArrayOutputStream ( ) ; DataOutputStream out = new DataOutputStream ( barray ) ; try { toBytecode ( out ) ; } finally { out . close ( ) ; } return barray . toByteArray ( ) ; }
public static boolean parseParserExtensionStatement ( PsiBuilder b , int l ) { assert b instanceof PerlBuilder ; return ( ( PerlBuilder ) b ) . getPerlParser ( ) . parseStatement ( b , l ) ; }
public abstract void writeHeader ( ) throws IOException ;
public static native Icon icon ( IconOptions options ) ;
public RadialMenuOverlay ( Context context , int menuId , boolean useNodeProvider ) { super ( context , menuId ) ; mMenu = new RadialMenu ( context , this ) ; mMenuView = new RadialMenuView ( context , mMenu , useNodeProvider ) ; setContentView ( mMenuView ) ; }
public static void writeLine ( Object o ) { buffer . append ( o ) . append ( END_LINE ) ; scheduleBufferPrint ( ) ; }
public GroupsGetMembersQuery count ( Integer value ) { return unsafeParam ( STR_ , value ) ; }
public void runTest ( ) throws Throwable { Document doc ; Element rootNode ; Node newChild ; NodeList elementList ; Node refChild ; Node insertedNode ; doc = ( Document ) load ( STR_ , BOOL_ ) ; rootNode = doc . getDocumentElement ( ) ; newChild = doc . createAttribute ( STR_ ) ; elementList = doc . getElementsByTagName ( STR_ ) ; refChild = elementList . item ( NUM_ ) ; { boolean success = BOOL_ ; try { insertedNode = rootNode . insertBefore ( newChild , refChild ) ; } catch ( DOMException ex ) { success = ( ex . code == DOMException . HIERARCHY_REQUEST_ERR ) ; } assertTrue ( STR_ , success ) ; } }
public void insertHandler ( Class < ? > restrictionClass , H handler ) { handlers . add ( new Pair < Class < ? > , H > ( restrictionClass , handler ) ) ; }
void addParsedQuery ( ParserRuleContext currentContext , Query < O > parsedQuery ) { ParserRuleContext parentContext = getParentContextOfType ( currentContext , getAndOrNotContextClasses ( ) ) ; Collection < Query < O > > childrenOfParent = this . childQueries . get ( parentContext ) ; if ( childrenOfParent == null ) { childrenOfParent = new ArrayList < Query < O > > ( ) ; this . childQueries . put ( parentContext , childrenOfParent ) ; } childrenOfParent . add ( parsedQuery ) ; numQueriesParsed ++ ; }
public java . util . Set < Entry < K , V > > entrySet ( ) ;
private void rename ( HttpServletRequest request , File dir , String element , String newName ) { if ( element != null && element . length ( ) > NUM_ ) { File src = new File ( dir , element ) ; File dest = new File ( dir , newName ) ; if ( isAccessible ( request , src ) && isAccessible ( request , dest ) ) { src . renameTo ( dest ) ; } } }
protected native String transform ( long src , long dest , long pointCnt , int offset , double [ ] x , double [ ] y , double [ ] z ) ;
void onSelectionChanged ( TimePeriodSlider slider , int value ) ;
public static < T extends GeneratedMessage > byte [ ] encode ( List < T > items ) throws IOException { ByteArrayOutputStream bytes = new ByteArrayOutputStream ( ) ; CodedOutputStream stream = CodedOutputStream . newInstance ( bytes ) ; for ( T item : items ) { byte [ ] encoded = item . toByteArray ( ) ; stream . writeRawVarint32 ( encoded . length ) ; stream . writeRawBytes ( encoded ) ; } stream . flush ( ) ; return bytes . toByteArray ( ) ; }
protected void createTable ( Table table , StringBuilder ddl , boolean temporary , boolean recreate ) { writeTableCreationStmt ( table , ddl ) ; writeTableCreationStmtEnding ( table , ddl ) ; if ( ! databaseInfo . isIndicesEmbedded ( ) ) { writeExternalIndicesCreateStmt ( table , ddl ) ; } if ( ! databaseInfo . isPrimaryKeyEmbedded ( ) ) { writeExternalPrimaryKeysCreateStmt ( table , table . getPrimaryKeyColumns ( ) , ddl ) ; } }
public static ComponentUI createUI ( JComponent c ) { return new BEScrollBarUI ( ) ; }
public int peekEOFWarningCount ( ) { if ( isEOF ( ) && getDataLength ( ) >= NUM_ ) { return ( byteBuffer [ EOF_WARNING_COUNT_OFFSET ] & NUM_ ) | ( ( byteBuffer [ EOF_WARNING_COUNT_OFFSET + NUM_ ] & NUM_ ) << NUM_ ) ; } return - NUM_ ; }
public static boolean computeBooleanFromString ( String stringBoolean ) { return computeBooleanFromString ( stringBoolean , BOOL_ ) ; }
public static int dialogUnitXAsPixel ( int dluX , Component component ) { return dluX == NUM_ ? NUM_ : getUnitConverter ( ) . dialogUnitXAsPixel ( dluX , component ) ; }
boolean goFromInFlightToRetired ( ) { return compareAndSet ( Status . IN_FLIGHT , Status . RETIRED ) ; }
private DBFactory newDBFactory ( ) { try { return newJniDBFactory ( ) ; } catch ( Exception ex ) { try { return newJavaDBFactory ( ) ; } catch ( Exception ex2 ) { throw new RuntimeException ( STR_ + STR_ + STR_ , ex2 ) ; } } }
public boolean isShowOnlyMinMaxEnabled ( ) { return mShowOnlyMinMax ; }
public void writeMapping ( Writer w ) throws IOException { w . write ( STR_ + ( new Date ( ) ) + STR_ ) ; for ( Integer key : id2name . keySet ( ) ) { w . write ( key + STR_ + id2name . get ( key ) + STR_ ) ; } }
private boolean isLocalId ( String localId ) { if ( ! localId . startsWith ( STR_ ) ) { return BOOL_ ; } for ( int i = NUM_ ; i < localId . length ( ) ; ++ i ) { char c = localId . charAt ( i ) ; if ( ! ( c >= STR_ && c <= STR_ ) && ! ( c >= STR_ && c <= STR_ ) ) { return BOOL_ ; } } return BOOL_ ; }
public void shutdown ( ) throws SQLException { Statement st = connection . createStatement ( ) ; st . execute ( STR_ ) ; connection . close ( ) ; }
public void addImageTask ( ImageTask imageTask , CubeImageView imageView ) { if ( ! mHasBeenAddedToComponentManager ) { CLog . w ( LOG_TAG , STR_ , this ) ; } LoadImageTask runningTask = mLoadWorkList . get ( imageTask . getIdentityKey ( ) ) ; if ( runningTask != null ) { if ( imageView != null ) { if ( DEBUG ) { CLog . d ( LOG_TAG , MSG_ATTACK_TO_RUNNING_TASK , imageTask , runningTask . getImageTask ( ) ) ; } runningTask . getImageTask ( ) . addImageView ( imageView ) ; runningTask . getImageTask ( ) . notifyLoading ( mImageLoadHandler , imageView ) ; } return ; } else { imageTask . addImageView ( imageView ) ; } imageTask . onLoading ( mImageLoadHandler ) ; LoadImageTask loadImageTask = createLoadImageTask ( imageTask ) ; mLoadWorkList . put ( imageTask . getIdentityKey ( ) , loadImageTask ) ; mImageTaskExecutor . execute ( loadImageTask ) ; }
public int sizeInBytes ( ) { return this . attributeBytes ; }
public static char byteToASCII ( final byte b ) { if ( isPrintable ( b ) ) { return ( char ) b ; } return STR_ ; }
public String toASCIIString ( ) { StringBuilder result = new StringBuilder ( ) ; ASCII_ONLY . appendEncoded ( result , toString ( ) ) ; return result . toString ( ) ; }
public void copyTo ( byte [ ] target , int sourceOffset , int targetOffset , int numberToCopy ) { if ( sourceOffset < NUM_ ) { throw new IndexOutOfBoundsException ( STR_ + sourceOffset ) ; } if ( targetOffset < NUM_ ) { throw new IndexOutOfBoundsException ( STR_ + targetOffset ) ; } if ( numberToCopy < NUM_ ) { throw new IndexOutOfBoundsException ( STR_ + numberToCopy ) ; } if ( sourceOffset + numberToCopy > size ( ) ) { throw new IndexOutOfBoundsException ( STR_ + ( sourceOffset + numberToCopy ) ) ; } if ( targetOffset + numberToCopy > target . length ) { throw new IndexOutOfBoundsException ( STR_ + ( targetOffset + numberToCopy ) ) ; } if ( numberToCopy > NUM_ ) { copyToInternal ( target , sourceOffset , targetOffset , numberToCopy ) ; } }
public boolean removeTelegramWriter ( TelegramWriter remWriter ) { return ( telegramWriters . remove ( remWriter ) ) ; }
int extractEnergy ( ItemStack container , int maxExtract , boolean simulate ) ;
public static Scenario loadScenarioFromNetwork ( String networkFile ) { Config config = new Config ( ) ; config . addCoreModules ( ) ; config . network ( ) . setInputFile ( networkFile ) ; Scenario scenario = ScenarioUtils . loadScenario ( config ) ; return scenario ; }
public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_EXP_TO_NEXT_LEVEL ( int num0 ) { return new SM_SYSTEM_MESSAGE ( NUM_ , num0 ) ; }
private int [ ] intPermutation ( int length ) { int [ ] aux = new int [ length ] ; int [ ] result = new int [ length ] ; for ( int i = NUM_ ; i < length ; i ++ ) { result [ i ] = i ; aux [ i ] = Randomness . nextInt ( NUM_ , length - NUM_ ) ; } for ( int i = NUM_ ; i < length ; i ++ ) { for ( int j = i + NUM_ ; j < length ; j ++ ) { if ( aux [ i ] > aux [ j ] ) { int tmp ; tmp = aux [ i ] ; aux [ i ] = aux [ j ] ; aux [ j ] = tmp ; tmp = result [ i ] ; result [ i ] = result [ j ] ; result [ j ] = tmp ; } } } return result ; }
void returnLocal ( Local right ) { ret . clear ( ) ; ret . addAll ( locals . get ( right ) ) ; if ( doCheck ) sanityCheck ( ) ; }
protected void addToPortMap ( IOFSwitch sw , long mac , short vlan , short portVal ) { Map < MacVlanPair , Short > swMap = macVlanToSwitchPortMap . get ( sw ) ; if ( vlan == ( short ) NUM_ ) { vlan = NUM_ ; } if ( swMap == null ) { swMap = Collections . synchronizedMap ( new LRULinkedHashMap < MacVlanPair , Short > ( MAX_MACS_PER_SWITCH ) ) ; macVlanToSwitchPortMap . put ( sw , swMap ) ; } swMap . put ( new MacVlanPair ( mac , vlan ) , portVal ) ; }
public boolean removeListener ( Listener listener ) { return this . listeners . remove ( listener ) ; }
public void stopContinuousQuery ( String queryName ) throws Exception { CqService cqService = cache . getCqService ( ) ; if ( cqService != null ) { Collection < ? extends InternalCqQuery > allCqs = cqService . getAllCqs ( ) ; for ( InternalCqQuery query : allCqs ) { if ( query . getName ( ) . equals ( queryName ) ) { try { query . stop ( ) ; return ; } catch ( CqClosedException e ) { throw new Exception ( e . getMessage ( ) ) ; } catch ( CqException e ) { throw new Exception ( e . getMessage ( ) ) ; } } } } }
public static Reference createReference ( Serializable object ) throws NamingException { return createReference ( object , SerializableObjectFactory . class . getName ( ) ) ; }
public boolean isMidFallAt ( int row , int column ) { if ( row < NUM_ || row > Board . NUM_ROWS || column < NUM_ || column > Board . NUM_COLS ) { return BOOL_ ; } return fallPosition [ row - NUM_ ] [ column - NUM_ ] > NUM_ ; }
public static void sendAcceptance ( InternalDistributedMember recipient , int processorId , DM dm ) { Assert . assertTrue ( recipient != null , STR_ ) ; ManageBucketReplyMessage m = new ManageBucketReplyMessage ( processorId , BOOL_ , BOOL_ ) ; m . setRecipient ( recipient ) ; dm . putOutgoing ( m ) ; }
public static void checkRange ( int row , int column ) { if ( row < NUM_ ) { throw new IllegalArgumentException ( STR_ + ( row - NUM_ ) ) ; } if ( column < NUM_ ) { throw new IllegalArgumentException ( STR_ + ( row - NUM_ ) ) ; } }
protected short parseType ( ) { String typeString = element . getAttributeNS ( null , SVG_TYPE_ATTRIBUTE ) ; if ( typeString . equals ( STR_ ) ) { return SVGTransform . SVG_TRANSFORM_TRANSLATE ; } else if ( typeString . equals ( STR_ ) ) { return SVGTransform . SVG_TRANSFORM_SCALE ; } else if ( typeString . equals ( STR_ ) ) { return SVGTransform . SVG_TRANSFORM_ROTATE ; } else if ( typeString . equals ( STR_ ) ) { return SVGTransform . SVG_TRANSFORM_SKEWX ; } else if ( typeString . equals ( STR_ ) ) { return SVGTransform . SVG_TRANSFORM_SKEWY ; } throw new BridgeException ( ctx , element , ErrorConstants . ERR_ATTRIBUTE_VALUE_MALFORMED , new Object [ ] { SVG_TYPE_ATTRIBUTE , typeString } ) ; }
public int addSorted ( T dl ) ;
public final void removeColumn ( int index ) { if ( index < NUM_ || index >= variables . size ( ) ) { throw new IllegalArgumentException ( STR_ + index ) ; } variables . remove ( index ) ; int [ ] rows = new int [ tetradMatrix . rows ( ) ] ; for ( int i = NUM_ ; i < tetradMatrix . rows ( ) ; i ++ ) { rows [ i ] = i ; } int [ ] cols = new int [ tetradMatrix . columns ( ) - NUM_ ] ; int m = - NUM_ ; for ( int i = NUM_ ; i < tetradMatrix . columns ( ) ; i ++ ) { if ( i != index ) { cols [ ++ m ] = i ; } } tetradMatrix = tetradMatrix . getSelection ( rows , cols ) . copy ( ) ; }
public void disableLocationUpdates ( ) throws android . os . RemoteException ;
public void mouseMoved ( MouseEvent e ) ;
static AnimationStyle mapIntToValue ( int modeInt ) { switch ( modeInt ) { case NUM_ : default : return ROTATE ; case NUM_ : return FLIP ; } }
public static void main ( String [ ] argv ) { runClassifier ( new AttributeSelectedClassifier ( ) , argv ) ; }
public static String toString ( final byte [ ] b , int off , int len ) { if ( b == null ) { return null ; } if ( len == NUM_ ) { return STR_ ; } return new String ( b , off , len , UTF8_CHARSET ) ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public Transportation ( int [ ] sup , int [ ] dem , int [ ] [ ] costs ) { super ( sup , dem , new int [ NUM_ ] [ NUM_ ] , new int [ NUM_ ] , new int [ NUM_ ] , new int [ NUM_ ] [ NUM_ ] , costs ) ; }
public Rectangle modelToView ( JTextComponent tc , int pos ) throws BadLocationException { return modelToView ( tc , pos , Position . Bias . Forward ) ; }
public void appendUnique ( String value ) { if ( ! hasValue ( value ) ) { append ( value ) ; } }
public boolean canClose ( ) { List constraints = dockPanel . getConstraints ( getChildren ( ) ) ; return DockConstraint . canClose ( constraints ) ; }
Union8 < First , Second , Third , Fourth , Fifth , Sixth , Seventh , Eighth > sixth ( Sixth value ) ;
public S2Point ortho ( ) { int k = largestAbsComponent ( ) ; S2Point temp ; if ( k == NUM_ ) { temp = new S2Point ( NUM_ , NUM_ , NUM_ ) ; } else if ( k == NUM_ ) { temp = new S2Point ( NUM_ , NUM_ , NUM_ ) ; } else { temp = new S2Point ( NUM_ , NUM_ , NUM_ ) ; } return S2Point . normalize ( crossProd ( this , temp ) ) ; }
private void initEventTypes ( IoEventType ... eventTypes ) { if ( ( eventTypes == null ) || ( eventTypes . length == NUM_ ) ) { eventTypes = DEFAULT_EVENT_SET ; } this . eventTypes = EnumSet . of ( eventTypes [ NUM_ ] , eventTypes ) ; if ( this . eventTypes . contains ( IoEventType . SESSION_CREATED ) ) { this . eventTypes = null ; throw new IllegalArgumentException ( IoEventType . SESSION_CREATED + STR_ ) ; } }
private void readAndValidateParams ( Params params ) { if ( params . mMustFillScreen ) { double totalFactor = NUM_ ; for ( int i = NUM_ ; i < params . mNumItems ; i ++ ) { if ( params . mOverrideItemScreenSizeFactors . containsKey ( i ) ) { totalFactor += params . mOverrideItemScreenSizeFactors . get ( i ) ; } else { totalFactor += params . mItemScreenSizeFactor ; } } if ( totalFactor < NUM_ ) { throw new IllegalArgumentException ( STR_ + STR_ + params . mNumItems + STR_ + params . mItemScreenSizeFactor + STR_ + STR_ + mScreenHeight ) ; } } mNumItems = params . mNumItems ; mStartingSelectionPosition = params . mStartingSelectionPosition ; mItemScreenSizeFactor = params . mItemScreenSizeFactor ; mOverrideItemScreenSizeFactors . putAll ( params . mOverrideItemScreenSizeFactors ) ; mStackFromBottom = params . mStackFromBottom ; mColumnWidth = params . mColumnWidth ; mNumColumns = params . mNumColumns ; mStretchMode = params . mStretchMode ; mVerticalSpacing = params . mVerticalSpacing ; }
protected boolean disconnectFromNode ( DiscoveryNode node , Channel channel , String reason ) { NodeChannels nodeChannels = connectedNodes . get ( node ) ; if ( nodeChannels != null && nodeChannels . hasChannel ( channel ) ) { connectionLock . acquire ( node . id ( ) ) ; try { nodeChannels = connectedNodes . get ( node ) ; if ( nodeChannels != null && nodeChannels . hasChannel ( channel ) ) { connectedNodes . remove ( node ) ; try { logger . debug ( STR_ , node , reason ) ; nodeChannels . close ( ) ; } finally { logger . trace ( STR_ , node , reason ) ; transportServiceAdapter . raiseNodeDisconnected ( node ) ; } return BOOL_ ; } } finally { connectionLock . release ( node . id ( ) ) ; } } return BOOL_ ; }
static MediaType createApplicationType ( String subtype ) { return create ( APPLICATION_TYPE , subtype ) ; }
void drawLetter ( Graphics g , char letter , int ax , int ay , int aw , int ah , float align , int index ) { String str = formatItemNum ( index , letter ) ; str = isLeftToRight ? str + STR_ : STR_ + str ; FontMetrics fm = SwingUtilities2 . getFontMetrics ( null , g ) ; int stringwidth = SwingUtilities2 . stringWidth ( null , fm , str ) ; int gap = isLeftToRight ? - ( stringwidth + bulletgap ) : ( aw + bulletgap ) ; int x = ax + gap ; int y = Math . max ( ay + fm . getAscent ( ) , ay + ( int ) ( ah * align ) ) ; SwingUtilities2 . drawString ( null , g , str , x , y ) ; }
boolean offerLast ( E e , long timeout , TimeUnit unit ) throws InterruptedException ;
void execute ( SortSpecifier [ ] sortLevels ) ;
public HostAddress ( InetAddress address ) { this . address = address ; }
public ResultSetIterator ( final Statement statement , final ResultSet resultSet ) { this . statement = statement ; this . resultSet = resultSet ; }
public boolean isSetGetRequest ( ) { return this . getRequest != null ; }
public void onDeviceRemoved ( DiscoveryManager manager , ConnectableDevice device ) ;
void delete ( MindmapsGraph graph , Concept concept ) throws IllegalStateException ;
public float translateX ( float x ) { if ( mOverlay . mFacing == CameraSource . CAMERA_FACING_FRONT ) { return mOverlay . getWidth ( ) - scaleX ( x ) ; } else { return scaleX ( x ) ; } }
public ClassPathResource ( ClassLoader classLoader , String mimetype , String path ) { super ( mimetype ) ; this . classLoader = classLoader ; this . path = path ; }
public void search ( String searchString , boolean regexp ) ;
public String toString ( ) { return name ; }
public abstract JavaType withTypeHandler ( Object h ) ;
private static String addDeletedKey ( List < Optional < AccountSshKey > > keys ) { keys . add ( Optional . empty ( ) ) ; return AuthorizedKeys . DELETED_KEY_COMMENT + STR_ ; }
void acceptTypeParameter ( char [ ] declaringTypePackageName , char [ ] declaringTypeName , char [ ] typeParameterName , boolean isDeclaration , int start , int end ) ;
public SaaSApplicationException ( String message , Throwable cause , Object [ ] params ) { super ( message , cause ) ; init ( params ) ; }
public static long toLong ( short a , short b , short c , short d ) { return ( ( long ) a << ( SHORT_SIZE * NUM_ ) ) | ( ( ( long ) b & SHORT_MASK ) << ( SHORT_SIZE * NUM_ ) ) | ( ( ( long ) c & SHORT_MASK ) << SHORT_SIZE ) | ( ( long ) d & SHORT_MASK ) ; }
public void onPanelCollapsed ( View panel ) ;
public static byte [ ] toByteArray ( int [ ] data ) { byte [ ] tmp , result = new byte [ data . length * NUM_ ] ; for ( int i = NUM_ ; i < data . length ; i ++ ) { tmp = toBytes ( data [ i ] ) ; System . arraycopy ( tmp , NUM_ , result , i * NUM_ , NUM_ ) ; } return result ; }
public CompositeSlotImpl ( ) { super ( ) ; }
boolean isFinal ( ) ;
private void addInlineDefinitionTitle ( String title , String anchor , MarkupDocBuilder docBuilder ) { docBuilder . anchor ( anchor , null ) ; docBuilder . newLine ( ) ; docBuilder . boldTextLine ( title ) ; }
private static void removeLast ( List < LIRInstruction > seq ) { seq . remove ( seq . size ( ) - NUM_ ) ; }
public JsonUser ( String id , String fullName ) { Preconditions . checkNotNull ( id ) ; Preconditions . checkNotNull ( fullName ) ; this . id = id ; this . fullName = fullName ; }
private void respond ( Socket socket ) throws Exception { try { try { if ( Constants . useSocketTcpNoDelay ( ) ) { socket . setTcpNoDelay ( BOOL_ ) ; } if ( Constants . useSocketKeepAlive ( ) ) { socket . setKeepAlive ( BOOL_ ) ; } } catch ( SocketException e ) { if ( logger . isLoggable ( Levels . HANDLED ) ) logger . log ( Levels . HANDLED , STR_ , e ) ; } socket . setSoTimeout ( unicastDiscoveryConstraints . getUnicastSocketTimeout ( DEFAULT_SOCKET_TIMEOUT ) ) ; int pv = new DataInputStream ( socket . getInputStream ( ) ) . readInt ( ) ; unicastDiscoveryConstraints . checkProtocolVersion ( pv ) ; getDiscovery ( pv ) . handleUnicastDiscovery ( new UnicastResponse ( myLocator . getHost ( ) , myLocator . getPort ( ) , memberGroups , proxy ) , socket , unicastDiscoveryConstraints . getUnfulfilledConstraints ( ) , unicastDiscoverySubjectChecker , Collections . EMPTY_LIST ) ; } finally { try { socket . close ( ) ; } catch ( IOException e ) { logger . log ( Levels . HANDLED , STR_ , e ) ; } } }
private List < String > storagePortNamesToURIs ( List < String > storagePorts ) { List < String > storagePortURIStrings = new ArrayList < String > ( ) ; for ( String port : storagePorts ) { URIQueryResultList uriQueryList = new URIQueryResultList ( ) ; _dbClient . queryByConstraint ( AlternateIdConstraint . Factory . getStoragePortEndpointConstraint ( port ) , uriQueryList ) ; if ( uriQueryList . iterator ( ) . hasNext ( ) ) { storagePortURIStrings . add ( uriQueryList . iterator ( ) . next ( ) . toString ( ) ) ; } } return storagePortURIStrings ; }
public void updateAliases ( URI network , String fabricId , String fabricWwn , List < ZoneWwnAliasUpdate > updateAliases , String taskId ) throws InternalException ;
Attribute newAttribute ( AttributeDescription attributeDescription ) ;
public void postIndex ( Engine . Index index , Throwable ex ) { }
public void renew ( int i ) { int pos = lookup ( i ) ; if ( index [ pos ] == i ) { if ( last_used [ pos ] > NUM_ ) { counter ++ ; last_used [ pos ] = counter ; } ; } ; }
public static void filledCircle ( double x , double y , double r ) { if ( r < NUM_ ) throw new IllegalArgumentException ( STR_ ) ; double xs = scaleX ( x ) ; double ys = scaleY ( y ) ; double ws = factorX ( NUM_ * r ) ; double hs = factorY ( NUM_ * r ) ; if ( ws <= NUM_ && hs <= NUM_ ) pixel ( x , y ) ; else offscreen . fill ( new Ellipse2D . Double ( xs - ws / NUM_ , ys - hs / NUM_ , ws , hs ) ) ; draw ( ) ; }
public void addTokenVectorPair ( String token , double [ ] vector ) { tokenToVectorDictionary . put ( token , vector ) ; vectorLength = vector . length ; }
public void checkRole ( AppContext ctx , Persistent < ? > object , Role role ) { Role objectRole = object . getUserRole ( ) ; boolean hasRole ; if ( objectRole != null ) { hasRole = ( maxRole ( role , objectRole ) == objectRole ) ; } else { hasRole = hasRole ( ctx . getUser ( ) , object . getAccessRights ( ) , role ) ; } if ( ! hasRole ) { throw new InvalidCredentialsAPIException ( STR_ + role . name ( ) + STR_ + object . getId ( ) , ctx . isNoError ( ) ) ; } }
void endJSON ( ) throws ParseException , IOException ;
public static ICreateFrom create ( GridTab mTab ) { int AD_Table_ID = Env . getContextAsInt ( Env . getCtx ( ) , mTab . getWindowNo ( ) , STR_ ) ; ICreateFrom retValue = null ; Class < ? extends ICreateFrom > cl = s_registeredClasses . get ( AD_Table_ID ) ; if ( cl != null ) { try { java . lang . reflect . Constructor < ? extends ICreateFrom > ctor = cl . getConstructor ( GridTab . class ) ; retValue = ctor . newInstance ( mTab ) ; } catch ( Throwable e ) { s_log . log ( Level . SEVERE , e . getLocalizedMessage ( ) , e ) ; return null ; } } if ( retValue == null ) { s_log . info ( STR_ + AD_Table_ID ) ; return null ; } return retValue ; }
public ImageAnalyzer ( File file ) throws IOException { InputStream is = new FileInputStream ( file ) ; try { analyze ( is ) ; } finally { is . close ( ) ; } }
public < T > T newModel ( Class < T > type , EntityConstraint constraints ) { return newModel ( type , null , constraints ) ; }
List < Relationship > orderedRelationshipsByConsciousness ( Primitive primitive ) ;
public boolean accept ( AccessibilityEvent event ) ;
protected synchronized void createServerObject ( ) throws Exception { if ( this . server == null ) { try { this . server = getClassLoader ( ) . loadClass ( STR_ ) . newInstance ( ) ; } catch ( Exception e ) { throw new ContainerException ( STR_ , e ) ; } } }
private static Credential authorize ( String methodId , List < String > scopes ) throws Exception { GoogleClientSecrets clientSecrets = GoogleClientSecrets . load ( JSON_FACTORY , new InputStreamReader ( DiscoverySample . class . getResourceAsStream ( STR_ ) ) ) ; if ( clientSecrets . getDetails ( ) . getClientId ( ) . startsWith ( STR_ ) || clientSecrets . getDetails ( ) . getClientSecret ( ) . startsWith ( STR_ ) ) { System . out . println ( STR_ + STR_ ) ; System . exit ( NUM_ ) ; } GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow . Builder ( httpTransport , JSON_FACTORY , clientSecrets , scopes ) . setDataStoreFactory ( dataStoreFactory ) . build ( ) ; return new AuthorizationCodeInstalledApp ( flow , new LocalServerReceiver ( ) ) . authorize ( STR_ ) ; }
public static ChainingXmlParser < ChainingXmlParser < ? > > parseXml ( File file ) { return new ChainingXmlParser < ChainingXmlParser < ? > > ( file ) ; }
public AlgorithmInitializationException ( Algorithm algorithm , Throwable cause ) { super ( algorithm , cause ) ; }
public void checkSinglePage ( PdfPage page ) { checkPage ( page ) ; }
protected static final int positionCoordinate2D ( float value ) { return ( int ) ( value + NUM_ ) ; }
public MOEAD ( Problem problem , int neighborhoodSize , Initialization initialization , Variation variation , double delta , double eta , int updateUtility ) { this ( problem , neighborhoodSize , null , initialization , variation , delta , eta , updateUtility ) ; }
public CDeleteAddressSpaceAction ( final JFrame parent , final INaviProject project , final INaviAddressSpace [ ] spaces , final ITreeUpdater updater ) { super ( STR_ ) ; m_parent = Preconditions . checkNotNull ( parent , STR_ ) ; m_project = Preconditions . checkNotNull ( project , STR_ ) ; m_addressSpace = Preconditions . checkNotNull ( spaces , STR_ ) . clone ( ) ; m_updater = Preconditions . checkNotNull ( updater , STR_ ) ; putValue ( ACCELERATOR_KEY , HotKeys . DELETE_HK . getKeyStroke ( ) ) ; putValue ( MNEMONIC_KEY , ( int ) STR_ . charAt ( NUM_ ) ) ; }
public void clearWorkspace ( ) { stop ( ) ; removeAllComponents ( ) ; resetTime ( ) ; this . setWorkspaceChanged ( BOOL_ ) ; currentFile = null ; fireWorkspaceCleared ( ) ; manager . clearCouplings ( ) ; this . getUpdater ( ) . getUpdateManager ( ) . setDefaultUpdateActions ( ) ; }
private synchronized native void _pushJavaObject ( CPtr L , Object obj ) ;
void recalculateUpgrades ( ItemStack stack ) ;
public void addPreferredAuthPolicy ( String policyUri ) { String policies = getPreferredAuthPolicies ( ) ; if ( policies == null || policies . length ( ) == NUM_ ) setPreferredAuthPolicies ( policyUri ) ; else setPreferredAuthPolicies ( policies + STR_ + policyUri ) ; }
public boolean commit ( ) ;
protected static Map < String , String > convertHeaders ( Header [ ] headers ) { Map < String , String > result = new TreeMap < String , String > ( String . CASE_INSENSITIVE_ORDER ) ; for ( int i = NUM_ ; i < headers . length ; i ++ ) { result . put ( headers [ i ] . getName ( ) , headers [ i ] . getValue ( ) ) ; } return result ; }
public static String makeWebServiceCall ( String url , int requestmethod ) { return makeWebServiceCall ( url , requestmethod , null , BOOL_ ) ; }
protected static Long convertDoubleToLong ( Double inDoubleValue ) { if ( inDoubleValue == null ) { return null ; } if ( inDoubleValue > Long . MAX_VALUE ) { return Long . MAX_VALUE ; } if ( inDoubleValue < Long . MIN_VALUE ) { return Long . MIN_VALUE ; } Long outLongValue = Math . round ( inDoubleValue ) ; return outLongValue ; }
private void sendAction ( String action ) { Intent intent = new Intent ( this , CaptureService . class ) ; intent . setAction ( action ) ; startService ( intent ) ; }
protected AbstractCollection ( ) { }
public void addArchiveFailure ( ArchiveFailure archiveFailure ) { getArchiveFailures ( ) . add ( archiveFailure ) ; }
public boolean equals ( Object obj ) { if ( obj instanceof Dimension ) { Dimension d = ( Dimension ) obj ; return ( width == d . width ) && ( height == d . height ) ; } return BOOL_ ; }
public Pair < Boolean , LocalizableMessage > includeEntry ( DN dn ) { if ( ! excludeBranches . isEmpty ( ) ) { for ( DN excludeBranch : excludeBranches ) { if ( excludeBranch . isSuperiorOrEqualTo ( dn ) ) { return Pair . of ( FALSE , ERR_LDIF_SKIP_EXCLUDE_BRANCH . get ( dn , excludeBranch ) ) ; } } } if ( ! includeBranches . isEmpty ( ) ) { for ( DN includeBranch : includeBranches ) { if ( includeBranch . isSuperiorOrEqualTo ( dn ) ) { return Pair . of ( TRUE , null ) ; } } return Pair . of ( FALSE , ERR_LDIF_SKIP_NOT_IN_INCLUDED_BRANCHES . get ( dn ) ) ; } return Pair . of ( TRUE , null ) ; }
public void propertyChange ( PropertyChangeEvent pce ) { String propertyName = pce . getPropertyName ( ) ; Object newVal = pce . getNewValue ( ) ; if ( propertyName . equals ( TimelineLayer . PlayFilterProperty ) ) { timerControl . enableForwardButton ( ( ( Boolean ) newVal ) . booleanValue ( ) ) ; } else if ( propertyName . equals ( TimelineLayer . MouseTimeProperty ) ) { updateMouseTimeDisplay ( ( ( Long ) newVal ) . longValue ( ) ) ; } else if ( propertyName . equals ( TimelineLayer . EventDetailsProperty ) ) { updateEventDetailsDisplay ( ( String ) newVal ) ; } revalidate ( ) ; }
public WSFederationAction ( HttpServletRequest request , HttpServletResponse response ) { this . request = request ; this . response = response ; }
final static boolean arrayRegionMatches ( byte [ ] source , int sourceStart , byte [ ] target , int targetStart , int len ) { int sourceEnd = sourceStart + len ; int delta = targetStart - sourceStart ; for ( int i = sourceStart ; i < sourceEnd ; i ++ ) { if ( source [ i ] != target [ i + delta ] ) return BOOL_ ; } return BOOL_ ; }
public DelegatingHostResolver ( AdvancedHostResolver resolver ) { this . resolver = resolver ; }
public static < R > Observable < R > ifThen ( BooleanSupplier condition , ObservableSource < ? extends R > then ) { return ifThen ( condition , then , Observable . < R > empty ( ) ) ; }
void addAttributeModifier ( AttributeModifier modifier ) ;
public void sendGroupChangeEvent ( Player player ) { List < String > members = new LinkedList < String > ( membersAndLastSeen . keySet ( ) ) ; RPEvent event = new GroupChangeEvent ( leader , members , lootmode ) ; player . addEvent ( event ) ; player . notifyWorldAboutChanges ( ) ; }
public boolean isMinimized ( ) { return BOOL_ ; }
public static Exception openFile ( File file ) { try { if ( java . awt . Desktop . isDesktopSupported ( ) ) { java . awt . Desktop desktop = java . awt . Desktop . getDesktop ( ) ; if ( desktop . isSupported ( java . awt . Desktop . Action . OPEN ) ) { desktop . open ( file ) ; } } } catch ( Exception e ) { e . printStackTrace ( ) ; return e ; } return null ; }
boolean canDeleteData ( int offset , int count ) ;
E emitField ( String ... namePartsAndValue ) { List < String > parts = Arrays . asList ( namePartsAndValue ) ; return emitField ( Joiner . on ( STR_ ) . join ( parts . subList ( NUM_ , parts . size ( ) - NUM_ ) ) , Iterables . getLast ( parts ) ) ; }
public boolean isEMailWhenOverdue ( ) ;
public boolean compareRestrictions ( ) { boolean newInfo = BOOL_ ; for ( OwlClass c1 : restrictions ) { Set < Resource > avfSuperClasses = c1 . getAvfSuperClasses ( ) ; Set < Resource > svfSuperClasses = c1 . getSvfSuperClasses ( ) ; if ( avfSuperClasses . isEmpty ( ) && svfSuperClasses . isEmpty ( ) ) { continue ; } for ( OwlClass c2 : restrictions ) { if ( c1 != c2 ) { Set < Resource > avf2 = c2 . allValuesFrom ( ) ; avf2 . retainAll ( avfSuperClasses ) ; if ( avf2 . isEmpty ( ) ) { Set < Resource > svf2 = c2 . someValuesFrom ( ) ; svf2 . retainAll ( svfSuperClasses ) ; if ( svf2 . isEmpty ( ) ) { continue ; } } newInfo = c1 . addSuperClass ( c2 ) || newInfo ; } } } return newInfo ; }
public static File writeDataToFile ( final byte [ ] data , final File file ) { return writeDataToFile ( data , file , BOOL_ ) ; }
private char handleEndOfLine ( char c ) throws XMLStreamException { if ( c == NUM_ ) { if ( _readIndex >= _readCount ) reloadBuffer ( ) ; if ( ( _readIndex < _readCount ) && ( _readBuffer [ _readIndex ] == NUM_ ) ) _readIndex ++ ; c = ( char ) NUM_ ; } if ( c == NUM_ ) { _location . _line ++ ; _location . _column = - _readIndex ; } else if ( c == NUM_ ) { throw new XMLStreamException ( STR_ , _location ) ; } return c ; }
protected static DNSTaskStarter newDNSTaskStarter ( JmDNSImpl jmDNSImpl ) { DNSTaskStarter instance = null ; Factory . ClassDelegate delegate = _databaseClassDelegate . get ( ) ; if ( delegate != null ) { instance = delegate . newDNSTaskStarter ( jmDNSImpl ) ; } return ( instance != null ? instance : new DNSTaskStarterImpl ( jmDNSImpl ) ) ; }
public abstract void renderGridLines ( Canvas c ) ;
public synchronized void customVibration ( final int times , final int onTime , final int offTime ) { final int newOnTime = Math . min ( onTime , NUM_ ) ; List < BLEAction > list = new ArrayList < > ( ) ; for ( int i = NUM_ ; i <= times ; i ++ ) { list . add ( new WriteAction ( Profile . UUID_CHAR_CONTROL_POINT , Protocol . VIBRATION_UNTIL_CALL_STOP ) ) ; list . add ( new WaitAction ( newOnTime ) ) ; list . add ( new WriteAction ( Profile . UUID_CHAR_CONTROL_POINT , Protocol . STOP_VIBRATION ) ) ; list . add ( new WaitAction ( offTime ) ) ; } queue ( list ) ; }
public static void clearImage ( BufferedImage image ) { clearImage ( image , Color . WHITE ) ; }
public void reload ( boolean loadHeaders ) { this . loadHeaders = loadHeaders ; try { load ( file ) ; } catch ( Exception e ) { Bukkit . getLogger ( ) . log ( Level . WARNING , STR_ , e ) ; } }
String readDayOfWeek ( String source , int ofs ) { int i = findEndText ( source , ofs ) ; if ( i == - NUM_ ) { i = source . length ( ) ; } String fragment = readSubstring ( source , ofs , i ) ; if ( fragment == null ) { return null ; } for ( String weekday : getDateFormatSymbols ( ) . getWeekdays ( ) ) { if ( fragment . equalsIgnoreCase ( weekday ) ) { return readSubstring ( source , ofs , ofs + weekday . length ( ) ) ; } } for ( String weekday : getDateFormatSymbols ( ) . getShortWeekdays ( ) ) { if ( fragment . equalsIgnoreCase ( weekday ) ) { return readSubstring ( source , ofs , ofs + weekday . length ( ) ) ; } } return null ; }
public void processChanged ( Process process ) ;
public long clear ( ) { long result ; synchronized ( this ) { result = this . topAddr ; if ( result != NUM_ ) { this . topAddr = NUM_ ; } } return result ; }
public static void initializeHardwareConfiguration ( ) { FRCNetworkCommunicationsLibrary . FRCNetworkCommunicationReserve ( ) ; Timer . SetImplementation ( new HardwareTimer ( ) ) ; HLUsageReporting . SetImplementation ( new HardwareHLUsageReporting ( ) ) ; RobotState . SetImplementation ( DriverStation . getInstance ( ) ) ; }
private boolean containsObjectClassByName ( String objectClassName ) { for ( String ocName : objectClasses . values ( ) ) { if ( objectClassName . equalsIgnoreCase ( ocName ) ) { return BOOL_ ; } } return BOOL_ ; }
public SymbolTableEntryInternal steFor_$makeClass ( ) { return getSymbolTableEntryInternal ( STR_ , BOOL_ ) ; }
void tryDrainReferenceQueues ( ) { if ( tryLock ( ) ) { try { drainReferenceQueues ( ) ; } finally { unlock ( ) ; } } }
public int backend ( ) { String s = soot . PhaseOptions . getString ( options , STR_ ) ; if ( s . equalsIgnoreCase ( STR_ ) ) return backend_auto ; if ( s . equalsIgnoreCase ( STR_ ) ) return backend_buddy ; if ( s . equalsIgnoreCase ( STR_ ) ) return backend_cudd ; if ( s . equalsIgnoreCase ( STR_ ) ) return backend_sable ; if ( s . equalsIgnoreCase ( STR_ ) ) return backend_javabdd ; if ( s . equalsIgnoreCase ( STR_ ) ) return backend_none ; throw new RuntimeException ( STR_ + s + STR_ ) ; }
public HookResult onMessage ( SMTPSession session , Mail mail ) { try { MimeMessage message = mail . getMessage ( ) ; if ( headerName != null ) { message . setHeader ( headerName , headerValue ) ; message . saveChanges ( ) ; } } catch ( javax . mail . MessagingException me ) { session . getLogger ( ) . error ( me . getMessage ( ) ) ; } return new HookResult ( HookReturnCode . DECLINED ) ; }
public CGroupNodeUpdater ( final ZyGraph zygraph , final INaviGroupNode node ) { Preconditions . checkNotNull ( zygraph , STR_ ) ; Preconditions . checkNotNull ( node , STR_ ) ; m_graph = zygraph . getGraph ( ) ; m_node = node ; m_listener = new CTagUpdater ( zygraph . getGraph ( ) ) ; initializeListeners ( ) ; }
Matrix3D ( ) { xx = NUM_ ; yy = NUM_ ; zz = NUM_ ; }
private void injectViews ( Context context ) { LayoutInflater inflater = ( LayoutInflater ) context . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ; View view = inflater . inflate ( R . layout . view_bar_chart_progress , this ) ; mBinding = DataBindingUtil . inflate ( inflater , R . layout . view_bar_chart_progress , this , BOOL_ ) ; mCheckMark = mBinding . barChartCheckMark ; mBarView = mBinding . barview ; loadStyledAttributes ( mAttributes , mChartProgressAttr ) ; }
public void addType ( String type ) { listCarLoads . put ( type , new ArrayList < CarLoad > ( ) ) ; }
public void load ( ) throws GenericServiceException ;
void onHomepageStateUpdated ( ) ;
public void print ( java . io . PrintWriter out ) { new Printer ( this , out ) . print ( ) ; }
public void stopThread ( ) { stop = BOOL_ ; synchronized ( this ) { notify ( ) ; } }
public static native int connect ( long sock , long sa ) ;
public Gobble ( InputStream in ) { this ( null , in , null ) ; }
public boolean isSelected ( Object cell ) { return ( cell == null ) ? BOOL_ : cells . contains ( cell ) ; }
static boolean positionsOrdered ( Spans spans1 , Spans spans2 ) { assert spans1 . docID ( ) == spans2 . docID ( ) : STR_ + spans1 . docID ( ) + STR_ + spans2 . docID ( ) ; int start1 = spans1 . startPosition ( ) ; int start2 = spans2 . startPosition ( ) ; return ( start1 == start2 ) ? ( spans1 . endPosition ( ) < spans2 . endPosition ( ) ) : ( start1 < start2 ) ; }
public static void startEditFolderActivity ( Context context , BookmarkId idToEdit ) { Intent intent = new Intent ( context , EnhancedBookmarkAddEditFolderActivity . class ) ; intent . putExtra ( INTENT_IS_ADD_MODE , BOOL_ ) ; intent . putExtra ( INTENT_BOOKMARK_ID , idToEdit . toString ( ) ) ; context . startActivity ( intent ) ; }
public static String writeActionsToString ( OFInstructionWriteActions inst , Logger log ) throws Exception { return ActionUtils . actionsToString ( inst . getActions ( ) , log ) ; }
public boolean hasView ( final INaviView view ) { Preconditions . checkNotNull ( view , STR_ ) ; Preconditions . checkArgument ( view . inSameDatabase ( m_provider ) , STR_ ) ; return ( view == m_nativeCallgraphView ) || m_customViews . contains ( view ) || m_nativeFlowgraphs . contains ( view ) ; }
public void removePanListener ( PanListener listener ) { if ( mPan != null ) { mPan . removePanListener ( listener ) ; } }
public static void main ( String [ ] argv ) { XmlSerTestPerson xmlSerTestPerson = new XmlSerTestPerson ( ) ; System . out . println ( STR_ ) ; System . out . println ( XMLSerializationManager . getSerializer ( STR_ ) . getXMLStringRepresentation ( xmlSerTestPerson ) ) ; System . out . println ( STR_ ) ; System . out . println ( XMLSerializationManager . getSerializer ( STR_ ) . getXMLStringRepresentation ( xmlSerTestPerson ) ) ; }
private static void createNodeVsBlockMapping ( List < NodeBlockRelation > flattenedList , Map < String , List < Distributable > > nodeAndBlockMapping ) { for ( NodeBlockRelation nbr : flattenedList ) { String node = nbr . getNode ( ) ; List < Distributable > list ; if ( null == nodeAndBlockMapping . get ( node ) ) { list = new ArrayList < > ( CarbonCommonConstants . DEFAULT_COLLECTION_SIZE ) ; list . add ( nbr . getBlock ( ) ) ; Collections . sort ( list ) ; nodeAndBlockMapping . put ( node , list ) ; } else { list = nodeAndBlockMapping . get ( node ) ; list . add ( nbr . getBlock ( ) ) ; Collections . sort ( list ) ; } } }
public CacheHeader ( String key , Entry entry ) { this . key = key ; this . size = entry . data . length ; this . etag = entry . etag ; this . serverDate = entry . serverDate ; this . lastModified = entry . lastModified ; this . ttl = entry . ttl ; this . softTtl = entry . softTtl ; this . responseHeaders = entry . responseHeaders ; }
protected abstract void maskFill ( int x , int y , int w , int h , int maskoff , int maskscan , int masklen , byte [ ] mask ) ;
public static Integer toInteger ( String value , Integer defValue ) { try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException e ) { return defValue ; } }
public static void copyProperties ( Object dest , Object src ) { if ( dest == null || src == null ) { return ; } try { PropertyUtils . copyProperties ( dest , src ) ; } catch ( IllegalAccessException e ) { throw new IllegalStateException ( e ) ; } catch ( InvocationTargetException e ) { throw new IllegalStateException ( e ) ; } catch ( NoSuchMethodException e ) { throw new IllegalStateException ( e ) ; } }
public void clear ( ) { final ReentrantLock lock = this . lock ; lock . lock ( ) ; try { setArray ( new Object [ NUM_ ] ) ; } finally { lock . unlock ( ) ; } }
public int numberOfShardsWithState ( ShardRoutingState ... states ) { int count = NUM_ ; for ( ShardRouting shardEntry : this ) { for ( ShardRoutingState state : states ) { if ( shardEntry . state ( ) == state ) { count ++ ; } } } return count ; }
public CompareOperation processCompare ( ByteString rawEntryDN , String attributeType , ByteString assertionValue , List < Control > controls ) { CompareOperationBasis compareOperation = new CompareOperationBasis ( this , nextOperationID ( ) , nextMessageID ( ) , controls , rawEntryDN , attributeType , assertionValue ) ; compareOperation . setInternalOperation ( BOOL_ ) ; compareOperation . run ( ) ; return compareOperation ; }
public void afterCreate ( Region region ) ;
public void handleDrawMessage ( DrawMessage msg , long msgId ) { room . internalHandleDrawMessage ( this , msg , msgId ) ; }
public void addChooserPanel ( AbstractColorChooserPanel panel ) { AbstractColorChooserPanel [ ] oldPanels = getChooserPanels ( ) ; AbstractColorChooserPanel [ ] newPanels = new AbstractColorChooserPanel [ oldPanels . length + NUM_ ] ; System . arraycopy ( oldPanels , NUM_ , newPanels , NUM_ , oldPanels . length ) ; newPanels [ newPanels . length - NUM_ ] = panel ; setChooserPanels ( newPanels ) ; }
public BaseToken verifyToken ( String token ) ;
public boolean storesLowerCaseQuotedIdentifiers ( ) throws SQLException { return BOOL_ ; }
public static boolean isIdentifierIgnorable ( int codePoint ) { if ( codePoint < NUM_ ) { return ( codePoint >= NUM_ && codePoint <= NUM_ ) || ( codePoint >= NUM_ && codePoint <= NUM_ ) || ( codePoint >= NUM_ && codePoint <= NUM_ ) || ( codePoint == NUM_ ) ; } return isIdentifierIgnorableImpl ( codePoint ) ; }
protected String assertPropertyDefault ( String key , String value ) { if ( properties . getString ( key ) == null ) { logger . info ( STR_ + key + STR_ + value ) ; properties . setString ( key , value ) ; } return properties . getString ( key ) ; }
public static int parseFullAtomVersion ( int fullAtomInt ) { return NUM_ & ( fullAtomInt > > NUM_ ) ; }
boolean pruneData ( OrganisationUnit organisationUnit ) ;
public static void validateAttribute ( Attr attr , Class cls , Guid guid ) throws UMSException , DataConstraintException { if ( attr == null ) { return ; } String validatorClass = null ; String rule = null ; String attrName = attr . getName ( ) ; CreationTemplate ct = TemplateManager . getTemplateManager ( ) . getCreationTemplate ( cls , guid ) ; if ( ct != null ) { Enumeration en = ct . getValidation ( attrName ) ; while ( en . hasMoreElements ( ) ) { ValidationElement vElement = ( ValidationElement ) en . nextElement ( ) ; validatorClass = vElement . getValidator ( ) ; rule = vElement . getRule ( ) ; if ( validatorClass != null ) { validateAttribute ( attr , validatorClass , rule ) ; } } } }
void visitVarInsn ( int opcode , int var ) ;
public static boolean isTransaction ( int choice ) { return choice > NUM_ && choice < NUM_ ; }
public void addSize ( int sizeAdded ) { count += sizeAdded ; }
public abstract void readFile ( String fileName ) ;
static public void saveBytes ( OutputStream output , byte buffer [ ] ) { try { output . write ( buffer ) ; output . flush ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
public void reset ( ) ;
public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Snare_END_A_TO_SELF ( String skilltarget ) { return new SM_SYSTEM_MESSAGE ( NUM_ , skilltarget ) ; }
private void installListeners ( ) { if ( window != null ) { windowListener = createWindowListener ( ) ; window . addWindowListener ( windowListener ) ; propertyChangeListener = createWindowPropertyChangeListener ( ) ; window . addPropertyChangeListener ( propertyChangeListener ) ; } }
public void actionPerformed ( ActionEvent ae ) { if ( scrollBar == null || ! scrollBar . getValueIsAdjusting ( ) ) { if ( timer != null ) timer . stop ( ) ; updateSize ( ) ; timer = null ; scrollBar = null ; } }
public boolean isDirty ( ) { return panelChanged ; }
public abstract Instant timestamp ( ) ;
public void actionPerformed ( java . awt . event . ActionEvent ae ) { String cmd = ae . getActionCommand ( ) ; server = serverAddrField . getText ( ) ; port = serverPortField . getText ( ) ; if ( cmd == GetViewsCmd ) { connectedStatus . setText ( STATUS_CONNECTING ) ; viewList = getViews ( ) ; if ( viewList == null ) { Debug . message ( STR_ , STR_ + server + STR_ + port ) ; disconnect ( ) ; } } else if ( cmd == ServerDisconnectCmd ) { Debug . message ( STR_ , STR_ + server + STR_ + port ) ; disconnect ( ) ; } else if ( cmd == LoadViewCmd ) { ChoiceItem ci = viewList . get ( viewChoice . getSelectedItem ( ) ) ; if ( ci == null ) { disconnect ( ) ; return ; } String view = ( ( String ) ci . value ( ) ) . trim ( ) ; Debug . message ( STR_ , STR_ + view ) ; connect ( view ) ; } }
public static Mapping < LocalDateTime > datetime ( Constraint ... constraints ) { return datetime ( STR_ , constraints ) ; }
public final int size ( ) { return m_firstFree ; }
public final boolean onUpdate ( long time , long dt ) { final boolean doneAnimating = onUpdateAnimation ( time , BOOL_ ) ; if ( mUpdateHost . isActiveLayout ( this ) ) updateLayout ( time , dt ) ; return doneAnimating ; }
public static < T extends OpenGraphObject > T createForPost ( Class < T > graphObjectClass , String type , String title , String imageUrl , String url , String description ) { T object = GraphObject . Factory . create ( graphObjectClass ) ; if ( type != null ) { object . setType ( type ) ; } if ( title != null ) { object . setTitle ( title ) ; } if ( imageUrl != null ) { object . setImageUrls ( Arrays . asList ( imageUrl ) ) ; } if ( url != null ) { object . setUrl ( url ) ; } if ( description != null ) { object . setDescription ( description ) ; } object . setCreateObject ( BOOL_ ) ; object . setData ( GraphObject . Factory . create ( ) ) ; return object ; }
public void init$Children ( ) { }
public void finish ( ) throws IOException , SQLException ;
public static CacheControl valueOf ( final String value ) { return CacheControlHeaderParser . fromString ( value ) ; }
synchronized void store ( long maxTxId ) throws IOException { if ( enabled && currentMax < maxTxId ) { if ( LOG . isTraceEnabled ( ) ) { LOG . trace ( STR_ + maxTxId ) ; } String txidStr = Long . toString ( maxTxId ) ; try { Stat stat = zkc . get ( ) . setData ( path , txidStr . getBytes ( STR_ ) , - NUM_ ) ; currentMax = maxTxId ; } catch ( Exception e ) { LOG . error ( STR_ , maxTxId , e ) ; } } }
public synchronized void end ( ) { this . active = BOOL_ ; this . selectedObject = null ; }
public JsonPropertyMapper defaultJsonValues ( final Collection < ? > defaultValues ) { this . defaultJsonValues = defaultValues != null ? new ArrayList < > ( defaultValues ) : emptyList ( ) ; return this ; }
public int first ( int context , int expandedTypeID ) { int root = getDocumentRoot ( context ) ; return ( getExpandedTypeID ( root ) == expandedTypeID ) ? root : NULL ; }
protected void removeRedundantState ( ) { Vector < Object > uselessKeys = new Vector < Object > ( ) ; Enumeration myKeys = preState . keys ( ) ; while ( myKeys . hasMoreElements ( ) ) { Object myKey = myKeys . nextElement ( ) ; if ( postState . containsKey ( myKey ) && postState . get ( myKey ) . equals ( preState . get ( myKey ) ) ) { uselessKeys . addElement ( myKey ) ; } } for ( int i = uselessKeys . size ( ) - NUM_ ; i >= NUM_ ; i -- ) { Object myKey = uselessKeys . elementAt ( i ) ; preState . remove ( myKey ) ; postState . remove ( myKey ) ; } }
public void addPages ( ) { mainPage = new MoveRemoteResourceWizardMainPage ( STR_ , Policy . bind ( STR_ ) , SVNUIPlugin . getPlugin ( ) . getImageDescriptor ( ISVNUIConstants . IMG_WIZBAN_NEW_FOLDER ) ) ; mainPage . setRemoteResource ( selection ) ; addPage ( mainPage ) ; String pageTitle = Policy . bind ( STR_ ) ; String pageDescription = Policy . bind ( STR_ ) ; ImageDescriptor image = SVNUIPlugin . getPlugin ( ) . getImageDescriptor ( ISVNUIConstants . IMG_WIZBAN_NEW_FOLDER ) ; commitCommentPage = new CommentCommitWizardPage ( parentDialog , pageTitle , pageTitle , image , pageDescription ) ; addPage ( commitCommentPage ) ; }
public static CaseInsensitiveArrayList sortNoExtras ( CaseInsensitiveArrayList unsorted ) { List < String > subs = new CaseInsensitiveArrayList ( unsorted ) ; CaseInsensitiveArrayList finals = new CaseInsensitiveArrayList ( ) ; for ( String subreddit : specialSubreddits ) { if ( subs . contains ( subreddit ) ) { subs . remove ( subreddit ) ; finals . add ( subreddit ) ; } } java . util . Collections . sort ( subs , String . CASE_INSENSITIVE_ORDER ) ; finals . addAll ( subs ) ; return finals ; }
public ProcessVar ( Map map ) { if ( map != null ) { putAll ( map ) ; } }
public static String encodePathQuery ( final String unescaped ) throws URIException { return encodePathQuery ( unescaped , URI . getDefaultProtocolCharset ( ) ) ; }
public CacheDataPage findCacheDataPage ( Entry e ) throws IOException { DataPageMain curPage = _rootPage ; while ( BOOL_ ) { if ( curPage . _leaf ) { return new CacheDataPage ( curPage ) ; } DataPageExtra extra = curPage . getExtra ( ) ; int idx = extra . _entryView . find ( e ) ; if ( idx < NUM_ ) { idx = missingIndexToInsertionPoint ( idx ) ; if ( idx == extra . _entryView . size ( ) ) { -- idx ; } } Entry nodeEntry = extra . _entryView . get ( idx ) ; curPage = curPage . getChildPage ( nodeEntry ) ; } }
public BloomFilter ( int bitSetSize , int expectedNumberOfFilterElements , int actualNumberOfFilterElements , BitSet filterData ) { this ( bitSetSize , expectedNumberOfFilterElements ) ; this . bitset = filterData ; this . numberOfAddedElements = actualNumberOfFilterElements ; }
public void testReceiveRequest ( ) throws Exception { SimpleRequestCollector requestCollector = new SimpleRequestCollector ( ) ; stunStack . addRequestListener ( requestCollector ) ; dummyServerSocket . send ( new DatagramPacket ( msgFixture . bindingRequest2 , msgFixture . bindingRequest2 . length , localAddress ) ) ; requestCollector . waitForRequest ( ) ; Request collectedRequest = requestCollector . collectedRequest ; assertNotNull ( STR_ , collectedRequest ) ; byte expectedReturn [ ] = msgFixture . bindingRequest2 ; byte actualReturn [ ] = collectedRequest . encode ( stunStack ) ; assertTrue ( STR_ , Arrays . equals ( expectedReturn , actualReturn ) ) ; }
public static Object loadFileRelative ( String loaddir , String file ) { try { requireLoad ( ) ; if ( supported ( ) ) { return ScriptLoader . loadRelative ( loaddir , engine , ( file . contains ( STR_ ) ? file : file + STR_ ) ) ; } } catch ( Exception e ) { Toast . log ( ) . error ( STR_ + e ) ; Toast . log ( ) . exception ( e ) ; } return null ; }
public synchronized void browse ( String path ) { final Media media = new Media ( mLibVlc , path ) ; browse ( media ) ; media . release ( ) ; }
public static BufferedImage thresholdImage ( BufferedImage image , int threshold ) { BufferedImage result = new BufferedImage ( image . getWidth ( ) , image . getHeight ( ) , BufferedImage . TYPE_BYTE_GRAY ) ; result . getGraphics ( ) . drawImage ( image , NUM_ , NUM_ , null ) ; WritableRaster raster = result . getRaster ( ) ; int [ ] pixels = new int [ image . getWidth ( ) ] ; for ( int y = NUM_ ; y < image . getHeight ( ) ; y ++ ) { raster . getPixels ( NUM_ , y , image . getWidth ( ) , NUM_ , pixels ) ; for ( int i = NUM_ ; i < pixels . length ; i ++ ) { if ( pixels [ i ] < threshold ) pixels [ i ] = NUM_ ; else pixels [ i ] = NUM_ ; } raster . setPixels ( NUM_ , y , image . getWidth ( ) , NUM_ , pixels ) ; } return result ; }
void updateTypeSubstitution ( TypeSubstitution substitution , BaseType baseType , List < Integer > memberPath , int offset , INaviModule module ) throws CouldntSaveDataException ;
public Map < String , Tuple < Version , String > > versions ( ) { return versions ; }
public void clearSounds ( ) { mSoundMap . clear ( ) ; }
protected void readConfigFileNoScrollPane ( VendorOptionFactoryInterface vendorOptionFactory , UpdateSymbolInterface parent , String filename ) { internal_readConfigFile ( vendorOptionFactory , parent . getClass ( ) , parent , filename , BOOL_ , BOOL_ ) ; }
public void endEntity ( String name ) throws org . xml . sax . SAXException { }
public double probability ( SampledVertex vertex ) ;
public RegExp ( int type ) { this . type = type ; }
public MultiBotManager ( ) { managerNumber = MANAGER_COUNT . getAndIncrement ( ) ; ThreadPoolExecutor defaultPool = ( ThreadPoolExecutor ) Executors . newCachedThreadPool ( ) ; defaultPool . allowCoreThreadTimeOut ( BOOL_ ) ; this . botPool = MoreExecutors . listeningDecorator ( defaultPool ) ; }
public static void assertFalse ( String message , boolean condition ) { if ( condition ) { fail ( message ) ; } }
public boolean isAccessPolicyConfig ( ) { return accessPolicyConfig ; }
public T remove ( URI id ) { return cache . remove ( id ) ; }
protected void finalize ( ) { close ( ) ; }
public void onEdgeDragStarted ( int edgeFlags , int pointerId ) { }
private boolean usingNamespaces ( String namespace ) { if ( ! namespacesOn ) { return BOOL_ ; } if ( inlineLocalMode ) { return BOOL_ ; } return BOOL_ ; }
public boolean isRebootSupported ( ) { return rebootSupported ; }
public boolean canTubeConnect ( ForgeDirection side ) ;
public static ProcessResults executeChildProcess ( final Class classToExecute , final String [ ] args ) { return executeChildProcess ( classToExecute , System . getProperty ( STR_ ) , args ) ; }
public void requestAccountExpirationTime ( ) { operations . add ( PasswordPolicyStateOperationType . GET_ACCOUNT_EXPIRATION_TIME ) ; }
E unlink ( Node < E > x ) { final E element = x . item ; final Node < E > next = x . next ; final Node < E > prev = x . prev ; if ( prev == null ) { first = next ; } else { prev . next = next ; x . prev = null ; } if ( next == null ) { last = prev ; } else { next . prev = prev ; x . next = null ; } x . item = null ; size -- ; modCount ++ ; return element ; }
public boolean contains ( IBoundingVolume boundingVolume ) ;
public void removeAllListeners ( ) { clientgui . getClient ( ) . getGame ( ) . removeGameListener ( this ) ; clientgui . getBoardView ( ) . removeBoardViewListener ( this ) ; }
private static void debugPrintln ( String msg ) { if ( DEBUG ) { System . err . println ( STR_ + msg ) ; } }
public static NameMatcher < TriggerKey > triggerNameEquals ( String compareTo ) { return NameMatcher . nameEquals ( compareTo ) ; }
public boolean canBeLongAddress ( int address ) { return ( ( address >= NUM_ ) && ( address <= NUM_ ) ) ; }
public static Paint convertFillPaint ( Element filledElement , GraphicsNode filledNode , BridgeContext ctx ) { Value v = CSSUtilities . getComputedStyle ( filledElement , SVGCSSEngine . FILL_OPACITY_INDEX ) ; float opacity = convertOpacity ( v ) ; v = CSSUtilities . getComputedStyle ( filledElement , SVGCSSEngine . FILL_INDEX ) ; return convertPaint ( filledElement , filledNode , v , opacity , ctx ) ; }
public String toString ( ) { return STR_ + getDescription ( ) + STR_ + getClass ( ) . getName ( ) + STR_ ; }
static HeapCompactOrderedSketch heapifyInstance ( Memory srcMem , long seed ) { long pre0 = srcMem . getLong ( PREAMBLE_LONGS_BYTE ) ; int preLongs = extractPreLongs ( pre0 ) ; int flags = extractFlags ( pre0 ) ; boolean empty = ( flags & EMPTY_FLAG_MASK ) > NUM_ ; short memSeedHash = ( short ) extractSeedHash ( pre0 ) ; short computedSeedHash = computeSeedHash ( seed ) ; checkSeedHashes ( memSeedHash , computedSeedHash ) ; int curCount = ( preLongs > NUM_ ) ? srcMem . getInt ( RETAINED_ENTRIES_INT ) : NUM_ ; long thetaLong = ( preLongs > NUM_ ) ? srcMem . getLong ( THETA_LONG ) : Long . MAX_VALUE ; long [ ] cacheArr = new long [ curCount ] ; if ( curCount > NUM_ ) { srcMem . getLongArray ( preLongs << NUM_ , cacheArr , NUM_ , curCount ) ; } HeapCompactOrderedSketch hcs = new HeapCompactOrderedSketch ( empty , memSeedHash , curCount , thetaLong , cacheArr ) ; return hcs ; }
public void onTimedText ( String text ) ;
public static AbstractWidget create ( RawWidget rawWidget ) { switch ( rawWidget . type ( ) ) { case ITEM : case TEXT : case ACTION : return ( new Nomed ( rawWidget ) ) ; case ATTRIBUTE : return ( new Attribute ( rawWidget ) ) ; case MENU : case CONDITIONAL : case BRANCH : return ( new Named ( rawWidget ) ) ; case THEME : case PANEL : case SHAPE : case OPTIONSMENU : case TEXTINPUT : case TABLE : case TABLECOMPONENT : case VIDEO : case IMAGE : case EFFECT : return ( new Valued ( rawWidget ) ) ; case LISTENER : case HOOK : return ( new Simple ( rawWidget ) ) ; default : return ( new Proxy ( rawWidget ) ) ; } }
public boolean isFixedRotation ( ) { return body . isFixedRotation ( ) ; }
private void closeDatabaseConnection ( Connection connection ) { if ( connection == null ) return ; try { connection . close ( ) ; } catch ( SQLException e ) { } connection = null ; return ; }
public void addSteppables ( Steppable [ ] steppables ) { toBeAdded . addAll ( steppables ) ; }
public void updateEstadoDocumentoVital ( String idDocVit , int estado ) ;
void open ( HttpRoute route , HttpContext context , HttpParams params ) throws IOException ;
private LogUtil ( ) { throw new AssertionError ( STR_ ) ; }
public com . sun . identity . liberty . ws . idpp . jaxb . ModifyType . ModificationType . NewDataType createModifyTypeModificationTypeNewDataType ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . liberty . ws . idpp . jaxb . impl . ModifyTypeImpl . ModificationTypeImpl . NewDataTypeImpl ( ) ; }
private void clearViaFilterClass ( String key ) { Class filterClass ; InterestFilter filter ; try { filterClass = ClassLoadUtil . classFromName ( key ) ; filter = ( InterestFilter ) filterClass . newInstance ( ) ; } catch ( ClassNotFoundException cnfe ) { throw new RuntimeException ( LocalizedStrings . LocalRegion_CLASS_0_NOT_FOUND_IN_CLASSPATH . toLocalizedString ( key ) , cnfe ) ; } catch ( Exception e ) { throw new RuntimeException ( LocalizedStrings . LocalRegion_CLASS_0_COULD_NOT_BE_INSTANTIATED . toLocalizedString ( key ) , e ) ; } for ( Iterator it = this . entries ( BOOL_ ) . iterator ( ) ; it . hasNext ( ) ; ) { Region . Entry entry = ( Region . Entry ) it . next ( ) ; try { Object entryKey = entry . getKey ( ) ; if ( ! ( entryKey instanceof String ) ) continue ; InterestEvent e = new InterestEvent ( entryKey , entry . getValue ( ) , BOOL_ ) ; if ( ! filter . notifyOnRegister ( e ) ) { continue ; } localDestroyNoCallbacks ( entryKey ) ; } catch ( EntryDestroyedException ignore ) { } } }
private final boolean validateClientPacket ( ByteBuffer buf ) { return buf . getShort ( NUM_ ) == ~ buf . getShort ( NUM_ ) && buf . get ( NUM_ ) == staticClientPacketCode ; }
public FloodlightModuleContext ( ) { this ( null ) ; }
default long deltaLazy ( long currentTime ) { long sum = this . getStartTime ( ) + this . getCooldownTime ( ) ; return sum - currentTime ; }
public static SemGraph serializableInstance ( ) { return new SemGraph ( ) ; }
public boolean isGpsProviderEnabled ( ) { if ( ! isAllowed ( ) ) { return BOOL_ ; } String provider = LocationManager . GPS_PROVIDER ; if ( locationManager . getProvider ( provider ) == null ) { return BOOL_ ; } return locationManager . isProviderEnabled ( provider ) ; }
public boolean isDisplayValues ( ) { return mDisplayValues ; }
public static Animation fadeInAnimation ( long duration , long delay ) { Animation fadeIn = new AlphaAnimation ( NUM_ , NUM_ ) ; fadeIn . setInterpolator ( new DecelerateInterpolator ( ) ) ; fadeIn . setDuration ( duration ) ; fadeIn . setStartOffset ( delay ) ; return fadeIn ; }
public void addByte ( int o , byte x , int d ) { if ( force_defaults || x != d ) { addByte ( x ) ; slot ( o ) ; } }
private void showSelectedPayment ( Payment payment ) { if ( payment != null && selectedPaymentNameTv != null && selectedPaymentPriceTv != null ) { selectedPaymentNameTv . setText ( payment . getName ( ) ) ; if ( payment . getPrice ( ) != NUM_ ) { selectedPaymentPriceTv . setText ( payment . getPriceFormatted ( ) ) ; } else { selectedPaymentPriceTv . setText ( getText ( R . string . free ) ) ; } orderTotalPrice = payment . getTotalPrice ( ) ; orderTotalPriceTv . setText ( payment . getTotalPriceFormatted ( ) ) ; } else { Timber . e ( STR_ ) ; } }
int updateByPrimaryKeySelective ( Files record ) ;
public void remove ( BasicBlock bb ) { for ( int i = NUM_ ; i < local . length ; i ++ ) { if ( bb == local [ i ] ) { ExceptionHandlerBasicBlock [ ] newLocal = new ExceptionHandlerBasicBlock [ local . length - NUM_ ] ; for ( int j = NUM_ ; j < i ; j ++ ) newLocal [ j ] = local [ j ] ; for ( int j = i + NUM_ ; j < local . length ; j ++ ) newLocal [ j - NUM_ ] = local [ j ] ; local = newLocal ; return ; } } throw new OptimizingCompilerException ( STR_ + bb ) ; }
public void addToClassification ( Integer classId , int size , List < Long > positions ) throws IOException { numberOfClasses ++ ; classificationIndexTmpFileWriter . writeInt ( classId ) ; if ( size == positions . size ( ) ) classificationIndexTmpFileWriter . writeInt ( size ) ; else { classificationIndexTmpFileWriter . writeInt ( - size ) ; classificationIndexTmpFileWriter . writeInt ( positions . size ( ) ) ; } if ( positions . size ( ) > NUM_ ) { classificationIndexTmpFileWriter . writeLong ( io . getPosition ( ) ) ; for ( Long pos : positions ) { io . writeLong ( pos ) ; } } else { classificationIndexTmpFileWriter . writeLong ( - NUM_ ) ; } }
public void testSubscribe3 ( ) { TestSubscriber s = new TestSubscriber ( ) ; SubmissionPublisher < Integer > p = basicPublisher ( ) ; Throwable ex = new SPException ( ) ; p . closeExceptionally ( ex ) ; assertTrue ( p . isClosed ( ) ) ; assertSame ( p . getClosedException ( ) , ex ) ; p . subscribe ( s ) ; s . awaitError ( ) ; assertEquals ( NUM_ , s . nexts ) ; assertEquals ( NUM_ , s . errors ) ; }
protected Roll ( int count , int start ) { this . id = Roll . getNextId ( ) ; this . faces = count ; this . min = start ; }
public static void sort ( short [ ] array ) { DualPivotQuicksort . sort ( array ) ; }
private void run ( ) throws Exception { DevelopmentProvider tp = new DevelopmentProvider ( ) ; Topology t = tp . newTopology ( STR_ ) ; MqttConfig mqttConfig = createMqttConfig ( ) ; MqttStreams mqtt = new MqttStreams ( t , null ) ; TStream < String > msgs = mqtt . subscribe ( topic , NUM_ ) ; msgs . sink ( null ) ; System . out . println ( STR_ + tp . getServices ( ) . getService ( HttpServer . class ) . getConsoleUrl ( ) ) ; tp . submit ( t ) ; }
boolean isSymmetric ( ) ;
private void animatePanelToState ( PanelState state , StateChangeReason reason ) { animatePanelToState ( state , reason , BASE_ANIMATION_DURATION_MS ) ; }
private static boolean isLeftOutlier ( int index , ArrayList < Double > values ) { double currentValue = values . get ( index ) ; double valueToLeft = values . get ( index - NUM_ ) ; return Math . abs ( currentValue - valueToLeft ) > NUM_ ; }
protected ModuleSource loadFromFallbackLocations ( String moduleId , Object validator ) throws IOException , URISyntaxException { return null ; }
public CardinalityAggregation withDimensions ( Set < Dimension > dimensions ) { return new CardinalityAggregation ( getName ( ) , dimensions , byRow ) ; }
public boolean addElement ( Object key ) { return BOOL_ ; }
public void pushScope ( ) { if ( fCurrentScope + NUM_ == fScope . length ) { int [ ] contextarray = new int [ fScope . length * NUM_ ] ; System . arraycopy ( fScope , NUM_ , contextarray , NUM_ , fScope . length ) ; fScope = contextarray ; } pushContext ( ) ; fScope [ ++ fCurrentScope ] = fCurrentContext ; }
public void add ( AverageTrueRangeItem dataItem , boolean notify ) { if ( ! this . isEmpty ( ) ) { AverageTrueRangeItem item0 = ( AverageTrueRangeItem ) this . getDataItem ( NUM_ ) ; if ( ! dataItem . getPeriod ( ) . getClass ( ) . equals ( item0 . getPeriod ( ) . getClass ( ) ) ) { throw new IllegalArgumentException ( STR_ ) ; } } super . add ( dataItem , notify ) ; }
public void dispatchDestroy ( ) { }
public int size ( ) { return addrs . size ( ) ; }
public Area ( final StendhalRPZone zone , final Rectangle2D shape ) { this . zone = zone ; this . shape = shape ; }
public static void notify ( Object lock ) { synchronized ( lock ) { lock . notify ( ) ; } }
public BeanContextServicesSupport ( BeanContextServices peer ) { this ( peer , null , BOOL_ , BOOL_ ) ; }
public static < T > List < T > synchronizedList ( List < T > list ) { if ( list == null ) { throw new NullPointerException ( STR_ ) ; } if ( list instanceof RandomAccess ) { return new SynchronizedRandomAccessList < T > ( list ) ; } return new SynchronizedList < T > ( list ) ; }
public static CreateWalletResponse create ( String password , String apiCode , String privateKey , String label , String email ) throws IOException , APIException { Map < String , String > params = new HashMap < String , String > ( ) ; params . put ( STR_ , password ) ; params . put ( STR_ , apiCode ) ; if ( privateKey != null ) { params . put ( STR_ , privateKey ) ; } if ( label != null ) { params . put ( STR_ , label ) ; } if ( email != null ) { params . put ( STR_ , email ) ; } String response = HttpClient . getInstance ( ) . post ( STR_ , params ) ; JsonObject jsonObj = new JsonParser ( ) . parse ( response ) . getAsJsonObject ( ) ; return new CreateWalletResponse ( jsonObj . get ( STR_ ) . getAsString ( ) , jsonObj . get ( STR_ ) . getAsString ( ) , jsonObj . get ( STR_ ) . getAsString ( ) ) ; }
private void touchAutoNoopTimer ( ) { if ( autoNoopTimer != null ) { nextAutoNoopTime = System . currentTimeMillis ( ) + autoNoopTimeout ; } }
public void removeErrorListener ( final ErrorListener errorListener ) { if ( errorListeners != null ) { errorListeners . remove ( errorListener ) ; } }
public UUID parentNodeId ( ) { return parentNodeId ; }
public void writeAll ( ImmutableList < ? extends T > messages ) { messages . forEach ( null ) ; onCompleted ( ) ; }
public boolean isRadioOn ( ) throws android . os . RemoteException ;
static void checkUnsignedShort ( final int value , final String msg ) { if ( value < NUM_ || value > NUM_ ) { throw new IllegalArgumentException ( msg + STR_ + value ) ; } }
public Command ( String command , Image icon , int id ) { this . command = command ; this . commandId = id ; this . icon = icon ; }
private void validateHasChecksumFile ( File archiveFile ) throws InvalidArchiveUpdateException { try { resolveChecksumFile ( extractFileToDirectory ( archiveFile , CHECKSUMS_FILE_IN_OPENIDM ) ) ; } catch ( Exception e ) { throw new InvalidArchiveUpdateException ( archiveFile . getName ( ) , STR_ + archiveFile . getName ( ) + STR_ , e ) ; } }
private Object execute ( String expression , Map < String , Object > transientState ) { FunctionResolver functionResolver = StellarFunctions . FUNCTION_RESOLVER ( ) ; VariableResolver variableResolver = new MapVariableResolver ( state , transientState ) ; StellarProcessor processor = new StellarProcessor ( ) ; return processor . parse ( expression , variableResolver , functionResolver , context ) ; }
private void assumeLayout ( ) { int width = getRight ( ) - getLeft ( ) - getCompoundPaddingLeft ( ) - getCompoundPaddingRight ( ) ; if ( width < NUM_ ) { width = NUM_ ; } int physicalWidth = width ; if ( mHorizontallyScrolling ) { width = VERY_WIDE ; } makeNewLayout ( width , physicalWidth , UNKNOWN_BORING , UNKNOWN_BORING , physicalWidth , BOOL_ ) ; }
public boolean hasParameters ( ) { final ClassResolveResult resolveResult = resolveGenerics ( ) ; PsiClass aClass = resolveResult . getElement ( ) ; if ( aClass == null ) return BOOL_ ; boolean hasParams = BOOL_ ; for ( PsiTypeParameter parameter : PsiUtil . typeParametersIterable ( aClass ) ) { if ( resolveResult . getSubstitutor ( ) . substitute ( parameter ) == null ) return BOOL_ ; hasParams = BOOL_ ; } return hasParams ; }
Triangle ( double side1 , double side2 , double side3 ) { this . side1 = side1 ; this . side2 = side2 ; this . side3 = side3 ; }
public void closeSequence ( ) { closeSequence ( SequenceTag ) ; }
void closedAddressSpace ( AddressSpace addressSpace ) ;
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public Criteria or ( ) { Criteria criteria = createCriteriaInternal ( ) ; oredCriteria . add ( criteria ) ; return criteria ; }
public InGameWindow ( String title ) { this ( title , WindowDecor . ALL ) ; }
private static String byteArrayToString ( byte [ ] bytes ) { StringBuilder builder = new StringBuilder ( STR_ ) ; for ( int i = NUM_ ; i < bytes . length ; i ++ ) { if ( i > NUM_ ) { builder . append ( STR_ ) ; } builder . append ( byteToString ( bytes [ i ] ) ) ; } return builder . append ( STR_ ) . toString ( ) ; }
public native boolean isBuffering ( ) ;
int bulkInsertForUser ( int userId , Uri uri , ContentValues [ ] values ) { if ( uri == null ) { throw new IllegalArgumentException ( STR_ ) ; } if ( values == null ) { throw new IllegalArgumentException ( STR_ ) ; } int numRowsAffected = NUM_ ; String tableName = getTableNameFromUri ( uri ) ; checkWritePermissions ( tableName ) ; CMDatabaseHelper dbHelper = getOrEstablishDatabase ( getUserIdForTable ( tableName , userId ) ) ; SQLiteDatabase db = dbHelper . getWritableDatabase ( ) ; db . beginTransaction ( ) ; try { for ( ContentValues value : values ) { if ( value == null ) { continue ; } long rowId = db . insert ( tableName , null , value ) ; if ( rowId >= NUM_ ) { numRowsAffected ++ ; } else { return NUM_ ; } } db . setTransactionSuccessful ( ) ; } finally { db . endTransaction ( ) ; } if ( numRowsAffected > NUM_ ) { notifyChange ( uri , tableName , userId ) ; if ( LOCAL_LOGV ) Log . d ( TAG , tableName + STR_ + numRowsAffected + STR_ ) ; } return numRowsAffected ; }
V readValue ( long encoding ) ;
public static Test suite ( ) { final TestSuite suite = new TestSuite ( STR_ ) ; suite . addTestSuite ( TestBOpUtility . class ) ; suite . addTestSuite ( TestBOpUtility_sharedVariables . class ) ; return suite ; }
static void testExample ( ) { Locale . setDefault ( new Locale ( STR_ , STR_ ) ) ; doTestExample ( STR_ , STR_ , new String [ ] { STR_ , STR_ , STR_ } ) ; doTestExample ( STR_ , STR_ , new String [ ] { STR_ , STR_ } ) ; doTestExample ( STR_ , STR_ , new String [ ] { STR_ , STR_ } ) ; doTestExample ( STR_ , STR_ , new String [ ] { STR_ , STR_ } ) ; doTestExample ( STR_ , STR_ , new String [ ] { STR_ , STR_ } ) ; }
public String processAndMerge ( final List < Resource > resources , final ProcessingCriteria criteria ) throws IOException { notNull ( criteria ) ; LOG . debug ( STR_ , criteria ) ; callbackRegistry . onBeforeMerge ( ) ; try { notNull ( resources ) ; LOG . debug ( STR_ , resources ) ; final StringBuffer result = new StringBuffer ( ) ; if ( shouldRunInParallel ( resources ) ) { result . append ( runInParallel ( resources , criteria ) ) ; } else { for ( final Resource resource : resources ) { LOG . debug ( STR_ , resource ) ; result . append ( applyPreProcessors ( resource , criteria ) ) ; } } return result . toString ( ) ; } finally { callbackRegistry . onAfterMerge ( ) ; } }
private void handleSelectorDimmerClick ( int idx , String [ ] levelNames ) { listener . onSelectorDimmerClick ( idx , levelNames ) ; }
public boolean equals ( Object o ) { if ( this == o ) return BOOL_ ; if ( o instanceof JarPackageFragmentRoot ) { JarPackageFragmentRoot other = ( JarPackageFragmentRoot ) o ; return this . jarPath . equals ( other . jarPath ) ; } return BOOL_ ; }
public DynamoDBBootstrapWorker ( AmazonDynamoDBClient client , double rateLimit , String tableName , int numThreads ) throws NullReadCapacityException { this . client = client ; this . rateLimit = rateLimit ; this . tableName = tableName ; TableDescription description = client . describeTable ( tableName ) . getTable ( ) ; this . section = NUM_ ; this . totalSections = NUM_ ; this . consistentScan = BOOL_ ; this . numSegments = getNumberOfSegments ( description ) ; int numProcessors = Runtime . getRuntime ( ) . availableProcessors ( ) * NUM_ ; if ( numProcessors > numThreads ) { numThreads = numProcessors ; } super . threadPool = Executors . newFixedThreadPool ( numThreads ) ; }
private void manageRoom ( final Context aContext ) { manageRoom ( aContext , null ) ; }
public Info_Column ( String colHeader , String colSQL , Class < ? > colClass ) { super ( colHeader , colSQL , colClass ) ; }
public void randomizeIncomingWeights ( ) { for ( Neuron neuron : this . getNeuronList ( ) ) { neuron . randomizeFanIn ( ) ; } getParentNetwork ( ) . fireSynapsesUpdated ( getIncomingWeights ( ) ) ; }
public void dispose ( ) ;
int sampleData ( ExtractorInput input , int length , boolean allowEndOfInput ) throws IOException , InterruptedException ;
public TouchHandlerOld ( GraphicalView view , AbstractChart chart ) { graphicalView = view ; zoomR = graphicalView . getZoomRectangle ( ) ; if ( chart instanceof XYChart ) { mRenderer = ( ( XYChart ) chart ) . getRenderer ( ) ; } else { mRenderer = ( ( RoundChart ) chart ) . getRenderer ( ) ; } if ( mRenderer . isPanEnabled ( ) ) { mPan = new Pan ( chart ) ; } }
public boolean isOpen ( ) { return open ; }
public void testCompareToNegNeg1 ( ) { byte aBytes [ ] = { NUM_ , NUM_ , NUM_ , - NUM_ , - NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , - NUM_ , NUM_ , NUM_ , NUM_ , NUM_ } ; byte bBytes [ ] = { NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ } ; int aSign = - NUM_ ; int bSign = - NUM_ ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; assertEquals ( - NUM_ , aNumber . compareTo ( bNumber ) ) ; }
public static byte [ ] inputStreamToArray ( InputStream stream ) throws java . io . IOException { byte [ ] b = new byte [ NUM_ ] ; ByteArrayOutputStream output = new ByteArrayOutputStream ( ) ; while ( BOOL_ ) { int read = stream . read ( b ) ; if ( read < NUM_ ) { break ; } output . write ( b , NUM_ , read ) ; } output . close ( ) ; return output . toByteArray ( ) ; }
public static void printCode ( Method [ ] methods ) { for ( Method m : methods ) { System . out . println ( m ) ; Code code = m . getCode ( ) ; if ( code != null ) { System . out . println ( code ) ; } } }
public PlaPoint corner_last_prev ( ) { return corner ( corner_count ( ) - NUM_ ) ; }
void load ( ) throws IOException , InterruptedException ;
public void registerPendingCall ( int invokeId , IPendingServiceCall call ) { pendingCalls . put ( invokeId , call ) ; }
private void composePageJPG ( File outputFile ) throws Exception { File fileMemoryBlockJPG = null ; BufferedImage imageBlocks = new BufferedImage ( memoryWidth , memoryHeight , BufferedImage . TYPE_INT_RGB ) ; Graphics graphics = imageBlocks . getGraphics ( ) ; BufferedImage image = null ; for ( int i = memoryBlockProcessed ; i < memoryBlockTotal ; i ++ ) { fileMemoryBlockJPG = new File ( path , prefix + STR_ + i + STR_ ) ; image = ImageIO . read ( fileMemoryBlockJPG ) ; graphics . drawImage ( ImageIO . read ( fileMemoryBlockJPG ) , NUM_ , memoryRow , null ) ; fileMemoryBlockJPG . delete ( ) ; memoryRow += image . getHeight ( ) ; } imageBlocks . flush ( ) ; graphics . dispose ( ) ; numPage ++ ; ImageIO . write ( imageBlocks , STR_ , outputFile ) ; addTempFile ( outputFile ) ; addScanFile ( outputFile ) ; }
public Rational ( ) { this ( new BigInteger ( STR_ ) , new BigInteger ( STR_ ) ) ; }
public static void loadFromXml ( InputStream is , BlockFactory blockFactory , WorkspaceStats stats , List < Block > result ) throws BlocklyParserException { loadBlocksFromXml ( is , null , blockFactory , stats , result ) ; }
public void removeTableModelListener ( TableModelListener l ) ;
void addConnectionChangeListener ( IConnectionChangeListener listener ) ;
public EnhancedBookmarksModel ( ) { this ( Profile . getLastUsedProfile ( ) . getOriginalProfile ( ) ) ; }
final boolean pollAndExecCC ( ForkJoinTask < ? > root ) { ForkJoinTask < ? > [ ] a ; int b ; Object o ; outer : while ( ( b = base ) - top < NUM_ && ( a = array ) != null ) { long j = ( ( ( a . length - NUM_ ) & b ) << ASHIFT ) + ABASE ; if ( ( o = U . getObject ( a , j ) ) == null || ! ( o instanceof CountedCompleter ) ) break ; for ( CountedCompleter < ? > t = ( CountedCompleter < ? > ) o , r = t ; ; ) { if ( r == root ) { if ( base == b && U . compareAndSwapObject ( a , j , t , null ) ) { base = b + NUM_ ; t . doExec ( ) ; return BOOL_ ; } else break ; } if ( ( r = r . completer ) == null ) break outer ; } } return BOOL_ ; }
public void validatePartitionKeyGroup ( String expectedPartitionKeyGroupName , PartitionKeyGroup actualPartitionKeyGroup ) { assertNotNull ( actualPartitionKeyGroup ) ; assertEquals ( expectedPartitionKeyGroupName , actualPartitionKeyGroup . getPartitionKeyGroupKey ( ) . getPartitionKeyGroupName ( ) ) ; }
boolean isDefaultColumn ( String property_id ) ;
private void stopScan ( ) { mIsScanInProgress = BOOL_ ; mHandler . removeCallbacks ( mAutoScanRunnable ) ; }
public List < String > findDeprecatedComponents ( ) throws Exception { List < String > answer = new ArrayList < > ( ) ; Set < ObjectName > camels = findCamelContexts ( ) ; for ( ObjectName on : camels ) { List < String > names = findComponentNames ( on ) ; for ( String name : names ) { if ( isDeprecatedComponent ( name ) ) { answer . add ( name ) ; } } } return answer ; }
public SSOProtocol ( IHttpRequestResponse message , String protocol , IBurpExtenderCallbacks callbacks ) { this . message = message ; this . protocol = protocol ; this . callbacks = callbacks ; this . helpers = callbacks . getHelpers ( ) ; this . timestamp = System . currentTimeMillis ( ) ; }
public final Observable < List < SearchResult > > searchResults ( ) { return mSearchResultsSubject . asObservable ( ) ; }
void communicationError ( ) ;
public void propertyChange ( PropertyChangeEvent ev ) { locoBox . update ( ) ; }
public static void main ( String [ ] args ) { junit . textui . TestRunner . run ( StringRegressionTest . class ) ; }
public boolean hasPlayerCount ( ) { return fieldSetFlags ( ) [ NUM_ ] ; }
protected int changes ( ) { return ownerDocument ( ) . changes ( ) ; }
public static Type fromString ( String type ) { if ( type == null ) { return null ; } type = type . toLowerCase ( ) ; if ( GET . toString ( ) . equals ( type ) ) { return GET ; } else if ( SET . toString ( ) . equals ( type ) ) { return SET ; } else if ( ERROR . toString ( ) . equals ( type ) ) { return ERROR ; } else if ( RESULT . toString ( ) . equals ( type ) ) { return RESULT ; } else { return null ; } }
public boolean equals ( Object other ) { if ( ! ( other instanceof TDoubleIntHashMap ) ) { return BOOL_ ; } TDoubleIntHashMap that = ( TDoubleIntHashMap ) other ; if ( that . size ( ) != this . size ( ) ) { return BOOL_ ; } return forEachEntry ( new EqProcedure ( that ) ) ; }
boolean canZoom ( ) ;
public boolean removeFromWorld ( ) ;
public boolean isUnderDisruptionWeb ( ) { return isUnderDisruptionWeb_native ( pointer ) ; }
static ColumnImpl create ( ColumnImpl . InitArgs args ) throws IOException { switch ( args . type ) { case BOOLEAN : return new CalcBooleanColImpl ( args ) ; case TEXT : return new CalcTextColImpl ( args ) ; case MEMO : return new CalcMemoColImpl ( args ) ; default : } if ( args . type . getHasScalePrecision ( ) ) { return new CalcNumericColImpl ( args ) ; } return new CalcColImpl ( args ) ; }
public IntroButton ( final Context context , final AttributeSet attrs , final int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; init ( ) ; }
public int next ( ) { if ( _currentNode != NULL ) { int node = _currentNode ; _currentNode = _nextsib2 ( node ) ; return returnNode ( makeNodeHandle ( node ) ) ; } return END ; }
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( nodecdatasectionnodetype . class , args ) ; }
public void postError ( Request < ? > request , VolleyError error ) ;
public boolean isApplicable ( ) { TaxonomicProfileDialog viewer = ( TaxonomicProfileDialog ) getParent ( ) ; return viewer != null ; }
Union7 < First , Second , Third , Fourth , Fifth , Sixth , Seventh > seventh ( Seventh value ) ;
public Handle ( int tag , String owner , String name , String desc , boolean itf ) { this . tag = tag ; this . owner = owner ; this . name = name ; this . desc = desc ; this . itf = itf ; }
public void fireProjectorColorsChanged ( ) { for ( ProjectorListener listener : listeners ) { listener . projectorColorsChanged ( ) ; } }
public TargetActivityHeaderView ( Context context , AttributeSet attrs ) { this ( context , attrs , NUM_ ) ; }
public void clear ( ) { int max = bits . length ; for ( int i = NUM_ ; i < max ; i ++ ) { bits [ i ] = NUM_ ; } }
public void println ( int x ) { out . println ( x ) ; }
public T [ ] newArray ( int size ) ;
private Stream < InteractionWord > extractInteractionWords ( List < ClusteredPatterns > clusters ) { return clusters . stream ( ) . flatMap ( null ) . filter ( null ) . distinct ( ) ; }
void unschedule ( Runnable removeThis ) ;
public boolean isDeprecated ( ) { return BOOL_ ; }
protected abstract byte readByteAndShift ( ) ;
public DrawerBuilder drawerLeftView ( View drawerLeftView ) { this . drawerLeftView = drawerLeftView ; return this ; }
public static String generateKey ( String uri ) { String regEx = STR_ ; Pattern p = Pattern . compile ( regEx ) ; Matcher m = p . matcher ( uri ) ; String key = m . replaceAll ( STR_ ) . trim ( ) ; int length = key . length ( ) ; if ( length <= NUM_ ) { return key ; } else { return key . substring ( NUM_ , NUM_ ) ; } }
BUILDER withSkipValidateRuntimeConfig ( ) ;
public PaddedBufferedBlockCipher ( BlockCipher cipher , BlockCipherPadding padding ) { this . cipher = cipher ; this . padding = padding ; buf = new byte [ cipher . getBlockSize ( ) ] ; bufOff = NUM_ ; }
public void testRingWithTail ( ) throws ParseException { checkDissolve ( STR_ , STR_ ) ; }
public boolean checkRootBySuperUserApk ( ) { File suApk = new File ( SU_APK ) ; if ( suApk . exists ( ) ) { if ( Constants . DEBUG_MODE_ENABLED ) { Log . d ( TAG , STR_ ) ; } return BOOL_ ; } return BOOL_ ; }
public static boolean sm ( double a , double b ) { return ( b - a > SMALL ) ; }
public static void print ( byte x ) { out . print ( x ) ; out . flush ( ) ; }
public static synchronized double makeNoise ( double mean , double standardDiviation ) { return random . nextGaussian ( ) * Math . sqrt ( standardDiviation ) + mean ; }
public View ( String id ) { super ( id ) ; }
ConfigurationError ( String msg , Exception x ) { super ( msg ) ; this . exception = x ; }
private void resetSeenObjects ( ) { objectsRead = new ArrayList < Object > ( ) ; nextHandle = baseWireHandle ; primitiveData = emptyStream ; }
public PdfPage removePage ( int pageNum ) { checkClosingStatus ( ) ; PdfPage removedPage = catalog . getPageTree ( ) . removePage ( pageNum ) ; if ( removedPage != null ) { catalog . removeOutlines ( removedPage ) ; removeUnusedWidgetsFromFields ( removedPage ) ; if ( isTagged ( ) ) { getTagStructureContext ( ) . removePageTags ( removedPage ) ; } if ( ! removedPage . getPdfObject ( ) . isFlushed ( ) ) { removedPage . getPdfObject ( ) . remove ( PdfName . Parent ) ; } removedPage . getPdfObject ( ) . getIndirectReference ( ) . setFree ( ) ; dispatchEvent ( new PdfDocumentEvent ( PdfDocumentEvent . REMOVE_PAGE , removedPage ) ) ; } return removedPage ; }
public void removeActionListener ( ActionListener listener ) { textField . removeActionListener ( listener ) ; }
private String format ( final String message , final Object ... args ) { return MessageFormatter . format ( message , args ) ; }
public void incrementCurrentPos ( ) { m_pos ++ ; }
public ArrayFieldVector ( FieldVector < T > v ) throws NullArgumentException { MathUtils . checkNotNull ( v ) ; field = v . getField ( ) ; data = MathArrays . buildArray ( field , v . getDimension ( ) ) ; for ( int i = NUM_ ; i < data . length ; ++ i ) { data [ i ] = v . getEntry ( i ) ; } }
public void find ( Session s , ArrayList < IndexCondition > indexConditions ) { prepare ( s , indexConditions ) ; if ( inColumn != null ) { return ; } if ( ! alwaysFalse ) { if ( intersects != null && index instanceof SpatialIndex ) { cursor = ( ( SpatialIndex ) index ) . findByGeometry ( tableFilter , start , end , intersects ) ; } else { cursor = index . find ( tableFilter , start , end ) ; } } }
protected Coordinate_Impl ( ) { super ( ) ; }
public void refreshBitmapShader ( ) { shader = new BitmapShader ( Bitmap . createScaledBitmap ( image , canvasSize , canvasSize , BOOL_ ) , Shader . TileMode . CLAMP , Shader . TileMode . CLAMP ) ; }
public SipTransactionContext sendSubsequentRequest ( SipDialogPath dialog , SipRequest request ) throws PayloadException , NetworkException { boolean loggerActivated = sLogger . isActivated ( ) ; try { SessionAuthenticationAgent agent = dialog . getAuthenticationAgent ( ) ; if ( agent != null ) { agent . setProxyAuthorizationHeader ( request ) ; } ClientTransaction transaction = createNewTransaction ( request ) ; if ( loggerActivated ) { sLogger . debug ( STR_ . concat ( request . getMethod ( ) . toUpperCase ( ) ) ) ; } if ( mSipTraceEnabled ) { System . out . println ( STR_ + request . getStackMessage ( ) . toString ( ) ) ; System . out . println ( TRACE_SEPARATOR ) ; } dialog . getStackDialog ( ) . sendRequest ( transaction ) ; SipTransactionContext ctx = new SipTransactionContext ( transaction ) ; String id = SipTransactionContext . getTransactionContextId ( request ) ; mTransactions . put ( id , ctx ) ; return ctx ; } catch ( ParseException e ) { throw new PayloadException ( STR_ , e ) ; } catch ( SipException e ) { throw new NetworkException ( STR_ , e ) ; } }
public boolean isEmpty ( ) { return listeners . length == NUM_ ; }
public jflex ( java . io . Reader in ) { this . zzReader = in ; }
public void before ( PropertyInfoRestRep oldProps , PropertyInfoRestRep newProps ) { if ( ! isPropertyChanged ( oldProps , newProps , _propertyName ) ) { return ; } String newValue = newProps . getProperty ( _propertyName ) ; ArgumentValidator . checkRange ( Integer . parseInt ( newValue ) , Constants . MIN_AUTH_LOGIN_ATTEMPTS , Constants . MAX_AUTH_LOGIN_ATTEMPTS , _propertyName ) ; }
public void addFocusClearedListener ( FocusClearedListener focusClearedListener ) { mFocusClearedListeners . add ( focusClearedListener ) ; }
public String encodeBody ( ) { return encodeBody ( new StringBuilder ( ) ) . toString ( ) ; }
protected void drawMinimized ( DrawContext dc ) { this . drawFrame ( dc ) ; }
public void end ( ) { ps . println ( STR_ ) ; ps . println ( STR_ ) ; ps . close ( ) ; j2DClient . get ( ) . addEventLine ( new StandardEventLine ( STR_ + filename ) ) ; }
public boolean isStepCompleted ( int stepNumber ) { return completedSteps [ stepNumber ] ; }
public ServerState status ( ) { final ServerLauncher launcher = getInstance ( ) ; if ( isStartingOrRunning ( ) ) { debug ( STR_ ) ; return new ServerState ( this , ( isRunning ( ) ? Status . ONLINE : Status . STARTING ) ) ; } else if ( isPidInProcess ( ) && launcher != null ) { return launcher . statusInProcess ( ) ; } else if ( getPid ( ) != null ) { debug ( STR_ , getPid ( ) ) ; return statusWithPid ( ) ; } else if ( getWorkingDirectory ( ) != null ) { debug ( STR_ , getWorkingDirectory ( ) ) ; return statusWithWorkingDirectory ( ) ; } debug ( STR_ . concat ( STR_ ) ) ; return new ServerState ( this , Status . NOT_RESPONDING ) ; }
public static List orderByStringLength ( Collection collection ) { List ordered = new ArrayList ( collection ) ; Collections . sort ( ordered , new StringLengthComparator ( ) ) ; return ordered ; }
public void disable ( ) throws IOException { synchronized ( optOutLock ) { if ( ! isOptOut ( ) ) { configuration . set ( STR_ , BOOL_ ) ; configuration . save ( configurationFile ) ; } if ( task != null ) { task . cancel ( ) ; task = null ; } } }
public void parseRule ( String source ) throws CSSException , IOException { parser . parseRule ( new InputSource ( new StringReader ( source ) ) ) ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null ) { myHost . updateProgress ( progressLabel , progress ) ; } else { System . out . println ( progressLabel + STR_ + progress + STR_ ) ; } }
protected void paintText ( SeaGlassContext ss , Graphics g , int tabPlacement , Font font , FontMetrics metrics , int tabIndex , String title , Rectangle textRect , boolean isSelected ) { g . setFont ( font ) ; View v = getTextViewForTab ( tabIndex ) ; if ( v != null ) { v . paint ( g , textRect ) ; } else { int mnemIndex = tabPane . getDisplayedMnemonicIndexAt ( tabIndex ) ; FontMetrics fm = SwingUtilities2 . getFontMetrics ( tabPane , g ) ; title = SwingUtilities2 . clipStringIfNecessary ( tabPane , fm , title , textRect . width ) ; g . setColor ( ss . getStyle ( ) . getColor ( ss , ColorType . TEXT_FOREGROUND ) ) ; ss . getStyle ( ) . getGraphicsUtils ( ss ) . paintText ( ss , g , title , textRect , mnemIndex ) ; } }
private ContentComparisonResult tfsItemCompareToLocalFile ( final TFSItemNode tfsItemNode , final Object obj , final IProgressMonitor monitor ) { final Item item = tfsItemNode . getItem ( ) ; if ( item . getItemType ( ) == ItemType . FOLDER ) { return ContentComparisonResult . EQUAL ; } final byte [ ] itemHash = item . getContentHashValue ( ) ; final byte [ ] otherItemHash = getItemHash ( obj , monitor ) ; return compareByHash ( itemHash , otherItemHash ) ; }
public boolean isInside ( Pnt [ ] simplex ) { int [ ] result = this . relation ( simplex ) ; for ( int r : result ) if ( r >= NUM_ ) return BOOL_ ; return BOOL_ ; }
public static boolean isDataUri ( Uri uri ) { return DATA_SCHEME . equals ( getSchemeOrNull ( uri ) ) ; }
public void test_ticket_1202e ( ) throws Exception { new TestHelper ( STR_ , STR_ , STR_ , STR_ ) . runTest ( ) ; }
protected abstract void destroy ( S session ) throws Exception ;
protected WebResource createRequest ( String uriPath ) { ensureInitialization ( ) ; return clientRequestHelper . createRequest ( client , serviceURI , URI . create ( uriPath ) ) ; }
public static long calculateDifferentHour ( long startTimeMillis , long endTimeMillis ) { return calculateDifference ( startTimeMillis , endTimeMillis , DifferenceMode . Hour ) ; }
public InputStream postStream ( ) throws HttpClientException { return sendHttpRequestStream ( STR_ ) ; }
protected AbstractLongObjectMap ( ) { }
public void addChangeListener ( DialLayerChangeListener listener ) ;
public PlaPointFloat change_length ( PlaPointFloat p_to_point , double p_new_length ) { double dx = p_to_point . v_x - v_x ; double dy = p_to_point . v_y - v_y ; if ( dx == NUM_ && dy == NUM_ ) { System . out . println ( STR_ ) ; return p_to_point ; } double length = Math . sqrt ( dx * dx + dy * dy ) ; double new_x = v_x + ( dx * p_new_length ) / length ; double new_y = v_y + ( dy * p_new_length ) / length ; return new PlaPointFloat ( new_x , new_y ) ; }
public int viewToModel ( float x , float y , Shape a , Position . Bias [ ] bias ) { Rectangle alloc = ( Rectangle ) a ; if ( x < alloc . x + ( alloc . width / NUM_ ) ) { bias [ NUM_ ] = Position . Bias . Forward ; return getStartOffset ( ) ; } bias [ NUM_ ] = Position . Bias . Backward ; return getEndOffset ( ) ; }
ExecutionQuery parentId ( String parentId ) ;
static < T , E extends Throwable > ObjIntConsumerWithThrowable < T , E > castObjIntConsumerWithThrowable ( final ObjIntConsumerWithThrowable < T , E > objintconsumerwiththrowable ) { return objintconsumerwiththrowable ; }
Future < Void > heartbeat ( String stream ) ;
public static Map < String , Object > convertDocument ( DispatchContext dctx , Map < String , ? extends Object > context ) { XMultiComponentFactory xmulticomponentfactory = null ; String stringUrl = STR_ + context . get ( STR_ ) ; String stringConvertedFile = STR_ + context . get ( STR_ ) ; String filterName = STR_ + context . get ( STR_ ) ; String oooHost = ( String ) context . get ( STR_ ) ; String oooPort = ( String ) context . get ( STR_ ) ; try { xmulticomponentfactory = OpenOfficeWorker . getRemoteServer ( oooHost , oooPort ) ; OpenOfficeWorker . convertOODocToFile ( xmulticomponentfactory , stringUrl , stringConvertedFile , filterName ) ; Map results = ServiceUtil . returnSuccess ( ) ; return results ; } catch ( IOException e ) { Debug . logError ( e , STR_ , module ) ; return ServiceUtil . returnError ( e . toString ( ) ) ; } catch ( Exception e ) { Debug . logError ( e , STR_ , module ) ; return ServiceUtil . returnError ( e . toString ( ) ) ; } }
protected Object readResolve ( ) throws ObjectStreamException { EnumSyntax [ ] theTable = getEnumValueTable ( ) ; if ( theTable == null ) { throw new InvalidObjectException ( STR_ + getClass ( ) ) ; } int theOffset = getOffset ( ) ; int theIndex = value - theOffset ; if ( NUM_ > theIndex || theIndex >= theTable . length ) { throw new InvalidObjectException ( STR_ + value + STR_ + theOffset + STR_ + ( theOffset + theTable . length - NUM_ ) + STR_ + getClass ( ) ) ; } EnumSyntax result = theTable [ theIndex ] ; if ( result == null ) { throw new InvalidObjectException ( STR_ + value + STR_ + getClass ( ) ) ; } return result ; }
public String initialtermvectors ( ) { return initialtermvectors ; }
public static String maskLeft ( String s , int len , char mask_ch ) { if ( len <= NUM_ ) { return s ; } len = Math . min ( len , s . length ( ) ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = NUM_ ; i < len ; i ++ ) { sb . append ( mask_ch ) ; } sb . append ( s . substring ( len ) ) ; return sb . toString ( ) ; }
public float distanceTo ( AnimatableValue other ) { return NUM_ ; }
void addSeedMaterial ( long seed ) ;
public static void initialize ( ) { if ( sIsInit ) { return ; } sIsInit = BOOL_ ; }
protected static void sendTextContent ( HttpServletResponse response , String content , String contentType ) throws IOException { response . setContentType ( contentType ) ; response . getWriter ( ) . print ( content ) ; }
public StringFormatter ( final String formatString ) { staticParts = new ArrayList < String > ( ) ; parameterPositions = new ArrayList < String > ( ) ; parameter = new HashMap < String , String > ( ) ; String current = formatString ; int index ; boolean hasStart = BOOL_ ; do { if ( hasStart ) { index = current . indexOf ( PARAMETER_END ) ; } else { index = current . indexOf ( PARAMETER_START ) ; } if ( index >= NUM_ ) { if ( hasStart ) { final String param = current . substring ( PARAMETER_START . length ( ) , index ) ; current = current . substring ( index + PARAMETER_END . length ( ) ) ; parameter . put ( param , STR_ ) ; parameterPositions . add ( param ) ; } else { final String s = current . substring ( NUM_ , index ) ; current = current . substring ( index ) ; staticParts . add ( s ) ; } hasStart = ! hasStart ; } } while ( index >= NUM_ ) ; staticParts . add ( current ) ; }
public static JavaCompiler instance ( Context context ) { JavaCompiler instance = context . get ( compilerKey ) ; if ( instance == null ) instance = new JavaCompiler ( context ) ; return instance ; }
public ClientComms ( IMqttAsyncClient client , MqttClientPersistence persistence , MqttPingSender pingSender ) throws MqttException { this . conState = DISCONNECTED ; this . client = client ; this . persistence = persistence ; this . pingSender = pingSender ; this . pingSender . init ( this ) ; this . tokenStore = new CommsTokenStore ( getClient ( ) . getClientId ( ) ) ; this . callback = new CommsCallback ( this ) ; this . clientState = new ClientState ( persistence , tokenStore , this . callback , this , pingSender ) ; callback . setClientState ( clientState ) ; log . setResourceName ( getClient ( ) . getClientId ( ) ) ; }
public void closeHandler ( ) throws CarbonDataWriterException { if ( null != this . dataWriter ) { while ( blockletProcessingCount . get ( ) > NUM_ ) { try { Thread . sleep ( NUM_ ) ; } catch ( InterruptedException e ) { throw new CarbonDataWriterException ( e . getMessage ( ) ) ; } } consumerExecutorService . shutdownNow ( ) ; processWriteTaskSubmitList ( consumerExecutorServiceTaskList ) ; this . dataWriter . writeBlockletInfoToFile ( ) ; LOGGER . info ( STR_ ) ; this . dataWriter . closeWriter ( ) ; } this . dataWriter = null ; this . keyBlockHolder = null ; }
public static boolean isNumeric ( String str ) { if ( str == null || str . length ( ) == NUM_ ) { return BOOL_ ; } int sz = str . length ( ) ; int start = NUM_ ; if ( sz > NUM_ && str . charAt ( NUM_ ) == STR_ ) { if ( sz == NUM_ ) { return BOOL_ ; } start = NUM_ ; } for ( int i = start ; i < sz ; i ++ ) { if ( Character . isDigit ( str . charAt ( i ) ) == BOOL_ ) { return BOOL_ ; } } return BOOL_ ; }
private static void stuffDelayedControlTransfers ( LIR l ) { for ( AbstractBlockBase < ? > b : l . codeEmittingOrder ( ) ) { if ( b != null ) { stuffDelayedControlTransfers ( l , b ) ; } } }
protected AbstractSiblingSelector ( short type , Selector sel , SimpleSelector simple ) { nodeType = type ; selector = sel ; simpleSelector = simple ; }
public boolean equals ( double value ) { return cern . colt . matrix . linalg . Property . DEFAULT . equals ( this , value ) ; }
public void pushCommand ( CMD cmdID , int param ) { String cmd = createCommand ( cmdID , param ) ; if ( cmd != null ) cmdQueue . add ( cmd ) ; }
public UniqueRowIterator ( IntIterator iter ) { m_iter = iter ; m_visited = new BitSet ( ) ; advance ( ) ; }
private void determineGestureOrientation ( MotionEvent e1 , MotionEvent e2 ) { float deltaX = Math . abs ( e2 . getX ( ) - e1 . getX ( ) ) ; float deltaY = Math . abs ( e2 . getY ( ) - e1 . getY ( ) ) ; mGestureOrientation = deltaY * VERTICAL_DETERMINATION_BOOST > deltaX ? GestureOrientation . VERTICAL : GestureOrientation . HORIZONTAL ; mHasDeterminedGestureOrientation = BOOL_ ; }
public void actionPerformed ( ActionEvent e ) { JTextComponent target = getTextComponent ( e ) ; if ( target != null ) { target . copy ( ) ; } }
DialogHandler showProgressBox ( String message ) ;
void notify ( Exception exception ) ;
public BufferedDataInputStream ( InputStream o , int bufLength ) { super ( o , bufLength ) ; }
public byte [ ] fetchOctetString ( int tag ) throws BerException { byte [ ] result = null ; final int backup = next ; try { if ( fetchTag ( ) != tag ) { throw new BerException ( ) ; } result = fetchStringValue ( ) ; } catch ( BerException e ) { next = backup ; throw e ; } return result ; }
public synchronized void removeObject ( NSObject obj ) { set . remove ( obj ) ; }
public static int computeKeyDigest ( SignalEvent event ) { return computeKeyDigest ( ModifierKeys . computeModifiers ( event ) , KeyCodeMap . getKeyFromEvent ( event ) ) ; }
public GeneralizedProvisioningRequestObjectFactory ( ) { }
protected void writeConfigurationToXpath ( String file , String xml , String path ) { XmlFileBuilder manager = new DefaultXmlFileBuilder ( getFileHandler ( ) ) ; manager . setNamespaces ( getNamespaces ( ) ) ; manager . setFile ( file ) ; manager . loadFile ( ) ; manager . insertElementsUnderXPath ( xml , path ) ; manager . writeFile ( ) ; }
public ManagedObjectDecodingException ( ManagedObject < ? > partialManagedObject , Collection < PropertyException > causes ) { super ( createMessage ( partialManagedObject , causes ) ) ; this . partialManagedObject = partialManagedObject ; this . causes = Collections . unmodifiableList ( new LinkedList < PropertyException > ( causes ) ) ; }
public static String bytesToHex ( ByteBuffer b ) { if ( b == null ) { return STR_ ; } int position = b . position ( ) ; int limit = b . limit ( ) ; int length = limit - position ; if ( length == NUM_ ) { return STR_ ; } StringBuilder buffer = new StringBuilder ( ( length - NUM_ ) * NUM_ + NUM_ ) ; buffer . append ( byteToHex ( b . get ( ) ) ) ; for ( int i = NUM_ ; i < length ; i ++ ) { buffer . append ( STR_ ) ; buffer . append ( byteToHex ( b . get ( ) ) ) ; } b . position ( position ) ; b . limit ( limit ) ; return buffer . toString ( ) ; }
public void applyTo ( String [ ] arr ) { for ( int i = NUM_ ; i < arr . length ; i ++ ) arr [ i ] = stem ( arr [ i ] ) ; }
public static void printWarning ( String comment , SQLWarning warning ) { if ( comment == null || warning == null || comment . length ( ) == NUM_ ) throw new IllegalArgumentException ( STR_ ) ; log . warning ( comment ) ; if ( warning == null ) return ; SQLWarning warn = warning ; while ( warn != null ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( warn . getMessage ( ) ) . append ( STR_ ) . append ( warn . getSQLState ( ) ) . append ( STR_ ) . append ( warn . getErrorCode ( ) ) ; log . warning ( buffer . toString ( ) ) ; warn = warn . getNextWarning ( ) ; } }
public void addTooltip ( ItemStack stack , EntityPlayer player , List < String > tooltip ) { }
void changedColor ( ViewNode node , Color color ) ;
public ElementType pop ( ) { return isEmpty ( ) ? null : stack . remove ( stack . size ( ) - NUM_ ) ; }
protected abstract ContentDbDao onCreateContentDbDao ( ) ;
public static String stringFor ( int n ) { switch ( n ) { case cudaKeyValuePair : return STR_ ; case cudaCSV : return STR_ ; } return STR_ + n ; }
public Builder withEntries ( Entry ... entries ) { return withEntries ( Arrays . asList ( Assert . notNull ( entries , STR_ ) ) ) ; }
public void update ( byte [ ] in , int off , int len ) { digest . update ( in , off , len ) ; }
public void readBIFFromFile ( String sFileName ) throws BIFFormatException , IOException { m_sFileName = sFileName ; try { BIFReader bayesNet = new BIFReader ( ) ; bayesNet . processFile ( sFileName ) ; m_BayesNet = new EditableBayesNet ( bayesNet ) ; updateStatus ( ) ; a_datagenerator . setEnabled ( m_BayesNet . getNrOfNodes ( ) > NUM_ ) ; m_BayesNet . clearUndoStack ( ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; return ; } setAppropriateNodeSize ( ) ; setAppropriateSize ( ) ; }
private int internalGetEra ( ) { return isSet ( ERA ) ? internalGet ( ERA ) : eras . length - NUM_ ; }
public Object runSafely ( Catbert . FastStack stack ) throws Exception { CaptureDeviceInput conn = getCapDevInput ( stack ) ; return new Integer ( conn == null ? NUM_ : conn . getSharpness ( ) ) ; }
public static synchronized PropertiesSupport sharedInstance ( ) { if ( INSTANCE == null ) INSTANCE = new PropertiesSupport ( ) ; return INSTANCE ; }
public static void saveFormsData ( final String file ) { throw new java . lang . AssertionError ( STR_ ) ; }
double stdDev ( ) ;
static PageBtreeLeaf create ( PageBtreeIndex index , int pageId , int parentPageId ) { PageBtreeLeaf p = new PageBtreeLeaf ( index , pageId , index . getPageStore ( ) . createData ( ) ) ; index . getPageStore ( ) . logUndo ( p , null ) ; p . rows = SearchRow . EMPTY_ARRAY ; p . parentPageId = parentPageId ; p . writeHead ( ) ; p . start = p . data . length ( ) ; return p ; }
public void onAnswer ( long sessionId , String sdp ) { send ( new RTCAnswer ( deviceId , sessionId , sdp ) ) ; }
protected void removeSession ( String ssoId , Session session ) { if ( containerLog . isDebugEnabled ( ) ) { containerLog . debug ( sm . getString ( STR_ , session , ssoId ) ) ; } SingleSignOnEntry entry = cache . get ( ssoId ) ; if ( entry == null ) { return ; } entry . removeSession ( session ) ; if ( entry . findSessions ( ) . size ( ) == NUM_ ) { deregister ( ssoId ) ; } }
public void addPlotter ( final Plotter plotter ) { plotters . add ( plotter ) ; }
public static void writeVarLong ( ByteBuffer buff , long x ) { while ( ( x & ~ NUM_ ) != NUM_ ) { buff . put ( ( byte ) ( NUM_ | ( x & NUM_ ) ) ) ; x >>>= NUM_ ; } buff . put ( ( byte ) x ) ; }
public void checkSyntax ( String expression ) throws ExpressionException ;
public void onExportStarted ( ) ;
public void changeRoleToSlaveWithRequest ( ) throws Exception { assertTrue ( STR_ + STR_ , switchHandler . isHandshakeComplete ( ) ) ; long xid = setupSwitchSendRoleRequestAndVerify ( BOOL_ , OFControllerRole . ROLE_SLAVE ) ; reset ( sw ) ; sw . setAttribute ( IOFSwitch . SWITCH_SUPPORTS_NX_ROLE , BOOL_ ) ; expectLastCall ( ) . once ( ) ; sw . setControllerRole ( OFControllerRole . ROLE_SLAVE ) ; expectLastCall ( ) . once ( ) ; expect ( sw . getStatus ( ) ) . andReturn ( SwitchStatus . MASTER ) . once ( ) ; sw . setStatus ( SwitchStatus . SLAVE ) ; expectLastCall ( ) . once ( ) ; replay ( sw ) ; reset ( switchManager ) ; switchManager . switchStatusChanged ( sw , SwitchStatus . MASTER , SwitchStatus . SLAVE ) ; expectLastCall ( ) . once ( ) ; replay ( switchManager ) ; OFMessage reply = getRoleReply ( xid , OFControllerRole . ROLE_SLAVE ) ; connection . getListener ( ) . messageReceived ( connection , reply ) ; assertThat ( switchHandler . getStateForTesting ( ) , CoreMatchers . instanceOf ( OFSwitchHandshakeHandler . SlaveState . class ) ) ; }
public Configuration domain ( String domain ) { this . domain = domain ; return this ; }
public boolean hasEulerianCycle ( ) { return cycle != null ; }
public double loadDouble ( ) { return SimulatedMemory . getDouble ( this ) ; }
protected JBZipEntry ( String name , JBZipFile file ) { this . name = name ; myFile = file ; }
public FluentBiFunction < T1 , T2 , R > after ( final TriConsumer < T1 , T2 , R > action ) { return withFn ( null ) ; }
public TupleSerializer ( final IKeyBuilderFactory keyBuilderFactory ) { super ( keyBuilderFactory ) ; }
public void addPropertyChangeListener ( PropertyChangeListener listener ) ;
private ChatCondition constructHayCartsNotYetCompletedCondition ( ) { ChatCondition c = new AndCondition ( new QuestStartedCondition ( QUEST_SLOT ) , new QuestInStateCondition ( QUEST_SLOT , NUM_ , STR_ ) , new QuestStateGreaterThanCondition ( QUEST_SLOT , NUM_ , NUM_ ) ) ; return c ; }
public void proxyCreated ( MatlabProxy proxy ) ;
public ResAllocsBuilder withDisk ( double disk ) { this . disk = disk ; return this ; }
protected void writeLocalReferences ( ForeignKey key , StringBuilder ddl ) { for ( int idx = NUM_ ; idx < key . getReferenceCount ( ) ; idx ++ ) { if ( idx > NUM_ ) { ddl . append ( STR_ ) ; } printIdentifier ( key . getReference ( idx ) . getLocalColumnName ( ) , ddl ) ; } }
protected ModuleFilterSpecifierImpl ( ) { super ( ) ; }
public static < ValueT > ByteBuffer toByteBuffer ( ValueT obj ) throws IOException { byte [ ] bytes = null ; ByteArrayOutputStream bos = null ; ObjectOutputStream oos = null ; try { bos = new ByteArrayOutputStream ( ) ; oos = new ObjectOutputStream ( bos ) ; oos . writeObject ( obj ) ; oos . flush ( ) ; bytes = bos . toByteArray ( ) ; } finally { if ( oos != null ) { oos . close ( ) ; } if ( bos != null ) { bos . close ( ) ; } } return ByteBuffer . wrap ( bytes ) ; }
public Observable < Api . Info > info ( String username , Set < ContentType > contentTypes ) { return api . info ( username , ContentType . combine ( contentTypes ) ) ; }
public static Workbook createExcel ( List < String > keyList , Map < String , ResourceBundle > defaultProperties , Map < String , Properties > localizedProperties , Workbook wb , String sheetName , List < Locale > locales ) { if ( wb == null ) { wb = new HSSFWorkbook ( ) ; } String sheetNameForDisplay = getDefaultResourceBundle ( ) . getString ( sheetName ) ; Sheet sheet = wb . getSheet ( sheetNameForDisplay ) ; if ( sheet == null ) { sheet = wb . createSheet ( sheetNameForDisplay ) ; CellStyle styleTitle = initializeSheet ( wb , sheet ) ; List < String > localeList = createFirstRow ( sheetName , locales , sheet , styleTitle ) ; createRows ( keyList , defaultProperties , localizedProperties , sheet , localeList , sheetName ) ; } return wb ; }
protected boolean showAccessibilityToast ( View view , CharSequence description ) { if ( description == null ) return BOOL_ ; final int screenWidth = getResources ( ) . getDisplayMetrics ( ) . widthPixels ; final int [ ] screenPos = new int [ NUM_ ] ; view . getLocationOnScreen ( screenPos ) ; final int width = view . getWidth ( ) ; Toast toast = Toast . makeText ( getContext ( ) , description , Toast . LENGTH_SHORT ) ; toast . setGravity ( Gravity . TOP | Gravity . END , screenWidth - screenPos [ NUM_ ] - width / NUM_ , getHeight ( ) ) ; toast . show ( ) ; return BOOL_ ; }
final boolean casBase ( long cmp , long val ) { return UNSAFE . compareAndSwapLong ( this , baseOffset , cmp , val ) ; }
public void endDocument ( ) throws SAXException { if ( contentHandler != null ) { contentHandler . endDocument ( ) ; } }
private void saveCrashToLocal ( Throwable ex ) { LogUtil . d ( STR_ ) ; if ( config . isSaveToLocal ( ) ) { String localFolderPath = config . getLocalFolderPath ( ) ; if ( null != localFolderPath && localFolderPath . length ( ) > NUM_ ) { File file = new File ( localFolderPath ) ; file . mkdirs ( ) ; if ( file . exists ( ) && file . isDirectory ( ) ) { AECHFileWriter . getInstance ( mContext ) . writeEx2File ( ex , localFolderPath ) ; } else { AECHFileWriter . getInstance ( mContext ) . writeEx2File ( ex ) ; } } else { AECHFileWriter . getInstance ( mContext ) . writeEx2File ( ex ) ; } } }
public boolean isNamespaceAware ( ) { return getFeature ( XmlPullParser . FEATURE_PROCESS_NAMESPACES ) ; }
public void start ( ) { stunStack = new StunStack ( ) ; }
public String sqlAD_getSequences ( String vendorName , String catalogName , String schemaName ) { String tableName = STR_ ; ArrayList < String > columnNames = new ArrayList < String > ( ) ; columnNames . add ( STR_ ) ; columnNames . add ( STR_ ) ; columnNames . add ( STR_ ) ; ArrayList < String > aliasNames = new ArrayList < String > ( ) ; aliasNames . add ( STR_ ) ; aliasNames . add ( STR_ ) ; aliasNames . add ( STR_ ) ; ArrayList < String > conditions = new ArrayList < String > ( ) ; conditions . add ( STR_ ) ; ArrayList < String > sortColumns = new ArrayList < String > ( ) ; sortColumns . add ( STR_ ) ; return sql_select ( vendorName , catalogName , schemaName , tableName , null , columnNames , aliasNames , conditions , sortColumns , BOOL_ ) ; }
public void deviceAdded ( MtpDevice device ) ;
public void test_agg09 ( ) throws MalformedQueryException { final String query = STR_ + STR_ + STR_ ; negativeTest ( query ) ; }
private void processCandidateForUnaassign ( Iterable < User > users , String projectName ) { List < User > updated = StreamSupport . stream ( users . spliterator ( ) , BOOL_ ) . filter ( null ) . map ( null ) . collect ( toList ( ) ) ; userRepository . save ( updated ) ; }
public boolean isPrivilegedSlave ( ) ;
String constructComponentName ( ) { synchronized ( Window . class ) { return base + nameCounter ++ ; } }
protected void drawXAxis ( Graphics2D gc ) { gc . setFont ( getFont ( ChartViewer . FontKeys . XAxisFont . toString ( ) ) ) ; gc . setColor ( getFontColor ( ChartViewer . FontKeys . XAxisFont . toString ( ) , Color . BLACK ) ) ; int x = NUM_ ; int y = getHeight ( ) - bottomMargin + NUM_ ; if ( isTranspose ( ) ) gc . drawString ( getChartData ( ) . getClassesLabel ( ) , x , y ) ; else gc . drawString ( getChartData ( ) . getSeriesLabel ( ) , x , y ) ; }
void store ( ) { throw new AssertionError ( STR_ + this ) ; }
public void disableDashedHighlightLine ( ) { mHighlightDashPathEffect = null ; }
public List < Entry > parse ( InputStream in ) throws XmlPullParserException , IOException , ParseException { try { XmlPullParser parser = Xml . newPullParser ( ) ; parser . setFeature ( XmlPullParser . FEATURE_PROCESS_NAMESPACES , BOOL_ ) ; parser . setInput ( in , null ) ; parser . nextTag ( ) ; return readFeed ( parser ) ; } finally { in . close ( ) ; } }
private List < ValidationError > checkForNoRatesPresent ( ) { if ( overheadRates != null && overheadRates . isEmpty ( ) ) return Arrays . asList ( new ValidationError ( STR_ , STR_ ) ) ; else return null ; }
public void testRemoteListenForOldest ( ) throws Exception { remoteListenForOldest ( ignite1 ) ; stopGrid ( NUM_ ) ; ignite1 = startGrid ( NUM_ ) ; MSG_CNT . set ( NUM_ ) ; remoteListenForOldest ( ignite2 ) ; }
public void addDataPoint ( double value ) { this . series . get ( NUM_ ) . addDataPoint ( value ) ; }
public static KeyToken fromOutboundMessage ( final Message msg ) { return new KeyToken ( msg . getToken ( ) , msg . getDestination ( ) . getAddress ( ) , msg . getDestinationPort ( ) ) ; }
protected void printTime ( String s ) { SimpleDateFormat dateFormat = new SimpleDateFormat ( STR_ ) ; println ( dateFormat . format ( new java . util . Date ( ) ) + STR_ + s ) ; }
protected void assertRequiredDependentMetricCount ( String dictionaryName , List < String > dependentMetrics ) { int requiredCount = getDependentMetricsRequired ( ) ; int actualCount = dependentMetrics . size ( ) ; if ( actualCount != requiredCount ) { String message = String . format ( STR_ , dictionaryName , actualCount , requiredCount ) ; LOG . error ( message ) ; throw new IllegalArgumentException ( message ) ; } }
public final boolean isFocusDimmerUsed ( ) { return mUseFocusDimmer ; }
public MaterialRange ( Integer min , Integer max , Integer value ) { this ( ) ; setMin ( min ) ; setMax ( max ) ; setValue ( value ) ; }
public void fitnessEvaluation ( Chromosome individual ) ;
protected void addDataSource ( String dataSource ) { if ( ! StringUtils . isEmpty ( dataSource ) ) { dataSources . add ( dataSource ) ; } }
private static Protocol lazyRegisterProtocol ( final String id ) throws IllegalStateException { if ( STR_ . equals ( id ) ) { final Protocol http = new Protocol ( STR_ , DefaultProtocolSocketFactory . getSocketFactory ( ) , NUM_ ) ; Protocol . registerProtocol ( STR_ , http ) ; return http ; } if ( STR_ . equals ( id ) ) { final Protocol https = new Protocol ( STR_ , SSLProtocolSocketFactory . getSocketFactory ( ) , NUM_ ) ; Protocol . registerProtocol ( STR_ , https ) ; return https ; } throw new IllegalStateException ( STR_ + id + STR_ ) ; }
public SVGPath relativeSmoothQuadTo ( double [ ] xy ) { append ( PATH_SMOOTH_QUAD_TO_RELATIVE , xy [ NUM_ ] , xy [ NUM_ ] ) ; return this ; }
public void testIntbyInt1 ( ) { byte aBytes [ ] = { NUM_ , NUM_ , NUM_ , NUM_ } ; byte bBytes [ ] = { NUM_ , NUM_ , NUM_ , NUM_ } ; int aSign = NUM_ ; int bSign = - NUM_ ; byte rBytes [ ] = { - NUM_ , - NUM_ , - NUM_ , NUM_ , NUM_ , NUM_ , NUM_ } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . multiply ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = NUM_ ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( STR_ , - NUM_ , result . signum ( ) ) ; }
public EObject basicGetFeature ( ) { return feature ; }
public void init ( ) { mCurrentPhaseId ++ ; mDefaultEventBus . register ( mEventBusSubscriber ) ; mCrudEventBus . register ( mEventBusSubscriber ) ; mAppModel . fetchSinglePatient ( mCrudEventBus , mPatientUuid ) ; mAppModel . fetchLocationTree ( mCrudEventBus , LocaleSelector . getCurrentLocale ( ) . toString ( ) ) ; startObservationSync ( ) ; }
public OpenDataWorldAction ( Workspace workspace ) { super ( STR_ , workspace ) ; putValue ( SMALL_ICON , ResourceManager . getImageIcon ( STR_ ) ) ; }
Stream < ? extends Schema > schemas ( ) ;
public static void hideCurrentActionPopUpWindow ( ) { if ( mCurrentActionPopupWindow != null ) { mCurrentActionPopupWindow . dismiss ( ) ; mCurrentActionPopupWindow = null ; } hideSoftKeyboard ( ) ; }
private void returnData ( Object ret ) { if ( myHost != null ) { myHost . returnData ( ret ) ; } }
void writeAttribute ( String namespaceURI , String localName , String value ) throws XMLStreamException ;
public void writeUpdate ( LogOutputStream out , Object value ) throws Exception { MarshalOutputStream s = new MarshalOutputStream ( out ) ; s . writeObject ( value ) ; s . flush ( ) ; }
public void onVoiceChannelChangeName ( DiscordAPI api , VoiceChannel channel , String oldName ) ;
public boolean isMultiTouch ( ) { return impl . isMultiTouch ( ) ; }
public AltRegistry ( ) { this ( null ) ; }
protected void firePropertyChange ( PropertyChangeEvent event ) { if ( listenerList == null ) return ; PropertyChangeListener listener ; Iterator < PropertyChangeListener > it = listenerList . iterator ( ) ; while ( it . hasNext ( ) ) { listener = it . next ( ) ; listener . propertyChange ( event ) ; } }
void screenshot ( String message ) ;
private void handleActionDownload ( String url ) { new DownloadImageAsyncTask ( this ) . execute ( url ) ; }
DownloadCallback downloadCallback ( ) { return downloadCallback ; }
public In ( URL url ) { if ( url == null ) throw new NullPointerException ( STR_ ) ; try { URLConnection site = url . openConnection ( ) ; InputStream is = site . getInputStream ( ) ; scanner = new Scanner ( new BufferedInputStream ( is ) , CHARSET_NAME ) ; scanner . useLocale ( LOCALE ) ; } catch ( IOException ioe ) { throw new IllegalArgumentException ( STR_ + url ) ; } }
private void readFromVersion2Stream ( StatusFromBytesStream dis ) throws IOException { String urlString = dis . readUTF ( ) ; if ( urlString . equals ( STR_ ) ) { url = null ; } else { url = urlString ; } lastChangedRevision = dis . readLong ( ) ; lastChangedDate = dis . readLong ( ) ; String lastCommitAuthorString = dis . readUTF ( ) ; if ( ( url == null ) || ( lastCommitAuthorString . equals ( STR_ ) ) ) { lastCommitAuthor = null ; } else { lastCommitAuthor = lastCommitAuthorString ; } textStatus = dis . readInt ( ) ; propStatus = dis . readInt ( ) ; setRevisionNumber ( dis . readLong ( ) ) ; nodeKind = dis . readInt ( ) ; }
public boolean hasBeenSynced ( ) { return Play . hasBeenSynced ( playId ) ; }
private void returnData ( Object ret ) { if ( myHost != null ) { myHost . returnData ( ret ) ; } }
double doubleValue ( ) ;
public static String encodeScheme ( String scheme , String encoding ) { return encodeUriComponent ( scheme , encoding , URIPart . SCHEME ) ; }
public ParseTreeNode ( PhraseChunk chunk ) { this . chunk = chunk ; }
private void readObject ( java . io . ObjectInputStream s ) throws java . io . IOException , ClassNotFoundException { s . defaultReadObject ( ) ; set ( s . readDouble ( ) ) ; }
protected void addCheckedStandardDefaults ( QualifierDefaults defs ) { if ( this . everUseFlow ) { Set < ? extends AnnotationMirror > tops = this . qualHierarchy . getTopAnnotations ( ) ; Set < ? extends AnnotationMirror > bottoms = this . qualHierarchy . getBottomAnnotations ( ) ; defs . addClimbStandardDefaults ( tops , bottoms ) ; } }
public void receiveResultqueryAssociatedCapabilityForFileSystem ( com . emc . storageos . vasa . VasaServiceStub . QueryAssociatedCapabilityForFileSystemResponse result ) { }
Project updateProject ( ProjectDTO projectDTO ) ;
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
protected abstract void emit_ishl ( ) ;
public boolean isChromeGoogleSigned ( Context context ) { return isGoogleSigned ( context . getApplicationContext ( ) . getPackageManager ( ) , context . getPackageName ( ) ) ; }
public GroupBuilder < T , E > closeUnion ( ) { return mParent ; }
void skipMember ( ) { bp = bp + NUM_ ; char ac = nextChar ( ) ; for ( int i = NUM_ ; i < ac ; i ++ ) { bp = bp + NUM_ ; int attrLen = nextInt ( ) ; bp = bp + attrLen ; } }
private ShortCutUtil ( ) { throw new Error ( STR_ ) ; }
int dividerTopMargin ( int position , RecyclerView parent ) ;
public SearchRequest source ( byte [ ] source ) { return source ( source , NUM_ , source . length ) ; }
public void swapBuffers ( ) { RenderTarget tmp = mReadBuffer ; mReadBuffer = mWriteBuffer ; mWriteBuffer = tmp ; }
public void wrExtAddr ( int addr ) { write ( NUM_ , EXT_ADDR , new byte [ ] { ( byte ) ( addr / NUM_ ) , ( byte ) ( addr & NUM_ ) } ) ; }
public static XMLObjectWriter newInstance ( OutputStream out , String encoding ) throws XMLStreamException { XMLObjectWriter writer = new XMLObjectWriter ( ) ; writer . setOutput ( out , encoding ) ; return writer ; }
public void flushBuffer ( ) throws IOException { if ( closed ) { return ; } if ( count > NUM_ ) { out . write ( buf , NUM_ , count ) ; count = NUM_ ; } }
public boolean directoryExists ( String dir ) { boolean result = BOOL_ ; StringBuilder buf = new StringBuilder ( ) ; String command = String . format ( ImageServerDialogProperties . getString ( STR_ ) , dir ) ; sendWaitFor ( command , defaultTimeout , prompts , buf ) ; log . debug ( buf . toString ( ) ) ; String [ ] lines = getLines ( buf ) ; for ( String line : lines ) { if ( line . trim ( ) . equals ( STR_ ) ) { result = BOOL_ ; break ; } if ( line . trim ( ) . equals ( STR_ ) ) { result = BOOL_ ; break ; } } return result ; }
public SearchRequestBuilder clearRescorers ( ) { sourceBuilder ( ) . clearRescorers ( ) ; return this ; }
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( createElementNS05 . class , args ) ; }
public ExtendedResponseProtocolOp ( int resultCode ) { this . resultCode = resultCode ; }
void joinThread ( Thread thread ) throws InterruptedException ;
public void updateIDPAuthenticationContexts ( String realm , String entityName , SAMLv2AuthContexts cxt ) throws AMConsoleException ;
public boolean isPanelAnchored ( ) { return mSlideState == SlideState . ANCHORED ; }
int positionOfItem ( Item item ) { int offset = NUM_ ; for ( List < ? > section : mSections ) { int index = section . indexOf ( item ) ; if ( index != - NUM_ ) { return offset + index ; } offset += section . size ( ) ; } return - NUM_ ; }
public int generateCode ( ) { ir . MIRInfo . machinecode = CodeArray . Factory . create ( ir . MIRInfo . mcSizeEstimate , BOOL_ ) ; return genCode ( ir , shouldPrint ) ; }
private void saveNestedVariables ( ) { if ( nestedVars != null ) { Iterator < String > iter = nestedVars . iterator ( ) ; while ( iter . hasNext ( ) ) { String varName = iter . next ( ) ; varName = findAlias ( varName ) ; Object obj = invokingJspCtxt . getAttribute ( varName ) ; if ( obj != null ) { originalNestedVars . put ( varName , obj ) ; } } } }
public void testLess ( ) { m_Filter = getFilter ( STR_ ) ; Instances result = useFilter ( ) ; assertEquals ( m_Instances . numAttributes ( ) , result . numAttributes ( ) ) ; assertEquals ( NUM_ , result . numInstances ( ) ) ; }
public void fabricateMachineCodeOffsetForPrologueInstruction ( Instruction instr ) { if ( VM . VerifyAssertions ) { boolean prologueInstr = instr . getOpcode ( ) == IR_PROLOGUE_opcode ; boolean hasNoValidOffset = lacksMachineCodeOffset ( instr ) ; if ( ! prologueInstr || ! hasNoValidOffset ) { VM . sysWriteln ( STR_ + instr ) ; } VM . _assert ( prologueInstr , STR_ ) ; VM . _assert ( hasNoValidOffset , STR_ ) ; } mcOffsets . put ( instr , Integer . valueOf ( NUM_ ) ) ; }
public SocksServerBuilder useSSL ( SSLConfiguration sslConfiguration ) { this . sslConfiguration = sslConfiguration ; return this ; }
public void v ( String message , Object ... args ) { prepareLog ( TLog . VERBOSE , null , message , args ) ; }
public static synchronized void sendCommitmentProto ( SignedTreeRoot str , Socket socket ) { Logging . log ( STR_ ) ; Commitment comm = buildCommitmentMsg ( str ) ; sendMsgProto ( MsgType . COMMITMENT , comm , socket ) ; }
Observable < Integer > rxDelete ( final T data ) ;
public boolean canDockEast ( ) { return canDockEast ; }
public static double pareto ( double alpha ) { return Math . pow ( NUM_ - uniform ( ) , - NUM_ / alpha ) - NUM_ ; }
public void testRetainAll ( ) { LinkedBlockingDeque q = populatedDeque ( SIZE ) ; LinkedBlockingDeque p = populatedDeque ( SIZE ) ; for ( int i = NUM_ ; i < SIZE ; ++ i ) { boolean changed = q . retainAll ( p ) ; if ( i == NUM_ ) assertFalse ( changed ) ; else assertTrue ( changed ) ; assertTrue ( q . containsAll ( p ) ) ; assertEquals ( SIZE - i , q . size ( ) ) ; p . remove ( ) ; } }
Bucket createBucket ( Experiment . ID experimentId , Bucket newBucket , UserInfo user ) ;
public static String format ( Object value , Type type ) { value = decode ( value , type ) ; switch ( type . getTag ( ) ) { case BYTE : return formatByte ( ( Byte ) value ) ; case LONG : return formatLong ( ( Long ) value ) ; case FLOAT : return formatFloat ( ( Float ) value ) ; case DOUBLE : return formatDouble ( ( Double ) value ) ; case CHAR : return formatChar ( ( Character ) value ) ; } if ( value instanceof String ) return formatString ( ( String ) value ) ; return value + STR_ ; }
public void test_datatypeLiteral_xsd_float_not_double ( ) { final String lit1 = STR_ ; final byte [ ] k1 = fixture . datatypeLiteral2key ( XMLSchema . FLOAT , lit1 ) ; final byte [ ] k2 = fixture . datatypeLiteral2key ( XMLSchema . DOUBLE , lit1 ) ; if ( log . isInfoEnabled ( ) ) { log . info ( STR_ + lit1 + STR_ + BytesUtil . toString ( k1 ) ) ; log . info ( STR_ + lit1 + STR_ + BytesUtil . toString ( k2 ) ) ; } assertTrue ( BytesUtil . compareBytes ( k1 , k2 ) != NUM_ ) ; }
public boolean equals ( Matrix3d m1 ) { try { return ( this . m00 == m1 . m00 && this . m01 == m1 . m01 && this . m02 == m1 . m02 && this . m10 == m1 . m10 && this . m11 == m1 . m11 && this . m12 == m1 . m12 && this . m20 == m1 . m20 && this . m21 == m1 . m21 && this . m22 == m1 . m22 ) ; } catch ( NullPointerException e2 ) { return BOOL_ ; } }
public native void clearFieldErrors ( String fieldName , boolean show ) ;
public void breadthFirstTraversal ( ) { if ( root == null ) return ; java . util . Queue < TreeNode < E > > queue = new java . util . LinkedList < > ( ) ; queue . add ( root ) ; while ( ! queue . isEmpty ( ) ) { TreeNode < E > current = queue . element ( ) ; if ( current . left != null ) { queue . add ( current . left ) ; } if ( current . right != null ) { queue . add ( current . right ) ; } System . out . print ( queue . remove ( ) . element + STR_ ) ; } }
public static boolean isDefaultIncludeSelectCancel ( ) { return defaultIncludeSelectCancel ; }
protected abstract double compute ( Date left , Date right , String valueLocale , String valueTimezone ) ;
public Object clone ( ) { RandomSampler copy = ( RandomSampler ) super . clone ( ) ; copy . my_RandomGenerator = ( RandomEngine ) this . my_RandomGenerator . clone ( ) ; return copy ; }
public final void check ( final Predicate3 < P , P2 , T > property ) { final TheoryRunner < Tuple3 < P , P2 , T > , Tuple3 < P , P2 , T > > qc = new TheoryRunner < > ( this . state . get ( ) , ps , null , Function . identity ( ) , ps ) ; qc . check ( null ) ; }
XMLEvent nextEvent ( ) throws XMLStreamException ;
private void updateProgress ( int progress ) { if ( myHost != null && progress != previousProgress ) { myHost . updateProgress ( progress ) ; } previousProgress = progress ; }
private void recalculateStartPositions ( ) { int currentStartIndex = NUM_ ; for ( ListPiece listPiece : listPieces ) { listPiece . setStartPosition ( currentStartIndex ) ; currentStartIndex += listPiece . getCount ( ) ; } }
public String nominalIndicesTipText ( ) { return STR_ + STR_ ; }
public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Node employeeNode ; doc = ( Document ) load ( STR_ , BOOL_ ) ; elementList = doc . getElementsByTagName ( STR_ ) ; employeeNode = elementList . item ( NUM_ ) ; { boolean success = BOOL_ ; try { employeeNode . setPrefix ( STR_ ) ; } catch ( DOMException ex ) { success = ( ex . code == DOMException . NAMESPACE_ERR ) ; } assertTrue ( STR_ , success ) ; } }
public int substitute_trace_count ( ) { return trace_piece_count ; }
public ProxyInputStream ( InputStream proxy ) { super ( proxy ) ; }
public void handleRemoveWaitingForInfoSA ( RemoveWaitingForInfoSABusPacket packet ) throws SAException { Context context = null ; try { context = _cacheManager . getCacheContext ( ) ; context . setOperationID ( packet . getOperationID ( ) ) ; if ( packet . getEntryHolder ( ) != null ) { handleRemoveWaitingForInfoSA_EntryBased ( context , packet . getEntryHolder ( ) , packet . getTemplate ( ) ) ; } else { handleRemoveWaitingForInfoSA_TemplateBased ( context , packet . getTemplate ( ) ) ; } } finally { _cacheManager . freeCacheContext ( context ) ; } }
public boolean isSetMessage ( ) { return this . message != null ; }
void onEulaRefusedTo ( ) ;
public static void assertSame ( Object expected , Object actual , String errorMessage ) { if ( verbose ) { log ( STR_ + expected + STR_ + actual + STR_ + errorMessage + STR_ ) ; } assertBool ( expected == actual , errorMessage ) ; }
public static String stackTraceToString ( final Exception exception ) { StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; exception . printStackTrace ( pw ) ; return sw . toString ( ) ; }
public static void d ( String tag , String msg ) { if ( sLevel > LEVEL_DEBUG ) { return ; } Log . d ( tag , msg ) ; }
public boolean finish ( ) { IProject selectedProject = ( IProject ) listViewer . getCheckedElements ( ) [ NUM_ ] ; if ( ! ensureTargetIsValid ( ) ) { return BOOL_ ; } saveDirtyEditors ( ) ; saveWidgetValues ( ) ; Optional < ? extends IN4JSEclipseProject > eclipseProjectOpt = n4jsCore . create ( selectedProject ) ; if ( eclipseProjectOpt . isPresent ( ) ) { String targetDirectory = getTargetDirectory ( ) ; File archiveFile = new File ( targetDirectory , getTargetFileName ( ) ) ; IFile mainFile = null ; Object firstElement = initialResourceSelection . getFirstElement ( ) ; if ( firstElement instanceof IFile ) mainFile = ( IFile ) firstElement ; try { boolean result = executeExportOperation ( createExportOperation ( archiveFile , mainFile , eclipseProjectOpt . get ( ) ) ) ; return result ; } finally { String overlappingProject = getOverlappingProjectName ( targetDirectory ) ; try { workspace . getRoot ( ) . getProject ( overlappingProject ) . refreshLocal ( IResource . DEPTH_INFINITE , null ) ; } catch ( CoreException e ) { } } } return BOOL_ ; }
VOPSP savePSP ( VOPSP psp ) throws ConcurrentModificationException , ValidationException , NonUniqueBusinessKeyException , ObjectNotFoundException ;
public void populate ( MultiOptionSelectedInterface symbolSelectedListener , List < ValueComboBoxDataGroup > dataSelectionList ) { this . symbolSelectedListener = symbolSelectedListener ; if ( comboBox != null ) { comboBox . initialiseMenu ( dataSelectionList ) ; } }
public Object parse ( String text ) throws DataParseException { try { StringTokenizer st = new StringTokenizer ( text , STR_ ) ; int [ ] array = new int [ st . countTokens ( ) ] ; for ( int i = NUM_ ; st . hasMoreTokens ( ) ; ++ i ) { String tok = st . nextToken ( ) ; array [ i ] = Integer . parseInt ( tok ) ; } return array ; } catch ( NumberFormatException e ) { throw new DataParseException ( e ) ; } }
private static char decodeHexNibble ( final char c ) { if ( STR_ <= c && c <= STR_ ) { return ( char ) ( c - STR_ ) ; } else if ( STR_ <= c && c <= STR_ ) { return ( char ) ( c - STR_ + NUM_ ) ; } else if ( STR_ <= c && c <= STR_ ) { return ( char ) ( c - STR_ + NUM_ ) ; } else { return Character . MAX_VALUE ; } }
private boolean isSentenceStart ( int index ) { FeatureVector fv = features . getFeatureVector ( index ) ; return fv . getByteFeature ( fiSentenceStart ) == NUM_ && fv . getByteFeature ( fiWordStart ) == NUM_ && ( ! isHalfphone || fv . getByteFeature ( fiLR ) == fvLR_L ) ; }
public JSONArray optJSONArray ( int index ) { Object o = this . opt ( index ) ; return o instanceof JSONArray ? ( JSONArray ) o : null ; }
public void addWarning ( int importance , String text , Object data , CSTNode context , SourceUnit source ) { if ( WarningMessage . isRelevant ( importance , configuration . getWarningLevel ( ) ) ) { addWarning ( new WarningMessage ( importance , text , data , context , source ) ) ; } }
protected void registerClientInterestList ( String regionName , List keysOfInterest , boolean sendUpdatesAsInvalidates ) { FilterProfile p = getProfile ( regionName ) ; if ( p == null ) { throw new RegionDestroyedException ( STR_ , regionName ) ; } Set keysRegistered = null ; synchronized ( this . interestListLock ) { keysRegistered = p . registerClientInterestList ( id , keysOfInterest , sendUpdatesAsInvalidates ) ; regions . add ( regionName ) ; } if ( containsInterestRegistrationListeners ( ) && ! keysRegistered . isEmpty ( ) ) { handleInterestEvent ( regionName , keysRegistered , InterestType . KEY , BOOL_ ) ; } }
private String processNodeName ( Tree node ) { String code = node . getText ( ) ; try { NodeName nodeName = NodeName . findByCode ( code ) ; return nodeName . getName ( ) ; } catch ( NodeNameForCodeDoesNotExistException e ) { } return code ; }
public AWTTerminalFrame ( String title , TerminalEmulatorDeviceConfiguration deviceConfiguration , AWTTerminalFontConfiguration fontConfiguration , TerminalEmulatorColorConfiguration colorConfiguration , TerminalEmulatorAutoCloseTrigger ... autoCloseTriggers ) { this ( title , null , deviceConfiguration , fontConfiguration , colorConfiguration , autoCloseTriggers ) ; }
public void adjustMasterVolume ( int steps , int flags ) { IAudioService service = getService ( ) ; try { service . adjustMasterVolume ( steps , flags ) ; } catch ( RemoteException e ) { Log . e ( TAG , STR_ , e ) ; } }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public void addBodyDecl ( BodyDecl node ) { List < BodyDecl > list = ( parent == null || state == null ) ? getBodyDeclListNoTransform ( ) : getBodyDeclList ( ) ; list . addChild ( node ) ; }
private void polygonize ( ) { if ( polyList != null ) return ; polyList = new ArrayList ( ) ; if ( graph == null ) return ; dangles = graph . deleteDangles ( ) ; cutEdges = graph . deleteCutEdges ( ) ; List edgeRingList = graph . getEdgeRings ( ) ; List validEdgeRingList = new ArrayList ( ) ; invalidRingLines = new ArrayList ( ) ; if ( isCheckingRingsValid ) { findValidRings ( edgeRingList , validEdgeRingList , invalidRingLines ) ; } else { validEdgeRingList = edgeRingList ; } findShellsAndHoles ( validEdgeRingList ) ; assignHolesToShells ( holeList , shellList ) ; Collections . sort ( shellList , new EdgeRing . EnvelopeComparator ( ) ) ; boolean includeAll = BOOL_ ; if ( extractOnlyPolygonal ) { findDisjointShells ( shellList ) ; includeAll = BOOL_ ; } polyList = extractPolygons ( shellList , includeAll ) ; }
public void addTWord ( TWord tword ) { sentence . add ( tword ) ; }
private static boolean isAddressExpression ( final INaviOperandTreeNode node ) { if ( node . getType ( ) == ExpressionType . MEMDEREF ) { return BOOL_ ; } return node . getParent ( ) == null ? BOOL_ : isAddressExpression ( node . getParent ( ) ) ; }
public boolean isEmpty ( ) { return first == null ; }
private void updateView ( ) { view . setProjectName ( dataObject . getName ( ) ) ; view . setProjectDescription ( dataObject . getDescription ( ) ) ; view . setProjectUrl ( dataObject . getSource ( ) . getLocation ( ) ) ; final String value = getImportParameterValue ( SKIP_FIRST_LEVEL_PARAM_NAME ) ; if ( value != null ) { view . setSkipFirstLevel ( Boolean . valueOf ( value ) ) ; } }
public void removeLocalTempTable ( Table table ) { modificationId ++ ; localTempTables . remove ( table . getName ( ) ) ; synchronized ( database ) { table . removeChildrenAndResources ( this ) ; } }
boolean isUpgradeCompleted ( ) { return AMSetupServlet . isUpgradeCompleted ( ) ; }
public int add ( GL10 gl , Drawable drawable , int minWidth , int minHeight ) { return add ( gl , drawable , null , null , minWidth , minHeight ) ; }
public ConnectionConfig ( ) { super ( ) ; }
private NamedList < Object > processResponse ( XMLStreamReader parser ) { try { NamedList < Object > response = null ; for ( int event = parser . next ( ) ; event != XMLStreamConstants . END_DOCUMENT ; event = parser . next ( ) ) { switch ( event ) { case XMLStreamConstants . START_ELEMENT : if ( response != null ) { throw new Exception ( STR_ ) ; } String name = parser . getLocalName ( ) ; if ( name . equals ( STR_ ) || name . equals ( STR_ ) ) { response = readNamedList ( parser ) ; } else if ( name . equals ( STR_ ) ) { return new SimpleOrderedMap < > ( ) ; } else { throw new Exception ( STR_ + STR_ + parser . getLocalName ( ) ) ; } break ; } } return response ; } catch ( Exception ex ) { throw new SolrException ( SolrException . ErrorCode . SERVER_ERROR , STR_ , ex ) ; } finally { try { parser . close ( ) ; } catch ( Exception ex ) { } } }
public SolutionUser findSolutionUser ( String tenantName , String username ) throws Exception { return getService ( ) . findSolutionUser ( tenantName , username , this . getServiceContext ( ) ) ; }
public static Filter acceptFilter ( ) { return new CategoricalFilter ( BOOL_ ) ; }
public ConnectionStartHandle ( ConnectionFigure owner ) { super ( owner ) ; }
public void removeLayoutComponent ( Component c ) { }
private int nameOffset ( int index ) { return this . data . readUShort ( Offset . nameRecordStringOffset . offset + this . offsetForNameRecord ( index ) ) + this . stringOffset ( ) ; }
public static long sizeOf ( byte [ ] arr ) { return alignObjectSize ( ( long ) NUM_BYTES_ARRAY_HEADER + arr . length ) ; }
void onMessage ( String message ) ;
public static ServiceInfo create ( final String type , final String name , final int port , final int weight , final int priority , final String text ) { return new ServiceInfoImpl ( type , name , STR_ , port , weight , priority , BOOL_ , text ) ; }
public void testAsciiBoard ( ) throws ChessParseError { Position pos = TextIO . readFEN ( STR_ ) ; String aBrd = TextIO . asciiBoard ( pos ) ; assertEquals ( NUM_ , aBrd . length ( ) - aBrd . replaceAll ( STR_ , STR_ ) . length ( ) ) ; assertEquals ( NUM_ , aBrd . length ( ) - aBrd . replaceAll ( STR_ , STR_ ) . length ( ) ) ; assertEquals ( NUM_ , aBrd . length ( ) - aBrd . replaceAll ( STR_ , STR_ ) . length ( ) ) ; }
public static int compareTimestamps ( final int a , final int b ) { long diff = diffTimestamps ( a , b ) ; return diff < NUM_ ? - NUM_ : ( diff > NUM_ ? NUM_ : NUM_ ) ; }
public void testUrlDecoderIgnoresUnnecessaryCharset ( ) throws Exception { try { assertEquals ( STR_ , URLDecoder . decode ( STR_ , STR_ ) ) ; } catch ( UnsupportedCharsetException expected ) { } }
public void zoomIn ( ) { if ( mZoomIn != null ) { mZoomIn . apply ( Zoom . ZOOM_AXIS_XY ) ; repaint ( ) ; } }
public void removeChangeListener ( ChangeListener l ) { listenerList . remove ( ChangeListener . class , l ) ; }
public float angleAtLength ( float length ) { return pathLength . angleAtLength ( length ) ; }
public LegendTitle ( LegendItemSource source , Arrangement hLayout , Arrangement vLayout ) { this . sources = new LegendItemSource [ ] { source } ; this . items = new BlockContainer ( hLayout ) ; this . hLayout = hLayout ; this . vLayout = vLayout ; this . backgroundPaint = null ; this . legendItemGraphicEdge = RectangleEdge . LEFT ; this . legendItemGraphicAnchor = RectangleAnchor . CENTER ; this . legendItemGraphicLocation = RectangleAnchor . CENTER ; this . legendItemGraphicPadding = new RectangleInsets ( NUM_ , NUM_ , NUM_ , NUM_ ) ; this . itemFont = DEFAULT_ITEM_FONT ; this . itemPaint = DEFAULT_ITEM_PAINT ; this . itemLabelPadding = new RectangleInsets ( NUM_ , NUM_ , NUM_ , NUM_ ) ; this . sortOrder = SortOrder . ASCENDING ; }
private void fixTrans ( ) { matrix . getValues ( m ) ; float transX = m [ Matrix . MTRANS_X ] ; float transY = m [ Matrix . MTRANS_Y ] ; float fixTransX = getFixTrans ( transX , viewWidth , getImageWidth ( ) ) ; float fixTransY = getFixTrans ( transY , viewHeight , getImageHeight ( ) ) ; if ( ! MathUtils . floatEqual ( fixTransX , NUM_ ) || ! MathUtils . floatEqual ( fixTransY , NUM_ ) ) { matrix . postTranslate ( fixTransX , fixTransY ) ; } }
void addContextResourceLink ( Context context , List < ApplicationResource > resourceList , boolean contextBound ) ;
public static OrderEvent createOrderEvent ( TradeOrder order , String statusString , int filled , int remaining , double avgFillPrice , int permId , int parentId , double lastFillPrice , int clientId , String whyHeld , ZonedDateTime timestamp ) { OrderStatus . Status status = IbUtils . getOrderStatus ( statusString ) ; OrderStatus orderStatus = new OrderStatus ( status , order . getOrderId ( ) , filled , remaining , new BigDecimal ( avgFillPrice ) , order . getTicker ( ) , timestamp ) ; OrderEvent orderEvent = new OrderEvent ( order , orderStatus ) ; return orderEvent ; }
public CouldntInitializeDatabaseException ( final Exception exception ) { super ( exception ) ; m_stacktrace = exception . getStackTrace ( ) ; }
public static JSONArray rowToJSONArray ( JSONTokener x ) throws JSONException { JSONArray ja = new JSONArray ( ) ; for ( ; ; ) { String value = getValue ( x ) ; char c = x . next ( ) ; if ( value == null || ( ja . length ( ) == NUM_ && value . length ( ) == NUM_ && c != STR_ ) ) { return null ; } ja . put ( value ) ; for ( ; ; ) { if ( c == STR_ ) { break ; } if ( c != STR_ ) { if ( c == STR_ || c == STR_ || c == NUM_ ) { return ja ; } throw x . syntaxError ( STR_ + c + STR_ + ( int ) c + STR_ ) ; } c = x . next ( ) ; } } }
int parseHour ( String source , char patternChar , int offset ) throws ParseException { int min = ( patternChar == HOUR_1_LETTER || patternChar == HOUR12_1_LETTER ) ? NUM_ : NUM_ ; int max = ( ( patternChar == HOUR_LETTER || patternChar == HOUR_1_LETTER ) ? NUM_ : NUM_ ) + min ; return parseNumber ( source , offset , STR_ , min , max ) - min ; }
public PropertiesFileCallbackHandler ( String pwFile , String namesFile , String proxyFile ) throws IOException { String dir = System . getProperty ( STR_ ) ; if ( dir == null ) { dir = STR_ ; } dir = dir + STR_ ; if ( pwFile != null ) { pwDb = new Properties ( ) ; pwDb . load ( new FileInputStream ( dir + pwFile ) ) ; } if ( namesFile != null ) { namesDb = new Properties ( ) ; namesDb . load ( new FileInputStream ( dir + namesFile ) ) ; } if ( proxyFile != null ) { proxyDb = new Properties ( ) ; proxyDb . load ( new FileInputStream ( dir + proxyFile ) ) ; } }
public static long parseSizeToMegabytes ( String humanSize ) { return parseAndConvertToBytes ( humanSize ) / M ; }
public MatsimEventsReader ( final EventsManager events ) { this . events = events ; }
public void requestFocus ( ) { }
protected int delete ( Object object ) { int rows = - NUM_ ; SQLiteDatabase db = openDatabase ( ) ; db . beginTransaction ( ) ; if ( object instanceof FileItem ) { String [ ] args = { String . valueOf ( ( ( FileItem ) object ) . getId ( ) ) } ; rows = db . delete ( SyncFile . TABLE_NAME , SyncFile . Columns . ID + STR_ , args ) ; } else if ( object instanceof ActionItem ) { String [ ] args = { String . valueOf ( ( ( ActionItem ) object ) . getId ( ) ) } ; rows = db . delete ( SyncAction . TABLE_NAME , SyncAction . Columns . ID + STR_ , args ) ; } else { throw new IllegalArgumentException ( STR_ ) ; } db . setTransactionSuccessful ( ) ; db . endTransaction ( ) ; closeDatabase ( ) ; return rows ; }
private void onJoined ( ) { if ( null != sRoomPreviewData ) { HashMap < String , Object > params = new HashMap < > ( ) ; params . put ( VectorRoomActivity . EXTRA_MATRIX_ID , mSession . getMyUserId ( ) ) ; params . put ( VectorRoomActivity . EXTRA_ROOM_ID , sRoomPreviewData . getRoomId ( ) ) ; if ( null != sRoomPreviewData . getEventId ( ) ) { params . put ( VectorRoomActivity . EXTRA_EVENT_ID , sRoomPreviewData . getEventId ( ) ) ; } Intent intent = new Intent ( VectorRoomActivity . this , VectorHomeActivity . class ) ; intent . setFlags ( Intent . FLAG_ACTIVITY_CLEAR_TOP | Intent . FLAG_ACTIVITY_SINGLE_TOP | Intent . FLAG_ACTIVITY_NEW_TASK ) ; intent . putExtra ( VectorHomeActivity . EXTRA_JUMP_TO_ROOM_PARAMS , params ) ; VectorRoomActivity . this . startActivity ( intent ) ; sRoomPreviewData = null ; } }
static void addUuid ( SsfNode node , UUID uuid ) { node . set ( STR_ , uuid . getMostSignificantBits ( ) ) ; node . set ( STR_ , uuid . getLeastSignificantBits ( ) ) ; }
String readAmPmMarker ( String source , int ofs ) { int i = findEndText ( source , ofs ) ; if ( i == - NUM_ ) { i = source . length ( ) ; } String fragment = readSubstring ( source , ofs , i ) . toLowerCase ( ) ; if ( fragment == null ) { return null ; } String markers [ ] = getDateFormatSymbols ( ) . getAmPmStrings ( ) ; for ( String marker : markers ) { if ( fragment . startsWith ( marker ) ) { return readSubstring ( source , ofs , ofs + marker . length ( ) ) ; } } for ( String marker : markers ) { if ( fragment . charAt ( NUM_ ) == marker . charAt ( NUM_ ) ) { return readSubstring ( source , ofs , ofs + NUM_ ) ; } } return null ; }
protected abstract BleManager < ? extends BleManagerCallbacks > initializeManager ( ) ;
public PKCS5S2ParametersGenerator ( ) { this ( AndroidDigestFactory . getSHA1 ( ) ) ; }
public AuthInfo ( ) { }
public boolean hasExpired ( ) { if ( maxAge == - NUM_ ) { return BOOL_ ; } boolean expired = BOOL_ ; if ( maxAge <= NUM_ ) { expired = BOOL_ ; } return expired ; }
public _QueueStatus ( ) { super ( ) ; }
public abstract boolean next_point ( FanPoint p ) ;
public void addData ( ArrayList < ChartSet > data ) { this . data = data ; }
public OperationMonitor ( ) { this ( new RateTimer ( ) ) ; }
public void goTo ( final Label label ) { mv . visitJumpInsn ( Opcodes . GOTO , label ) ; }
public static boolean isBeforeByDate ( final Date actualDate , final Date when ) { final SimpleDateFormat df = new SimpleDateFormat ( STR_ , new Locale ( STR_ , STR_ ) ) ; final String strFromDate = df . format ( actualDate ) ; final String strToDate = df . format ( when ) ; Date tFromDate = null ; Date tToDate = null ; try { tFromDate = df . parse ( strFromDate ) ; tToDate = df . parse ( strToDate ) ; return tFromDate . before ( tToDate ) ; } catch ( final ParseException pe ) { logger . error ( STR_ + pe ) ; return BOOL_ ; } catch ( final IllegalArgumentException ie ) { logger . error ( STR_ + ie ) ; return BOOL_ ; } }
private boolean isRight ( View view , int totalSpanCount ) { return getSpanIndex ( view ) > NUM_ && ( getSpanIndex ( view ) + getSpanSize ( view ) == totalSpanCount ) ; }
public SubentriesControl ( boolean isCritical , boolean visibility ) { super ( OID_LDAP_SUBENTRIES , isCritical ) ; this . visibility = visibility ; }
private static boolean isValidInteger ( String str ) { return intPattern . matcher ( str ) . matches ( ) ; }
public boolean canAddMember ( String realmName , String idType , String containerIDType ) throws AMConsoleException { boolean can = BOOL_ ; try { IdType type = IdUtils . getType ( idType ) ; Set canAdd = type . canAddMembers ( ) ; IdType ctype = IdUtils . getType ( containerIDType ) ; can = canAdd . contains ( ctype ) ; } catch ( IdRepoException e ) { debug . warning ( STR_ , e ) ; throw new AMConsoleException ( getErrorString ( e ) ) ; } return can ; }
public void init ( ActionListener doneAction ) { _update = BOOL_ ; _supressDragging = BOOL_ ; _bottom1Panel = new JPanel ( ) ; addShowButtonToBottom ( ) ; addUpdateButtonToBottom ( doneAction ) ; initIconFamiliesPanel ( ) ; add ( _iconFamilyPanel ) ; add ( _bottom1Panel ) ; }
public SaveHttpEntity ( ) { super ( ) ; this . length = - NUM_ ; }
float angle ( Vector2fc v ) ;
public static void writeBytesToFile ( File file , byte [ ] bytes ) throws IOException { FileOutputStream fileOS = new FileOutputStream ( file ) ; StreamUtil . writeBytesToStream ( bytes , fileOS ) ; }
protected abstract void convert ( BaseViewHolder helper , T item ) ;
public double distanceToClosestEnemy ( Entity me , Coords position , IGame game ) { final String METHOD_NAME = STR_ ; getOwner ( ) . methodBegin ( BasicPathRanker . class , METHOD_NAME ) ; try { Entity closest = findClosestEnemy ( me , position , game ) ; if ( closest == null ) { return NUM_ ; } return closest . getPosition ( ) . distance ( position ) ; } finally { getOwner ( ) . methodEnd ( BasicPathRanker . class , METHOD_NAME ) ; } }
public Script build ( ) { return new Script ( chunks ) ; }
public void testStress ( ) throws TimeoutException , InterruptedException , ExecutionException , ImmediateDownstreamReplicationException { final long timeout = NUM_ ; for ( int i = NUM_ ; i < NUM_ ; i ++ ) { final int sze = NUM_ + r . nextInt ( NUM_ ) ; final ByteBuffer tst = getRandomData ( sze ) ; final HAMessageWrapper msg = newHAWriteMessage ( sze , tst ) ; final ByteBuffer rcv = ByteBuffer . allocate ( sze + r . nextInt ( NUM_ ) ) ; final Future < Void > futRec = receiveService . receiveData ( msg , rcv ) ; final Future < Void > futSnd = sendService . send ( tst , msg . getMarker ( ) ) ; futSnd . get ( timeout , TimeUnit . MILLISECONDS ) ; futRec . get ( timeout , TimeUnit . MILLISECONDS ) ; assertEquals ( tst , rcv ) ; } }
public static int [ ] convertIntegers ( List < Integer > integers ) { int [ ] ret = new int [ integers . size ( ) ] ; for ( int i = NUM_ ; i < ret . length ; i ++ ) { ret [ i ] = integers . get ( i ) . intValue ( ) ; } return ret ; }
public void error ( Throwable t , String s ) { if ( isEnabled ( TraceSystem . ERROR ) ) { traceWriter . write ( TraceSystem . ERROR , module , s , t ) ; } }
public java . util . ArrayList < TreeNode < E > > path ( E e ) { java . util . ArrayList < TreeNode < E > > list = new java . util . ArrayList < > ( ) ; TreeNode < E > current = root ; while ( current != null ) { list . add ( current ) ; if ( e . compareTo ( current . element ) < NUM_ ) { current = current . left ; } else if ( e . compareTo ( current . element ) > NUM_ ) { current = current . right ; } else break ; } return list ; }
void addTrait ( String guid , String traitInstanceDefinition ) throws AtlasException ;
private HttpResponse sendRequestToXDMS ( HttpRequest request , HttpAuthenticationAgent authenticationAgent ) throws PayloadException , NetworkException { HttpResponse response = sendHttpRequest ( request , authenticationAgent ) ; final int responseCode = response . getResponseCode ( ) ; switch ( responseCode ) { case Response . UNAUTHORIZED : if ( sLogger . isActivated ( ) ) { sLogger . debug ( STR_ ) ; } if ( authenticationAgent != null ) { authenticationAgent . readWwwAuthenticateHeader ( response . getHeader ( STR_ ) ) ; } String cookie = response . getHeader ( STR_ ) ; request . setCookie ( cookie ) ; return sendRequestToXDMS ( request , authenticationAgent ) ; case Response . CONDITIONAL_REQUEST_FAILED : if ( sLogger . isActivated ( ) ) { sLogger . debug ( STR_ ) ; } documents . remove ( request . getAUID ( ) ) ; return sendRequestToXDMS ( request ) ; default : throw new NetworkException ( new StringBuilder ( STR_ ) . append ( responseCode ) . toString ( ) ) ; } }
protected Stream < Map < String , Concept > > transformStream ( Stream < Map < String , Concept > > stream ) { return stream ; }
public static String extractPackage ( String className ) { if ( className == null ) return null ; int index = className . lastIndexOf ( STR_ ) ; if ( index != - NUM_ ) return className . substring ( NUM_ , index ) ; return null ; }
public static String toString ( boolean value ) { return String . valueOf ( value ) ; }
public com . sun . identity . liberty . ws . common . jaxb . ac . AsymmetricKeyAgreementElement createAsymmetricKeyAgreementElement ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . liberty . ws . common . jaxb . ac . impl . AsymmetricKeyAgreementElementImpl ( ) ; }
public String toString ( ) { return polynomial . toString ( NUM_ ) ; }
protected void drawLegend ( DrawingContext context ) { if ( ! isLegendVisible ( ) || getLegend ( ) == null ) { return ; } getLegend ( ) . draw ( context ) ; }
private byte [ ] updateMinMaxForNoDictionary ( byte [ ] valueWithLength ) { ByteBuffer buffer = ByteBuffer . wrap ( valueWithLength ) ; byte [ ] actualValue = new byte [ buffer . getShort ( ) ] ; buffer . get ( actualValue ) ; return actualValue ; }
public S_Experiment createS_Experiment ( ) { S_ExperimentImpl s_Experiment = new S_ExperimentImpl ( ) ; return s_Experiment ; }
private BshMethod [ ] flattenMethodCollection ( Enumeration e ) { Vector v = new Vector ( ) ; while ( e . hasMoreElements ( ) ) { Object o = e . nextElement ( ) ; if ( o instanceof BshMethod ) v . addElement ( o ) ; else { Vector ov = ( Vector ) o ; for ( int i = NUM_ ; i < ov . size ( ) ; i ++ ) v . addElement ( ov . elementAt ( i ) ) ; } } BshMethod [ ] bma = new BshMethod [ v . size ( ) ] ; v . copyInto ( bma ) ; return bma ; }
public BinaryWriterExImpl writer ( BinaryOutputStream out ) { return new BinaryWriterExImpl ( ctx , out , BinaryThreadLocalContext . get ( ) . schemaHolder ( ) , null ) ; }
public boolean putStringForUser ( ContentResolver cr , String name , String value , final int userId ) { try { Bundle arg = new Bundle ( ) ; arg . putString ( Settings . NameValueTable . VALUE , value ) ; arg . putInt ( CALL_METHOD_USER_KEY , userId ) ; IContentProvider cp = lazyGetProvider ( cr ) ; cp . call ( cr . getPackageName ( ) , mCallSetCommand , name , arg ) ; } catch ( RemoteException e ) { Log . w ( TAG , STR_ + name + STR_ + mUri , e ) ; return BOOL_ ; } return BOOL_ ; }
public static String normalize ( String p ) { if ( p == null ) return STR_ ; if ( p . endsWith ( STR_ ) && p . length ( ) > NUM_ ) return p . substring ( NUM_ , p . length ( ) - NUM_ ) ; return p ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public Session createSession ( SecureChannel channel , UnsignedInteger maxResponseMessageSize , Double requestedSessionTimeout , String sessionName ) throws IllegalArgumentException , ServiceResultException { return createSession ( channel , maxResponseMessageSize , requestedSessionTimeout , sessionName , null ) ; }
public static final void reset ( ) { _instance = NO_OBSERVER ; }
void switchAdded ( IOFSwitchBackend sw ) ;
public static String stringFor ( int n ) { switch ( n ) { case CU_PREFER_PTX : return STR_ ; case CU_PREFER_BINARY : return STR_ ; } return STR_ + n ; }
public final boolean isEditable ( ) { return editable ; }
void childRemoved ( NodeChangeEvent evt ) ;
ExecutionResponse executeProcessCron ( final String processName , final String cronExpression , final XMLGregorianCalendar start , final XMLGregorianCalendar end , final ProcessContextWrapper context ) throws RepositoryException , PasswordInputCanceledException ;
public void extendTables ( DatabaseSession session , JPAMSchemaManager schemaManager ) { extendTablesAndConstraints ( schemaManager , session ) ; schemaManager . createOrReplaceSequences ( BOOL_ , BOOL_ ) ; }
private double screenToNormalized ( float screenCoord ) { int width = getWidth ( ) ; if ( width <= NUM_ * padding ) { return NUM_ ; } else { double result = ( screenCoord - padding ) / ( width - NUM_ * padding ) ; return Math . min ( NUM_ , Math . max ( NUM_ , result ) ) ; } }
public static BigDecimalUtilsLogic is ( String value ) { return new BigDecimalUtilsLogic ( value ) ; }
private static long nanosFromCalendar ( Calendar cal ) { int h = cal . get ( Calendar . HOUR_OF_DAY ) ; int m = cal . get ( Calendar . MINUTE ) ; int s = cal . get ( Calendar . SECOND ) ; int millis = cal . get ( Calendar . MILLISECOND ) ; return ( ( ( ( ( ( h * NUM_ ) + m ) * NUM_ ) + s ) * NUM_ ) + millis ) * NUM_ ; }
public void put ( String name , short value ) { }
public AffineTransformation shear ( double xShear , double yShear ) { compose ( shearInstance ( xShear , yShear ) ) ; return this ; }
FilePart ( String name , InputStream in , String boundary , String contentType , String fileName , String filePath ) throws IOException { super ( name ) ; this . fileName = fileName ; this . filePath = filePath ; this . contentType = contentType ; partInput = new PartInputStream ( in , boundary ) ; }
public double discreteTimeGroupDelay ( double Omega ) { Complex c = Complex . exp ( new Complex ( NUM_ , - Omega ) ) ; Complex N = new Complex ( a [ order ] * order ) ; for ( int i = order - NUM_ ; i >= NUM_ ; i -- ) { N = N . times ( c ) . plus ( a [ i ] * i ) ; } Complex D = evaluate ( c ) ; return ( N . over ( D ) ) . real ( ) ; }
protected boolean isAccelerationEnabled ( ) { return BOOL_ ; }
protected void ending_bytecode ( ) { }
void onSearchViewOpened ( ) ;
static ServiceRef . ServiceBuilder service ( Class < ? > serviceClass ) { Objects . requireNonNull ( serviceClass ) ; return builder ( ) . service ( serviceClass ) ; }
Boolean isInTagCache ( Long id ) ;
public static String capitalize ( String str ) { return changeFirstCharacterCase ( BOOL_ , str ) ; }
public boolean optBoolean ( String key ) { return optBoolean ( key , BOOL_ ) ; }
public void updateBucketACL ( URI storage , URI bucket , BucketACLUpdateParams param , String opId ) throws InternalException ;
public static boolean isCapitalized ( String text ) { if ( text . isEmpty ( ) ) { return BOOL_ ; } boolean isCaps = Character . isUpperCase ( text . charAt ( NUM_ ) ) ; if ( ! isCaps ) { return BOOL_ ; } if ( text . length ( ) == NUM_ ) { return isCaps ; } return ! isCaps ( text ) ; }
public void moveViewToY ( float yValue , AxisDependency axis ) { float valsInView = getDeltaY ( axis ) / mViewPortHandler . getScaleY ( ) ; Runnable job = new MoveViewJob ( mViewPortHandler , NUM_ , yValue + valsInView / NUM_ , getTransformer ( axis ) , this ) ; addViewportJob ( job ) ; }
Node ( T t , double percentX , double percentY , double percentWidth , double percentHeight ) { this ( t , null , percentX , percentY , percentWidth , percentHeight ) ; }
protected XMouseDragGestureRecognizer ( DragSource ds , Component c , int act , DragGestureListener dgl ) { super ( ds , c , act , dgl ) ; }
public void handleArtificialTree ( Tree tree ) { }
protected DataSourceMetadataLoader buildDataSourceMetadataLoader ( DruidWebService webService , PhysicalTableDictionary physicalTableDictionary , DataSourceMetadataService metadataService , ObjectMapper mapper ) { return new DataSourceMetadataLoader ( physicalTableDictionary , metadataService , webService , mapper ) ; }
public final GVector interpolateToSelf ( GVector v , double alpha ) { if ( v . length != length ) { throw new MatrixSizeException ( ) ; } for ( int i = NUM_ ; i < length ; i ++ ) { values [ i ] += ( v . values [ i ] - values [ i ] ) * alpha ; } return this ; }
static IConstraint [ ] combineConstraints ( final IConstraint [ ] constraints , final IHashJoinUtility [ ] all ) { final List < IConstraint > list = new LinkedList < IConstraint > ( ) ; for ( int i = NUM_ ; i < all . length ; i ++ ) { final IHashJoinUtility tmp = all [ i ] ; if ( tmp . getConstraints ( ) != null ) { list . addAll ( Arrays . asList ( tmp . getConstraints ( ) ) ) ; } } if ( constraints != null ) { list . addAll ( Arrays . asList ( constraints ) ) ; } return list . isEmpty ( ) ? null : list . toArray ( new IConstraint [ list . size ( ) ] ) ; }
public synchronized void resetCloudDevices ( ) { cloudDevices = null ; }
protected SAXParser createParser ( ) { try { return SAXParserFactory . newInstance ( ) . newSAXParser ( ) ; } catch ( ParserConfigurationException e ) { throw new OsmRuntimeException ( STR_ , e ) ; } catch ( SAXException e ) { throw new OsmRuntimeException ( STR_ , e ) ; } }
public static Map < ComponentWrapper , CC > parseComponentConstraints ( Map < ComponentWrapper , String > constrMap ) { HashMap < ComponentWrapper , CC > flowConstrMap = new HashMap < ComponentWrapper , CC > ( ) ; for ( ComponentWrapper c : constrMap . keySet ( ) ) { flowConstrMap . put ( c , parseComponentConstraint ( constrMap . get ( c ) ) ) ; } return flowConstrMap ; }
public IgniteUuid xid ( ) ;
public boolean isInfernoBurning ( Coords coords ) { boolean result = BOOL_ ; InfernoTracker tracker = null ; tracker = infernos . get ( coords ) ; if ( null != tracker ) { if ( tracker . isStillBurning ( ) ) { result = BOOL_ ; } } return result ; }
public boolean retainAll ( Collection < ? > collection ) ;
public Object readUnshared ( ) throws IOException , ClassNotFoundException { return readObject ( BOOL_ ) ; }
public boolean putString ( String value , int row , int column ) { acquireReference ( ) ; try { return nativePutString ( mWindowPtr , value , row - mStartPos , column ) ; } finally { releaseReference ( ) ; } }
private HttpEntity paramsToEntity ( RequestParams params , ResponseHandlerInterface responseHandler ) { HttpEntity entity = null ; try { if ( params != null ) { entity = params . getEntity ( responseHandler ) ; } } catch ( IOException e ) { if ( responseHandler != null ) { responseHandler . sendFailureMessage ( NUM_ , null , null , e ) ; } else { e . printStackTrace ( ) ; } } return entity ; }
public static boolean isExistingStore ( ) { return isExistingStore ; }
private static boolean isXLargeTablet ( Context context ) { return ( context . getResources ( ) . getConfiguration ( ) . screenLayout & Configuration . SCREENLAYOUT_SIZE_MASK ) >= Configuration . SCREENLAYOUT_SIZE_XLARGE ; }
public void loadSettings ( File file ) { if ( ! file . canRead ( ) ) return ; FileInputStream input = null ; try { input = new FileInputStream ( file ) ; values . load ( input ) ; } catch ( IOException e ) { } finally { if ( input != null ) { try { input . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } } }
SecurityContext trust ( SecurityContext securityContext ) { TrustedSecurityContext trustedContext = new TrustedSecurityContext ( securityContext ) ; return trustedContext ; }
public static byte [ ] decode ( byte [ ] source , int off , int len ) throws Base64DecoderException { return decode ( source , off , len , DECODABET ) ; }
public long insert ( long timeStamp , long logEventID , String ruleName , String actionAppName , String actionEventName , String actionParameters , String description ) { if ( ruleName == null || actionAppName == null || actionEventName == null || actionParameters == null || description == null ) { throw new IllegalArgumentException ( STR_ ) ; } ContentValues initialValues = new ContentValues ( ) ; initialValues . put ( KEY_TIMESTAMP , timeStamp ) ; initialValues . put ( KEY_LOGEVENTID , logEventID ) ; initialValues . put ( KEY_RULENAME , ruleName ) ; initialValues . put ( KEY_ACTIONAPPNAME , actionAppName ) ; initialValues . put ( KEY_ACTIONEVENTNAME , actionEventName ) ; initialValues . put ( KEY_ACTIONPARAMETERS , actionParameters ) ; initialValues . put ( KEY_DESCRIPTION , description ) ; return database . insert ( DATABASE_TABLE , null , initialValues ) ; }
long qlen ( K queue ) ;
protected void fireValueChanged ( TreeCheckingEvent e ) { Object [ ] listeners = this . listenerList . getListenerList ( ) ; for ( int i = listeners . length - NUM_ ; i >= NUM_ ; i -= NUM_ ) { if ( listeners [ i ] == TreeCheckingListener . class ) { ( ( TreeCheckingListener ) listeners [ i + NUM_ ] ) . valueChanged ( e ) ; } } }
protected final void _decodeNonStringName ( int ch ) throws IOException { final int type = ( ( ch > > NUM_ ) & NUM_ ) ; String name ; if ( type == CBORConstants . MAJOR_TYPE_INT_POS ) { name = _numberToName ( ch , BOOL_ ) ; } else if ( type == CBORConstants . MAJOR_TYPE_INT_NEG ) { name = _numberToName ( ch , BOOL_ ) ; } else if ( type == CBORConstants . MAJOR_TYPE_BYTES ) { final int blen = _decodeExplicitLength ( ch & NUM_ ) ; byte [ ] b = _finishBytes ( blen ) ; name = new String ( b , UTF8 ) ; } else { if ( ( ch & NUM_ ) == CBORConstants . INT_BREAK ) { _reportUnexpectedBreak ( ) ; } throw _constructError ( STR_ + type + STR_ ) ; } _parsingContext . setCurrentName ( name ) ; }
public void putAll ( MultiMap < K , V > map ) ;
public static String stringTo8859_1 ( String str ) throws UnsupportedEncodingException { if ( str == null ) { return STR_ ; } return new String ( str . getBytes ( STR_ ) , STR_ ) ; }
public int numTerms ( ) { return numTermsInField ; }
public TrustedAppEntry ( String fakePackageName , int simpleNameId , int iconId ) { this . packageName = fakePackageName ; this . simpleName = MainActivity . this . getString ( simpleNameId ) ; Drawable icon = MainActivity . this . getResources ( ) . getDrawable ( iconId ) ; icon . setBounds ( NUM_ , NUM_ , iconSize , iconSize ) ; this . icon = icon ; }
public static boolean showGuidelines ( ) { if ( ( Math . abs ( Edge . LEFT . getCoordinate ( ) - Edge . RIGHT . getCoordinate ( ) ) < DEFAULT_SHOW_GUIDELINES_LIMIT ) || ( Math . abs ( Edge . TOP . getCoordinate ( ) - Edge . BOTTOM . getCoordinate ( ) ) < DEFAULT_SHOW_GUIDELINES_LIMIT ) ) return BOOL_ ; else return BOOL_ ; }
public void removeDocumentListener ( DocumentListener listener ) { listenerList . remove ( DocumentListener . class , listener ) ; }
void insertIndexInterval ( int index , int length , boolean before ) ;
void checkLabel ( final Label label , final boolean checkVisited , final String msg ) { if ( label == null ) { throw new IllegalArgumentException ( STR_ + msg + STR_ ) ; } if ( checkVisited && labels . get ( label ) == null ) { throw new IllegalArgumentException ( STR_ + msg + STR_ ) ; } }
public static native ImageOverlay imageOverlay ( String imageUrl , LatLngBounds bounds , ImageOverlayOptions options ) ;
public String permutedvectorfile ( ) { return permutedvectorfile ; }
private Node < K , V > bound ( Node < K , V > node , Bound fromBound , Bound toBound ) { return node != null && isInBounds ( node . getKey ( ) , fromBound , toBound ) ? node : null ; }
public void insert ( String namespace , String set , Key key , List < Bin > bins , int ttl ) { this . client . put ( this . insertPolicy , key , bins . toArray ( new Bin [ NUM_ ] ) ) ; }
private boolean isOptimizedLoop ( Register reg ) { return loopRegisterSet . contains ( reg ) ; }
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( elementsetattributens02 . class , args ) ; }
public int add ( T item ) { int index = findInsertionIndex ( item ) ; ListHelper . splice ( list , index , NUM_ , item ) ; ensureSortedIfEnabled ( ) ; return index ; }
void onPageScrolled ( int position , float positionOffset , boolean isInfiniteScroll ) ;
protected Object credentials ( ) { return cred ; }
public static boolean areALotOfWaiting ( int waits ) { return ( waits > NUM_ ) ; }
public static int countAll ( ) { return getPersistence ( ) . countAll ( ) ; }
protected abstract void clearList ( ) ;
void checkFrameValue ( final Object value ) { if ( value == Opcodes . TOP || value == Opcodes . INTEGER || value == Opcodes . FLOAT || value == Opcodes . LONG || value == Opcodes . DOUBLE || value == Opcodes . NULL || value == Opcodes . UNINITIALIZED_THIS ) { return ; } if ( value instanceof String ) { checkInternalName ( ( String ) value , STR_ ) ; return ; } if ( ! ( value instanceof Label ) ) { throw new IllegalArgumentException ( STR_ + value ) ; } else { usedLabels . add ( ( Label ) value ) ; } }
public Object clone ( ) { MersenneTwister clone = ( MersenneTwister ) super . clone ( ) ; clone . mt = ( int [ ] ) this . mt . clone ( ) ; return clone ; }
public INDArray asMatrix ( BufferedImage image ) { if ( channels == NUM_ ) { return toBgr ( image ) ; } else { image = scalingIfNeed ( image , BOOL_ ) ; int w = image . getWidth ( ) ; int h = image . getHeight ( ) ; INDArray ret = Nd4j . create ( h , w ) ; for ( int i = NUM_ ; i < h ; i ++ ) { for ( int j = NUM_ ; j < w ; j ++ ) { ret . putScalar ( new int [ ] { i , j } , image . getRGB ( i , j ) ) ; } } return ret ; } }
public static TimestampValidityState load ( DataInput is ) throws IOException { return new TimestampValidityState ( is . readLong ( ) ) ; }
public static Document toDOMDocument ( String xmlString , Debug debug ) { if ( ( xmlString == null ) || ( xmlString . length ( ) == NUM_ ) ) { return null ; } try { ByteArrayInputStream is = new ByteArrayInputStream ( xmlString . getBytes ( STR_ ) ) ; return toDOMDocument ( is , debug ) ; } catch ( UnsupportedEncodingException uee ) { if ( debug != null && debug . warningEnabled ( ) ) { debug . warning ( STR_ + xmlString , uee ) ; } return null ; } }
public int totalLength ( ) { int total = NUM_ ; for ( Map . Entry < Integer , Integer > region : mIntervals . entrySet ( ) ) { total += region . getValue ( ) - region . getKey ( ) ; } return total ; }
void completions ( int position , ITypeScriptCompletionCollector collector ) throws TypeScriptException ;
public NodeSetDTM ( NodeIterator iterator , XPathContext xctxt ) { super ( ) ; Node node ; m_manager = xctxt . getDTMManager ( ) ; while ( null != ( node = iterator . nextNode ( ) ) ) { int handle = xctxt . getDTMHandleFromNode ( node ) ; addNodeInDocOrder ( handle , xctxt ) ; } }
public int size ( ) { return map . size ( ) ; }
public static < T > LazyIterable < T > distinct ( Iterable < T > iterable ) { return new DistinctIterable < > ( iterable ) ; }
protected JSRInlinerAdapter ( final int api , final MethodVisitor mv , final int access , final String name , final String desc , final String signature , final String [ ] exceptions ) { super ( api , access , name , desc , signature , exceptions ) ; this . mv = mv ; }
public JBrowserDriver ( ) { this ( Settings . builder ( ) . build ( ) ) ; }
public void onFirmwareTestTimeOut ( OneSheeldDevice device ) { }
public synchronized boolean writeCoil ( int ref , boolean state ) throws ModbusException { return writeCoil ( DEFAULT_UNIT_ID , ref , state ) ; }
public String toGeneralizedTimeString ( ) { Calendar calendar = Calendar . getInstance ( TimeZone . getTimeZone ( STR_ ) ) ; calendar . clear ( ) ; calendar . setTimeInMillis ( kerberosTime ) ; return String . format ( STR_ , calendar . get ( Calendar . YEAR ) , calendar . get ( Calendar . MONTH ) + NUM_ , calendar . get ( Calendar . DAY_OF_MONTH ) , calendar . get ( Calendar . HOUR_OF_DAY ) , calendar . get ( Calendar . MINUTE ) , calendar . get ( Calendar . SECOND ) ) ; }
void addTargetListener ( String ns , String an , boolean isCSS , AnimationTargetListener l ) ;
public final double pctUnclassified ( ) { return NUM_ * m_Unclassified / m_WithClass ; }
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( nodegetlastchildnull . class , args ) ; }
public boolean equals ( DisplayMode dm ) { if ( dm == null ) { return BOOL_ ; } return ( getHeight ( ) == dm . getHeight ( ) && getWidth ( ) == dm . getWidth ( ) && getBitDepth ( ) == dm . getBitDepth ( ) && getRefreshRate ( ) == dm . getRefreshRate ( ) ) ; }
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( nodecommentnodename . class , args ) ; }
public LinkedHashMapEntry ( final String name ) { this ( DN . valueOf ( name ) ) ; }
boolean isContextApplicable ( T subject , Map . Entry < String , String > context ) ;
public MLet ( ) { this ( new URL [ NUM_ ] ) ; }
protected void onExtensionDataChanged ( ComponentName extension ) { }
protected static void indexExistingRows ( Connection conn , String schema , String table ) throws SQLException { FullText . FullTextTrigger existing = new FullText . FullTextTrigger ( ) ; existing . init ( conn , schema , null , table , BOOL_ , Trigger . INSERT ) ; String sql = STR_ + StringUtils . quoteIdentifier ( schema ) + STR_ + StringUtils . quoteIdentifier ( table ) ; ResultSet rs = conn . createStatement ( ) . executeQuery ( sql ) ; int columnCount = rs . getMetaData ( ) . getColumnCount ( ) ; while ( rs . next ( ) ) { Object [ ] row = new Object [ columnCount ] ; for ( int i = NUM_ ; i < columnCount ; i ++ ) { row [ i ] = rs . getObject ( i + NUM_ ) ; } existing . fire ( conn , null , row ) ; } }
public final PointF viewToSourceCoord ( PointF vxy ) { return viewToSourceCoord ( vxy . x , vxy . y , new PointF ( ) ) ; }
private void writeAttribute ( java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( namespace . equals ( STR_ ) ) { xmlWriter . writeAttribute ( attName , attValue ) ; } else { registerPrefix ( xmlWriter , namespace ) ; xmlWriter . writeAttribute ( namespace , attName , attValue ) ; } }
public boolean isIdleTimeToValid ( ) { return idleTimeTo == null || idleTimeToSec != null ; }
public void updateNow ( ) throws IOException { ensureOpen ( ) ; updateLock . lock ( ) ; try { doUpdate ( ) ; } finally { updateLock . unlock ( ) ; } }
public int readLittleEndianUnsignedIntToInt ( ) { int result = readLittleEndianInt ( ) ; if ( result < NUM_ ) { throw new IllegalStateException ( STR_ + result ) ; } return result ; }
public Lattice ( Value [ ] linearChain , JoshuaConfiguration config ) { this . latticeHasAmbiguity = BOOL_ ; this . nodes = new ArrayList < > ( ) ; Node < Value > previous = new Node < > ( NUM_ ) ; nodes . add ( previous ) ; int i = NUM_ ; for ( Value value : linearChain ) { Node < Value > current = new Node < > ( i ) ; float cost = NUM_ ; previous . addArc ( current , cost , value ) ; nodes . add ( current ) ; previous = current ; i ++ ; } }
public CharBuffer append ( int i ) { if ( i == NUM_ ) { return append ( STR_ ) ; } int length = length ( ) ; ensureCapacity ( length + NUM_ ) ; char [ ] buffer = buffer ( ) ; if ( i < NUM_ ) { buffer [ length ++ ] = STR_ ; i = - i ; } else if ( i == NUM_ ) { buffer [ length ] = STR_ ; length ( length + NUM_ ) ; return this ; } int start = length ; while ( i > NUM_ ) { buffer [ length ++ ] = ( char ) ( ( i % NUM_ ) + STR_ ) ; i /= NUM_ ; } for ( int j = ( length - start ) / NUM_ ; j > NUM_ ; j -- ) { char temp = buffer [ length - j ] ; buffer [ length - j ] = buffer [ start + j - NUM_ ] ; buffer [ start + j - NUM_ ] = temp ; } length ( length ) ; return this ; }
static void testImplement ( ClassLoader loader ) { Class doubledImplementClass ; Object obj ; useImplement ( new DoubledImplement ( ) , BOOL_ ) ; try { doubledImplementClass = loader . loadClass ( STR_ ) ; } catch ( ClassNotFoundException cnfe ) { System . err . println ( STR_ + cnfe ) ; return ; } try { obj = doubledImplementClass . newInstance ( ) ; } catch ( InstantiationException ie ) { System . err . println ( STR_ + ie ) ; return ; } catch ( IllegalAccessException iae ) { System . err . println ( STR_ + iae ) ; return ; } catch ( LinkageError le ) { System . out . println ( STR_ ) ; return ; } ICommon icommon = ( ICommon ) obj ; useImplement ( icommon . getDoubledInstance ( ) , BOOL_ ) ; }
public void verifyValidityAndStatus ( OCSPResp response , X509Certificate subject , X509Certificate issuer , Date atDate ) throws Exception { verifyValidity ( response , subject , issuer , atDate ) ; verifyStatus ( response ) ; }
public NSIDOption ( byte [ ] data ) { super ( EDNSOption . Code . NSID , data ) ; }
public void removeAttributes ( AttributeSet attrs ) { StyleContext context = StyleContext . this ; if ( attrs == this ) { attributes = context . getEmptySet ( ) ; } else { attributes = context . removeAttributes ( attributes , attrs ) ; } fireStateChanged ( ) ; }
public synchronized void stop ( ) { mRun = BOOL_ ; if ( mProcess != null ) { mProcess . destroy ( ) ; mProcess = null ; } try { mThread . join ( ) ; } catch ( InterruptedException e ) { } mThread = null ; mCallback = null ; }
private static native void initIDs ( ) ;
public static TransportNetwork fromFeeds ( String osmFile , List < GTFSFeed > feeds , TNBuilderConfig config ) { return fromFiles ( osmFile , null , feeds , config ) ; }
public HashMetaData ( final BlockHeight height , final TimeInstant timeStamp ) { this . height = height ; this . timeStamp = timeStamp ; }
public static void ensureDirectoryExists ( String path ) throws IOException { File tmpDirectory = new File ( path ) ; if ( ! mkdirsWithRetry ( tmpDirectory ) ) { throw new IOException ( STR_ + tmpDirectory . getAbsolutePath ( ) ) ; } }
public void snippetResin3xLocalDeploy ( ) throws Exception { InstalledLocalContainer container = new Resin3xInstalledLocalContainer ( new Resin3xStandaloneLocalConfiguration ( STR_ ) ) ; container . setHome ( STR_ ) ; container . start ( ) ; Deployable war = new WAR ( STR_ ) ; Deployer deployer = new ResinInstalledLocalDeployer ( container ) ; deployer . deploy ( war ) ; deployer . deploy ( war , new URLDeployableMonitor ( new URL ( STR_ ) ) ) ; container . stop ( ) ; }
private boolean lookupHome ( Path path ) { if ( path == null ) { return BOOL_ ; } Path binFolder = path . resolve ( STR_ ) ; if ( binFolder == null && Files . exists ( binFolder , LinkOption . NOFOLLOW_LINKS ) ) { return BOOL_ ; } Path artemisScript = binFolder . resolve ( STR_ ) ; return artemisScript != null && Files . exists ( artemisScript , LinkOption . NOFOLLOW_LINKS ) ; }
public Type unboxedType ( Type t ) { if ( allowBoxing ) { for ( int i = NUM_ ; i < syms . boxedName . length ; i ++ ) { Name box = syms . boxedName [ i ] ; if ( box != null && asSuper ( t , reader . enterClass ( box ) ) != null ) return syms . typeOfTag [ i ] ; } } return Type . noType ; }
public static int typecode ( Type type ) { switch ( type . getTag ( ) ) { case BYTE : return BYTEcode ; case SHORT : return SHORTcode ; case CHAR : return CHARcode ; case INT : return INTcode ; case LONG : return LONGcode ; case FLOAT : return FLOATcode ; case DOUBLE : return DOUBLEcode ; case BOOLEAN : return BYTEcode ; case VOID : return VOIDcode ; case CLASS : case ARRAY : case METHOD : case BOT : case TYPEVAR : case UNINITIALIZED_THIS : case UNINITIALIZED_OBJECT : return OBJECTcode ; default : throw new AssertionError ( STR_ + type . getTag ( ) ) ; } }
public Stack < IMove > solution ( ) { if ( moveStack == null ) { return new Stack < IMove > ( ) ; } return moveStack ; }
public void addSuppressAPs ( long swId , short port ) ;
public String addStepsForCreateVolumes ( Workflow workflow , String waitFor , List < VolumeDescriptor > volumes , String taskId ) throws InternalException ;
public static int min ( int i1 , int i2 ) { return i1 < i2 ? i1 : i2 ; }
protected double priorVal ( double [ ] [ ] dist ) { return ContingencyTables . entropyOverColumns ( dist ) ; }
private int measureWidth ( int measureSpec ) { float result ; int specMode = MeasureSpec . getMode ( measureSpec ) ; int specSize = MeasureSpec . getSize ( measureSpec ) ; if ( ( specMode == MeasureSpec . EXACTLY ) || ( mViewPager == null ) ) { result = specSize ; } else { final int count = mViewPager . getAdapter ( ) . getCount ( ) ; result = getPaddingLeft ( ) + getPaddingRight ( ) + ( count * mLineWidth ) + ( ( count - NUM_ ) * mGapWidth ) ; if ( specMode == MeasureSpec . AT_MOST ) { result = Math . min ( result , specSize ) ; } } return ( int ) FloatMath . ceil ( result ) ; }
public static String formatNanosToSeconds ( long time ) { double sec = time / NUM_ ; return nanosFormat . format ( sec ) + STR_ ; }
public boolean isSetHeader ( ) { return this . header != null ; }
public Vec2D constrain ( Vec2D min , Vec2D max ) { x = MathUtils . clip ( x , min . x , max . x ) ; y = MathUtils . clip ( y , min . y , max . y ) ; return this ; }
public boolean isSelected ( ) { ClusterViewer viewer = getViewer ( ) ; return viewer . getEcologicalIndex ( ) . equalsIgnoreCase ( CalculateEcologicalIndices . GOODALL ) ; }
private void addCachedLegion ( Legion legion ) { this . allCachedLegions . add ( legion ) ; }
protected void doStop ( ) throws DataAccessException { if ( ! running ) { return ; } doBeforeStop ( ) ; synchronized ( this . lifecycleMonitor ) { this . running = BOOL_ ; this . resumeAfterUnquiesce = BOOL_ ; this . lifecycleMonitor . notifyAll ( ) ; unregisterMetrics ( ) ; } }
public SnapshotRequest indices ( String [ ] indices ) { this . indices = indices ; return this ; }
public void error ( String message ) { sendPluginResult ( new PluginResult ( PluginResult . Status . ERROR , message ) ) ; }
public static void dropAllTables ( SQLiteDatabase db , boolean ifExists ) { SearchSuffixDao . dropTable ( db , ifExists ) ; }
static final TypeKey valueOf ( Class < ? > rawType , java . lang . reflect . Type [ ] typeArguments ) { byte [ ] identityHashBytes = new byte [ ( typeArguments . length + NUM_ ) * NUM_ ] ; intToByteArray ( getTypeIndex ( rawType ) , identityHashBytes , NUM_ ) ; for ( int i = NUM_ , len = typeArguments . length ; i < len ; ++ i ) { intToByteArray ( getTypeIndex ( typeArguments [ i ] ) , identityHashBytes , i + NUM_ ) ; } return new TypeKey ( identityHashBytes ) ; }
public void refreshConnections ( IDataCable cable ) { }
public FileIcon ( ) { this . width = getOrigWidth ( ) ; this . height = getOrigHeight ( ) ; }
public static String longToString ( long v , int radix ) { int i = ( int ) v ; if ( i == v ) { return intToString ( i , radix ) ; } if ( radix < Character . MIN_RADIX || radix > Character . MAX_RADIX ) { radix = NUM_ ; } if ( radix == NUM_ ) { return longToString ( v ) ; } boolean negative = BOOL_ ; if ( v < NUM_ ) { negative = BOOL_ ; } else { v = - v ; } int bufLen = radix < NUM_ ? NUM_ : NUM_ ; char [ ] buf = new char [ bufLen ] ; int cursor = bufLen ; do { long q = v / radix ; buf [ -- cursor ] = DIGITS [ ( int ) ( radix * q - v ) ] ; v = q ; } while ( v != NUM_ ) ; if ( negative ) { buf [ -- cursor ] = STR_ ; } return new String ( cursor , bufLen - cursor , buf ) ; }
private boolean cleanUpFile ( File file ) { if ( file . exists ( ) ) { return file . delete ( ) ; } return BOOL_ ; }
public static String read ( InputStream in , String charset ) throws IOException { return new String ( read ( in ) , charset ) ; }
private void startPrecaching ( ) { Log . v ( TAG , STR_ ) ; prepareNativeLibraries ( ) ; mIsPrecaching = BOOL_ ; acquirePrecachingWakeLock ( ) ; mPrecacheLauncher . start ( ) ; }
public static byte [ ] encodeGif ( BufferedImage image ) throws IOException { ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; if ( Debug . debugging ( STR_ ) ) { Debug . output ( STR_ + out ) ; } Acme . JPM . Encoders . GifEncoder enc = new Acme . JPM . Encoders . GifEncoder ( image , out ) ; if ( Debug . debugging ( STR_ ) ) { Debug . output ( STR_ ) ; } enc . encode ( ) ; if ( Debug . debugging ( STR_ ) ) { Debug . output ( STR_ ) ; } return out . toByteArray ( ) ; }
public ClientInvocation goBackNClientsInvocation ( HttpServletRequest request , int nClients ) { ClientInvocation cli = null ; for ( int i = NUM_ ; i < nClients ; i ++ ) { boolean deleteForm = ( i < nClients - NUM_ ) ; cli = popLastClientInvocation ( request , deleteForm ) ; } return cli ; }
public List < IComment > appendLocalComment ( final String comment ) throws com . google . security . zynamics . binnavi . API . disassembly . CouldntSaveDataException , com . google . security . zynamics . binnavi . API . disassembly . CouldntLoadDataException { try { return m_edge . appendLocalComment ( comment ) ; } catch ( final CouldntSaveDataException exception ) { throw new com . google . security . zynamics . binnavi . API . disassembly . CouldntSaveDataException ( exception ) ; } catch ( final CouldntLoadDataException exception ) { throw new com . google . security . zynamics . binnavi . API . disassembly . CouldntLoadDataException ( exception ) ; } }
public static int value ( String s ) { return codes . getValue ( s ) ; }
public abstract String readChannel ( String queue ) ;
public Event35Id . Builder clearSecond ( ) { second = null ; fieldSetFlags ( ) [ NUM_ ] = BOOL_ ; return this ; }
public int describeContents ( ) { return NUM_ ; }
public boolean isQuantityBased ( ) ;
public boolean equals ( Object other ) { if ( ! ( other instanceof TLongIntHashMap ) ) { return BOOL_ ; } TLongIntHashMap that = ( TLongIntHashMap ) other ; if ( that . size ( ) != this . size ( ) ) { return BOOL_ ; } return forEachEntry ( new EqProcedure ( that ) ) ; }
public void animateX ( int durationMillis , EasingFunction easing ) { if ( android . os . Build . VERSION . SDK_INT < NUM_ ) return ; ObjectAnimator animatorX = ObjectAnimator . ofFloat ( this , STR_ , NUM_ , NUM_ ) ; animatorX . setInterpolator ( easing ) ; animatorX . setDuration ( durationMillis ) ; animatorX . addUpdateListener ( mListener ) ; animatorX . start ( ) ; }
private void handleExceptions ( Subroutine subroutine , InstructionHandle pei , BasicBlock etb ) { etb . setExceptionThrower ( pei ) ; boolean sawUniversalExceptionHandler = BOOL_ ; List < CodeExceptionGen > exceptionHandlerList = exceptionHandlerMap . getHandlerList ( pei ) ; if ( exceptionHandlerList != null ) { for ( CodeExceptionGen exceptionHandler : exceptionHandlerList ) { InstructionHandle handlerStart = exceptionHandler . getHandlerPC ( ) ; subroutine . addEdgeAndExplore ( etb , handlerStart , HANDLED_EXCEPTION_EDGE ) ; if ( Hierarchy . isUniversalExceptionHandler ( exceptionHandler . getCatchType ( ) ) ) { sawUniversalExceptionHandler = BOOL_ ; } } } if ( ! sawUniversalExceptionHandler ) { if ( DEBUG ) { System . out . println ( STR_ + pei ) ; } subroutine . setUnhandledExceptionBlock ( etb ) ; } }
public boolean hasEphemeris ( ) { return mHasEphemeris ; }
abstract public AbstractMRMessage createOutPacket ( ) ;
private boolean canMoveVertically ( float translationY ) { if ( getParent ( ) == null ) return BOOL_ ; View parent = ( View ) getParent ( ) ; if ( isHorizontal ) { return translationY + getHeight ( ) < parent . getHeight ( ) && translationY > NUM_ ; } else { float correction = getWidth ( ) / NUM_ - getHeight ( ) / NUM_ ; return translationY - correction + getWidth ( ) < parent . getHeight ( ) && translationY - correction > NUM_ ; } }
public void pick ( MotionEvent event ) { final int PICK_REGION_SIZE = NUM_ ; togglePickedObjectHighlights ( ) ; this . pickedObjects . clear ( ) ; PickedObjectList pickList = getWorldWindow ( ) . pickShapesInRect ( event . getX ( ) - PICK_REGION_SIZE / NUM_ , event . getY ( ) - PICK_REGION_SIZE / NUM_ , PICK_REGION_SIZE , PICK_REGION_SIZE ) ; for ( int i = NUM_ ; i < pickList . count ( ) ; i ++ ) { if ( pickList . pickedObjectAt ( i ) . isOnTop ( ) ) { this . pickedObjects . add ( pickList . pickedObjectAt ( i ) . getUserObject ( ) ) ; } } togglePickedObjectHighlights ( ) ; }
private void returnData ( Object ret ) { if ( myHost != null ) { myHost . returnData ( ret ) ; } }
public XYToAnyTransform ( double nx , double ny , double nz ) { setTargetNormal ( nx , ny , nz ) ; }
protected void sendFunctionGroup5 ( ) { }
public UIOutputTestCase ( String name ) { super ( name ) ; }
public boolean undefinesAll ( ) { return getDefinedRegisters ( ) . size ( ) == NUM_ ; }
public static void add ( List < String > options , String option , File value ) { options . add ( STR_ + option ) ; options . add ( STR_ + value ) ; }
public WampClientBuilder ( ) { roles = EnumSet . of ( WampRoles . Caller , WampRoles . Callee , WampRoles . Publisher , WampRoles . Subscriber ) ; WampSerialization . addDefaultSerializations ( serializations ) ; }
public static String computeShannonWeaver ( ViewerBase viewer , ProgressListener progressListener ) throws IOException , CanceledException { if ( viewer instanceof MainViewer ) return toString ( computeShannonWeaver ( ( MainViewer ) viewer , progressListener ) ) ; else if ( viewer instanceof ClassificationViewer ) return toString ( computeShannonWeaver ( ( ClassificationViewer ) viewer , progressListener ) ) ; else return null ; }
public static Simulation fromXml ( String xml ) throws ParserConfigurationException , SAXException , IOException { return XmlReader . fromXml ( new InputSource ( new StringReader ( xml ) ) ) ; }
public boolean isRunning ( ) { return started ; }
void removeAll ( Collection < Cookie > cookies ) ;
public IndicesAliasesRequestBuilder addAlias ( String [ ] indices , String alias ) { request . addAlias ( alias , indices ) ; return this ; }
protected void addTag ( WbXmlTagDef tag ) { this . tagsByName . put ( tag . getNameWithPrefix ( ) , tag ) ; this . tagsByToken . put ( tag . getToken ( ) , tag ) ; }
private boolean contains ( String [ ] filterQueries , String identifier ) { if ( filterQueries == null ) { return BOOL_ ; } for ( String filterQuery : filterQueries ) { if ( filterQuery . contains ( identifier ) ) { return BOOL_ ; } } return BOOL_ ; }
public DimensionsDescriptor ( String aggregationString ) { initialize ( aggregationString ) ; }
public Builder withRecoveryStrategy ( RecoveryStrategy recoveryStrategy ) { this . recoveryStrategy = Assert . notNull ( recoveryStrategy , STR_ ) ; return this ; }
public void clearAccessibleSelection ( ) { JComboBox . this . setSelectedIndex ( - NUM_ ) ; }
public static JsonElement parse ( JsonReader reader ) throws JsonParseException { boolean isEmpty = BOOL_ ; try { reader . peek ( ) ; isEmpty = BOOL_ ; return TypeAdapters . JSON_ELEMENT . read ( reader ) ; } catch ( EOFException e ) { if ( isEmpty ) { return JsonNull . INSTANCE ; } throw new JsonSyntaxException ( e ) ; } catch ( MalformedJsonException e ) { throw new JsonSyntaxException ( e ) ; } catch ( IOException e ) { throw new JsonIOException ( e ) ; } catch ( NumberFormatException e ) { throw new JsonSyntaxException ( e ) ; } }
public boolean isEven ( ) { return isEven ( value ) ; }
public AffineTransformation ( ) { setToIdentity ( ) ; }
private static String makeWatchLink ( String id ) { return STR_ . replace ( STR_ , id ) ; }
public void readSet ( ASN1Set set ) throws IOException { if ( tag != ASN1Constants . TAG_C_SET ) { throw expected ( STR_ ) ; } throw new ASN1Exception ( STR_ ) ; }
public static SM_SYSTEM_MESSAGE STR_GIVE_ITEM_OPTION_ALL_OPTION_REMOVED ( String value0 ) { return new SM_SYSTEM_MESSAGE ( NUM_ , value0 ) ; }
public boolean updateGroupNames ( GroupBackend groupBackend ) { boolean dirty = BOOL_ ; for ( GroupReference ref : groupList . references ( ) ) { GroupDescription . Basic g = groupBackend . get ( ref . getUUID ( ) ) ; if ( g != null && ! g . getName ( ) . equals ( ref . getName ( ) ) ) { dirty = BOOL_ ; ref . setName ( g . getName ( ) ) ; } } return dirty ; }
public synchronized void shutdown ( boolean deleteData ) { if ( factory != null ) { try { factory . shutdown ( ) ; try { server . getZKDatabase ( ) . close ( ) ; } catch ( IOException e ) { LOGGER . error ( STR_ , e ) ; } } finally { factory = null ; if ( deleteData ) { try { IoUtil . delete ( this . snapshotDir , this . logDir ) ; } catch ( IOException e ) { LOGGER . error ( STR_ , e ) ; } } } } }
UnixDirectoryStream ( UnixPath dir , long dp , DirectoryStream . Filter < ? super Path > filter ) { this . dir = dir ; this . dp = dp ; this . filter = filter ; }
public StddevProjectionExpression ( Expression expression , boolean isDistinct ) { this . distinct = isDistinct ; this . getChildren ( ) . add ( expression ) ; }
public CF10 ( int numberOfVariables ) { super ( numberOfVariables , NUM_ , NUM_ ) ; }
public static void show ( JInternalFrame internalFrame , JDesktopPane desktopPane ) throws PropertyVetoException { if ( ! desktopPane . isAncestorOf ( internalFrame ) ) desktopPane . add ( internalFrame ) ; internalFrame . setClosed ( BOOL_ ) ; internalFrame . setVisible ( BOOL_ ) ; internalFrame . toFront ( ) ; }
public boolean remove ( int key , Object value ) { if ( value == null ) { return BOOL_ ; } E prev ; if ( array . length <= key ) { return BOOL_ ; } prev = ( E ) array [ key ] ; if ( prev . equals ( value ) ) { size -- ; array [ key ] = null ; return BOOL_ ; } return BOOL_ ; }
public void testInitString ( ) { SeeedStudioRfidProtocol instance = new SeeedStudioRfidProtocol ( ) ; assertEquals ( STR_ , instance . initString ( ) ) ; }
public static boolean assertDistribution ( final double [ ] da ) { double sum = NUM_ ; for ( final double d : da ) { Exam . assertTrue ( Utils . realFormat ( d ) , d >= NUM_ && d <= ( NUM_ + TOLERANCE ) && ! Double . isNaN ( d ) ) ; sum += d ; } if ( Exam . checkEquals ( NUM_ , sum , NUM_ ) ) { return BOOL_ ; } throw new Exam . ExamException ( STR_ + Utils . realFormat ( sum ) + STR_ + Utils . realFormatArray ( da ) ) ; }
public Impp ( String protocol , String handle ) { setUri ( protocol , handle ) ; }
public abstract boolean isRunning ( ) ;
private Set < ClusterNode > replicatedUnstableDataNodes ( GridCacheContext < ? , ? > cctx ) { assert cctx . isReplicated ( ) : cctx . name ( ) + STR_ ; String space = cctx . name ( ) ; Set < ClusterNode > dataNodes = new HashSet < > ( dataNodes ( space , NONE ) ) ; if ( dataNodes . isEmpty ( ) ) throw new CacheException ( STR_ + space ) ; for ( int p = NUM_ , parts = cctx . affinity ( ) . partitions ( ) ; p < parts ; p ++ ) { List < ClusterNode > owners = cctx . topology ( ) . owners ( p ) ; if ( F . isEmpty ( owners ) ) return null ; dataNodes . retainAll ( owners ) ; if ( dataNodes . isEmpty ( ) ) return null ; } return dataNodes ; }
public DSSDocument generateXAdESContentTimestampAsDSSDocument ( final DSSDocument toSignDocument , final XAdESSignatureParameters externalParameters , final TimestampType timestampType ) { final TimestampToken timestampToken = generateXAdESContentTimestampAsTimestampToken ( toSignDocument , externalParameters , timestampType ) ; return new InMemoryDocument ( timestampToken . getEncoded ( ) ) ; }
public void excludeFrom ( int start ) { Assert . check ( currentState != BitsState . UNKNOWN ) ; Bits temp = new Bits ( ) ; temp . sizeTo ( bits . length ) ; temp . inclRange ( NUM_ , start ) ; internalAndSet ( temp ) ; currentState = BitsState . NORMAL ; }
private boolean removeLegionMember ( String charName , boolean kick , String playerName ) { LegionMemberEx legionMember = getLegionMemberEx ( charName ) ; if ( legionMember == null ) { log . error ( STR_ + charName ) ; return BOOL_ ; } deleteLegionMemberFromDB ( legionMember ) ; Player player = world . findPlayer ( charName ) ; if ( player != null ) { PacketSendUtility . broadcastPacket ( player , new SM_LEGION_UPDATE_TITLE ( player . getObjectId ( ) , NUM_ , STR_ , NUM_ ) , BOOL_ ) ; } if ( kick ) { PacketSendUtility . broadcastPacketToLegion ( legionMember . getLegion ( ) , new SM_LEGION_LEAVE_MEMBER ( NUM_ , legionMember . getObjectId ( ) , playerName , legionMember . getName ( ) ) ) ; } else { PacketSendUtility . broadcastPacketToLegion ( legionMember . getLegion ( ) , new SM_LEGION_LEAVE_MEMBER ( NUM_ , legionMember . getObjectId ( ) , charName ) ) ; } return BOOL_ ; }
public NoConnectionPendingException ( ) { }
private void tempRemoveFromQueue ( ) { if ( inQueue ( ) ) { previousInQueue . nextInQueue = nextInQueue ; nextInQueue . previousInQueue = previousInQueue ; } }
public Builder withDescription ( String description ) { role . setDescription ( description ) ; return this ; }
protected Iterator < PartitionLocator > locatorScan ( final IKeyOrder < F > keyOrder , final byte [ ] fromKey , final byte [ ] toKey ) { final String name = relation . getFQN ( keyOrder ) ; return fed . locatorScan ( name , timestamp , fromKey , toKey , BOOL_ ) ; }
public void writeCharacters ( String text ) throws XMLStreamException ;
protected void initTable ( ) throws BadElementException { tablePDF = new Table ( this . model . getNumberOfColumns ( ) ) ; tablePDF . getDefaultCell ( ) . setVerticalAlignment ( Element . ALIGN_TOP ) ; tablePDF . setCellsFitPage ( BOOL_ ) ; tablePDF . setWidth ( NUM_ ) ; tablePDF . setPadding ( NUM_ ) ; tablePDF . setSpacing ( NUM_ ) ; smallFont = FontFactory . getFont ( FontFactory . HELVETICA , NUM_ , Font . NORMAL , new Color ( NUM_ , NUM_ , NUM_ ) ) ; }
public static void i ( String tag , String msg ) { i ( tag , msg , null ) ; }
public TableRowElement ( ) { super ( STR_ , new ListElement ( ) ) ; }
public static ViewDragHelper create ( ViewGroup forParent , float sensitivity , Callback cb ) { final ViewDragHelper helper = create ( forParent , cb ) ; helper . mTouchSlop = ( int ) ( helper . mTouchSlop * ( NUM_ / sensitivity ) ) ; return helper ; }
private int read ( ) throws IOException { if ( _peekOffset < _peekLength ) return _peek [ _peekOffset ++ ] & NUM_ ; else return _is . read ( ) ; }
public void testUnsizedDoublesCountSeq ( ) { LongAdder counter = new LongAdder ( ) ; ThreadLocalRandom r = ThreadLocalRandom . current ( ) ; long size = NUM_ ; r . doubles ( ) . limit ( size ) . forEach ( null ) ; assertEquals ( counter . sum ( ) , size ) ; }
public DefaultListCellRenderer ( boolean showNumbers ) { this ( ) ; showNumbersForce = BOOL_ ; this . showNumbers = showNumbers ; }
public String toString ( ) { String aString = aliases . isEmpty ( ) ? STR_ : STR_ + aliases . toString ( ) ; String attrs = attributes . isEmpty ( ) ? STR_ : STR_ + attributes . toString ( ) ; return provider . getName ( ) + STR_ + type + STR_ + algorithm + STR_ + className + aString + attrs + STR_ ; }
void dispatchFirstMethodAfterBody ( long id , Object object , Object [ ] parameters , Object returnValue ) ;
protected void doUpLine ( byte [ ] curLine , byte [ ] prevLine ) { if ( prevLine == null ) { return ; } for ( int i = NUM_ ; i < curLine . length ; i ++ ) { curLine [ i ] += prevLine [ i ] ; } }
public DefaultRetryPolicy ( ) { this ( DEFAULT_TIMEOUT_MS , DEFAULT_MAX_RETRIES , DEFAULT_BACKOFF_MULT ) ; }
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( namednodemapgetnameditemns06 . class , args ) ; }
protected byte [ ] computeSHAdigest ( final byte [ ] value ) { try { return MessageDigest . getInstance ( STR_ ) . digest ( value ) ; } catch ( Exception e ) { throw new UnsupportedOperationException ( e . toString ( ) ) ; } }
private void parseHeader ( ) { byte [ ] frameData = headerScratchBytes . data ; if ( mediaFormat == null ) { mediaFormat = DtsUtil . parseDtsFormat ( frameData , null , C . UNKNOWN_TIME_US , null ) ; output . format ( mediaFormat ) ; } sampleSize = DtsUtil . getDtsFrameSize ( frameData ) ; sampleDurationUs = ( int ) ( C . MICROS_PER_SECOND * DtsUtil . parseDtsAudioSampleCount ( frameData ) / mediaFormat . sampleRate ) ; }
protected String millisecondsToYearMonthDay ( long millis ) { return getSimpleDateFormatForMilliseconds ( STR_ , millis ) ; }
long endBlock ( ) ;
Token token ( int lookahead ) ;
public void startElement ( String uri , String localName , String qName , Attributes atts ) throws SAXException { if ( documentHandler != null ) { qAtts . setAttributes ( atts ) ; documentHandler . startElement ( qName , qAtts ) ; } }
public boolean isContentsEmpty ( ) { return contents . isEmpty ( ) ; }
public LaunchVideo ( SantaContext context , LauncherDataChangedCallback adapter , int cardDrawableId , int unlockDate ) { super ( context , adapter , R . string . video , cardDrawableId ) ; mCardDrawableId = cardDrawableId ; mUnlockDate = unlockDate ; mMeasurement = FirebaseAnalytics . getInstance ( context . getApplicationContext ( ) ) ; }
public void consume ( ) { this . consumed = BOOL_ ; }
boolean hasRepairCost ( ) ;
public boolean endCall ( ) throws android . os . RemoteException { android . os . Parcel _data = android . os . Parcel . obtain ( ) ; android . os . Parcel _reply = android . os . Parcel . obtain ( ) ; boolean _result ; try { _data . writeInterfaceToken ( DESCRIPTOR ) ; mRemote . transact ( Stub . TRANSACTION_endCall , _data , _reply , NUM_ ) ; _reply . readException ( ) ; _result = ( NUM_ != _reply . readInt ( ) ) ; } finally { _reply . recycle ( ) ; _data . recycle ( ) ; } return _result ; }
private static final PrivateKey constructPrivateKey ( byte [ ] encodedKey , String encodedKeyAlgorithm ) throws InvalidKeyException , NoSuchAlgorithmException { PrivateKey key = null ; try { KeyFactory keyFactory = KeyFactory . getInstance ( encodedKeyAlgorithm , SunJCE . getInstance ( ) ) ; PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec ( encodedKey ) ; return keyFactory . generatePrivate ( keySpec ) ; } catch ( NoSuchAlgorithmException nsae ) { try { KeyFactory keyFactory = KeyFactory . getInstance ( encodedKeyAlgorithm ) ; PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec ( encodedKey ) ; key = keyFactory . generatePrivate ( keySpec ) ; } catch ( NoSuchAlgorithmException nsae2 ) { throw new NoSuchAlgorithmException ( STR_ + STR_ + encodedKeyAlgorithm + STR_ ) ; } catch ( InvalidKeySpecException ikse2 ) { InvalidKeyException ike = new InvalidKeyException ( STR_ ) ; ike . initCause ( ikse2 ) ; throw ike ; } } catch ( InvalidKeySpecException ikse ) { InvalidKeyException ike = new InvalidKeyException ( STR_ ) ; ike . initCause ( ikse ) ; throw ike ; } return key ; }
public float translateX ( float x ) { if ( mOverlay . mFacing == CameraSource . CAMERA_FACING_FRONT ) { return mOverlay . getWidth ( ) - scaleX ( x ) ; } else { return scaleX ( x ) ; } }
protected void initiateWorking ( ) { if ( _activeTrain . getStatus ( ) != ActiveTrain . WORKING ) { if ( _autoEngineer != null ) { _autoEngineer . setHalt ( BOOL_ ) ; waitUntilStopped ( ) ; _autoEngineer . abort ( ) ; InstanceManager . throttleManagerInstance ( ) . releaseThrottle ( _throttle , this ) ; _autoEngineer = null ; _throttle = null ; } _activeTrain . setMode ( ActiveTrain . MANUAL ) ; _activeTrain . setStatus ( ActiveTrain . WORKING ) ; } }
public void writeRawBytes ( final byte [ ] value ) throws IOException { writeRawBytes ( value , NUM_ , value . length ) ; }
private void clearRemoteNotifications ( ) { Log . v ( TAG , ACTION_CLEAR_REMOTE_NOTIFICATIONS ) ; GoogleApiClient googleApiClient = new GoogleApiClient . Builder ( this ) . addApi ( Wearable . API ) . build ( ) ; ConnectionResult connectionResult = googleApiClient . blockingConnect ( Constants . GOOGLE_API_CLIENT_TIMEOUT_S , TimeUnit . SECONDS ) ; if ( connectionResult . isSuccess ( ) && googleApiClient . isConnected ( ) ) { Iterator < String > itr = Utils . getNodes ( googleApiClient ) . iterator ( ) ; while ( itr . hasNext ( ) ) { Wearable . MessageApi . sendMessage ( googleApiClient , itr . next ( ) , Constants . CLEAR_NOTIFICATIONS_PATH , null ) ; } googleApiClient . disconnect ( ) ; } }
public String simpleQueryForString ( ) { acquireReference ( ) ; try { return getSession ( ) . executeForString ( getSql ( ) , getBindArgs ( ) , getConnectionFlags ( ) , null ) ; } catch ( SQLiteDatabaseCorruptException ex ) { onCorruption ( ) ; throw ex ; } finally { releaseReference ( ) ; } }
private static void remoteCreateCache ( ) throws Exception { Assert . assertTrue ( cache == null , STR_ ) ; DistributedCacheTestCase x = new DistributedCacheTestCase ( ) { } ; cache = CacheFactory . create ( x . getSystem ( ) ) ; AttributesFactory factory = new AttributesFactory ( ) ; factory . setScope ( Scope . DISTRIBUTED_NO_ACK ) ; cache . createRegion ( STR_ , factory . create ( ) ) ; }
public MessageAckHandler ( ImplDiscordAPI api ) { super ( api , BOOL_ , STR_ ) ; }
public String toString ( ) { return STR_ + getID ( ) + STR_ + getBeforeCaretText ( ) + STR_ + getAfterCaretText ( ) + STR_ ; }
public AccountHeaderBuilder withSelectionFirstLine ( String selectionFirstLine ) { this . mSelectionFirstLine = selectionFirstLine ; return this ; }
void visit ( Method m ) ;
public FloatMapperBuilder boost ( Float boost ) { this . boost = boost ; return this ; }
public void flush ( final Casing casing ) { final Side side = casing . getCasingWorld ( ) . isRemote ? Side . CLIENT : Side . SERVER ; final ByteBuf data = Unpooled . buffer ( ) ; collectData ( data ) ; if ( data . readableBytes ( ) > NUM_ ) { final MessageCasingData message = new MessageCasingData ( casing , data ) ; final boolean didSend ; if ( side == Side . CLIENT ) { Network . INSTANCE . getWrapper ( ) . sendToServer ( message ) ; didSend = BOOL_ ; } else { final NetworkRegistry . TargetPoint point = Network . getTargetPoint ( casing . getCasingWorld ( ) , casing . getPosition ( ) , Network . RANGE_HIGH ) ; Network . INSTANCE . getWrapper ( ) . sendToAllAround ( message , point ) ; didSend = areAnyPlayersNear ( point ) ; } if ( didSend ) { incrementPacketsSent ( side ) ; } } }
private static void populateRequest ( HttpServletRequest request , List < Sequence < IString > > translationList , List < List < String > > alignments , List < Double > scoreList ) { Type t = new TypeToken < TranslationReply > ( ) { } . getType ( ) ; List < TranslationQuery > queryList = toQuery ( translationList , alignments , scoreList ) ; TranslationReply baseResponse = new TranslationReply ( queryList ) ; ServiceResponse serviceResponse = new ServiceResponse ( baseResponse , t ) ; request . setAttribute ( PhrasalServlet . ASYNC_KEY , serviceResponse ) ; }
protected int makePressColor ( ) { int r = ( this . backgroundColor > > NUM_ ) & NUM_ ; int g = ( this . backgroundColor > > NUM_ ) & NUM_ ; int b = ( this . backgroundColor > > NUM_ ) & NUM_ ; r = ( r - NUM_ < NUM_ ) ? NUM_ : r - NUM_ ; g = ( g - NUM_ < NUM_ ) ? NUM_ : g - NUM_ ; b = ( b - NUM_ < NUM_ ) ? NUM_ : b - NUM_ ; return Color . rgb ( r , g , b ) ; }
public int totalNumDocs ( ) throws IOException { int total = NUM_ ; for ( SegmentCommitInfo info : segments ) { total += info . info . maxDoc ( ) ; } return total ; }
public void updateInventories ( ) throws LoginFailedException , RemoteServerException { updateInventories ( BOOL_ ) ; }
boolean isVirtual ( ) ;
SnmpValue buildSnmpValue ( long id , Object value ) throws SnmpStatusException ;
public ResumeReply ( final int packetId , final int errorCode ) { super ( packetId , errorCode ) ; }
public void disconnect ( ) throws SQLException ;
public void subtract ( final int operand ) { this . value -= operand ; }
public void visitTryCatchBlock ( Label start , Label end , Label handler , String type ) { if ( mv != null ) { mv . visitTryCatchBlock ( start , end , handler , type ) ; } }
public boolean timestampParsingStillNeeded ( ) { return shouldParseTimestamp && ! timestampResolved ; }
public boolean isZoomEnabled ( ) { return mZoomEnabled ; }
public void removeEntryFromNotifRegionMap ( DistributedMember member ) { notifRegionMap . remove ( member ) ; }
public PreparedLineStringIntersects ( PreparedLineString prepLine ) { this . prepLine = prepLine ; }
private void startVoiceRecognitionActivity ( ) { Intent intent = new Intent ( RecognizerIntent . ACTION_RECOGNIZE_SPEECH ) ; intent . putExtra ( RecognizerIntent . EXTRA_LANGUAGE_MODEL , RecognizerIntent . LANGUAGE_MODEL_FREE_FORM ) ; intent . putExtra ( RecognizerIntent . EXTRA_PROMPT , R . string . voice_hint ) ; startActivityForResult ( intent , REQUEST_CODE ) ; }
public static void register ( QueryLanguage ql ) { QUERY_LANGUAGES . add ( ql ) ; }
void sendMessage ( MidiMessage message , long timeStamp ) { if ( message instanceof FastShortMessage ) { sendMessage ( ( ( FastShortMessage ) message ) . getPackedMsg ( ) , timeStamp ) ; return ; } synchronized ( transmitters ) { int size = transmitters . size ( ) ; if ( optimizedReceiverCount == size ) { if ( midiOutReceiver != null ) { if ( TRACE_TRANSMITTER ) Printer . println ( STR_ ) ; midiOutReceiver . send ( message , timeStamp ) ; } } else { if ( TRACE_TRANSMITTER ) Printer . println ( STR_ + size + STR_ ) ; for ( int i = NUM_ ; i < size ; i ++ ) { Receiver receiver = ( ( Transmitter ) transmitters . get ( i ) ) . getReceiver ( ) ; if ( receiver != null ) { receiver . send ( message , timeStamp ) ; } } } } }
public Cursor fetchAll ( Long failedActionID , String actionParameterName , String failedActionParameterData ) { SQLiteQueryBuilder qb = new SQLiteQueryBuilder ( ) ; qb . setTables ( DATABASE_TABLE ) ; qb . appendWhere ( STR_ ) ; if ( failedActionID != null ) { qb . appendWhere ( STR_ + KEY_FAILEDACTIONID + STR_ + failedActionID ) ; } if ( actionParameterName != null ) { qb . appendWhere ( STR_ + KEY_ACTIONPARAMETERNAME + STR_ + actionParameterName ) ; } if ( failedActionParameterData != null ) { qb . appendWhere ( STR_ + KEY_FAILEDACTIONPARAMETERDATA + STR_ ) ; qb . appendWhereEscapeString ( failedActionParameterData ) ; } return qb . query ( database , KEYS , null , null , null , null , null ) ; }
public void test_encodeDecode_offsetBits32_01 ( ) { WormAddressManager am = new WormAddressManager ( NUM_ ) ; final int nbytes = NUM_ ; final long offset = NUM_ ; final long addr = am . toAddr ( nbytes , offset ) ; assertEquals ( STR_ , offset , am . getOffset ( addr ) ) ; assertEquals ( STR_ , nbytes , am . getByteCount ( addr ) ) ; }
public static BlazeGraphEmbedded open ( final BigdataSailRepository repo ) { return open ( repo , new BaseConfiguration ( ) ) ; }
public NamedSmartTreeNode ( String name ) { super ( name ) ; this . name = name ; }
public void testReadFailSequence ( ) throws JmriException { EasyDccInterfaceScaffold t = new EasyDccInterfaceScaffold ( ) ; EasyDccListenerScaffold l = new EasyDccListenerScaffold ( ) ; EasyDccProgrammer p = new EasyDccProgrammer ( ) ; p . setMode ( DefaultProgrammerManager . PAGEMODE ) ; p . readCV ( NUM_ , l ) ; Assert . assertEquals ( STR_ , NUM_ , t . outbound . size ( ) ) ; Assert . assertEquals ( STR_ , STR_ , ( ( t . outbound . elementAt ( NUM_ ) ) ) . toString ( ) ) ; EasyDccReply r = new EasyDccReply ( ) ; r . setElement ( NUM_ , STR_ ) ; r . setElement ( NUM_ , STR_ ) ; r . setElement ( NUM_ , STR_ ) ; r . setElement ( NUM_ , STR_ ) ; r . setElement ( NUM_ , STR_ ) ; r . setElement ( NUM_ , STR_ ) ; r . setElement ( NUM_ , STR_ ) ; t . sendTestReply ( r ) ; Assert . assertEquals ( STR_ , NUM_ , rcvdInvoked ) ; }
public boolean isPickQAConfirm ( ) ;
public CUgraphicsResource ( ) { }
public void initialize ( Body bodyA , Body bodyB , Vector2 groundAnchorA , Vector2 groundAnchorB , Vector2 anchorA , Vector2 anchorB , float ratio ) { this . bodyA = bodyA ; this . bodyB = bodyB ; this . groundAnchorA . set ( groundAnchorA ) ; this . groundAnchorB . set ( groundAnchorB ) ; this . localAnchorA . set ( bodyA . getLocalPoint ( anchorA ) ) ; this . localAnchorB . set ( bodyB . getLocalPoint ( anchorB ) ) ; lengthA = anchorA . dst ( groundAnchorA ) ; lengthB = anchorB . dst ( groundAnchorB ) ; this . ratio = ratio ; float C = lengthA + ratio * lengthB ; }
void usage ( PrintStream out ) { out . println ( STR_ ) ; out . println ( STR_ ) ; out . println ( STR_ ) ; out . println ( STR_ ) ; out . println ( STR_ ) ; out . println ( STR_ ) ; out . println ( STR_ ) ; out . println ( STR_ ) ; out . println ( STR_ ) ; out . println ( STR_ ) ; out . println ( STR_ ) ; out . println ( STR_ ) ; out . println ( STR_ ) ; out . println ( STR_ ) ; out . println ( STR_ ) ; out . println ( STR_ ) ; }
public void postPaint ( Display d , Graphics2D g ) ;
public void fireTrainingBegin ( ) { for ( TrainerListener listener : getListeners ( ) ) { listener . beginTraining ( ) ; } }
public Builder addIntegerDerivedColumn ( String columnName , DateTimeFieldType type ) { derivedColumns . add ( new DerivedColumn ( columnName , ColumnType . Integer , null , null , type ) ) ; return this ; }
public LDAPAttribute ( String attributeType ) { this . attributeType = attributeType ; values = new ArrayList < > ( NUM_ ) ; }
public boolean startBillingRun ( long currentTime ) ;
protected void doRequest ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { Context context = null ; try { context = createContext ( request , response ) ; setContentType ( request , response ) ; Template template = handleRequest ( request , response , context ) ; if ( template == null ) { return ; } mergeTemplate ( template , context , response ) ; } catch ( Exception e ) { error ( request , response , e ) ; } finally { requestCleanup ( request , response , context ) ; } }
boolean doesOccur ( QName refName ) { return m_refs . contains ( refName ) ; }
protected boolean compareStrings ( String s1 , String s2 ) { return s1 != null && s1 . equals ( s2 ) || s1 == null && s2 == null ; }
public PixelMatrixEditorsComboBoxModel ( ) { super ( ) ; selection = PixelMatrixEditors . VALUES . get ( NUM_ ) ; }
public static void hideToast ( ) { if ( null != toast ) { toast . cancel ( ) ; } }
public static DocumentBuilderProvider documentBuilderProvider ( int maxSize ) { return new PerThreadDocumentBuilderProvider ( new SafeDocumentBuilderProvider ( ) , maxSize ) ; }
public AuthorityKeyIdentifier ( GeneralNames name , BigInteger serialNumber ) { this ( ( byte [ ] ) null , name , serialNumber ) ; }
public void createAccrualBasedJournalEntriesAndReversalsForLoan ( final Office office , final String currencyCode , final Integer accountTypeToBeDebited , final Integer accountTypeToBeCredited , final Long loanProductId , final Long paymentTypeId , final Long loanId , final String transactionId , final Date transactionDate , final BigDecimal amount , final Boolean isReversal ) { int accountTypeToDebitId = accountTypeToBeDebited ; int accountTypeToCreditId = accountTypeToBeCredited ; if ( isReversal ) { accountTypeToDebitId = accountTypeToBeCredited ; accountTypeToCreditId = accountTypeToBeDebited ; } createJournalEntriesForLoan ( office , currencyCode , accountTypeToDebitId , accountTypeToCreditId , loanProductId , paymentTypeId , loanId , transactionId , transactionDate , amount ) ; }
public void onOpen ( EventSourceEvent open ) ;
protected void updateRoot ( int pNum ) { this . rootPageNum = pNum ; writeHeader ( ) ; }
List recuperarHijosDeOrgano ( final String idOrgPadre ) throws OrganizationException ;
public static void clearQueue ( ) { if ( playerService != null ) { try { playerService . setQueue ( new ArrayList < > ( ) , NUM_ ) ; artwork = null ; updateUi ( ) ; } catch ( RemoteException exception ) { Timber . e ( exception , STR_ ) ; } } }
public void testAttributeOfTypeEntity ( ) throws Exception { String xml = STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ ; XmlPullParser parser = newPullParser ( xml ) ; assertEquals ( XmlPullParser . START_TAG , parser . next ( ) ) ; assertEquals ( STR_ , parser . getName ( ) ) ; assertEquals ( STR_ , parser . getAttributeValue ( null , STR_ ) ) ; assertEquals ( XmlPullParser . END_TAG , parser . next ( ) ) ; assertEquals ( XmlPullParser . END_DOCUMENT , parser . next ( ) ) ; }
public LoggingEventJsonSerde ( ) { this ( BOOL_ ) ; }
Builder clearField ( Descriptors . FieldDescriptor field ) ;
public static long used ( ) { return getStrategy ( ) . used ( ) ; }
protected Execution ( ) { prioritized = BOOL_ ; }
public Object readReply ( Class expectedClass ) throws Exception { if ( startReply ( ) ) { Object value = readObject ( expectedClass ) ; completeReply ( ) ; return value ; } else { Hashtable fault = readFault ( ) ; Object detail = fault . get ( STR_ ) ; if ( detail instanceof Exception ) throw ( Exception ) detail ; else { String code = ( String ) fault . get ( STR_ ) ; String message = ( String ) fault . get ( STR_ ) ; throw new BurlapServiceException ( message , code , detail ) ; } } }
public static int binarySearch ( char [ ] array , int startIndex , int endIndex , char value ) { checkIndexForBinarySearch ( array . length , startIndex , endIndex ) ; int low = startIndex , mid = - NUM_ , high = endIndex - NUM_ ; while ( low <= high ) { mid = ( low + high ) > > > NUM_ ; if ( value > array [ mid ] ) { low = mid + NUM_ ; } else if ( value == array [ mid ] ) { return mid ; } else { high = mid - NUM_ ; } } if ( mid < NUM_ ) { int insertPoint = endIndex ; for ( int index = startIndex ; index < endIndex ; index ++ ) { if ( value < array [ index ] ) { insertPoint = index ; } } return - insertPoint - NUM_ ; } return - mid - ( value < array [ mid ] ? NUM_ : NUM_ ) ; }
int compareColumnValue ( int columnNumber , LogEntryChangePath p1 , LogEntryChangePath p2 ) { switch ( columnNumber ) { case COL_ACTION : return getCollator ( ) . compare ( STR_ + p1 . getAction ( ) , STR_ + p2 . getAction ( ) ) ; case COL_PATH : return getCollator ( ) . compare ( p1 . getPath ( ) , p2 . getPath ( ) ) ; case COL_DESCRIPTION : String d1 ; String d2 ; if ( p1 . getCopySrcPath ( ) != null ) { d1 = Policy . bind ( STR_ , p1 . getCopySrcPath ( ) , p1 . getCopySrcRevision ( ) . toString ( ) ) ; } else { d1 = STR_ ; } if ( p2 . getCopySrcPath ( ) != null ) { d2 = Policy . bind ( STR_ , p2 . getCopySrcPath ( ) , p2 . getCopySrcRevision ( ) . toString ( ) ) ; } else { d2 = STR_ ; } return getCollator ( ) . compare ( d1 , d2 ) ; default : return NUM_ ; } }
private void checkRemoved ( ) { List < Offer > list = market . getExpiredOffersOlderThan ( TIME_TO_REMOVING ) ; for ( Offer offer : list ) { market . removeExpiredOffer ( offer ) ; StringBuilder builder = new StringBuilder ( ) ; builder . append ( STR_ ) ; builder . append ( Grammar . a_noun ( offer . getItemName ( ) ) ) ; builder . append ( STR_ ) ; sendMessage ( offer . getOfferer ( ) , builder ) ; } }
private void updateOverscrollAnimation ( final int scrolledOffset ) { if ( mEdgeGlowLeft == null || mEdgeGlowRight == null ) return ; int nextScrollPosition = mCurrentX + scrolledOffset ; if ( mFlingTracker == null || mFlingTracker . isFinished ( ) ) { if ( nextScrollPosition < NUM_ ) { int overscroll = Math . abs ( scrolledOffset ) ; mEdgeGlowLeft . onPull ( ( float ) overscroll / getRenderWidth ( ) ) ; if ( ! mEdgeGlowRight . isFinished ( ) ) { mEdgeGlowRight . onRelease ( ) ; } } else if ( nextScrollPosition > mMaxX ) { int overscroll = Math . abs ( scrolledOffset ) ; mEdgeGlowRight . onPull ( ( float ) overscroll / getRenderWidth ( ) ) ; if ( ! mEdgeGlowLeft . isFinished ( ) ) { mEdgeGlowLeft . onRelease ( ) ; } } } }
public GridAtomicInteger ( int initVal ) { super ( initVal ) ; }
private boolean useMiscHeading ( SettingsItem parent ) { if ( parent . getType ( ) . equals ( Type . SUB_GROUP ) ) { return BOOL_ ; } else if ( subGroupMiscUsed ) { return BOOL_ ; } else if ( ! useSubGroups ) { return BOOL_ ; } else { return BOOL_ ; } }
public void testPosNegSameLength ( ) { String numA = STR_ ; String numB = STR_ ; String res = STR_ ; BigInteger aNumber = new BigInteger ( numA ) ; BigInteger bNumber = new BigInteger ( numB ) ; BigInteger result = aNumber . xor ( bNumber ) ; assertTrue ( res . equals ( result . toString ( ) ) ) ; }
public abstract void addOnMenuVisibilityListener ( OnMenuVisibilityListener listener ) ;
Boolean call ( ) ;
S generate ( ) ;
public boolean isAtomicOperation ( ) { return BOOL_ ; }
public Z Minus ( Z a , Z b ) { re = a . re - b . re ; im = a . im - b . im ; return this ; }
public static boolean nameEqual ( Node node , String name , boolean caseSensitive ) { if ( name == null ) return BOOL_ ; if ( caseSensitive ) { return name . equals ( node . getNodeName ( ) ) || name . equals ( node . getLocalName ( ) ) ; } return name . equalsIgnoreCase ( node . getNodeName ( ) ) || name . equalsIgnoreCase ( node . getLocalName ( ) ) ; }
public void spawnParticle ( Particle particle , double x , double y , double z , int count ) ;
public Filter startSymbolAcceptFilter ( ) { return startSymbolAcceptFilter ; }
public void removeForeignKeyRelationship ( ERDAssociation table , boolean reflect ) { foreignKeyRelationships . remove ( table ) ; if ( reflect ) { firePropertyChange ( OUTPUT , table , null ) ; } }
public long size ( ) { return isNull ( ) ? NUM_ : this . end - this . start + NUM_ ; }
protected void add ( CSVRecord record ) { records . add ( Objects . requireNonNull ( record ) ) ; }
public int hashCode ( ) { return super . hashCode ( ) ^ ( the_symbol ( ) == null ? NUM_ : the_symbol ( ) . hashCode ( ) ) ; }
public TextField ( String text , String hint ) { this ( text ) ; setHint ( hint ) ; }
public static void closeEL ( Reader r ) { try { if ( r != null ) r . close ( ) ; } catch ( Throwable e ) { } }
public String flatten ( String model , String models ) { return getFlattened ( deserialize ( model ) , deserialize ( models ) ) ; }
Key < ? > establishes ( ) ;
public ResolveResult ( Object robj , String rcomp ) { resolvedObj = robj ; try { remainingName = new CompositeName ( rcomp ) ; } catch ( InvalidNameException e ) { } }
private void returnData ( Object ret ) { if ( myHost != null ) { myHost . returnData ( ret ) ; } }
public LocationAnimator ( ) { super ( ) ; }
public void checkConnectivity ( ) throws TransientNetworkDisconnectionException , NoConnectionException { if ( ! isConnected ( ) ) { if ( mConnectionSuspened ) { throw new TransientNetworkDisconnectionException ( ) ; } else { throw new NoConnectionException ( ) ; } } }
public int encodeBase64Chunk ( int b24 , byte [ ] buffer , int ptr ) { buffer [ ptr ++ ] = _base64ToAsciiB [ ( b24 > > NUM_ ) & NUM_ ] ; buffer [ ptr ++ ] = _base64ToAsciiB [ ( b24 > > NUM_ ) & NUM_ ] ; buffer [ ptr ++ ] = _base64ToAsciiB [ ( b24 > > NUM_ ) & NUM_ ] ; buffer [ ptr ++ ] = _base64ToAsciiB [ b24 & NUM_ ] ; return ptr ; }
public void addWorking ( boolean working ) { query . append ( STR_ + working ) ; }
private boolean isMineshafterPresent ( ) { try { Class . forName ( STR_ ) ; return BOOL_ ; } catch ( Exception e ) { return BOOL_ ; } }
protected abstract boolean isBefore ( int x , int y , Rectangle alloc ) ;
private Node tryAppend ( Node s , boolean haveData ) { for ( Node t = tail , p = t ; ; ) { Node n , u ; if ( p == null && ( p = head ) == null ) { if ( casHead ( null , s ) ) return s ; } else if ( p . cannotPrecede ( haveData ) ) return null ; else if ( ( n = p . next ) != null ) p = p != t && t != ( u = tail ) ? ( t = u ) : ( p != n ) ? n : null ; else if ( ! p . casNext ( null , s ) ) p = p . next ; else { if ( p != t ) { while ( ( tail != t || ! casTail ( t , s ) ) && ( t = tail ) != null && ( s = t . next ) != null && ( s = s . next ) != null && s != t ) ; } return p ; } } }
public void updatePoly ( float latPoint , float lonPoint , int [ ] xpoints , int [ ] ypoints , int cMode , LinkProperties properties , int graphicUpdateMask ) throws IOException { writeGraphicGestureHeader ( graphicUpdateMask ) ; LinkPoly . write ( latPoint , lonPoint , xpoints , ypoints , cMode , properties , link . dos ) ; }
public ServletFilterRegistratorSvc ( JsonValue config ) { this . config = config ; }
public Foo [ ] findByUuid_C_PrevAndNext ( long fooId , java . lang . String uuid , long companyId , com . liferay . portal . kernel . util . OrderByComparator < Foo > orderByComparator ) throws NoSuchFooException ;
private static int checkFieldTypeSignature ( final String signature , int pos ) { switch ( getChar ( signature , pos ) ) { case STR_ : return checkClassTypeSignature ( signature , pos ) ; case STR_ : return checkTypeSignature ( signature , pos + NUM_ ) ; default : return checkTypeVariableSignature ( signature , pos ) ; } }
public TvShowRenameTask ( List < TvShow > tvShowsToRename , List < TvShowEpisode > episodesToRename , boolean renameRootFolder ) { super ( BUNDLE . getString ( STR_ ) ) ; if ( tvShowsToRename != null ) { this . tvShowsToRename . addAll ( tvShowsToRename ) ; } if ( episodesToRename != null ) { this . episodesToRename . addAll ( episodesToRename ) ; } this . renameRoot = renameRootFolder ; }
default ValueOut optionalTyped ( Class aClass ) { return this ; }
private void saveName ( ) { try { m_project . getConfiguration ( ) . setName ( m_stdEditPanel . getNameString ( ) ) ; } catch ( final CouldntSaveDataException e ) { CUtilityFunctions . logException ( e ) ; final String innerMessage = STR_ + STR_ ; final String innerDescription = CUtilityFunctions . createDescription ( String . format ( STR_ , m_project . getConfiguration ( ) . getName ( ) ) , new String [ ] { STR_ } , new String [ ] { STR_ } ) ; NaviErrorDialog . show ( SwingUtilities . getWindowAncestor ( CProjectNodeComponent . this ) , innerMessage , innerDescription , e ) ; } }
void onMoveCircleStart ( MapAreaWrapper draggableCircle ) ;
public boolean eventGeneratable ( EventSetDescriptor esd ) { String eventName = esd . getName ( ) ; return eventGeneratable ( eventName ) ; }
public void stop ( ) { if ( jmxServer != null ) { jmxServer . stop ( ) ; } service . stop ( ) ; }
private void repaintGraphics ( OMGraphic omg ) { drawingAttributes . setTo ( omg ) ; doPrepare ( ) ; }
Boolean paramAsBool ( String name ) ;
Object removeAttribute ( String name ) ;
public DefaultConfigurationCapabilityFactory ( ClassLoader classLoader ) { super ( ) ; AbstractFactoryRegistry . register ( classLoader , this ) ; }
private void initFunctionTable ( ) { m_funcTable = new FunctionTable ( ) ; }
public abstract void removeEntity ( Entity entity ) ;
public int lineToY ( int line ) { FontMetrics fm = painter . getFontMetrics ( ) ; return ( line - firstLine ) * fm . getHeight ( ) - ( fm . getLeading ( ) + fm . getMaxDescent ( ) ) ; }
public static MCashLine createCashLine ( Properties ctx , int cashId , int invoiceId , BigDecimal amount , BigDecimal writeOffAmout , BigDecimal discountAmt , String trxName ) throws OperationException { MInvoice invoice = new MInvoice ( ctx , invoiceId , trxName ) ; if ( invoice . get_ID ( ) == NUM_ ) { throw new OperationException ( STR_ ) ; } MCashLine cashLine = new MCashLine ( ctx , NUM_ , trxName ) ; cashLine . setC_Cash_ID ( cashId ) ; cashLine . setInvoice ( invoice ) ; cashLine . setAmount ( amount ) ; cashLine . setWriteOffAmt ( writeOffAmout ) ; cashLine . setDiscountAmt ( discountAmt ) ; PoManager . save ( cashLine ) ; return cashLine ; }
public PrinterBuffer ( ) { m_list = new LinkedList ( ) ; }
public static boolean equals ( short [ ] array1 , short [ ] array2 ) { if ( array1 == array2 ) { return BOOL_ ; } if ( array1 == null || array2 == null || array1 . length != array2 . length ) { return BOOL_ ; } for ( int i = NUM_ ; i < array1 . length ; i ++ ) { if ( array1 [ i ] != array2 [ i ] ) { return BOOL_ ; } } return BOOL_ ; }
private void closeConnectionQuietly ( ) { if ( connection != null ) { try { connection . disconnect ( ) ; } catch ( Exception e ) { Log . e ( TAG , STR_ , e ) ; } connection = null ; } }
public static String assertJQ ( SolrQueryRequest req , String ... tests ) throws Exception { return assertJQ ( req , JSONTestUtil . DEFAULT_DELTA , tests ) ; }
public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_PARTY_ENEMY_DODGE ( String value0 , String value1 ) { return new SM_SYSTEM_MESSAGE ( NUM_ , value0 , value1 ) ; }
public boolean isConvertible ( final SourceDataTag tag , final Object tagValue ) { this . equipmentLogger . trace ( STR_ + tag . getId ( ) + STR_ + tagValue + STR_ + tag . getDataType ( ) ) ; return TypeConverter . isConvertible ( tagValue , tag . getDataType ( ) ) ; }
public static synchronized boolean isEmpty ( ) { return services . isEmpty ( ) ; }
public MaxCountExceededException ( Localizable specific , Number max , Object ... args ) { getContext ( ) . addMessage ( specific , max , args ) ; this . max = max ; }
protected Extent maximumRegionSize ( ) { return Extent . max ( ) ; }
protected boolean doMousePressed ( MouseEvent event , Positionable selection ) { if ( _editCircuitFrame != null ) { _editCircuitFrame . toFront ( ) ; _editor . setSelectionGroup ( _saveSelectionGroup ) ; } else if ( _editPathsFrame != null ) { _editPathsFrame . toFront ( ) ; _editor . setSelectionGroup ( _saveSelectionGroup ) ; } else if ( _editPortalFrame != null ) { _editPortalFrame . toFront ( ) ; _editor . setSelectionGroup ( _saveSelectionGroup ) ; } else if ( _editDirectionFrame != null ) { _editDirectionFrame . toFront ( ) ; _editor . setSelectionGroup ( _saveSelectionGroup ) ; } else { return BOOL_ ; } return BOOL_ ; }
public void addTextLabel ( double x , String text ) { addXTextLabel ( x , text ) ; }
public void computeTaskReduce ( long taskPtr ) { enter ( ) ; try { PlatformCallbackUtils . computeTaskReduce ( envPtr , taskPtr ) ; } finally { leave ( ) ; } }
public Builder withSucceeded ( boolean succeeded ) { response . succeeded = succeeded ; return this ; }
public boolean isPDF ( ) { return isPDF ; }
public boolean hasInit ( ) { return getInitOpt ( ) . getNumChild ( ) != NUM_ ; }
Future < Void > execute ( AsyncLogWriter writer , Sequencer sequencer , Object txnLock ) ;
public BusinessObjectDataInvalidateUnregisteredResponse invalidateUnregisteredBusinessObjectData ( BusinessObjectDataInvalidateUnregisteredRequest businessObjectDataInvalidateUnregisteredRequest ) ;
public void doDisconnect ( StorageSystem storage ) ;
private void assertEqualRandomNumberGenerators ( final Random rng1 , final Random rng2 ) { for ( int i = NUM_ ; i < NUM_ ; i ++ ) { assertEquals ( STR_ + i , rng1 . nextDouble ( ) , rng2 . nextDouble ( ) , EPSILON ) ; } }
public PackageDeclaration newPackageDeclaration ( ) { PackageDeclaration result = new PackageDeclaration ( this ) ; return result ; }
public static void evolve ( Grammar g1 , Grammar g2 ) { int pos1 = PRNG . nextInt ( g1 . size ( ) - NUM_ ) + NUM_ ; int pos2 = PRNG . nextInt ( g2 . size ( ) - NUM_ ) + NUM_ ; int [ ] removed1 = g1 . cut ( pos1 , g1 . size ( ) - NUM_ ) ; int [ ] removed2 = g2 . cut ( pos2 , g2 . size ( ) - NUM_ ) ; g1 . insert ( pos1 , removed2 ) ; g2 . insert ( pos2 , removed1 ) ; }
public static void assertNotContains ( String [ ] stringSet , String ... values ) { Set < String > set = new HashSet < String > ( Arrays . asList ( stringSet ) ) ; for ( String value : values ) { ScopeTestHelper . assertFalse ( set . contains ( value ) ) ; } }
private static void enableDownloadManager ( Context context ) { try { Intent intent = new Intent ( android . provider . Settings . ACTION_APPLICATION_DETAILS_SETTINGS ) ; intent . setData ( Uri . parse ( STR_ + DOWNLOAD_MANAGER_PACKAGE_NAME ) ) ; context . startActivity ( intent ) ; } catch ( ActivityNotFoundException e ) { e . printStackTrace ( ) ; try { Intent intent = new Intent ( android . provider . Settings . ACTION_MANAGE_APPLICATIONS_SETTINGS ) ; context . startActivity ( intent ) ; } catch ( ActivityNotFoundException ignored ) { } } }
public OptionSet removeIfMatch ( byte [ ] etag ) { getIfMatch ( ) . remove ( etag ) ; return this ; }
public CombinedRangeCategoryPlot ( ValueAxis rangeAxis ) { super ( null , null , rangeAxis , null ) ; this . subplots = new java . util . ArrayList ( ) ; this . gap = NUM_ ; }
VersionedServiceRoute forVersion ( int major ) ;
public static String adjustTitleForBrowser ( String title ) { return impl . adjustTitleForBrowser ( title ) . replaceAll ( STR_ , STR_ ) ; }
public FileParsingIdentifierSourceSet ( File instanceData , File metricData , IdentifierSourceSet fallbacks ) { super ( StringIterable . fromFile ( instanceData ) , StringIterable . fromFile ( metricData ) , fallbacks ) ; }
public com . sun . identity . wsfederation . jaxb . xmlsig . X509DataType createX509DataType ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . wsfederation . jaxb . xmlsig . impl . X509DataTypeImpl ( ) ; }
public void $set$ ( ReachableReference reference , java . lang . Object instance ) ;
public boolean isOwner ( String groupId , String email ) throws AppsForYourDomainException , MalformedURLException , IOException , ServiceException { return doesEntityExist ( groupId + STR_ + email ) ; }
public LineSweep ( ) { super ( ) ; }
GL createGL ( ) { return mEglContext . getGL ( ) ; }
public abstract TriggerContext forTrigger ( ExecutableTrigger trigger ) ;
public com . sun . identity . liberty . ws . interaction . jaxb . RedirectRequestElement createRedirectRequestElement ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . liberty . ws . interaction . jaxb . impl . RedirectRequestElementImpl ( ) ; }
protected void addToMembers ( IGraphNodeMember object ) { RajLog . d ( STR_ + this . getClass ( ) . getName ( ) + STR_ + object + STR_ + this ) ; object . getTransformedBoundingVolume ( ) . setBoundingColor ( mBoundingColor . get ( ) ) ; object . setGraphNode ( this , BOOL_ ) ; mMembers . add ( object ) ; }
public boolean isEncodingVerificationEnabled ( ) { return enableEncodingVerification ; }
public String toListTrim ( String [ ] array , String delimiter ) ;
public void mutableDivide ( double c , double d ) { final double [ ] r = new double [ NUM_ ] ; cDiv ( real , imag , c , d , r ) ; this . real = r [ NUM_ ] ; this . imag = r [ NUM_ ] ; }
public void afterUpdateChanges ( ) throws Exception { }
public boolean isAllowUnlimited ( ) { return allowUnlimited ; }
public static void wtf ( String tag , String msg ) { wtf ( tag , msg , null ) ; }
boolean isAvailableTestClass ( ) { try { Class . forName ( detectClassName ) ; return BOOL_ ; } catch ( Exception e ) { return BOOL_ ; } }
public void removeSelectionPaths ( TreePath [ ] paths ) { this . getSelectionModel ( ) . removeSelectionPaths ( paths ) ; }
public FlexFXG2SWFTranscoder ( TypeTable typeTable ) { super ( ) ; this . typeTable = typeTable ; if ( typeTable != null ) { divType = typeTable . getType ( StandardDefs . CLASS_TEXT_DIV ) ; linkType = typeTable . getType ( StandardDefs . CLASS_TEXT_LINK ) ; imgType = typeTable . getType ( StandardDefs . CLASS_TEXT_IMG ) ; richTextType = typeTable . getType ( StandardDefs . CLASS_TEXT_RICHTEXT ) ; paragraphType = typeTable . getType ( StandardDefs . CLASS_TEXT_PARAGRAPH ) ; spanType = typeTable . getType ( StandardDefs . CLASS_TEXT_SPAN ) ; tabType = typeTable . getType ( StandardDefs . CLASS_TEXT_TAB ) ; tcyType = typeTable . getType ( StandardDefs . CLASS_TEXT_TCY ) ; textLayoutFormatType = typeTable . getType ( StandardDefs . CLASS_TEXT_LAYOUT_FORMAT ) ; } }
private static void rebuildSessionFactory ( ) { try { Class . forName ( STR_ , BOOL_ , SessionFactory . class . getClassLoader ( ) ) ; sessionFactoryBean = new LocalSessionFactoryBean ( ) ; sessionFactoryBean . setConfigLocation ( configLocation ) ; sessionFactoryBean . setBeanClassLoader ( HibernateSessionFactory . class . getClassLoader ( ) ) ; sessionFactoryBean . afterPropertiesSet ( ) ; sessionFactory = ( org . hibernate . SessionFactory ) sessionFactoryBean . getObject ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( STR_ + configLocation ) ; } } catch ( Exception e ) { LOG . error ( STR_ , e ) ; } }
private void savePreviousImageValues ( ) { if ( matrix != null && viewHeight != NUM_ && viewWidth != NUM_ ) { matrix . getValues ( m ) ; prevMatrix . setValues ( m ) ; prevMatchViewHeight = matchViewHeight ; prevMatchViewWidth = matchViewWidth ; prevViewHeight = viewHeight ; prevViewWidth = viewWidth ; } }
private void addFinal ( Object [ ] stacks ) { Object [ ] input = new Object [ inputSize ] , output = new Object [ outputSize ] ; for ( int i = NUM_ ; i < stacks . length ; i ++ ) { if ( i < inputSize ) { input [ i ] = stacks [ i ] ; } else if ( ! ( i - inputSize > outputSize ) ) { output [ i - inputSize ] = stacks [ i ] ; } else { throw new RuntimeException ( STR_ ) ; } } addRecipe ( input , output ) ; }
public CompletableFuture < Object > eval ( final String script , final String language , final Bindings boundVars , final LifeCycle lifeCycle ) { final String lang = Optional . ofNullable ( language ) . orElse ( STR_ ) ; logger . debug ( STR_ , script , Thread . currentThread ( ) . getName ( ) ) ; final Bindings bindings = new SimpleBindings ( ) ; bindings . putAll ( globalBindings ) ; bindings . putAll ( boundVars ) ; final long scriptEvalTimeOut = lifeCycle . getScriptEvaluationTimeoutOverride ( ) . orElse ( scriptEvaluationTimeout ) ; final CompletableFuture < Object > evaluationFuture = new CompletableFuture < > ( ) ; final FutureTask < Void > evalFuture = new FutureTask < > ( null ) ; executorService . execute ( evalFuture ) ; return evaluationFuture ; }
public CppInstallerAction ( ) { super ( STR_ ) ; }
public CompletableFuture < ? > optimizeOldFiles ( ) { synchronized ( this ) { if ( optimizeOldFiles ) return CompletableFuture . completedFuture ( null ) ; CompletableFuture < ? > task = new CompletableFuture < > ( ) ; Thread thr = new Thread ( null ) ; thr . setDaemon ( BOOL_ ) ; thr . start ( ) ; pendingTasks . add ( task ) ; optimizeOldFiles = BOOL_ ; task . whenComplete ( null ) ; return task ; } }
public synchronized String format ( Date inDate ) { return format ( inDate . getTime ( ) ) ; }
public Element create ( String prefix , Document doc ) { return new SVGOMGlyphElement ( prefix , ( AbstractDocument ) doc ) ; }
void addResponseControl ( Control control ) ;
private void postropheToWords ( WordRelation wordRelation , Item tokenItem , String tokenVal ) { int index = tokenVal . indexOf ( STR_ ) ; String bbb = tokenVal . substring ( index ) . toLowerCase ( ) ; String [ ] postrophePhones = postrophes . get ( bbb ) ; if ( postrophePhones != null ) { String aaa = tokenVal . substring ( NUM_ , index ) ; tokenToWords ( wordRelation , tokenItem , aaa ) ; wordRelation . addWord ( tokenItem , bbb ) ; Item wordItem = wordRelation . getTail ( ) ; wordItem . getFeatures ( ) . setObject ( STR_ , postrophePhones ) ; } else { StringBuilder buffer = new StringBuilder ( tokenVal ) ; buffer . deleteCharAt ( index ) ; tokenToWords ( wordRelation , tokenItem , buffer . toString ( ) ) ; } }
void removeIntruderPayloadProcessor ( IIntruderPayloadProcessor processor ) ;
public static int gcd ( int ... numbers ) { int gcd = NUM_ ; boolean isDivisor ; for ( int i = NUM_ ; i < min ( numbers ) ; i ++ ) { isDivisor = BOOL_ ; for ( int e : numbers ) { if ( e % i != NUM_ ) isDivisor = BOOL_ ; } if ( isDivisor ) gcd = i ; } return gcd ; }
public List < IgfsFileAffinityRange > ranges ( ) { if ( ranges == null ) return Collections . emptyList ( ) ; return Collections . unmodifiableList ( ranges ) ; }
public void focusGained ( FocusEvent e ) { }
public void initImportedKeys ( DatabaseMetaData dbmd ) throws java . sql . SQLException { ResultSet fkeys = dbmd . getImportedKeys ( catalog , schema , this . sqlName ) ; while ( fkeys . next ( ) ) { String pktable = fkeys . getString ( PKTABLE_NAME ) ; String pkcol = fkeys . getString ( PKCOLUMN_NAME ) ; String fktable = fkeys . getString ( FKTABLE_NAME ) ; String fkcol = fkeys . getString ( FKCOLUMN_NAME ) ; String seq = fkeys . getString ( KEY_SEQ ) ; Integer iseq = new Integer ( seq ) ; getImportedKeys ( ) . addForeignKey ( pktable , pkcol , fkcol , iseq ) ; } fkeys . close ( ) ; }
public final String indexString ( ) { return STR_ + Integer . toHexString ( index ) + STR_ ; }
public static long calculateChunkedContentLength ( long originalLength , long chunkSize ) { if ( originalLength <= NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } long maxSizeChunks = originalLength / chunkSize ; long remainingBytes = originalLength % chunkSize ; return maxSizeChunks * calculateChunkHeaderLength ( chunkSize ) + ( remainingBytes > NUM_ ? calculateChunkHeaderLength ( remainingBytes ) : NUM_ ) + calculateChunkHeaderLength ( NUM_ ) ; }
public SubCommandArgumentParser ( String mainClassName , LocalizableMessage toolDescription , boolean longArgumentsCaseSensitive ) { super ( mainClassName , toolDescription , longArgumentsCaseSensitive ) ; }
public Object remove ( int index ) { checkRange ( index ) ; GraphicsNode oldNode = children [ index ] ; { fireGraphicsNodeChangeStarted ( oldNode ) ; } modCount ++ ; int numMoved = count - index - NUM_ ; if ( numMoved > NUM_ ) { System . arraycopy ( children , index + NUM_ , children , index , numMoved ) ; } children [ -- count ] = null ; if ( count == NUM_ ) { children = null ; } ( ( AbstractGraphicsNode ) oldNode ) . setParent ( null ) ; ( ( AbstractGraphicsNode ) oldNode ) . setRoot ( null ) ; invalidateGeometryCache ( ) ; fireGraphicsNodeChangeCompleted ( ) ; return oldNode ; }
byte [ ] removeParameter ( byte [ ] request , IParameter parameter ) ;
public int totalMaxDoc ( ) { long count = NUM_ ; for ( SegmentCommitInfo info : this ) { count += info . info . maxDoc ( ) ; } assert count <= IndexWriter . getActualMaxDocs ( ) ; return Math . toIntExact ( count ) ; }
public CMemoryViewer ( final JFrame parent , final CDebugPerspectiveModel debugPerspectiveModel ) { super ( new BorderLayout ( ) ) ; Preconditions . checkNotNull ( parent , STR_ ) ; Preconditions . checkNotNull ( debugPerspectiveModel , STR_ ) ; m_hexView . setData ( m_dataProvider ) ; m_hexView . setMenuCreator ( new CMemoryMenu ( parent , debugPerspectiveModel , this ) ) ; m_hexView . setVisible ( BOOL_ ) ; add ( m_hexView ) ; m_synchronizer = new CMemoryViewerSynchronizer ( m_hexView , m_dataProvider , debugPerspectiveModel ) ; }
public RefMethod findMethodByReturnType ( final RefClass type ) { return this . findMethodByReturnType ( type . clazz ) ; }
public void addListener ( OnFileSelectedListener listener ) { this . listeners . add ( listener ) ; }
void removePlayer ( String deviceAddress ) ;
void onOpen ( FloatingActionButton v ) ;
Builder clear ( ) ;
public static WritableByteChannel create ( String filename , String mimeType ) throws IOException { return getFactory ( filename ) . create ( filename , mimeType ) ; }
public static String dump ( Map < ? , ? > map ) { StringBuilder stringBuilder = new StringBuilder ( ) ; for ( Map . Entry < ? , ? > entry : map . entrySet ( ) ) { stringBuilder . append ( entry . getKey ( ) ) ; stringBuilder . append ( STR_ ) ; stringBuilder . append ( entry . getValue ( ) ) ; } return stringBuilder . toString ( ) ; }
public TCharObjectHashIterator ( TCharObjectHashMap < V > map ) { super ( map ) ; this . _map = map ; }
public void outputNextPrompt ( ) { if ( currentPrompt == null ) { abandon ( new ConversationAbandonedEvent ( this ) ) ; } else { context . getForWhom ( ) . sendRawMessage ( prefix . getPrefix ( context ) + currentPrompt . getPromptText ( context ) ) ; if ( ! currentPrompt . blocksForInput ( context ) ) { currentPrompt = currentPrompt . acceptInput ( context , null ) ; outputNextPrompt ( ) ; } } }
public EmbeddedADS ( File workDir ) throws Exception { initDirectoryService ( workDir ) ; }
private void splitChunk ( final MemoryChunk chunk , final long address ) { final byte [ ] oldData = chunk . getBytes ( ) ; final byte [ ] newData1 = new byte [ ( int ) ( address - chunk . getAddress ( ) ) ] ; final byte [ ] newData2 = new byte [ ( chunk . getLength ( ) - newData1 . length ) ] ; System . arraycopy ( oldData , NUM_ , newData1 , NUM_ , newData1 . length ) ; System . arraycopy ( oldData , oldData . length - newData2 . length , newData2 , NUM_ , newData2 . length ) ; final MemoryChunk newChunk1 = new MemoryChunk ( chunk . getAddress ( ) , newData1 ) ; final MemoryChunk newChunk2 = new MemoryChunk ( ( chunk . getAddress ( ) + chunk . getLength ( ) ) - newData2 . length , newData2 ) ; removeChunk ( chunk ) ; insertChunk ( newChunk1 ) ; insertChunk ( newChunk2 ) ; }
private void initialize ( ModelValidator validator , MClient client ) { if ( client == null ) m_globalValidators . add ( validator ) ; m_validators . add ( validator ) ; validator . initialize ( this , client ) ; }
public String toString ( ) { StringBuffer uriSpecString = new StringBuffer ( ) ; if ( m_scheme != null ) { uriSpecString . append ( m_scheme ) ; uriSpecString . append ( STR_ ) ; } uriSpecString . append ( getSchemeSpecificPart ( ) ) ; return uriSpecString . toString ( ) ; }
public synchronized boolean isParsed ( ) { return ( mParseStatus & PARSE_STATUS_PARSED ) != NUM_ ; }
public String provideUid ( ) { return STR_ ; }
public Matrix4d m13 ( double m13 ) { this . m13 = m13 ; properties = NUM_ ; return this ; }
void fail ( ActiveMQException me ) ;
private synchronized void switchRemovedFromStore ( DatapathId dpid ) { if ( floodlightProvider . getRole ( ) != HARole . STANDBY ) { return ; } IOFSwitch oldSw = syncedSwitches . remove ( dpid ) ; if ( oldSw != null ) { addUpdateToQueue ( new SwitchUpdate ( dpid , SwitchUpdateType . REMOVED ) ) ; } else { } }
public String authorizeAccount ( String callbackURL ) throws FacebookException { this . connection = new FacebookFactory ( ) . getInstance ( ) ; String key = getOauthKey ( ) ; String secret = getOauthSecret ( ) ; if ( this . appOauthKey != null && ! this . appOauthKey . isEmpty ( ) ) { key = this . appOauthKey ; } if ( this . appOauthSecret != null && ! this . appOauthSecret . isEmpty ( ) ) { secret = this . appOauthSecret ; } this . connection . setOAuthAppId ( key , secret ) ; if ( this . appOauthKey != null && ! this . appOauthKey . isEmpty ( ) ) { this . connection . setOAuthPermissions ( STR_ ) ; } else { this . connection . setOAuthPermissions ( STR_ ) ; } return this . connection . getOAuthAuthorizationURL ( callbackURL ) ; }
public double applyMinMaxRescaleCast ( double prediction ) throws Exception { if ( m_optype != Optype . CONTINUOUS ) { throw new Exception ( STR_ ) ; } if ( ! Utils . isMissingValue ( m_min ) && prediction < m_min ) { prediction = m_min ; } if ( ! Utils . isMissingValue ( m_max ) && prediction > m_max ) { prediction = m_max ; } prediction *= m_rescaleFactor ; prediction += m_rescaleConstant ; if ( m_castInteger . length ( ) > NUM_ ) { if ( m_castInteger . equals ( STR_ ) ) { prediction = Math . round ( prediction ) ; } else if ( m_castInteger . equals ( STR_ ) ) { prediction = Math . ceil ( prediction ) ; } else if ( m_castInteger . equals ( STR_ ) ) { prediction = Math . floor ( prediction ) ; } else { throw new Exception ( STR_ + m_castInteger ) ; } } return prediction ; }
public byte [ ] poll ( ) throws KeeperException , InterruptedException { TimerContext time = stats . time ( dir + STR_ ) ; try { return remove ( ) ; } catch ( NoSuchElementException e ) { return null ; } finally { time . stop ( ) ; } }
private static void highlightUnusedRange ( Editor editor , TextAttributes unusedTextAttributes , TextRange textRange ) { final Project project = editor . getProject ( ) ; if ( project != null ) { HighlightManager . getInstance ( project ) . addRangeHighlight ( editor , textRange . getStartOffset ( ) , textRange . getEndOffset ( ) , unusedTextAttributes , BOOL_ , BOOL_ , null ) ; } }
public Neg ( ) { super ( STR_ , NUM_ ) ; }
INodejsProcess execute ( File baseDir , TSLintOptions options , List < String > filenames , INodejsProcessListener listener ) throws TypeScriptException ;
public DataReadOnlyException ( String message ) { super ( message ) ; }
public AppsGetQuery ( VkApiClient client , UserActor actor ) { super ( client , STR_ , GetResponse . class ) ; accessToken ( actor . getAccessToken ( ) ) ; }
public boolean enterIfInterruptibly ( Guard guard ) throws InterruptedException { if ( guard . monitor != this ) { throw new IllegalMonitorStateException ( ) ; } final ReentrantLock lock = this . lock ; lock . lockInterruptibly ( ) ; boolean satisfied = BOOL_ ; try { return satisfied = guard . isSatisfied ( ) ; } finally { if ( ! satisfied ) { lock . unlock ( ) ; } } }
public void info ( String msg ) { log ( Level . INFO , msg ) ; }
public void addObjectMappings ( IdentityStoreObjectMapping objectMapping ) { ValidateUtil . validateNotNull ( objectMapping , STR_ ) ; this . _storeObjects . put ( objectMapping . getObjectId ( ) , objectMapping ) ; }
public static byte [ ] assetAsByteArray ( Resources res , String path ) throws IOException { InputStream is = res . getAssets ( ) . open ( path ) ; ByteArrayOutputStream buf = new ByteArrayOutputStream ( ) ; byte [ ] temp = new byte [ NUM_ ] ; int read ; while ( ( read = is . read ( temp ) ) > NUM_ ) { buf . write ( temp , NUM_ , read ) ; } is . close ( ) ; return buf . toByteArray ( ) ; }
protected void additionalTeardown ( ) throws Exception { }
public static Geo [ ] LLaToGa ( double [ ] lla , boolean isDegrees ) { Geo [ ] r = new Geo [ lla . length / NUM_ ] ; for ( int i = NUM_ ; i < lla . length / NUM_ ; i ++ ) { if ( isDegrees ) { r [ i ] = Geo . makeGeoDegrees ( lla [ i * NUM_ ] , lla [ i * NUM_ + NUM_ ] ) ; } else { r [ i ] = Geo . makeGeoRadians ( lla [ i * NUM_ ] , lla [ i * NUM_ + NUM_ ] ) ; } } return r ; }
public void callChildVisitors ( XSLTVisitor visitor , boolean callAttributes ) { if ( callAttributes && ( null != m_selectExpression ) ) m_selectExpression . callVisitors ( this , visitor ) ; int length = getSortElemCount ( ) ; for ( int i = NUM_ ; i < length ; i ++ ) { getSortElem ( i ) . callVisitors ( visitor ) ; } super . callChildVisitors ( visitor , callAttributes ) ; }
public FeedForward ( final Network network , int [ ] nodesPerLayer , Point2D initialPosition ) { super ( network ) ; LinearRule rule = new LinearRule ( ) ; Neuron neuron = new Neuron ( network , rule ) ; rule . setIncrement ( NUM_ ) ; rule . setLowerBound ( NUM_ ) ; buildNetwork ( network , nodesPerLayer , initialPosition , neuron ) ; }
public void sort ( Comparator < FragmentData > comparator ) { checkTransaction ( ) ; saveOldOrder ( ) ; if ( comparator == null ) { Collections . sort ( mFragmentDatas ) ; } else { Collections . sort ( this . mFragmentDatas , comparator ) ; } checkPositionChange ( ) ; }
public Matrix4f ( float m00 , float m01 , float m02 , float m03 , float m10 , float m11 , float m12 , float m13 , float m20 , float m21 , float m22 , float m23 , float m30 , float m31 , float m32 , float m33 ) { this . m00 = m00 ; this . m01 = m01 ; this . m02 = m02 ; this . m03 = m03 ; this . m10 = m10 ; this . m11 = m11 ; this . m12 = m12 ; this . m13 = m13 ; this . m20 = m20 ; this . m21 = m21 ; this . m22 = m22 ; this . m23 = m23 ; this . m30 = m30 ; this . m31 = m31 ; this . m32 = m32 ; this . m33 = m33 ; }
public boolean findAndRemoveDuplicates ( ) { return mFindAndRemoveDuplicates ; }
public void close ( ) throws IOException { skipToEnd ( ) ; }
public void drawEdge ( Map < String , Object > attrs ) { List < mxPoint > pts = parsePoints ( mxUtils . getString ( attrs , STR_ ) ) ; if ( pts . size ( ) > NUM_ ) { canvas . drawEdge ( pts , attrs ) ; } }
public void add ( Object o ) { if ( ! contains ( o ) ) { elementSet . add ( o ) ; elementVector . add ( o ) ; } }
public ParsedURI resolve ( String relURISpec ) { ParsedURI relURI = new ParsedURI ( relURISpec ) ; return this . resolve ( relURI ) ; }
public void onConfigurationChanged ( Configuration newConfig ) { for ( CordovaPlugin plugin : this . pluginMap . values ( ) ) { if ( plugin != null ) { plugin . onConfigurationChanged ( newConfig ) ; } } }
private static void from ( Cursor c , Synced synced ) { int col = c . getColumnIndex ( _ID ) ; if ( col >= NUM_ ) { synced . localId = c . getLong ( col ) ; } col = c . getColumnIndex ( GLOBAL_ID ) ; if ( col >= NUM_ ) { synced . globalId = c . getLong ( col ) ; } col = c . getColumnIndex ( STATUS_ID ) ; if ( col >= NUM_ ) { synced . status = Status . get ( c . getInt ( col ) ) ; } col = c . getColumnIndex ( DIRTY ) ; if ( col >= NUM_ ) { synced . dirty = c . getInt ( col ) == NUM_ ; } col = c . getColumnIndex ( VERSION ) ; if ( col >= NUM_ ) { synced . version = c . getLong ( col ) ; } }
private HttpEntityEnclosingRequestBase addEntityToRequestBase ( HttpEntityEnclosingRequestBase requestBase , HttpEntity entity ) { if ( entity != null ) { requestBase . setEntity ( entity ) ; } return requestBase ; }
void startObserving ( ) ;
public void enableDebugLogging ( boolean enable , String tag ) { checkNotDisposed ( ) ; mDebugLog = enable ; mDebugTag = tag ; }
void onReceived ( String smsCode ) ;
protected void readEntityFromNBT ( NBTTagCompound compound ) { this . setFuse ( compound . getShort ( STR_ ) ) ; this . setFacing ( compound . getByte ( STR_ ) ) ; }
public Request body ( String body ) { Objects . requireNonNull ( body ) ; _body = body . getBytes ( ) ; return this ; }
private int readFromResponse ( State state , InnerState innerState , byte [ ] data , InputStream entityStream ) throws StopRequest { try { return entityStream . read ( data ) ; } catch ( IOException ex ) { logNetworkState ( ) ; mInfo . mCurrentBytes = innerState . mBytesSoFar ; mDB . updateDownload ( mInfo ) ; if ( cannotResume ( innerState ) ) { String message = STR_ + ex . toString ( ) + STR_ ; throw new StopRequest ( DownloaderService . STATUS_CANNOT_RESUME , message , ex ) ; } else { throw new StopRequest ( getFinalStatusForHttpError ( state ) , STR_ + ex . toString ( ) , ex ) ; } } }
protected void resolveDuplicates ( SourceRefElement handle ) { int occurenceCount = this . occurenceCounts . get ( handle ) ; if ( occurenceCount == - NUM_ ) this . occurenceCounts . put ( handle , NUM_ ) ; else { this . occurenceCounts . put ( handle , ++ occurenceCount ) ; handle . occurrenceCount = occurenceCount ; } if ( handle instanceof SourceType && ( ( SourceType ) handle ) . isAnonymous ( ) ) { Object key = handle . getParent ( ) . getAncestor ( IJavaElement . TYPE ) ; occurenceCount = this . localOccurrenceCounts . get ( key ) ; if ( occurenceCount == - NUM_ ) this . localOccurrenceCounts . put ( key , NUM_ ) ; else { this . localOccurrenceCounts . put ( key , ++ occurenceCount ) ; ( ( SourceType ) handle ) . localOccurrenceCount = occurenceCount ; } } }
public OnvifDevice ( String hostIp , String user , String password ) throws ConnectException , SOAPException { this . logger = new Logger ( ) ; this . HOST_IP = hostIp ; if ( ! isOnline ( ) ) { throw new ConnectException ( STR_ ) ; } this . serverDeviceUri = STR_ + HOST_IP + STR_ ; this . username = user ; this . password = password ; this . soap = new SOAP ( this ) ; this . initialDevices = new InitialDevices ( this ) ; this . ptzDevices = new PtzDevices ( this ) ; this . mediaDevices = new MediaDevices ( this ) ; this . imagingDevices = new ImagingDevices ( this ) ; init ( ) ; }
void onDownloadProgressed ( String mediaName , int progress ) ;
private void _set_name ( InstalledApp app ) { String appname = app . get_display_name ( ) ; if ( appname != null ) { _app_name . setText ( appname ) ; } else { _app_name . setText ( app . get_package_name ( ) ) ; } }
public DateTimeField clockhourOfHalfday ( ) { return UnsupportedDateTimeField . getInstance ( DateTimeFieldType . clockhourOfHalfday ( ) , hours ( ) ) ; }
public static boolean isSQL99ReservedKeyword ( String identifier ) { if ( identifier == null ) { throw new NullPointerException ( STR_ ) ; } return Arrays . binarySearch ( SQL99_RESERVED , identifier . toUpperCase ( ) ) >= NUM_ ; }
public CheckerDevelMain ( File searchPath , List < String > args ) { super ( searchPath , args ) ; }
public QuestNotStartedCondition ( final String questname ) { this . questname = checkNotNull ( questname ) ; }
static void messageBox ( final String message ) { LoneOptionDialog . showMessageDialog ( message , DIALOG_TITLE ) ; }
public String toString ( ) { return exp + STR_ + new StringValueExp ( pattern ) ; }
public Query orderByLiveness ( ) { orderString = ORDER_BY_LIVENESS ; return this ; }
public static String classString ( int flags ) { return humanHelper ( flags , CLASS_FLAGS , CONV_CLASS ) ; }
public static String [ ] ls ( String directory ) throws IOException { if ( ! isDirectory ( directory ) ) { throw new IOException ( STR_ + directory ) ; } return ( new File ( directory ) ) . list ( ) ; }
public Boolean isCertfctnBrkdwnInd ( ) { return certfctnBrkdwnInd ; }
public static InputStream systemDotIn ( ) { return System . in ; }
public void addPolicyChangeListener ( PolicyChangeListener listener ) { CombinedPolicyProvider . get ( ) . addPolicyChangeListener ( listener ) ; }
public static void test100Words ( ) throws Exception { DatabaseMemory . TEST = BOOL_ ; DatabaseMemory . RECREATE_DATABASE = BOOL_ ; Bot . DEFAULT_DEBUG_LEVEL = Bot . FINE ; Bot bot = Bot . createInstance ( ) ; Sense sense = bot . awareness ( ) . getSense ( Http . class . getName ( ) ) ; sense . input ( new URL ( STR_ ) ) ; bot . shutdown ( ) ; }
public void testSetF26Momentary ( ) { boolean f26Momentary = BOOL_ ; AbstractThrottle instance = new AbstractThrottleImpl ( ) ; instance . setF26Momentary ( f26Momentary ) ; }
private String strBufToString ( ) { return Portability . newStringFromBuffer ( strBuf , NUM_ , strBufLen ) ; }
public void disconnected ( DisconnectedEvent e ) { }
public int size ( ) { return NUM_ + payload . length ; }
public boolean hasPrimaryKeyFields ( ) { return m_descriptor . getPrimaryKeyFields ( ) . size ( ) > NUM_ ; }
public boolean rootedTreeEquals ( final GPNode node ) { if ( ! nodeEquals ( node ) ) return BOOL_ ; for ( int x = NUM_ ; x < children . length ; x ++ ) if ( ! ( children [ x ] . rootedTreeEquals ( node . children [ x ] ) ) ) return BOOL_ ; return BOOL_ ; }
public void testSharedNameSimple ( ) throws Exception { ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; SmileGenerator gen = smileGenerator ( out , BOOL_ ) ; gen . writeStartArray ( ) ; gen . writeStartObject ( ) ; gen . writeNumberField ( STR_ , NUM_ ) ; gen . writeEndObject ( ) ; gen . writeStartObject ( ) ; gen . writeNumberField ( STR_ , NUM_ ) ; gen . writeEndObject ( ) ; gen . writeEndArray ( ) ; gen . close ( ) ; byte [ ] result = out . toByteArray ( ) ; assertEquals ( NUM_ , result . length ) ; }
public void paintSeparatorBackground ( SynthContext context , Graphics g , int x , int y , int w , int h , int orientation ) { paintBackground ( context , g , x , y , w , h , orientation ) ; }
boolean dragOver ( Point point ) ;
public String pushToRestApi ( ) throws IOException { RESTApiHandler restApi = new RESTApiHandler ( ) ; this . batchUrl = restApi . getRemoteURL ( this ) ; return this . batchUrl ; }
private void returnData ( Object ret ) { if ( myHost != null ) { myHost . returnData ( ret ) ; } }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public void testDoCheckWithoutDoctype ( ) { System . out . println ( STR_ ) ; testChecker ( STR_ , TestSolution . NEED_MORE_INFO , RemarkMessageStore . DOCTYPE_ABSENT_CHECK_HTML5 ) ; testChecker ( STR_ , TestSolution . NEED_MORE_INFO , RemarkMessageStore . DOCTYPE_ABSENT_CHECK_HTML5 ) ; testChecker ( null , TestSolution . NEED_MORE_INFO , RemarkMessageStore . DOCTYPE_ABSENT_CHECK_HTML5 ) ; }
void onNavigationDrawerItemSelected ( int position ) ;
public void init ( ) throws ServletException { }
private static void enableCountrySpecificEncodings ( ) { sEnabledSingleShiftTables = new int [ NUM_ ] ; sEnabledLockingShiftTables = new int [ NUM_ ] ; if ( sEnabledSingleShiftTables . length > NUM_ ) { sHighestEnabledSingleShiftCode = sEnabledSingleShiftTables [ sEnabledSingleShiftTables . length - NUM_ ] ; } else { sHighestEnabledSingleShiftCode = NUM_ ; } }
int available ( ) throws IOException ;
default boolean contains ( final ItemStack item ) { if ( item == null ) { return BOOL_ ; } for ( final ItemStack itemStack : this ) { if ( item . equals ( itemStack ) ) { return BOOL_ ; } } return BOOL_ ; }
private ValueNumber [ ] popInputValues ( int numWordsConsumed ) { ValueNumberFrame frame = getFrame ( ) ; ValueNumber [ ] inputValueList = allocateValueNumberArray ( numWordsConsumed ) ; try { frame . getTopStackWords ( inputValueList ) ; while ( numWordsConsumed -- > NUM_ ) { frame . popValue ( ) ; } } catch ( DataflowAnalysisException e ) { throw new InvalidBytecodeException ( STR_ , e ) ; } return inputValueList ; }
public void appendOnlyFirst ( String s ) { if ( index == NUM_ ) { builder . append ( s ) ; } }
void onAddTerminal ( String machineId ) ;
void replacePrefixInName ( Node name , String prefix , String newPrefix ) { if ( prefix . equals ( name . getQualifiedName ( ) ) ) { Node newName = NodeUtil . newQName ( compiler , newPrefix ) ; JSDocInfo jsdoc = NodeUtil . getBestJSDocInfo ( name ) ; newName . setJSDocInfo ( jsdoc ) ; name . getParent ( ) . replaceChild ( name , newName ) ; } else { if ( name . isGetProp ( ) ) { replacePrefixInName ( name . getFirstChild ( ) , prefix , newPrefix ) ; } } }
public final void removeSubTree ( ) { if ( getLastMove ( ) != null ) { tree . goBack ( ) ; int defChild = tree . currentNode . defaultChild ; tree . deleteVariation ( defChild ) ; } else { while ( canRedoMove ( ) ) tree . deleteVariation ( NUM_ ) ; } pendingDrawOffer = BOOL_ ; updateTimeControl ( BOOL_ ) ; }
public boolean isAnimationCompleted ( ) { return mNativeInfoHandle . isAnimationCompleted ( ) ; }
public ArrayOfDoublesUpdatableSketch build ( ) { if ( dstMem_ == null ) { return new HeapArrayOfDoublesQuickSelectSketch ( nomEntries_ , resizeFactor_ . lg ( ) , samplingProbability_ , numValues_ , seed_ ) ; } return new DirectArrayOfDoublesQuickSelectSketch ( nomEntries_ , resizeFactor_ . lg ( ) , samplingProbability_ , numValues_ , seed_ , dstMem_ ) ; }
public < T extends HealthIssue > void onDiscovered ( T healthIssue ) { synchronized ( mIssuesLock ) { mActiveIssues . add ( healthIssue ) ; } postTroubleshootingEvents ( null ) ; }
public void passPgSessionMap ( ViewBean other , Map attributes ) { if ( ( attributes != null ) && ( attributes . size ( ) > NUM_ ) ) { Iterator iter = attributes . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String key = ( String ) iter . next ( ) ; other . setPageSessionAttribute ( key , ( Serializable ) attributes . get ( key ) ) ; } } }
public < M extends Configuration > void registerDeleteListener ( OptionalRelationDefinition < ? , M > d , ConfigurationDeleteListener < M > listener ) throws ConfigException { registerDeleteListener ( d , new ServerManagedObjectDeleteListenerAdaptor < M > ( listener ) ) ; }
public static boolean isStreetName ( String key , Set < String > usedKeys ) { return ( Tags . KEY_ADDR_STREET . equalsIgnoreCase ( key ) || ( Tags . KEY_NAME . equalsIgnoreCase ( key ) && usedKeys . contains ( Tags . KEY_HIGHWAY ) ) ) ; }
public Global includedAttributes ( LocalAttribute ... includedAattributes ) { for ( LocalAttribute attribute : includedAattributes ) global . attributes . add ( attribute . toXStream ( ) ) ; return this ; }
T eval ( String s ) ;
private void flushDeflater ( ) throws IOException { if ( entry . entry . getMethod ( ) == DEFLATED ) { def . finish ( ) ; while ( ! def . finished ( ) ) { deflate ( ) ; } } }
byte [ ] saveState ( ShoppingCart shoppingCart ) ;
private void hideMainLayoutAndToast ( String text ) { mMainLayout . setVisibility ( View . GONE ) ; mProgressTextView . setVisibility ( View . VISIBLE ) ; mProgressTextView . setText ( text ) ; }
public void parse ( String xml ) throws IllegalStateException { try { InputSource inSrc = new InputSource ( new StringReader ( xml ) ) ; sp . parse ( inSrc , getHandler ( ) ) ; } catch ( SAXException e ) { e . printStackTrace ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
public IMouseState createNodeEditEnterState ( final Node n , final MouseEvent event ) { final CNodeEditEnterState state = new CNodeEditEnterState ( this , m_graph , n ) ; m_factory . createNodeEditEnterAction ( ) . execute ( state , event ) ; return state ; }
public abstract void onUpdateScrollbar ( int dy ) ;
public void dispose ( ) { final Control control = getControl ( ) ; if ( control != null && ! control . isDisposed ( ) ) { control . dispose ( ) ; } }
public boolean canAccessProgram ( Program program ) { for ( UserAuthorityGroup group : userAuthorityGroups ) { if ( group . getPrograms ( ) . contains ( program ) ) { return BOOL_ ; } } return BOOL_ ; }
public List < IStatement > optimize ( List < IStatement > aStatements ) ;
private void addListener ( final EngineChangeListener listener ) { if ( ! listeners . contains ( listener ) ) listeners . add ( listener ) ; }
public DriverTask stopManagement ( StorageSystem storageSystem ) ;
private Rect calcBounds ( int index , Paint paint ) { Rect bounds = new Rect ( ) ; CharSequence title = getTitle ( index ) ; bounds . right = ( int ) paint . measureText ( title , NUM_ , title . length ( ) ) ; bounds . bottom = ( int ) ( paint . descent ( ) - paint . ascent ( ) ) ; return bounds ; }
public long incrementTopologyVersion ( ) { rwLock . writeLock ( ) . lock ( ) ; try { return ++ topVer ; } finally { rwLock . writeLock ( ) . unlock ( ) ; } }
public void addChatServiceListener ( ChatListener listener ) { listeners . add ( listener ) ; }
private long offset ( long index ) { return ( index / NUM_ ) * NUM_ ; }
private FractionalConfig ( DN baseDN ) { this . baseDN = baseDN ; }
protected abstract Conditions createConditions ( Element conditionsElement ) throws SAMLException ;
void changedUser ( IDatabase database , String user ) ;
private void addStaticDeployables ( String containerId , LocalConfiguration configuration , Deployable [ ] deployables , CargoProject project ) throws MojoExecutionException { for ( Deployable deployable : deployables ) { project . getLog ( ) . debug ( STR_ + deployable . getGroupId ( ) + STR_ + deployable . getArtifactId ( ) + STR_ + deployable . getType ( ) + STR_ + deployable . getLocation ( ) + STR_ + deployable . getPingURL ( ) + STR_ ) ; configuration . addDeployable ( deployable . createDeployable ( containerId , project ) ) ; } }
public static native void say ( String title , String message ) ;
private TagNode findElement ( ITagNodeCondition condition , boolean isRecursive ) { if ( condition != null ) { for ( Object item : children ) { if ( item instanceof TagNode ) { TagNode currNode = ( TagNode ) item ; if ( condition . satisfy ( currNode ) ) { return currNode ; } else if ( isRecursive ) { TagNode inner = currNode . findElement ( condition , isRecursive ) ; if ( inner != null ) { return inner ; } } } } } return null ; }
public static DaVinci with ( ) { if ( sDaVinci == null ) { throw new RuntimeException ( STR_ ) ; } mRequestQueue = mDefaultRequestQueue ; mDaImageLoader = mDefaultDaImageLoader ; return sDaVinci ; }
private void socksConnect ( InetAddress applicationServerAddress , int applicationServerPort , int timeout ) throws IOException { try { IoBridge . connect ( fd , socksGetServerAddress ( ) , socksGetServerPort ( ) , timeout ) ; } catch ( Exception e ) { throw new SocketException ( STR_ , e ) ; } socksRequestConnection ( applicationServerAddress , applicationServerPort ) ; lastConnectedAddress = applicationServerAddress ; lastConnectedPort = applicationServerPort ; }
protected MoreCode_Impl ( ) { super ( ) ; }
public static int value ( String s ) { return classes . getValue ( s ) ; }
private void writeObject ( ObjectOutputStream s ) throws IOException { Hashtable < String , Component > tab = new Hashtable < > ( ) ; int ncomponents = vector . size ( ) ; for ( int i = NUM_ ; i < ncomponents ; i ++ ) { Card card = ( Card ) vector . get ( i ) ; tab . put ( card . name , card . comp ) ; } ObjectOutputStream . PutField f = s . putFields ( ) ; f . put ( STR_ , hgap ) ; f . put ( STR_ , vgap ) ; f . put ( STR_ , vector ) ; f . put ( STR_ , currentCard ) ; f . put ( STR_ , tab ) ; s . writeFields ( ) ; }
public void removeChild ( ExpressionNode child ) { m_children . remove ( child ) ; if ( m_children . size ( ) > NUM_ ) { m_children . get ( NUM_ ) . setShowAndOr ( BOOL_ ) ; } }
public Uri buildRequestUri ( int track , int chunkIndex ) { Assertions . checkState ( tracks != null ) ; Assertions . checkState ( chunkStartTimes != null ) ; Assertions . checkState ( chunkIndex < chunkStartTimes . size ( ) ) ; String chunkUrl = chunkTemplate . replace ( URL_PLACEHOLDER_BITRATE , Integer . toString ( tracks [ track ] . format . bitrate ) ) . replace ( URL_PLACEHOLDER_START_TIME , chunkStartTimes . get ( chunkIndex ) . toString ( ) ) ; return UriUtil . resolveToUri ( baseUri , chunkUrl ) ; }
public Instruction nextInstructionInCodeOrder ( ) { if ( next == null ) { if ( VM . VerifyAssertions ) VM . _assert ( BBend . conforms ( this ) ) ; BasicBlock nBlock = BBend . getBlock ( this ) . block . nextBasicBlockInCodeOrder ( ) ; if ( nBlock == null ) { return null ; } else { return nBlock . firstInstruction ( ) ; } } else { return next ; } }
public void restore ( ) { }
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( isSupported02 . class , args ) ; }
public void addAuthPolicy ( String policyUri ) { String policies = getAuthPolicies ( ) ; if ( policies == null || AUTH_POLICY_NONE . equals ( policies ) ) setAuthPolicies ( policyUri ) ; else setAuthPolicies ( policies + STR_ + policyUri ) ; }
public Bundler putShort ( String key , short value ) { bundle . putShort ( key , value ) ; return this ; }
public static String lookupTag ( List < LanguageRange > priorityList , Collection < String > tags ) { return null ; }
public int update ( ) { throw DbException . get ( ErrorCode . METHOD_NOT_ALLOWED_FOR_QUERY ) ; }
String [ ] search ( QueryExpression query ) throws ServerException ;
private static EntryRep [ ] deleteSet ( Item item , int i ) { item . attributeSets = ( EntryRep [ ] ) arrayDel ( item . attributeSets , i ) ; return item . attributeSets ; }
protected boolean testIfCondition ( ) { if ( ifCondition == null || STR_ . equals ( ifCondition ) ) { return BOOL_ ; } return getProperty ( ifCondition ) != null ; }
private void appendInitialEntries ( ) { final long term = context . getTerm ( ) ; try ( InitializeEntry entry = context . getLog ( ) . create ( InitializeEntry . class ) ) { entry . setTerm ( term ) . setTimestamp ( appender . time ( ) ) ; assert context . getLog ( ) . append ( entry ) == appender . index ( ) ; LOGGER . debug ( STR_ , context . getCluster ( ) . member ( ) . address ( ) , entry ) ; } configure ( context . getCluster ( ) . members ( ) ) ; }
public BindableElement ( String prefix , AbstractDocument owner , String ns , String ln ) { super ( prefix , owner ) ; namespaceURI = ns ; localName = ln ; }
protected FileObject unwrap ( FileObject fileObject ) { return fileObject ; }
public static void unregisterSemanticNodes ( ) { semanticNodes = new LinkedList ( ) ; }
protected Command createMenuSelectCommand ( ) { UIManager manager = parent . getUIManager ( ) ; LookAndFeel lf = manager . getLookAndFeel ( ) ; return new Command ( manager . localize ( STR_ , STR_ ) , lf . getMenuIcons ( ) [ NUM_ ] ) ; }
boolean isExternal ( ) ;
public void validate ( String strData ) throws ValidationException ;
public void applicationError ( int errorCode ) ;
private void emitTypeIndex ( CstType type ) throws IOException { if ( ( type == null ) || ( file == null ) ) { output . writeUleb128 ( NUM_ ) ; } else { output . writeUleb128 ( NUM_ + file . getTypeIds ( ) . indexOf ( type ) ) ; } if ( DEBUG ) { System . err . printf ( STR_ , type == null ? STR_ : type . toHuman ( ) ) ; } }
public void update ( SimulationThread simulationThread ) { if ( simulationThread . isCanceled ( ) ) { frame . setStatus ( STR_ ) ; isPrepared = BOOL_ ; } else if ( frame . simulationPaused ( ) ) { frame . setStatus ( STR_ ) ; } else { frame . setStatus ( STR_ ) ; } }
public static Map < String , String > createSingleValueMap ( Map httpParams ) { final Map < String , String > clean = new HashMap < String , String > ( ) ; if ( httpParams != null ) { for ( final Map . Entry < Object , Object > entry : ( ( Map < Object , Object > ) httpParams ) . entrySet ( ) ) { final String value = getSingleValue ( entry . getValue ( ) ) ; clean . put ( entry . getKey ( ) . toString ( ) , value ) ; } } return clean ; }
public void close ( ) throws PCJStorageException ;
public void printLoaderState ( ) { LOG . info ( Json . object ( ) . set ( TransactionState . State . QUEUED . name ( ) , enqueuedJobs . get ( ) ) . set ( TransactionState . State . LOADING . name ( ) , loadingJobs . get ( ) ) . set ( TransactionState . State . ERROR . name ( ) , errorJobs . get ( ) ) . set ( TransactionState . State . FINISHED . name ( ) , finishedJobs . get ( ) ) . toString ( ) ) ; }
public void reset ( ) { if ( fullExtent == null ) { setFullExtent ( ) ; } try { fullExtent = new ReferencedEnvelope ( CRS . transform ( fullExtent , content . getCoordinateReferenceSystem ( ) ) ) ; } catch ( final Exception e ) { e . printStackTrace ( ) ; } setDisplayArea ( fullExtent ) ; }
public boolean isSetError ( ) { return this . error != null ; }
private List findPhonemes ( Map lexicon ) { List phonemeList = new ArrayList ( ) ; for ( Iterator i = lexicon . keySet ( ) . iterator ( ) ; i . hasNext ( ) ; ) { String key = ( String ) i . next ( ) ; String [ ] phonemes = getPhones ( lexicon , key ) ; for ( int index = NUM_ ; index < phonemes . length ; index ++ ) { if ( ! phonemeList . contains ( phonemes [ index ] ) ) { phonemeList . add ( phonemes [ index ] ) ; } } } return phonemeList ; }
public void dump ( MovieSet movieSet ) { try { JSONObject jsonObject = new JSONObject ( movieSetObjectWriter . writeValueAsString ( movieSet ) ) ; LOGGER . info ( STR_ + jsonObject . toString ( NUM_ ) ) ; } catch ( JsonProcessingException e ) { LOGGER . error ( STR_ , e ) ; } }
public static String isDeepEqualsProperties ( String otherName , Map < String , Object > setOne , Map < String , Object > setTwo ) { if ( setOne . size ( ) != setTwo . size ( ) ) { return STR_ + otherName + STR_ + setOne . size ( ) + STR_ + setTwo . size ( ) + STR_ ; } for ( Map . Entry < String , Object > entry : setOne . entrySet ( ) ) { String propName = entry . getKey ( ) ; Object setTwoType = setTwo . get ( entry . getKey ( ) ) ; boolean setTwoTypeFound = setTwo . containsKey ( entry . getKey ( ) ) ; Object setOneType = entry . getValue ( ) ; String message = BaseNestableEventUtil . comparePropType ( propName , setOneType , setTwoType , setTwoTypeFound , otherName ) ; if ( message != null ) { return message ; } } return null ; }
public static NSObject parse ( byte [ ] bytes ) throws IOException , PropertyListFormatException , ParseException , ParserConfigurationException , SAXException { switch ( determineType ( bytes ) ) { case TYPE_BINARY : return BinaryPropertyListParser . parse ( bytes ) ; case TYPE_XML : return XMLPropertyListParser . parse ( bytes ) ; case TYPE_ASCII : return ASCIIPropertyListParser . parse ( bytes ) ; default : throw new PropertyListFormatException ( STR_ ) ; } }
public Rectangle ( ) { }
public static void zoomToScreen ( final ZyGraph graph ) { checkArguments ( graph ) ; ZoomFunctions . zoomToScreen ( graph ) ; }
public static < T > CombinedDownloadTask < T > single ( DownloadTask < T > task ) { Objects . requireNonNull ( task ) ; return new SingleCombinedTask < T > ( task ) ; }
private void append ( BitSequence bs ) { for ( int i = NUM_ ; i < bs . numBits ; i += NUM_ ) { append ( bs . bitAt ( i ) ) ; } }
static boolean testEqual ( LDAPAttribute a1 , LDAPAttribute a2 ) { return a1 . getAttributeType ( ) . equals ( a2 . getAttributeType ( ) ) && a1 . getValues ( ) . equals ( a2 . getValues ( ) ) ; }
public DatagramSocketImpl ( ) { localPort = - NUM_ ; }
public void uploadFile ( Path fileToUpload , String destinationFileName ) throws IOException { Preconditions . checkNotNull ( fileToUpload ) ; Preconditions . checkArgument ( Files . exists ( fileToUpload ) ) ; Preconditions . checkArgument ( ! Strings . isNullOrEmpty ( destinationFileName ) ) ; uploadFile ( fileToUpload , destinationFileName , BOOL_ ) ; }
public ItemSelectionFilter ( ItemSelectionChoice [ ] p_item_types ) { java . util . Arrays . fill ( sel_array , BOOL_ ) ; for ( int i = NUM_ ; i < p_item_types . length ; ++ i ) { sel_array [ p_item_types [ i ] . ordinal ( ) ] = BOOL_ ; } sel_array [ ItemSelectionChoice . FIXED . ordinal ( ) ] = BOOL_ ; sel_array [ ItemSelectionChoice . UNFIXED . ordinal ( ) ] = BOOL_ ; }
private void validatePatch ( State current , State patch ) { ValidationUtils . validatePatch ( current , patch ) ; }
protected abstract void commitToInput ( ) ;
public static void invalidateDrawerMenuHeader ( ) { MainActivity instance = MainActivity . getInstance ( ) ; if ( instance != null && instance . drawerFragment != null ) { instance . drawerFragment . invalidateHeader ( ) ; } else { Timber . e ( MSG_MAIN_ACTIVITY_INSTANCE_IS_NULL ) ; } }
public static void applyToOrSetGone ( ImageHolder imageHolder , ImageView imageView , String tag ) { boolean imageSet = applyTo ( imageHolder , imageView , tag ) ; if ( imageView != null ) { if ( imageSet ) { imageView . setVisibility ( View . VISIBLE ) ; } else { imageView . setVisibility ( View . GONE ) ; } } }
protected void tearDown ( ) throws Exception { m_Instances = null ; super . tearDown ( ) ; }
public void resetAuth ( ) { waitForStateLoaded ( ) ; client . setUsername ( null ) ; client . setPassword ( null ) ; client . setSession ( null ) ; client . setToken ( null ) ; }
int receiveEnergy ( ItemStack container , int maxReceive , boolean simulate ) ;
void addIcon ( ) { PositionableLabel l = new PositionableLabel ( iconEditor . getIcon ( NUM_ ) , this ) ; setNextLocation ( l ) ; l . setDisplayLevel ( ICONS ) ; setDirty ( BOOL_ ) ; putItem ( l ) ; l . updateSize ( ) ; }
public void subscribe ( final String topic , final int qos , String invocationContext , String activityToken ) { service . traceDebug ( TAG , STR_ + topic + STR_ + qos + STR_ + invocationContext + STR_ + activityToken + STR_ ) ; final Bundle resultBundle = new Bundle ( ) ; resultBundle . putString ( MqttServiceConstants . CALLBACK_ACTION , MqttServiceConstants . SUBSCRIBE_ACTION ) ; resultBundle . putString ( MqttServiceConstants . CALLBACK_ACTIVITY_TOKEN , activityToken ) ; resultBundle . putString ( MqttServiceConstants . CALLBACK_INVOCATION_CONTEXT , invocationContext ) ; if ( ( myClient != null ) && ( myClient . isConnected ( ) ) ) { IMqttActionListener listener = new MqttConnectionListener ( resultBundle ) ; try { myClient . subscribe ( topic , qos , invocationContext , listener ) ; } catch ( Exception e ) { handleException ( resultBundle , e ) ; } } else { resultBundle . putString ( MqttServiceConstants . CALLBACK_ERROR_MESSAGE , NOT_CONNECTED ) ; service . traceError ( STR_ , NOT_CONNECTED ) ; service . callbackToActivity ( clientHandle , Status . ERROR , resultBundle ) ; } }
public static String validateString ( String string ) { if ( string == null ) { return STR_ ; } else { return string ; } }
private boolean isVisible ( SootClass from , SootMethod m ) { from . checkLevel ( SootClass . HIERARCHY ) ; if ( m . isPublic ( ) ) return BOOL_ ; if ( m . isPrivate ( ) ) { return from . equals ( m . getDeclaringClass ( ) ) ; } if ( m . isProtected ( ) ) { return canStoreClass ( from , m . getDeclaringClass ( ) ) ; } return from . getJavaPackageName ( ) . equals ( m . getDeclaringClass ( ) . getJavaPackageName ( ) ) ; }
protected void onGetImageSuccess ( String cacheKey , Bitmap response ) { mCache . putBitmap ( cacheKey , response ) ; BatchedImageRequest request = mInFlightRequests . remove ( cacheKey ) ; if ( request != null ) { request . mResponseBitmap = response ; batchResponse ( cacheKey , request ) ; } }
public static < E > List < E > singletonList ( E object ) { return new SingletonList < E > ( object ) ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public int size ( ) { return counter . get ( ) ; }
public void closure ( ) { for ( OwlProperty subprop : properties . values ( ) ) { subprop . computeSuperProperties ( ) ; } for ( OwlClass c1 : classes . values ( ) ) { for ( OwlClass c2 : classes . values ( ) ) { c1 . compareRestrictions ( c2 ) ; } } boolean repeat ; do { for ( OwlClass subclass : classes . values ( ) ) { subclass . computeSuperClasses ( ) ; } repeat = BOOL_ ; for ( OwlProperty prop : properties . values ( ) ) { repeat = prop . compareRestrictions ( ) || repeat ; } } while ( repeat ) ; for ( OwlProperty prop : properties . values ( ) ) { prop . inheritDomainRange ( ) ; } }
protected void analyzeParametrizedType ( ParameterizedType parameterizedType , Type rawType ) { if ( List . class . equals ( rawType ) ) { this . isList = BOOL_ ; if ( parameterizedType . getActualTypeArguments ( ) [ NUM_ ] instanceof Class && ( ( Class ) parameterizedType . getActualTypeArguments ( ) [ NUM_ ] ) . isAnnotationPresent ( DTO . class ) ) { isListOfDto = BOOL_ ; dtoImpl = convertType ( parameterizedType . getActualTypeArguments ( ) [ NUM_ ] ) + STR_ ; } } else if ( Map . class . equals ( rawType ) ) { isMap = BOOL_ ; if ( parameterizedType . getActualTypeArguments ( ) [ NUM_ ] instanceof Class && ( ( Class ) parameterizedType . getActualTypeArguments ( ) [ NUM_ ] ) . isAnnotationPresent ( DTO . class ) ) { isMapOfDto = BOOL_ ; dtoImpl = convertType ( parameterizedType . getActualTypeArguments ( ) [ NUM_ ] ) + STR_ ; } } }
public static Map < String , String > strToMap ( String str , String delim ) { return strToMap ( str , delim , BOOL_ ) ; }
public void addPropertiesFromFileList ( String source , String propFiles ) throws IOException { if ( StringUtils . isEmpty ( propFiles ) ) { return ; } s_log . info ( STR_ , m_category . getCategoryName ( ) , source , propFiles ) ; List < URI > uris = new ArrayList < URI > ( ) ; for ( String file : StringUtils . split ( propFiles , STR_ ) ) { file = file . trim ( ) ; uris . add ( URI . create ( file ) ) ; } addProperties ( uris ) ; }
public final void testValidateFails ( ) { IPv6AddressValidator iPv4AddressValidator = new IPv6AddressValidator ( STR_ ) ; assertFalse ( iPv4AddressValidator . validate ( STR_ ) ) ; assertFalse ( iPv4AddressValidator . validate ( STR_ ) ) ; }
private boolean isUnsignedSemitones ( String string ) { String s = string . trim ( ) ; if ( s . length ( ) < NUM_ ) return BOOL_ ; return s . substring ( s . length ( ) - NUM_ ) . equals ( STR_ ) && isUnsignedNumber ( s . substring ( NUM_ , s . length ( ) - NUM_ ) ) ; }
private URL buildUrl ( String domain , String path , Map < String , String > parameters ) throws MalformedURLException , DocumentListException { if ( path == null ) { throw new DocumentListException ( STR_ ) ; } StringBuffer url = new StringBuffer ( ) ; url . append ( STR_ + domain + URL_FEED + path ) ; if ( parameters != null && parameters . size ( ) > NUM_ ) { Set < Map . Entry < String , String > > params = parameters . entrySet ( ) ; Iterator < Map . Entry < String , String > > itr = params . iterator ( ) ; url . append ( STR_ ) ; while ( itr . hasNext ( ) ) { Map . Entry < String , String > entry = itr . next ( ) ; url . append ( entry . getKey ( ) + STR_ + entry . getValue ( ) ) ; if ( itr . hasNext ( ) ) { url . append ( STR_ ) ; } } } return new URL ( url . toString ( ) ) ; }
public boolean isSetValue ( ) { return this . value != null ; }
public void onProgress ( long bytesWritten , long totalSize ) { AsyncHttpClient . log . v ( LOG_TAG , String . format ( STR_ , bytesWritten , totalSize , ( totalSize > NUM_ ) ? ( bytesWritten * NUM_ / totalSize ) * NUM_ : - NUM_ ) ) ; }
public DataShapeAction ( String group , String field , int [ ] palette ) { super ( group , NO_SHAPE ) ; m_dataField = field ; m_palette = palette ; }
public CrowdJob ( JsonNode template ) { this . template = template ; createArgumentMaps ( ) ; }
private void testGetHighestModSeq ( ) throws Exception { LOG . info ( STR_ ) ; long highestModSeq = messageMapper . getHighestModSeq ( MBOXES . get ( NUM_ ) ) ; assertEquals ( MESSAGE_NO . size ( ) , highestModSeq ) ; }
public ActiveInformationCalculatorDiscrete ( int base , int history ) { super ( base , history ) ; }
public UpdateMsg first ( ) { synchronized ( lock ) { return map . get ( map . firstKey ( ) ) ; } }
protected static PdfLayer createTitleSilent ( String title , PdfDocument document ) { if ( title == null ) throw new IllegalArgumentException ( STR_ ) ; PdfLayer layer = new PdfLayer ( document ) ; layer . title = title ; return layer ; }
public void updateArc ( float latPoint , float lonPoint , float radius , int units , float s , float e , LinkProperties properties , int graphicUpdateMask ) throws IOException { writeGraphicGestureHeader ( graphicUpdateMask ) ; LinkArc . write ( latPoint , lonPoint , radius , units , - NUM_ , s , e , properties , link . dos ) ; }
public static Resources resources ( ) { return _resources ; }
public static int min ( int [ ] a ) { int min = Integer . MAX_VALUE ; for ( int i = NUM_ ; i < a . length ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } return min ; }
void startDetection ( String container , MessageProcessor < LogMessage > startContainerLogProcessor ) ;
public int size ( ) { return count ; }
public void testWrapperClassesImplementFacesWrapper ( ) { assertNotNull ( noWrapperClasses ) ; if ( noWrapperClasses . size ( ) > NUM_ ) { System . out . println ( STR_ ) ; System . out . println ( noWrapperClasses . toString ( ) ) ; } assertTrue ( STR_ , noWrapperClasses . isEmpty ( ) ) ; }
private java . lang . String registerPrefix ( javax . xml . stream . XMLStreamWriter xmlWriter , java . lang . String namespace ) throws javax . xml . stream . XMLStreamException { java . lang . String prefix = xmlWriter . getPrefix ( namespace ) ; if ( prefix == null ) { prefix = generatePrefix ( namespace ) ; while ( xmlWriter . getNamespaceContext ( ) . getNamespaceURI ( prefix ) != null ) { prefix = org . apache . axis2 . databinding . utils . BeanUtil . getUniquePrefix ( ) ; } xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } return prefix ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public String buildJavaVendor ( ) { return properties . getProperty ( STR_ ) ; }
public static Foo findByUuid_C_First ( java . lang . String uuid , long companyId , OrderByComparator < Foo > orderByComparator ) throws com . liferay . blade . samples . servicebuilder . exception . NoSuchFooException { return getPersistence ( ) . findByUuid_C_First ( uuid , companyId , orderByComparator ) ; }
public MutableInt ( final int value ) { super ( ) ; this . value = value ; }
public Builder baseValue ( IonValue val ) { this . baseValue = val ; return this ; }
public boolean checkIfExists ( Object sql ) { Cursor cursor = null ; try { debugSql ( sql ) ; cursor = mDBHelper . getReadableDatabase ( ) . rawQuery ( sql . toString ( ) , null ) ; return cursor . moveToFirst ( ) ; } catch ( Exception e ) { Log . e ( TAG , e . getMessage ( ) , e ) ; } finally { if ( cursor != null ) cursor . close ( ) ; } return BOOL_ ; }
public String sqlObjectDetail_dropColumnNullable ( String vendorName , String catalogName , String schemaName , String tableName , String columnName ) { columnName = normalizeColumnName ( vendorName , columnName ) ; return m_interfaces . get ( getDBVendorID ( vendorName ) ) . sqlObjectDetail_dropColumnNullable ( catalogName , schemaName , tableName , columnName ) ; }
private void notifyInterfaceAdded ( String iface ) { final int length = mObservers . beginBroadcast ( ) ; for ( int i = NUM_ ; i < length ; i ++ ) { try { mObservers . getBroadcastItem ( i ) . interfaceAdded ( iface ) ; } catch ( RemoteException e ) { } catch ( RuntimeException e ) { } } mObservers . finishBroadcast ( ) ; }
private final int threadHash ( ) { return Math . abs ( Thread . currentThread ( ) . hashCode ( ) % a . length ) ; }
public boolean isSilent ( ) ;
public static MarkovDecisionProcess < Cell < Double > , CellWorldAction > createMDPForFigure17_3 ( final CellWorld < Double > cw ) { return new MDP < Cell < Double > , CellWorldAction > ( cw . getCells ( ) , cw . getCellAt ( NUM_ , NUM_ ) , createActionsFunctionForFigure17_1 ( cw ) , createTransitionProbabilityFunctionForFigure17_1 ( cw ) , createRewardFunctionForFigure17_1 ( ) ) ; }
public short acceptNode ( int n ) { try { if ( getPredicateCount ( ) > NUM_ ) { countProximityPosition ( NUM_ ) ; if ( ! executePredicates ( n , m_lpi . getXPathContext ( ) ) ) return DTMIterator . FILTER_SKIP ; } return DTMIterator . FILTER_ACCEPT ; } catch ( javax . xml . transform . TransformerException se ) { throw new RuntimeException ( se . getMessage ( ) ) ; } }
public static HttpRequest delete ( final URL url ) throws HttpRequestException { return new HttpRequest ( url , METHOD_DELETE ) ; }
public static String removeExtension ( String filename ) { return removeExtension ( new File ( filename ) ) . getPath ( ) ; }
public TreeNode ( final ObjectType object ) { m_object = Preconditions . checkNotNull ( object , STR_ ) ; }
public int suspendReason ( ) { DSuspendInfo info = getSuspendInfo ( ) ; return info . getReason ( ) ; }
public static void showBPartner ( int WindowNo ) { InfoBPartnerPanel info = new InfoBPartnerPanel ( WindowNo , BOOL_ , NUM_ , STR_ , BOOL_ , BOOL_ , BOOL_ , BOOL_ , STR_ ) ; AEnv . showWindow ( info ) ; }
public void onScanResult ( String address , int rssi , byte [ ] advData ) { }
void warning ( TranscoderException ex ) throws TranscoderException ;
public void removeLogFile ( LogFile logFile ) { logFileMap . remove ( logFile . getFile ( ) ) ; }
public boolean isNamespaceAware ( ) { return namespaceAware ; }
public void rollbackBlockStates ( ) { for ( BlockState state : blockStateBackupMap . values ( ) ) { state . update ( BOOL_ ) ; } blockStateBackupMap . clear ( ) ; }
public String createGroup ( String groupname , String description ) { UserDatabase database = ( UserDatabase ) this . resource ; Group group = database . createGroup ( groupname , description ) ; try { MBeanUtils . createMBean ( group ) ; } catch ( Exception e ) { IllegalArgumentException iae = new IllegalArgumentException ( STR_ + groupname + STR_ ) ; iae . initCause ( e ) ; throw iae ; } return ( findGroup ( groupname ) ) ; }
public CStandardLeftPanel ( final ZyGraph graph , final CSelectionHistory selectionHistory , final CGraphSearchField searchField ) { super ( new BorderLayout ( ) ) ; Preconditions . checkNotNull ( searchField , STR_ ) ; m_undoHistory = new CSelectionHistoryChooser ( graph , selectionHistory ) ; final JSplitPane bottomSplitter = new JSplitPane ( JSplitPane . VERTICAL_SPLIT , BOOL_ , m_nodeChooser = new CNodeChooser ( graph , searchField ) , m_undoHistory ) ; final JSplitPane topSplitter = new JSplitPane ( JSplitPane . VERTICAL_SPLIT , BOOL_ , new CGraphOverview ( graph ) , bottomSplitter ) ; topSplitter . setDividerLocation ( NUM_ ) ; bottomSplitter . setDoubleBuffered ( BOOL_ ) ; bottomSplitter . setResizeWeight ( NUM_ ) ; bottomSplitter . setOneTouchExpandable ( BOOL_ ) ; bottomSplitter . setMinimumSize ( new Dimension ( NUM_ , NUM_ ) ) ; topSplitter . setDoubleBuffered ( BOOL_ ) ; topSplitter . setOneTouchExpandable ( BOOL_ ) ; topSplitter . setMinimumSize ( new Dimension ( NUM_ , NUM_ ) ) ; topSplitter . setDividerLocation ( NUM_ ) ; add ( topSplitter ) ; }
static public void fail ( ) { fail ( null ) ; }
public static String cleanupEscapedCharForXML ( char escapedChar , String toClean ) { if ( toClean == null || toClean . indexOf ( escapedChar ) == - NUM_ || toClean . indexOf ( STR_ ) == - NUM_ ) { return toClean ; } StringBuilder buf = new StringBuilder ( toClean . length ( ) ) ; char [ ] chars = toClean . toCharArray ( ) ; int i ; for ( i = NUM_ ; i < chars . length - NUM_ ; ++ i ) { if ( chars [ i ] != STR_ || chars [ i + NUM_ ] != escapedChar ) { buf . append ( chars [ i ] ) ; } else { buf . append ( STR_ + Integer . toString ( ( chars [ i + NUM_ ] ) , NUM_ ) + STR_ ) ; i ++ ; } } if ( i == chars . length - NUM_ ) { buf . append ( chars [ chars . length - NUM_ ] ) ; } return buf . toString ( ) ; }
private static < E > boolean retainOccurrencesImpl ( Multiset < E > multisetToModify , Multiset < ? > occurrencesToRetain ) { checkNotNull ( multisetToModify ) ; checkNotNull ( occurrencesToRetain ) ; Iterator < Entry < E > > entryIterator = multisetToModify . entrySet ( ) . iterator ( ) ; boolean changed = BOOL_ ; while ( entryIterator . hasNext ( ) ) { Entry < E > entry = entryIterator . next ( ) ; int retainCount = occurrencesToRetain . count ( entry . getElement ( ) ) ; if ( retainCount == NUM_ ) { entryIterator . remove ( ) ; changed = BOOL_ ; } else if ( retainCount < entry . getCount ( ) ) { multisetToModify . setCount ( entry . getElement ( ) , retainCount ) ; changed = BOOL_ ; } } return changed ; }
public Pair ( final First first , final Second second ) { this . first = first ; this . second = second ; }
public static String encrypt ( String s ) throws Exception { StringBuilder buf = new StringBuilder ( __CRYPT ) ; Cipher cipher = Cipher . getInstance ( CRYPT_ALGORITHM ) ; cipher . init ( Cipher . ENCRYPT_MODE , new SecretKeySpec ( NON_SECRET_KEY , CRYPT_ALGORITHM ) ) ; return buf . append ( byteArrayToHexString ( cipher . doFinal ( s . getBytes ( ) ) ) ) . toString ( ) ; }
private float minScale ( ) { int vPadding = getPaddingBottom ( ) + getPaddingTop ( ) ; int hPadding = getPaddingLeft ( ) + getPaddingRight ( ) ; if ( minimumScaleType == SCALE_TYPE_CENTER_CROP ) { return Math . max ( ( getWidth ( ) - hPadding ) / ( float ) sWidth ( ) , ( getHeight ( ) - vPadding ) / ( float ) sHeight ( ) ) ; } else if ( minimumScaleType == SCALE_TYPE_CUSTOM && minScale > NUM_ ) { return minScale ; } else { return Math . min ( ( getWidth ( ) - hPadding ) / ( float ) sWidth ( ) , ( getHeight ( ) - vPadding ) / ( float ) sHeight ( ) ) ; } }
private boolean processAccessKey ( String keyStr , HTMLComponent htmlC , Component ui , boolean override ) { if ( keyStr . startsWith ( STR_ ) ) { try { int keyCode = Integer . parseInt ( keyStr . substring ( NUM_ ) , NUM_ ) ; htmlC . addAccessKey ( ( char ) keyCode , ui , override ) ; return BOOL_ ; } catch ( NumberFormatException nfe ) { return BOOL_ ; } } else if ( keyStr . length ( ) == NUM_ ) { htmlC . addAccessKey ( keyStr . charAt ( NUM_ ) , ui , override ) ; return BOOL_ ; } else { if ( specialKeys != null ) { Integer key = ( Integer ) specialKeys . get ( keyStr ) ; if ( key != null ) { htmlC . addAccessKey ( key . intValue ( ) , ui , override ) ; return BOOL_ ; } } return BOOL_ ; } }
public static AppEventsLogger newLogger ( Context context , Session session ) { return new AppEventsLogger ( context , null , session ) ; }
void Delete ( Pointer handle ) ;
Document removeAll ( ) ;
protected abstract boolean shouldIgnoreFirstLine ( ) ;
protected boolean isReverseLayout ( RecyclerView parent ) { RecyclerView . LayoutManager layoutManager = parent . getLayoutManager ( ) ; if ( layoutManager instanceof LinearLayoutManager ) { return ( ( LinearLayoutManager ) layoutManager ) . getReverseLayout ( ) ; } else { return BOOL_ ; } }
public String asString ( ) { String s = rows + STR_ + columns + STR_ ; for ( int i = NUM_ ; i < rows ; i ++ ) { String build = STR_ ; for ( int j = NUM_ ; j < columns ; j ++ ) { build += STR_ + MathHelper . round ( values [ i ] [ j ] , NUM_ ) ; } s += build ; if ( i != rows - NUM_ ) s += STR_ ; } return s ; }
public static long parseLong ( String string , int radix ) throws NumberFormatException { if ( radix < Character . MIN_RADIX || radix > Character . MAX_RADIX ) { throw new NumberFormatException ( STR_ + radix ) ; } if ( string == null ) { throw invalidLong ( string ) ; } int length = string . length ( ) , i = NUM_ ; if ( length == NUM_ ) { throw invalidLong ( string ) ; } boolean negative = string . charAt ( i ) == STR_ ; if ( negative && ++ i == length ) { throw invalidLong ( string ) ; } return parse ( string , i , radix , negative ) ; }
public synchronized V put ( K key , V value ) { if ( ( key == null ) || ( value == null ) ) return null ; cache . put ( key , value ) ; return value ; }
public abstract NetMember newNetMember ( InetAddress i , int port , boolean splitBrainEnabled , boolean canBeCoordinator , MemberAttributes payload , short version ) ;
public static byte [ ] drawableToByte ( Drawable d ) { return bitmapToByte ( drawableToBitmap ( d ) ) ; }
void validate ( Cookie cookie , CookieOrigin origin ) throws MalformedCookieException ;
private void startFileBasedMerge ( ) throws CarbonSortKeyAndGroupByException { try { executorService . shutdown ( ) ; executorService . awaitTermination ( NUM_ , TimeUnit . DAYS ) ; dataSorterAndWriterExecutorService . shutdown ( ) ; dataSorterAndWriterExecutorService . awaitTermination ( NUM_ , TimeUnit . DAYS ) ; } catch ( InterruptedException e ) { throw new CarbonSortKeyAndGroupByException ( STR_ , e ) ; } }
public Object remove ( Object key ) { if ( key == null ) { return null ; } return internalRemove ( key ) ; }
public Pair < String , String > next ( ) { try { currentHeaderPosition = nextHeaderPosition ; String readHeader = nextLine ; nextHeaderPosition += readHeader . length ( ) + endOfLineBytes ; readHeader = STR_ + readHeader . substring ( NUM_ ) ; String readSequence = r . readLine ( ) ; nextHeaderPosition += readSequence . length ( ) + endOfLineBytes ; String comments = r . readLine ( ) ; nextHeaderPosition += comments . length ( ) + endOfLineBytes ; if ( comments . startsWith ( STR_ ) ) { String qualityValues = r . readLine ( ) ; nextHeaderPosition += qualityValues . length ( ) + endOfLineBytes ; } nextLine = r . readLine ( ) ; return new Pair < > ( readHeader , readSequence ) ; } catch ( IOException e ) { Basic . caught ( e ) ; } return null ; }
public FastqWriterWrapper ( File baseOutput , SdfReaderWrapper reader , int lineLength , boolean rename , boolean gzip , int def , boolean interleavePaired ) throws IOException { super ( baseOutput , reader , lineLength , rename , gzip , interleavePaired , EXTS ) ; if ( reader . type ( ) != SequenceType . DNA ) { throw new InvalidParamsException ( ErrorType . INFO_ERROR , STR_ ) ; } if ( ! reader . hasQualityData ( ) ) { if ( def >= ( int ) STR_ ) { mDefaultQualities = StringUtils . getCharString ( ( char ) def , reader . maxLength ( ) ) ; } else { throw new InvalidParamsException ( ErrorType . INFO_ERROR , STR_ ) ; } } }
public static < T , A > ReaderTSeq < T , A > of ( final AnyMSeq < Reader < T , A > > monads ) { return new ReaderTSeq < > ( monads ) ; }
default < B , V > Generator < V > combine ( Generator < B > other , BiFunction < T , B , V > combine ) { return null ; }
private void zoomToAddress ( ) { if ( ! STR_ . equals ( getText ( ) ) ) { add ( getText ( ) ) ; final IAddress address = new CAddress ( Long . parseLong ( getText ( ) , NUM_ ) ) ; m_textField . setSuccessful ( ZyZoomHelpers . zoomToAddress ( m_graph , address , m_modules . get ( NUM_ ) , BOOL_ ) ) ; } }
protected static char possBareHTMLEntityWithSemicolonToChar ( String possBareEntityWithSemicolon , char translateNbspTo ) { if ( possBareEntityWithSemicolon . length ( ) < SHORTEST_ENTITY - NUM_ ) { return NUM_ ; } int whereSemi = possBareEntityWithSemicolon . indexOf ( STR_ , SHORTEST_ENTITY - NUM_ ) ; if ( whereSemi < SHORTEST_ENTITY - NUM_ ) { return NUM_ ; } return bareHTMLEntityToChar ( possBareEntityWithSemicolon . substring ( NUM_ , whereSemi ) , translateNbspTo ) ; }
void onPut ( Object key ) ;
public boolean isUsingModules ( ) { return moduleKind != null && moduleKind != ModuleKind . none ; }
public void test_ticket_bg1899_d ( ) throws Exception { new TestHelper ( STR_ , STR_ , STR_ , STR_ ) . runTest ( ) ; }
protected void service ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { if ( lbCookieName == null || lbCookieValue == null ) { initLbCookieSettings ( ) ; } response . addHeader ( STR_ , STR_ ) ; response . addHeader ( STR_ , STR_ ) ; IdentityServicesImpl security = this . factory . newInstance ( ) ; SecurityMethod . execute ( security , request , response ) ; setLbCookie ( request , response ) ; }
public void clearDoubleHeaderCache ( ) { clearSubHeaderCache ( ) ; clearHeaderCache ( ) ; }
private String createLambdaFriendlyVersionName ( String version ) { return version . replace ( STR_ , STR_ ) ; }
public void addHandler ( ChunkDataBase handler ) { if ( this . chunkDataHandlers == null ) this . chunkDataHandlers = new ArrayList < > ( ) ; if ( this . classToHandler == null ) this . classToHandler = new HashMap < > ( ) ; this . chunkDataHandlers . add ( handler ) ; this . classToHandler . put ( handler . getClass ( ) , handler ) ; }
public void scale ( VisualizationServer < ? , ? > vv , float amount , Point2D from ) { MutableTransformer viewTransformer = vv . getRenderContext ( ) . getMultiLayerTransformer ( ) . getTransformer ( Layer . VIEW ) ; viewTransformer . scale ( amount , amount , from ) ; vv . repaint ( ) ; }
public void register ( K key , V value ) { register ( availableIds . nextClearBit ( NUM_ ) , key , value ) ; }
public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case NUM_ : return HEADER ; default : return null ; } }
public int size ( ) { return closed . size ( ) ; }
public DocSet andNot ( DocSet other ) ;
public boolean isSetState ( ) { return this . state != null ; }
public void stage ( char [ ] buff , int offset , int length ) throws SAXException ;
void syncbase ( float offset , String syncbaseID , String timeSymbol ) ;
public static < A > ListT < A > of ( final AnyM < List < A > > monads ) { return Matchables . anyM ( monads ) . visit ( null , null ) ; }
public void invalidateTitleSortable ( ) { for ( TvShow tvShow : new ArrayList < > ( tvShowList ) ) { tvShow . clearTitleSortable ( ) ; } }
public void toggleLike ( Activity activity , Fragment fragment , Bundle analyticsParameters ) { appEventsLogger . logSdkEvent ( AnalyticsEvents . EVENT_LIKE_VIEW_DID_TAP , null , analyticsParameters ) ; boolean shouldLikeObject = ! this . isObjectLiked ; if ( canUseOGPublish ( ) ) { updateLikeState ( shouldLikeObject ) ; if ( isPendingLikeOrUnlike ) { appEventsLogger . logSdkEvent ( AnalyticsEvents . EVENT_LIKE_VIEW_DID_UNDO_QUICKLY , null , analyticsParameters ) ; } else if ( ! publishLikeOrUnlikeAsync ( shouldLikeObject , analyticsParameters ) ) { updateLikeState ( ! shouldLikeObject ) ; presentLikeDialog ( activity , fragment , analyticsParameters ) ; } } else { presentLikeDialog ( activity , fragment , analyticsParameters ) ; } }
private static void deleteRecursive ( File f ) throws CarbonUtilException { if ( f . isDirectory ( ) ) { if ( f . listFiles ( ) != null ) { for ( File c : f . listFiles ( ) ) { deleteRecursive ( c ) ; } } } if ( f . exists ( ) && ! f . delete ( ) ) { throw new CarbonUtilException ( STR_ ) ; } }
IResponseInfo analyzeResponse ( byte [ ] response ) ;
public int querySurface ( EGLSurface eglSurface , int what ) { int [ ] value = new int [ NUM_ ] ; EGL14 . eglQuerySurface ( mEGLDisplay , eglSurface , what , value , NUM_ ) ; return value [ NUM_ ] ; }
public List < Map < String , Object > > filter ( List < Map < String , Object > > sheet , String key , Object value ) { List < Map < String , Object > > result = new ArrayList < Map < String , Object > > ( ) ; Iterator < Map < String , Object > > iterator = sheet . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map < String , Object > row = iterator . next ( ) ; if ( row . get ( key ) != null && ( row . get ( key ) . toString ( ) . toLowerCase ( ) ) . contains ( value . toString ( ) . toLowerCase ( ) ) ) { result . add ( row ) ; } } return result ; }
public DefaultVcfWriter ( VcfHeader header , File outputFile , OutputStream stdout , boolean compress , boolean createIndexIfPossible ) throws IOException { if ( header == null ) { throw new NullPointerException ( STR_ ) ; } mIndexer = new IndexingStreamCreator ( outputFile , stdout , compress , new TabixIndexer . VcfIndexerFactory ( ) , createIndexIfPossible ) ; mOut = mIndexer . createStreamsAndStartThreads ( ) ; mHeader = header ; }
public static < T > T checkNotNull ( T reference ) { if ( reference == null ) { throw new NullPointerException ( ) ; } return reference ; }
public static boolean putMapNotEmptyKeyAndValue ( Map < String , String > map , String key , String value , String defaultValue ) { if ( map == null || StringUtils . isEmpty ( key ) ) { return BOOL_ ; } map . put ( key , StringUtils . isEmpty ( value ) ? defaultValue : value ) ; return BOOL_ ; }
java . sql . Timestamp toSqlTimestamp ( Calendar calendar ) { return new java . sql . Timestamp ( getTimeInMillis ( calendar ) ) ; }
protected void addIdPropertyDescriptor ( Object object ) { itemPropertyDescriptors . add ( createItemPropertyDescriptor ( ( ( ComposeableAdapterFactory ) adapterFactory ) . getRootAdapterFactory ( ) , getResourceLocator ( ) , getString ( STR_ ) , getString ( STR_ , STR_ , STR_ ) , TypesPackage . Literals . PACKAGE_MEMBER__ID , BOOL_ , BOOL_ , BOOL_ , ItemPropertyDescriptor . GENERIC_VALUE_IMAGE , null , null ) ) ; }
static private void processLinkedDefinitions ( ) { for ( WbXmlDefinition def : getDefinitions ( ) ) { if ( ! def . getLinkedDefinitions ( ) . isEmpty ( ) ) { for ( String name : def . getLinkedDefinitions ( ) . keySet ( ) ) { WbXmlDefinition linkedDef = getDefinitionByName ( name ) ; if ( linkedDef != null ) { def . getLinkedDefinitions ( ) . put ( name , linkedDef ) ; } else { def . getLinkedDefinitions ( ) . remove ( name ) ; log . log ( Level . WARNING , STR_ , new Object [ ] { name , def . getName ( ) } ) ; } } } } }
public void startIXFRAdds ( Record soa ) throws ZoneTransferException ;
public LabeledStmt ( ) { }
public void add ( HDR sipheader , boolean top ) { if ( top ) this . addFirst ( sipheader ) ; else this . add ( sipheader ) ; }
public static boolean isURLValid ( String url ) { return URL_VALIDATOR . isValid ( url ) ; }
default Interval < T > solveInterval ( int maxEval , RealFieldUnivariateFunction < T > f , T min , T max ) throws MathIllegalArgumentException , MathIllegalStateException { return this . solveInterval ( maxEval , f , min , max , min . add ( max . subtract ( min ) . multiply ( NUM_ ) ) ) ; }
public void throttleTime ( long nanos ) ;
public DataSizeAction ( String group , String field ) { super ( group , NO_SIZE ) ; m_dataField = field ; }
public boolean isWatched ( ) { return watched ; }
void waitForOpening ( ) throws InterruptedException ;
public double [ ] generateRandomData ( int length , double min , double max ) { double [ ] data = new double [ length ] ; for ( int i = NUM_ ; i < length ; i ++ ) { data [ i ] = min + random . nextDouble ( ) * ( max - min ) ; } return data ; }
static void writeShort ( final byte [ ] b , final int index , final int s ) { b [ index ] = ( byte ) ( s > > > NUM_ ) ; b [ index + NUM_ ] = ( byte ) s ; }
public boolean isEmpty ( ) { return size ( ) == NUM_ ; }
public boolean willExist ( IResource resource ) { if ( fDeltaDescriptions == null ) return BOOL_ ; IPath fullPath = resource . getFullPath ( ) ; for ( Iterator < DeltaDescription > iter = fDeltaDescriptions . iterator ( ) ; iter . hasNext ( ) ; ) { DeltaDescription delta = iter . next ( ) ; if ( fullPath . equals ( delta . getDestinationPath ( ) ) ) return BOOL_ ; } return BOOL_ ; }
public GroupsBanUserQuery ( VkApiClient client , UserActor actor , int groupId , int userId ) { super ( client , STR_ , OkResponse . class ) ; accessToken ( actor . getAccessToken ( ) ) ; groupId ( groupId ) ; userId ( userId ) ; }
public void resetSQLDetail ( ) { params . sqlBuffer . reset ( ) ; }
void onPageSelected ( ) ;
public List < Synapse > connectSparse ( List < Neuron > sourceNeurons , List < Neuron > targetNeurons ) { return connectSparse ( sourceNeurons , targetNeurons , connectionDensity , selfConnectionAllowed , equalizeEfferents , BOOL_ ) ; }
public boolean takeContentChanged ( ) { boolean res = mContentChanged ; mContentChanged = BOOL_ ; mProcessingChange |= res ; return res ; }
private Object conditionalCopy ( Object o ) { return o ; }
public static void shuffle ( List < ? > list ) { shuffle ( list , new java . util . Random ( ) ) ; }
public LongAdder ( ) { }
public void resetGenerationId ( Long generationIdNewValue ) throws DirectoryException { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STR_ + getServerId ( ) + STR_ + getBaseDN ( ) + STR_ + generationIdNewValue ) ; } ResetGenerationIdMsg genIdMessage = new ResetGenerationIdMsg ( getGenId ( generationIdNewValue ) ) ; if ( ! isConnected ( ) ) { LocalizableMessage message = ERR_RESET_GENERATION_CONN_ERR_ID . get ( getBaseDN ( ) , getServerId ( ) , genIdMessage . getGenerationId ( ) ) ; throw new DirectoryException ( ResultCode . OTHER , message ) ; } broker . publish ( genIdMessage ) ; checkGenerationID ( getGenId ( generationIdNewValue ) ) ; }
public int compareTo ( Object o2 ) { Variable v2 = ( Variable ) o2 ; String n1 = getName ( ) ; String n2 = v2 . getName ( ) ; return String . CASE_INSENSITIVE_ORDER . compare ( n1 , n2 ) ; }
private void resetMatrix ( ) { mSuppMatrix . reset ( ) ; setImageViewMatrix ( getDisplayMatrix ( ) ) ; checkMatrixBounds ( ) ; }
Joiner join ( Class < ? extends DataObject > clazz , String alias ) ;
int invokeOn ( ) ;
public void begin ( ) { currentPos = mark = NUM_ ; endPos = getCodeLength ( ) ; }
public Map < Integer , Double > compute ( long ... dataset ) { return computeInPlace ( longsToDoubles ( dataset ) ) ; }
public ValidatorMixin ( W inputWidget , ErrorHandler errorHandler ) { this . inputWidget = inputWidget ; this . errorHandler = errorHandler ; eventBus = new SimpleEventBus ( ) ; setupValueChangeValidation ( ) ; }
void notifyHeaderRowNotFound ( ) { createBubbleWindow ( headerRowSpinner , BubbleStyle . ERROR , STR_ ) ; }
public LongFileGetterPagedMemory ( File file ) throws IOException { this . file = file ; limit = file . length ( ) / NUM_ ; System . err . println ( STR_ + file ) ; raf = new RandomAccessFile ( file , STR_ ) ; data = new long [ ( int ) ( ( limit > > > PAGE_BITS ) ) + NUM_ ] [ ] ; length0 = ( int ) ( Math . min ( limit , NUM_ << PAGE_BITS ) ) ; }
protected abstract void startUpAdditions ( JvmLauncher javaContainer ) throws FileNotFoundException ;
public HttpRoute determineRoute ( HttpHost target , HttpRequest request , HttpContext context ) throws HttpException ;
public static void displayError ( Component parent , LocalizableMessage msg , LocalizableMessage title ) { JOptionPane . showMessageDialog ( parent , wrapMsg ( String . valueOf ( msg ) , NUM_ ) , String . valueOf ( title ) , JOptionPane . ERROR_MESSAGE ) ; }
Context findContext ( String name ) ;
public Remote activate ( boolean force ) throws ActivationException , UnknownObjectException , RemoteException { try { MarshalledObject < ? extends Remote > mobj = activator . activate ( this , force ) ; return mobj . get ( ) ; } catch ( RemoteException e ) { throw e ; } catch ( IOException e ) { throw new UnmarshalException ( STR_ , e ) ; } catch ( ClassNotFoundException e ) { throw new UnmarshalException ( STR_ , e ) ; } }
public void expungeStaleEntries ( ) { target . expungeStaleEntries ( ) ; }
public static int countOccurrences ( String fullString , String pattern ) { int lastIndex = NUM_ ; int count = NUM_ ; while ( lastIndex != - NUM_ ) { lastIndex = fullString . indexOf ( pattern , lastIndex ) ; if ( lastIndex != - NUM_ ) { count ++ ; lastIndex += pattern . length ( ) ; } } return count ; }
public IssueMatcher endsWith ( URI expectedSuffix ) { return addPropertyMatcher ( URIPropertyMatcher . Mode . EndsWith , expectedSuffix ) ; }
private void doubleBufferingChanged0 ( JRootPane rootPane ) { BufferInfo info ; synchronized ( this ) { while ( showing ) { try { wait ( ) ; } catch ( InterruptedException ie ) { } } info = getBufferInfo ( rootPane . getParent ( ) ) ; if ( painting && bufferInfo == info ) { disposeBufferOnEnd = BOOL_ ; info = null ; } else if ( info != null ) { bufferInfos . remove ( info ) ; } } if ( info != null ) { info . dispose ( ) ; } }
public boolean equals ( FontRenderContext rhs ) { if ( this == rhs ) { return BOOL_ ; } if ( rhs == null ) { return BOOL_ ; } if ( ! rhs . defaulting && ! defaulting ) { if ( rhs . aaHintValue == aaHintValue && rhs . fmHintValue == fmHintValue ) { return tx == null ? rhs . tx == null : tx . equals ( rhs . tx ) ; } return BOOL_ ; } else { return rhs . getAntiAliasingHint ( ) == getAntiAliasingHint ( ) && rhs . getFractionalMetricsHint ( ) == getFractionalMetricsHint ( ) && rhs . getTransform ( ) . equals ( getTransform ( ) ) ; } }
private DateFormatter ( ) { }
public boolean isVirtualFunction ( ) { return virtualFunction ; }
public static double [ ] times ( double [ ] ... v ) { double [ ] array = fill ( v [ NUM_ ] . length , NUM_ ) ; for ( int j = NUM_ ; j < v . length ; j ++ ) for ( int i = NUM_ ; i < v [ j ] . length ; i ++ ) array [ i ] *= v [ j ] [ i ] ; return array ; }
void onQueryExecuted ( T result ) ;
public long dim1 ( ) ;
private Collection < T > find ( ManagedObjectPath < ? , ? > path , PropertyDefinition < T > propertyDef ) { nextPath = path ; nextProperty = propertyDef ; Collection < T > values = nextProperty . getDefaultBehaviorProvider ( ) . accept ( this , null ) ; if ( exception != null ) { throw exception ; } if ( values . size ( ) > NUM_ && ! propertyDef . hasOption ( PropertyOption . MULTI_VALUED ) ) { throw defaultBehaviorException ( propertyDef , propertyIsSingleValuedException ( propertyDef ) ) ; } return values ; }
abstract public void startActivityForResult ( CordovaPlugin command , Intent intent , int requestCode ) ;
public void bindWithModel ( Object modelObject ) { if ( modelObject == null ) throw new IllegalArgumentException ( STR_ ) ; if ( modelObject . getClass ( ) != getModelObject ( ) . getClass ( ) ) throw new IllegalArgumentException ( STR_ ) ; int direction = this . builder . getBindDirection ( ) ; bind ( direction , modelObject ) ; }
public Set searchDynamicGroups ( String wildcard , int level , String groupSearchTemplate , Map avPairs ) throws AMException , SSOException { if ( AMCompliance . isComplianceUserDeletionEnabled ( ) && AMCompliance . isAncestorOrgDeleted ( super . token , super . entryDN , AMObject . ORGANIZATION ) ) { if ( debug . warningEnabled ( ) ) { debug . warning ( STR_ + STR_ + super . entryDN + STR_ ) ; } return Collections . EMPTY_SET ; } return searchObjects ( AMNamingAttrManager . getNamingAttr ( GROUP ) , getSearchFilter ( AMObject . DYNAMIC_GROUP , groupSearchTemplate ) , wildcard , avPairs , level ) ; }
public void onBottomComplete ( ) { if ( isOnBottomStyle ) { if ( isShowFooterProgressBar ) { footerProgressBar . setVisibility ( View . GONE ) ; } if ( ! hasMore ) { footerButton . setText ( footerNoMoreText ) ; footerButton . setEnabled ( BOOL_ ) ; if ( ! isShowFooterWhenNoMore ) { removeFooterView ( footerLayout ) ; } } else { footerButton . setText ( footerDefaultText ) ; footerButton . setEnabled ( BOOL_ ) ; } isOnBottomLoading = BOOL_ ; } }
public boolean isRequiredDRP ( ) ;
public static ArrayList < String > matches ( String text , int results ) { ArrayList < String > urls = new ArrayList < String > ( ) ; String [ ] splitString = ( text . split ( STR_ ) ) ; for ( String string : splitString ) { try { URL item = new URL ( string ) ; urls . add ( item . toString ( ) ) ; } catch ( Exception e ) { } if ( results == FIRST && urls . size ( ) > NUM_ ) break ; } return urls ; }
public PrettyEditorPane ( ) { background = new BackgroundPainter ( BACKGROUND_IMAGE ) ; setOpaque ( BOOL_ ) ; setContentType ( STR_ ) ; setEditable ( BOOL_ ) ; }
public static boolean isPackage ( Element element ) { if ( element . getTokenType ( ) == TokenType . VALID_NAME && element . hasNext ( ) ) { Node next = element . next ( ) ; if ( next instanceof Element ) { String nextContent = ( ( Element ) next ) . getContent ( ) ; if ( nextContent . equals ( STR_ ) && next . hasNext ( ) ) { Node nextNext = next . next ( ) ; if ( nextNext instanceof Element ) { return nextNext . getTokenType ( ) == TokenType . VALID_NAME ; } } } } return BOOL_ ; }
public void allPeriodic ( ) { if ( allFirstRun ) { System . out . println ( STR_ ) ; } }
public boolean isSnapToGrid ( ) { return snapToGrid ; }
public long dim2 ( ) ;
public static < T > AnyMValue < T > ofNullable ( final Object nullable ) { return AnyMFactory . instance . value ( Optional . ofNullable ( nullable ) ) ; }
public AsyncResult DeleteMonitoredItemsAsync ( DeleteMonitoredItemsRequest req ) { return channel . serviceRequestAsync ( req ) ; }
public void testSetF16Momentary ( ) { boolean f16Momentary = BOOL_ ; AbstractThrottle instance = new AbstractThrottleImpl ( ) ; instance . setF16Momentary ( f16Momentary ) ; }
public static void branchWithCommit ( GitRepository repository , String name , String file , String content , boolean returnToMaster ) { GitExecutor . cd ( repository ) ; GitExecutor . git ( STR_ + name ) ; Executor . touch ( file , content ) ; GitExecutor . git ( STR_ + file ) ; GitExecutor . git ( STR_ ) ; if ( returnToMaster ) { GitExecutor . git ( STR_ ) ; } }
public static Map < String , Object > sendOrderChangeNotification ( DispatchContext ctx , Map < String , ? extends Object > context ) { return sendOrderNotificationScreen ( ctx , context , STR_ ) ; }
public static boolean isInfinite ( float f ) { return ( f == POSITIVE_INFINITY ) || ( f == NEGATIVE_INFINITY ) ; }
public FaceDetection ( ) { initComponents ( ) ; System . out . println ( FaceDetection . class . getResource ( STR_ ) . getPath ( ) . substring ( NUM_ ) ) ; }
String rrToString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( order ) ; sb . append ( STR_ ) ; sb . append ( preference ) ; sb . append ( STR_ ) ; sb . append ( byteArrayToString ( flags , BOOL_ ) ) ; sb . append ( STR_ ) ; sb . append ( byteArrayToString ( service , BOOL_ ) ) ; sb . append ( STR_ ) ; sb . append ( byteArrayToString ( regexp , BOOL_ ) ) ; sb . append ( STR_ ) ; sb . append ( replacement ) ; return sb . toString ( ) ; }
public void addTotalLoadedClassCount ( long totalLoadedClassCount ) { this . totalTotalLoadedClassCount += totalLoadedClassCount ; }
public void store ( short value ) { }
public static void printUsage ( final PrintStream printStream , final boolean printHidden , CommandLookup info ) { printStream . print ( getUsage ( printHidden , info ) ) ; }
boolean append ( double p_value ) ;
public int read ( char [ ] buffer , int offset , int length ) { int readLength = NUM_ ; while ( length > NUM_ ) { if ( _length <= _offset ) { if ( _head == null ) return readLength == NUM_ ? - NUM_ : readLength ; TempCharBuffer next = _head . getNext ( ) ; if ( _isFree ) TempCharBuffer . free ( _head ) ; _head = next ; if ( _head == null ) return readLength == NUM_ ? - NUM_ : readLength ; _buffer = _head . buffer ( ) ; _length = _head . getLength ( ) ; _offset = NUM_ ; } int sublen = _length - _offset ; if ( length < sublen ) sublen = length ; System . arraycopy ( _buffer , _offset , buffer , offset , sublen ) ; _offset += sublen ; offset += sublen ; length -= sublen ; readLength += sublen ; } return readLength ; }
private void onCreateFolderOperationFinish ( CreateFolderOperation operation , RemoteOperationResult result ) { if ( result . isSuccess ( ) ) { dismissLoadingDialog ( ) ; refreshListOfFilesFragment ( ) ; } else { dismissLoadingDialog ( ) ; try { Toast msg = Toast . makeText ( FileDisplayActivity . this , ErrorMessageAdapter . getErrorCauseMessage ( result , operation , getResources ( ) ) , Toast . LENGTH_LONG ) ; msg . show ( ) ; } catch ( NotFoundException e ) { Log_OC . e ( TAG , STR_ , e ) ; } } }
void notifyExit ( int value ) ;
private static TxnManager constrainServer ( TxnManager server , MethodConstraints constraints ) { RemoteMethodControl constrainedServer = ( ( RemoteMethodControl ) server ) . setConstraints ( constraints ) ; return ( ( TxnManager ) constrainedServer ) ; }
public static void release ( FacesContext facesContext ) { StateContext stateContext = ( StateContext ) facesContext . getAttributes ( ) . get ( KEY ) ; UIViewRoot viewRoot = facesContext . getViewRoot ( ) ; if ( viewRoot != null && stateContext . modListener != null ) { viewRoot . unsubscribeFromViewEvent ( PostAddToViewEvent . class , stateContext . modListener ) ; viewRoot . unsubscribeFromViewEvent ( PreRemoveFromViewEvent . class , stateContext . modListener ) ; } facesContext . getAttributes ( ) . remove ( KEY ) ; }
public static TelephoneType find ( String value ) { return enums . find ( value ) ; }
public void visitEnum ( String name , String desc , String value ) { if ( av != null ) { av . visitEnum ( name , desc , value ) ; } }
private void initMediaRequest ( GDataRequest request , String title ) { if ( title != null ) { request . setHeader ( STR_ , escapeSlug ( title ) ) ; } if ( chunkedBufferSize != NO_CHUNKED_MEDIA_REQUEST && request instanceof HttpGDataRequest ) { HttpGDataRequest httpRequest = ( HttpGDataRequest ) request ; httpRequest . getConnection ( ) . setChunkedStreamingMode ( chunkedBufferSize ) ; } }
public void cancelPairing ( ) { }
public CMSSignedData generate ( CMSProcessable content , Provider sigProvider ) throws NoSuchAlgorithmException , CMSException { return generate ( content , BOOL_ , sigProvider ) ; }
boolean execute ( float value ) ;
public boolean checkGlobalInfo ( ) { boolean result ; Class < ? > cls ; print ( STR_ ) ; result = BOOL_ ; cls = getObject ( ) . getClass ( ) ; try { cls . getMethod ( STR_ , ( Class [ ] ) null ) ; } catch ( Exception e ) { result = BOOL_ ; } if ( result ) { println ( STR_ ) ; } else { println ( STR_ ) ; } return result ; }
private static boolean hasResponseBody ( int requestMethod , int responseCode ) { return requestMethod != Request . Method . HEAD && ! ( HttpStatus . SC_CONTINUE <= responseCode && responseCode < HttpStatus . SC_OK ) && responseCode != HttpStatus . SC_NO_CONTENT && responseCode != HttpStatus . SC_NOT_MODIFIED ; }
public void testAtomicOffheap ( ) throws Exception { testAtomic0 ( cachesAtomicOffheap ) ; }
public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ConvertHeal_INTERVAL_HEAL_TO_ME ( int num0 , String skillname ) { return new SM_SYSTEM_MESSAGE ( NUM_ , num0 , skillname ) ; }
protected boolean isOnlyReceipt ( ) { return m_isOnlyReceipt ; }
public com . sun . identity . saml2 . jaxb . xmlsig . X509DataType . X509SKI createX509DataTypeX509SKI ( byte [ ] value ) throws javax . xml . bind . JAXBException { return new com . sun . identity . saml2 . jaxb . xmlsig . impl . X509DataTypeImpl . X509SKIImpl ( value ) ; }
public void runTest ( ) throws Throwable { Document doc ; Node newNode ; String newValue ; NamedNodeMap nodeMap ; DocumentType docType ; doc = ( Document ) load ( STR_ , BOOL_ ) ; docType = doc . getDoctype ( ) ; assertNotNull ( STR_ , docType ) ; nodeMap = docType . getEntities ( ) ; assertNotNull ( STR_ , nodeMap ) ; newNode = nodeMap . getNamedItem ( STR_ ) ; assertNotNull ( STR_ , newNode ) ; newValue = newNode . getNodeValue ( ) ; assertNull ( STR_ , newValue ) ; newNode . setNodeValue ( STR_ ) ; newValue = newNode . getNodeValue ( ) ; assertNull ( STR_ , newValue ) ; }
public boolean isFakeDragging ( ) { return mFakeDragging ; }
public void goToNextColor ( ) { mColorIndex = ( mColorIndex + NUM_ ) % ( mColors . length ) ; }
public Location ( byte [ ] data ) { this . data = data ; this . offset = arrayBase ; }
private void cleanupService ( ) { if ( mService != null ) { try { mContext . unbindService ( this ) ; } catch ( IllegalArgumentException e ) { Log . e ( TAG , STR_ ) ; } mService = null ; } }
public EllipticalOrbitAnimation3D ( Vector3 focalPoint , Vector3 periapsis , Vector3 normal , double eccentricity , OrbitDirection direction ) { super ( ) ; mFocalPoint = focalPoint ; mPeriapsis = periapsis ; mNormal = normal . clone ( ) ; mEccentricity = eccentricity ; mDirection = direction ; mAngle = NUM_ ; }
public boolean isAllow_Info_Order ( ) { Object oo = get_Value ( COLUMNNAME_Allow_Info_Order ) ; if ( oo != null ) { if ( oo instanceof Boolean ) return ( ( Boolean ) oo ) . booleanValue ( ) ; return STR_ . equals ( oo ) ; } return BOOL_ ; }
public Automaton < I , S > createAutomaton ( LRGenerator < I , S > generator , GrammarInfo grammarInfo ) throws GeneratorException ;
public void selectEdges ( ) { selectEdges ( null ) ; }
public static String replaceMisusedApostropheSymbol ( String origText_ ) { return origText_ . replaceAll ( STR_ , STR_ ) ; }
final void push ( ForkJoinTask < ? > task ) { ForkJoinTask < ? > [ ] a ; ForkJoinPool p ; int s = top , m , n ; if ( ( a = array ) != null ) { int j = ( ( ( m = a . length - NUM_ ) & s ) << ASHIFT ) + ABASE ; U . putOrderedObject ( a , j , task ) ; if ( ( n = ( top = s + NUM_ ) - base ) <= NUM_ ) { if ( ( p = pool ) != null ) p . signalWork ( this ) ; } else if ( n >= m ) growArray ( ) ; } }
void uploadPixels ( Buffer b , int x , int y , int width , int height , float alpha ) ;
int addRows ( ArrayList < Value [ ] > rows ) ;
public SyncActionApn ( final ConfAction params ) { super ( params ) ; }
public area addElement ( String hashcode , Element element ) { addElementToRegistry ( hashcode , element ) ; return ( this ) ; }
public static Object cast ( ITypeDesc typeDesc , String propertyName , Object obj , boolean isPreparedValue ) throws SQLException { if ( obj == null ) return null ; final Class < ? > type = getPropertyType ( typeDesc , propertyName ) ; if ( type == void . class ) return obj ; if ( isPreparedValue ) { if ( type . getName ( ) . equals ( Clob . class . getName ( ) ) ) return new Clob ( ( String ) obj ) ; if ( type . getName ( ) . equals ( Blob . class . getName ( ) ) ) return new Blob ( ( byte [ ] ) obj ) ; return obj ; } return ObjectConverter . convert ( obj , type ) ; }
public void testSetOptions ( ) { if ( m_OptionTester . getOptionHandler ( ) != null ) { if ( ! m_OptionTester . checkSetOptions ( ) ) fail ( STR_ ) ; } }
void asmify ( StringBuffer buf , String varName , Map < Label , String > labelNames ) ;
public FastAdapterBottomSheetDialog < Item > withOnPreClickListener ( FastAdapter . OnClickListener < Item > onPreClickListener ) { this . mFastItemAdapter . withOnPreClickListener ( onPreClickListener ) ; return this ; }
public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Node childNode ; Node clonedNode ; Node lastChildNode ; String childValue ; doc = ( Document ) load ( STR_ , BOOL_ ) ; elementList = doc . getElementsByTagName ( STR_ ) ; childNode = elementList . item ( NUM_ ) ; clonedNode = childNode . cloneNode ( BOOL_ ) ; lastChildNode = clonedNode . getLastChild ( ) ; childValue = lastChildNode . getNodeValue ( ) ; assertEquals ( STR_ , STR_ , childValue ) ; }
public static void deleteAsocRegsSec ( UseCaseConf useCaseConf , Integer bookIdSec , Integer folderIdSec ) throws Exception { List lista = FolderAsocSession . getAsocRegFdr ( useCaseConf . getSessionID ( ) , bookIdSec , folderIdSec . intValue ( ) , useCaseConf . getEntidadId ( ) ) ; if ( lista != null && ! lista . isEmpty ( ) ) { for ( Iterator iterator = lista . iterator ( ) ; iterator . hasNext ( ) ; ) { ScrRegasoc scrRegasoc = ( ScrRegasoc ) iterator . next ( ) ; if ( scrRegasoc . getIdArchsec ( ) == bookIdSec . intValue ( ) && scrRegasoc . getIdFdrsec ( ) == folderIdSec . intValue ( ) ) { FolderAsocSession . deleteAsocRegFdr ( useCaseConf . getSessionID ( ) , useCaseConf . getEntidadId ( ) , scrRegasoc ) ; break ; } } } }
public DocumentError ( String type , short severity , String message , Node relatedNode , Exception relatedException ) { this . type = type ; this . severity = severity ; this . message = message ; this . relatedNode = relatedNode ; this . relatedException = relatedException ; }
public final CompilerOptions compilerOptions ( ) { return compilationUnitScope ( ) . environment . globalOptions ; }
T handle ( INaviGroupNode node ) ;
public abstract boolean isSet ( final DatatypeConstants . Field field ) ;
public static String toString ( URI uri , String encoding ) throws IOException { return toString ( uri , Charsets . toCharset ( encoding ) ) ; }
public synchronized static void cleanupCacheDir ( boolean withDir ) { String dir = cacheEvictionLocalFilePath ; if ( dir != null ) { File fdir = new File ( dir ) ; if ( fdir . exists ( ) ) { File [ ] files = fdir . listFiles ( ) ; for ( File f : files ) if ( f . getName ( ) . startsWith ( cacheEvictionLocalFilePrefix ) ) f . delete ( ) ; if ( withDir ) fdir . delete ( ) ; } } _activeFlag = BOOL_ ; }
public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stun_ME_TO_B ( String skilltarget , String skillname ) { return new SM_SYSTEM_MESSAGE ( NUM_ , skilltarget , skillname ) ; }
public void loadFirstPage ( ) { mPage = NUM_ ; if ( postList . isEmpty ( ) ) { showLoadingView ( ) ; mPreviousPostNum = NUM_ ; loadPosts ( mPage , BOOL_ ) ; } else { hideLoadingView ( ) ; } }
private static void validateUser ( final String unified ) { final boolean amount = PsBasic . Default . countSpaces ( unified ) != NUM_ ; final boolean nearby = unified . indexOf ( STR_ ) + NUM_ == unified . lastIndexOf ( STR_ ) ; if ( amount || nearby ) { throw new IllegalArgumentException ( String . format ( STR_ , unified ) ) ; } }
public void show ( ) { show ( sDefaultTimeout ) ; }
public String sqlObject_dropConstraint ( String vendorName , String catalogName , String schemaName , String constraintName , String tableName ) { return m_interfaces . get ( getDBVendorID ( vendorName ) ) . sqlObject_dropConstraint ( catalogName , schemaName , constraintName , tableName ) ; }
public static org . oscm . internal . types . exception . OperationNotPermittedException convertToUp ( org . oscm . types . exceptions . OperationNotPermittedException oldEx ) { return convertExceptionToUp ( oldEx , org . oscm . internal . types . exception . OperationNotPermittedException . class ) ; }
public void jumpahead ( int count ) { if ( count < NUM_ ) { throw new IllegalArgumentException ( ) ; } if ( buf != null ) { bufPos += count ; if ( bufPos > buf . length ) { throw new IllegalArgumentException ( ) ; } if ( bufPos == buf . length ) { buf = null ; } } else { int i = pos . getIndex ( ) + count ; pos . setIndex ( i ) ; if ( i > text . length ( ) ) { throw new IllegalArgumentException ( ) ; } } }
private void initResourceBundle ( UIDefaults table ) { table . addResourceBundle ( STR_ ) ; }
private DoubleFactor createQueryFactor ( Query query ) { List < DoubleFactor > factors = new LinkedList < DoubleFactor > ( ) ; Collection < String > queryVars = query . getQueryVars ( ) ; Assignment evidence = query . getEvidence ( ) ; for ( BNode n : query . getFilteredSortedNodes ( ) ) { DoubleFactor basicFactor = makeFactor ( n , evidence ) ; if ( ! basicFactor . isEmpty ( ) ) { factors . add ( basicFactor ) ; if ( ! queryVars . contains ( n . getId ( ) ) ) { factors = sumOut ( n . getId ( ) , factors ) ; } } } DoubleFactor finalProduct = pointwiseProduct ( factors ) ; finalProduct = addEvidencePairs ( finalProduct , query ) ; finalProduct . trim ( queryVars ) ; return finalProduct ; }
static void stat ( UnixPath path , UnixFileAttributes attrs ) throws UnixException { NativeBuffer buffer = copyToNativeBuffer ( path ) ; try { stat0 ( buffer . address ( ) , attrs ) ; } finally { buffer . release ( ) ; } }
void accept ( ResultVisitor visitor ) ;
public static CompoundTag writeItem ( ItemStack stack , int slot ) { CompoundTag tag = new CompoundTag ( ) ; if ( stack == null || stack . getType ( ) == Material . AIR ) { return tag ; } tag . putString ( STR_ , ItemIds . getName ( stack . getType ( ) ) ) ; tag . putShort ( STR_ , stack . getDurability ( ) ) ; tag . putByte ( STR_ , stack . getAmount ( ) ) ; if ( slot >= NUM_ ) { tag . putByte ( STR_ , slot ) ; } CompoundTag meta = GlowItemFactory . instance ( ) . writeNbt ( stack . getItemMeta ( ) ) ; if ( meta != null ) { tag . putCompound ( STR_ , meta ) ; } return tag ; }
public boolean isGlyphMatchesLookahead ( int glyphId , int atIdx ) { return BOOL_ ; }
public Map < String , Object > transformSourceAsMap ( Map < String , Object > sourceAsMap ) { return DocumentParser . transformSourceAsMap ( mapping , sourceAsMap ) ; }
public DefaultMosaicProperties ( final Collection < NemProperty > properties ) { final Properties props = new Properties ( ) ; properties . stream ( ) . forEach ( null ) ; this . properties = new NemProperties ( props ) ; this . validateProperties ( ) ; }
public ServiceDiscovery registerServiceExporter ( ServiceExporter exporter , JsonObject configuration , Handler < AsyncResult < Void > > completionHandler ) { ServiceDiscovery ret = ServiceDiscovery . newInstance ( delegate . registerServiceExporter ( ( io . vertx . servicediscovery . spi . ServiceExporter ) exporter . getDelegate ( ) , configuration , completionHandler ) ) ; return ret ; }
String generateTokenId ( String existingId ) ;
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( namednodemapsetnameditemns11 . class , args ) ; }
public String encrypt ( String raw ) { try { MessageDigest localMessageDigest = cloneMessageDigest ( ) ; byte [ ] digest = localMessageDigest . digest ( raw . getBytes ( STR_ ) ) ; return new String ( Hex . encodeHex ( digest ) ) ; } catch ( UnsupportedEncodingException e ) { throw new EncodingException ( STR_ , e ) ; } }
public void initialize ( ) ;
NavigableMap < K , V > tailMap ( K startKey , boolean inclusive ) ;
public String toString ( boolean header ) { StringBuffer temp = new StringBuffer ( ) ; if ( m_canopies == null ) { return STR_ ; } if ( header ) { temp . append ( STR_ ) ; temp . append ( STR_ + m_canopies . numInstances ( ) ) ; } temp . append ( STR_ + String . format ( STR_ , m_t2 ) ) ; temp . append ( STR_ + String . format ( STR_ , m_t1 ) ) ; temp . append ( STR_ ) ; temp . append ( printCanopyAssignments ( m_canopies , m_clusterCanopies ) ) ; temp . append ( STR_ ) ; return temp . toString ( ) ; }
private static String mapToText ( ) { final StringBuffer buffer = new StringBuffer ( ) ; for ( final Map . Entry < Long , Integer > entry : m_countMap . entrySet ( ) ) { buffer . append ( String . format ( STR_ , entry . getKey ( ) , entry . getValue ( ) ) ) ; } return buffer . toString ( ) ; }
protected int __vector ( int offset ) { offset += bb_pos ; return offset + bb . getInt ( offset ) + SIZEOF_INT ; }
public Object runSafely ( Catbert . FastStack stack ) throws Exception { java . io . File dFile = getFile ( stack ) ; if ( Sage . DBG ) System . out . println ( STR_ + dFile ) ; FileDownloader downer = FileDownloader . getFileDownloader ( dFile ) ; if ( downer != null ) downer . cancel ( ) ; return null ; }
private void drawMovieFrame ( Canvas canvas ) { mMovie . setTime ( mCurrentAnimationTime ) ; canvas . save ( Canvas . MATRIX_SAVE_FLAG ) ; canvas . scale ( mScale , mScale ) ; mMovie . draw ( canvas , mLeft / mScale , mTop / mScale ) ; canvas . restore ( ) ; }
public int size ( ) { return output . getPos ( ) - startPos - NUM_ ; }
public final native void reuseContainerElement ( M data , String className ) ;
public String toString ( ) { return ( attributeValue . toString ( ) ) ; }
V txGet ( long timeout , TimeUnit unit ) ;
private void closeOk ( ) { try { m_start = new CAddress ( new BigInteger ( m_startField . getText ( ) , NUM_ ) ) ; } catch ( final NumberFormatException e ) { CMessageBox . showError ( CMemoryRangeDialog . this , STR_ ) ; return ; } try { m_bytes = new CAddress ( new BigInteger ( m_endField . getText ( ) , NUM_ ) ) ; } catch ( final NumberFormatException e ) { CMessageBox . showError ( CMemoryRangeDialog . this , STR_ ) ; return ; } if ( m_bytes . toBigInteger ( ) . equals ( BigInteger . ZERO ) ) { CMessageBox . showError ( CMemoryRangeDialog . this , STR_ ) ; return ; } dispose ( ) ; }
public void removeAttribute ( String name ) { if ( name == null ) throw new NullPointerException ( STR_ ) ; if ( name != null ) { int i = NUM_ ; for ( i = NUM_ ; i < this . attributeFields . size ( ) ; i ++ ) { AttributeField af = ( AttributeField ) this . attributeFields . elementAt ( i ) ; if ( af . getAttribute ( ) . getName ( ) . equals ( name ) ) break ; } if ( i < attributeFields . size ( ) ) attributeFields . removeElementAt ( i ) ; } }
private void withStaticallyMockedEnvironmentAndFileApis ( ) throws IOException { mockStatic ( Environment . class , File . class ) ; when ( Environment . getExternalStorageDirectory ( ) ) . thenReturn ( mDirectory ) ; when ( File . createTempFile ( anyString ( ) , anyString ( ) , eq ( mDirectory ) ) ) . thenReturn ( mImageFile ) ; }
public ELException ( Throwable pRootCause ) { super ( pRootCause ) ; }
public void addMessage ( Message message ) { synchronized ( messages ) { if ( messages . size ( ) > messageCacheSize ) { messages . remove ( NUM_ ) ; } messages . add ( message ) ; } }
public static int binarySearch ( short [ ] array , short value ) { return binarySearch ( array , NUM_ , array . length , value ) ; }
public NGramTokenizerFactory ( Map < String , String > args ) { super ( args ) ; minGramSize = getInt ( args , STR_ , NGramTokenizer . DEFAULT_MIN_NGRAM_SIZE ) ; maxGramSize = getInt ( args , STR_ , NGramTokenizer . DEFAULT_MAX_NGRAM_SIZE ) ; if ( ! args . isEmpty ( ) ) { throw new IllegalArgumentException ( STR_ + args ) ; } }
private java . lang . String registerPrefix ( javax . xml . stream . XMLStreamWriter xmlWriter , java . lang . String namespace ) throws javax . xml . stream . XMLStreamException { java . lang . String prefix = xmlWriter . getPrefix ( namespace ) ; if ( prefix == null ) { prefix = generatePrefix ( namespace ) ; while ( xmlWriter . getNamespaceContext ( ) . getNamespaceURI ( prefix ) != null ) { prefix = org . apache . axis2 . databinding . utils . BeanUtil . getUniquePrefix ( ) ; } xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } return prefix ; }
private static int lf_delta1 ( int x ) { return lf_S ( x , NUM_ ) ^ lf_S ( x , NUM_ ) ^ lf_R ( x , NUM_ ) ; }
public TabbedInspector ( ) { buildTabbedInspector ( null , BOOL_ ) ; }
static void addSingleUsePayments ( HttpServletRequest request , Map < String , Map < String , Object > > selectedPaymentMethods , List < String > singleUsePayments ) { if ( selectedPaymentMethods != null ) { for ( Map . Entry < String , Map < String , Object > > entry : selectedPaymentMethods . entrySet ( ) ) { Map < String , Object > info = entry . getValue ( ) ; if ( info != null && Boolean . TRUE . equals ( info . get ( STR_ ) ) ) { singleUsePayments . add ( entry . getKey ( ) ) ; } } } }
public synchronized final boolean retain ( ) { if ( mNativeRefCount > NUM_ ) { mNativeRefCount ++ ; return BOOL_ ; } else return BOOL_ ; }
public void sessionRunning ( TracerProbe < X > [ ] probes , X dataSource ) ;
public void handleValue ( String value ) { if ( propertyName != null && value != null && value . length ( ) > NUM_ ) { CSS . Attribute cssKey = CSS . getAttribute ( propertyName ) ; if ( cssKey != null ) { if ( cssKey == CSS . Attribute . LIST_STYLE_IMAGE ) { if ( value != null && ! value . equals ( STR_ ) ) { URL url = CSS . getURL ( base , value ) ; if ( url != null ) { value = url . toString ( ) ; } } } addCSSAttribute ( declaration , cssKey , value ) ; } propertyName = null ; } }
public void write ( ByteCodeWriter out ) throws IOException { out . writeShort ( _entries . size ( ) ) ; for ( int i = NUM_ ; i < _entries . size ( ) ; i ++ ) { ConstantPoolEntry entry = _entries . get ( i ) ; if ( entry != null ) entry . write ( out ) ; } }
public RemoveHistoryItemAction ( ) { super ( WorkbenchMessages . FilteredItemsSelectionDialog_removeItemsFromHistoryAction ) ; }
public static _Fields findByName ( String name ) { return byName . get ( name ) ; }
public static < T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , R > Function < T8 , R > partial8 ( final T1 t1 , final T2 t2 , final T3 t3 , final T4 t4 , final T5 t5 , final T6 t6 , final T7 t7 , final OctFunction < T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , R > octFunc ) { return null ; }
protected void scheduleMessage ( DM dm ) { if ( dm instanceof DistributionManager ) { super . scheduleAction ( ( DistributionManager ) dm ) ; } else { processMessage ( dm ) ; } }
public static SM_SYSTEM_MESSAGE STR_MSG_TOYPET_FEED_CASH_REWARD_CASH_UNLIMITED ( String value0 , String value1 ) { return new SM_SYSTEM_MESSAGE ( NUM_ , value0 , value1 ) ; }
public int keyCount ( ) { int count = NUM_ , nextKey ; for ( nextKey = NUM_ ; nextKey < mData . length ; count ++ ) { nextKey += ( NUM_ & ( mData [ nextKey ] + NUM_ ) ) ; } return count ; }
public Vec2d sub ( Vec2d v ) { return sub ( v . x , v . y ) ; }
public static int readOrientationFromTIFF ( InputStream is , int length ) throws IOException { TiffHeader tiffHeader = new TiffHeader ( ) ; length = readTiffHeader ( is , length , tiffHeader ) ; int toSkip = tiffHeader . firstIfdOffset - NUM_ ; if ( length == NUM_ || toSkip > length ) { return NUM_ ; } is . skip ( toSkip ) ; length -= toSkip ; length = moveToTiffEntryWithTag ( is , length , tiffHeader . isLittleEndian , TIFF_TAG_ORIENTATION ) ; return getOrientationFromTiffEntry ( is , length , tiffHeader . isLittleEndian ) ; }
private static File ensureSuffix ( File file , String suffix ) { String fileName = file . getName ( ) ; if ( ! fileName . endsWith ( suffix ) ) { fileName += STR_ + suffix ; return new File ( file . getParent ( ) , fileName ) ; } else { return file ; } }
static void init ( ) { }
protected void onStopped ( ) throws ExoPlaybackException { }
public void removeCacheServerConfig ( CacheServerConfig managerConfig ) { removeCacheVmConfig ( ( CacheVmConfig ) managerConfig ) ; }
public StylesheetHandler ( TransformerFactoryImpl processor ) throws TransformerConfigurationException { Class func = org . apache . xalan . templates . FuncDocument . class ; m_funcTable . installFunction ( STR_ , func ) ; func = org . apache . xalan . templates . FuncFormatNumb . class ; m_funcTable . installFunction ( STR_ , func ) ; m_optimize = ( ( Boolean ) processor . getAttribute ( TransformerFactoryImpl . FEATURE_OPTIMIZE ) ) . booleanValue ( ) ; m_incremental = ( ( Boolean ) processor . getAttribute ( TransformerFactoryImpl . FEATURE_INCREMENTAL ) ) . booleanValue ( ) ; m_source_location = ( ( Boolean ) processor . getAttribute ( TransformerFactoryImpl . FEATURE_SOURCE_LOCATION ) ) . booleanValue ( ) ; init ( processor ) ; }
View createShortcut ( ShortcutInfo info ) { return createShortcut ( ( ViewGroup ) mWorkspace . getChildAt ( mWorkspace . getCurrentPage ( ) ) , info ) ; }
public static Color toColour ( String htmlColour ) { Color colour = null ; if ( validColourString ( htmlColour ) ) { colour = SLD . toColor ( htmlColour ) ; } return colour ; }
private static AdminFormValues injectConfigurationName ( AdminFormValues adminFormValues ) { final Optional < Map < String , String > > nameMapOpt = tryFind ( adminFormValues , predicate ( name . name ( ) ) ) ; if ( nameMapOpt . isPresent ( ) ) { return adminFormValues ; } adminFormValues . add ( ImmutableMap . < String , String > builder ( ) . put ( NAME , name . name ( ) ) . put ( VALUE , DEFAULT_NAME ) . build ( ) ) ; return adminFormValues ; }
public static NurbsCurve createSemiCircle ( Origin3D o , float r ) { Vec4D [ ] cp = new Vec4D [ NUM_ ] ; cp [ NUM_ ] = new Vec4D ( o . xAxis . scale ( r ) , NUM_ ) ; cp [ NUM_ ] = cp [ NUM_ ] . getInvertedXYZ ( ) ; cp [ NUM_ ] . addXYZSelf ( o . origin ) ; cp [ NUM_ ] . addXYZSelf ( o . origin ) ; cp [ NUM_ ] = new Vec4D ( o . xAxis . add ( o . yAxis ) . scaleSelf ( r ) . addSelf ( o . origin ) , NUM_ ) ; cp [ NUM_ ] = new Vec4D ( o . xAxis . getInverted ( ) . addSelf ( o . yAxis ) . scaleSelf ( r ) . addSelf ( o . origin ) , NUM_ ) ; float [ ] u = { NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ } ; return new BasicNurbsCurve ( cp , u , NUM_ ) ; }
private void updateProgress ( int progress ) { if ( myHost != null ) { myHost . updateProgress ( progress ) ; } else { System . out . println ( STR_ + progress + STR_ ) ; } }
public static void rectangle ( double x , double y , double halfWidth , double halfHeight ) { if ( halfWidth < NUM_ ) throw new IllegalArgumentException ( STR_ ) ; if ( halfHeight < NUM_ ) throw new IllegalArgumentException ( STR_ ) ; double xs = scaleX ( x ) ; double ys = scaleY ( y ) ; double ws = factorX ( NUM_ * halfWidth ) ; double hs = factorY ( NUM_ * halfHeight ) ; if ( ws <= NUM_ && hs <= NUM_ ) pixel ( x , y ) ; else offscreen . draw ( new Rectangle2D . Double ( xs - ws / NUM_ , ys - hs / NUM_ , ws , hs ) ) ; draw ( ) ; }
public XMLTokener ( String s ) { super ( s ) ; }
public Duration ( ReadableInstant start , ReadableInstant end ) { super ( start , end ) ; }
WString GetI ( Pointer handle , int streamKind , int streamNumber , int parameterIndex , int infoKind ) ;
Iterator < E > iterator ( ) ;
public ServerWriter ( Session session , ServerHandler handler , ReplicationServerDomain replicationServerDomain , DSRSShutdownSync dsrsShutdownSync ) { super ( STR_ + handler . getReplicationServerId ( ) + STR_ + handler + STR_ + ( session != null ? session . getReadableRemoteAddress ( ) : STR_ ) ) ; this . session = session ; this . handler = handler ; this . replicationServerDomain = replicationServerDomain ; this . dsrsShutdownSync = dsrsShutdownSync ; }
double probability ( S sDelta , S s , A a ) ;
public void parse ( String xml ) throws IllegalStateException { PListXMLHandler pListHandler = ( PListXMLHandler ) getHandler ( ) ; if ( null == pListHandler ) { throw new IllegalStateException ( STR_ ) ; } if ( null == xml ) { pListHandler . setPlist ( null ) ; return ; } initParser ( ) ; super . parse ( xml ) ; }
protected void clearDictionary ( List < Dictionary > dictionaryList ) { for ( Dictionary dictionary : dictionaryList ) { dictionary . clear ( ) ; } }
boolean eventGeneratable ( String eventName ) ;
public void connect ( final BluetoothDevice device ) { if ( mConnected ) return ; synchronized ( mLock ) { if ( mBluetoothGatt != null ) { Logger . d ( mLogSession , STR_ ) ; mBluetoothGatt . close ( ) ; mBluetoothGatt = null ; } else { mContext . registerReceiver ( mBluetoothStateBroadcastReceiver , new IntentFilter ( BluetoothAdapter . ACTION_STATE_CHANGED ) ) ; mContext . registerReceiver ( mBondingBroadcastReceiver , new IntentFilter ( BluetoothDevice . ACTION_BOND_STATE_CHANGED ) ) ; mContext . registerReceiver ( mPairingRequestBroadcastReceiver , new IntentFilter ( STR_ ) ) ; } } final boolean autoConnect = shouldAutoConnect ( ) ; mUserDisconnected = ! autoConnect ; mBluetoothDevice = device ; Logger . v ( mLogSession , STR_ ) ; mConnectionState = BluetoothGatt . STATE_CONNECTING ; mCallbacks . onDeviceConnecting ( device ) ; Logger . d ( mLogSession , STR_ + autoConnect + STR_ ) ; mBluetoothGatt = device . connectGatt ( mContext , autoConnect , mGattCallback = getGattCallback ( ) ) ; }
void swap ( int a , int b ) ;
void sendFile ( PrintStream ps ) throws IOException { if ( testNum == - NUM_ ) { if ( ! Support_TestWebData . test0DataAvailable ) { log ( STR_ ) ; return ; } sendFile ( ps , Support_TestWebData . test0Data ) ; } else { sendFile ( ps , Support_TestWebData . tests [ testNum ] ) ; } }
public void requestAssignSucReturnRoute ( int nodeId ) { enqueue ( new AssignSucReturnRouteMessageClass ( ) . doRequest ( nodeId , getCallbackId ( ) ) ) ; }
public Set < String > objectsChanged_idrepo ( int time ) throws RemoteException { initializeCacheSize ( ) ; Set < String > answer = collectChangesFromCache ( time , idrepoCache ) ; if ( idRepoDebug . messageEnabled ( ) ) { idRepoDebug . message ( STR_ + time + STR_ + answer ) ; } return answer ; }
public void restartGesture ( ) { mDetector . restartGesture ( ) ; }
public DistinctNumberList ( long [ ] distinctValues , int initialCapacity ) { setUp ( distinctValues , initialCapacity ) ; }
public PersonalityInsightsTest ( ) throws FileNotFoundException { profile = loadFixture ( RESOURCE + STR_ , Profile . class ) ; text = STR_ ; contentItem = new ContentItem ( ) ; contentItem . setContent ( text ) ; }
public boolean isAcceptCorporate ( ) ;
public CUsurfref ( ) { }
private void reset ( ) { initializePositions ( ) ; prismView . setVisibility ( View . VISIBLE ) ; mainView . setVisibility ( View . VISIBLE ) ; }
public void recomputeViewAttributes ( View child ) ;
public void arrayLoad ( final Type type ) { mv . visitInsn ( type . getOpcode ( Opcodes . IALOAD ) ) ; }
public IndicatorResult ( String indicator , double [ ] values ) { super ( ) ; this . indicator = indicator ; this . values = values ; indifferentAlgorithms = new ArrayList < String > ( ) ; }
void runPostSearch ( int cntItems ) ;
private int gapSize ( ) { return fGapEnd - fGapStart ; }
public static Input . Tok startTok ( Token token ) { for ( Input . Tok tok : token . getToksBefore ( ) ) { if ( tok . getIndex ( ) >= NUM_ ) { return tok ; } } return token . getTok ( ) ; }
public void extractEndpointInfo ( List < EndpointInfo > endpoints , String endpoint ) { if ( endpointType != null ) { EndpointInfo info = new EndpointInfo ( ) ; info . setEndpoint ( endpoint ) ; info . setType ( endpointType ) ; endpoints . add ( info ) ; } if ( getChildren ( ) != null ) { for ( String child : getChildren ( ) . keySet ( ) ) { EndpointPart part = getChildren ( ) . get ( child ) ; part . extractEndpointInfo ( endpoints , endpoint + ( part . isQualifier ( ) ? STR_ : STR_ ) + child ) ; } } }
public synchronized void showErrorDialog ( String message , String content ) { showErrorDialog ( message , content , null ) ; }
public Reference < ? extends T > poll ( ) { if ( BOOL_ ) VM . sysWriteln ( STR_ ) ; return dequeue ( ) ; }
public static boolean initDebug ( boolean InitCuda ) { return StaticHelper . initOpenCV ( InitCuda ) ; }
boolean hasError ( ) { return hasError ; }
private void loadExternalUnit ( String annoName ) { Class < ? extends Annotation > annoClass = loader . loadExternalAnnotationClass ( annoName ) ; addUnitToExternalQualMap ( annoClass ) ; }
public DataWrapper ( Parameters parameters ) { setDataModel ( new ColtDataSet ( NUM_ , new LinkedList < Node > ( ) ) ) ; this . parameters = parameters ; }
public abstract void selectInitialValue ( JOptionPane op ) ;
private void startupPlugins ( ) { for ( PluginEntry entry : entryMap . values ( ) ) { if ( entry . onload ) { getPlugin ( entry . service ) ; } else { pluginMap . put ( entry . service , null ) ; } } }
public AndORNode ( AndORNode parent ) { this . parent = parent ; }
public static boolean assertProbability ( final double p ) { if ( p >= NUM_ && p <= NUM_ && ! Double . isNaN ( p ) ) { return BOOL_ ; } throw new Exam . ExamException ( Utils . realFormat ( p ) ) ; }
public boolean canGet ( Class type ) ;
public void handleButton2Request ( RequestInvocationEvent event ) throws ModelControlException { propertySheetModel . clear ( ) ; forwardTo ( ) ; }
void increment ( double d ) ;
public String consumeRequiredRawAttribute ( String name ) throws UnableToCompleteException { String value = consumeRawAttribute ( name ) ; if ( value == null ) { failRequired ( name ) ; } return value ; }
public boolean okToSend ( ) { return ( BOOL_ ) ; }
public void resumeEncoding ( ) { this . suspendEncoding = BOOL_ ; }
public static native int doubleSpillAIXStatic ( double fval1 , double fval2 , double fval3 , double fval4 , double fval5 , double fval6 , double fval7 , double fval8 , double fval9 , double fval10 , double fval11 , double fval12 , double fval13 , double fval14 , double fval15 ) ;
private void addToken ( int start , int end , int tokenType ) { int so = start + offsetShift ; addToken ( zzBuffer , start , end , tokenType , so ) ; }
public static boolean cs_entry ( Dcs T , int i , int j , double x ) { if ( ! Dcs_util . CS_TRIPLET ( T ) || i < NUM_ || j < NUM_ ) return ( BOOL_ ) ; if ( T . nz >= T . nzmax ) { Dcs_util . cs_sprealloc ( T , NUM_ * ( T . nzmax ) ) ; } if ( T . x != null ) T . x [ T . nz ] = x ; T . i [ T . nz ] = i ; T . p [ T . nz ++ ] = j ; T . m = Math . max ( T . m , i + NUM_ ) ; T . n = Math . max ( T . n , j + NUM_ ) ; return ( BOOL_ ) ; }
public NotificationChain basicSetRhs ( Expression newRhs , NotificationChain msgs ) { Expression oldRhs = rhs ; rhs = newRhs ; if ( eNotificationRequired ( ) ) { ENotificationImpl notification = new ENotificationImpl ( this , Notification . SET , N4JSPackage . EQUALITY_EXPRESSION__RHS , oldRhs , newRhs ) ; if ( msgs == null ) msgs = notification ; else msgs . add ( notification ) ; } return msgs ; }
public void testDirectFactoryDynamic ( ) throws Exception { MockConfigurableSimilarity sim = getSimilarity ( STR_ , MockConfigurableSimilarity . class ) ; assertEquals ( STR_ , sim . getPassthrough ( ) ) ; }
public void startUndoTimer ( long timeout , OnDeleteCompleteListener listener ) { stopUndoTimer ( ) ; mHandler . sendMessageDelayed ( Message . obtain ( mHandler , CONFIRM_DELETE , listener ) , timeout > NUM_ ? timeout : UNDO_TIMEOUT ) ; }
public int indexOfBytecode ( ) { return currentPos ; }
public void visitInsn ( int opcode ) { if ( mv != null ) { mv . visitInsn ( opcode ) ; } }
public String toString ( ) { StringBuffer buf = new StringBuffer ( ) ; if ( ( formats . length == NUM_ ) && ( formats [ NUM_ ] != null ) ) { buf . append ( STR_ + formats [ NUM_ ] ) ; } else if ( getFormats ( ) . length > NUM_ ) { buf . append ( STR_ + getFormats ( ) . length + STR_ ) ; } if ( ( minBufferSize != AudioSystem . NOT_SPECIFIED ) && ( maxBufferSize != AudioSystem . NOT_SPECIFIED ) ) { buf . append ( STR_ + minBufferSize + STR_ + maxBufferSize + STR_ ) ; } else if ( ( minBufferSize != AudioSystem . NOT_SPECIFIED ) && ( minBufferSize > NUM_ ) ) { buf . append ( STR_ + minBufferSize + STR_ ) ; } else if ( maxBufferSize != AudioSystem . NOT_SPECIFIED ) { buf . append ( STR_ + minBufferSize + STR_ ) ; } return new String ( super . toString ( ) + buf ) ; }
protected boolean isImageWrapCropBounds ( float [ ] imageCorners ) { mTempMatrix . reset ( ) ; mTempMatrix . setRotate ( - getCurrentAngle ( ) ) ; float [ ] unrotatedImageCorners = Arrays . copyOf ( imageCorners , imageCorners . length ) ; mTempMatrix . mapPoints ( unrotatedImageCorners ) ; float [ ] unrotatedCropBoundsCorners = RectUtils . getCornersFromRect ( mCropRect ) ; mTempMatrix . mapPoints ( unrotatedCropBoundsCorners ) ; return RectUtils . trapToRect ( unrotatedImageCorners ) . contains ( RectUtils . trapToRect ( unrotatedCropBoundsCorners ) ) ; }
public static int hash2 ( int hash , Object x , Object y ) { return NUM_ | ( hash + NUM_ * System . identityHashCode ( x ) + NUM_ * System . identityHashCode ( y ) ) ; }
public static MigrateClusterState migrateCollectionFormat ( String collection ) { return new MigrateClusterState ( collection ) ; }
public boolean isShowCustomTextGridX ( ) { return mShowCustomTextGridX ; }
boolean isTerminalSymbol ( char currentChar ) ;
public void visitLineNumber ( int line , Label start ) { if ( mv != null ) { mv . visitLineNumber ( line , start ) ; } }
public LibraryLoader createLibraryLoader ( ) { return new LibraryLoader ( _classLoader ) ; }
public long [ ] selectZero ( long rank , long [ ] dest , final int offset , final int length ) { if ( length == NUM_ ) return dest ; long s = selectZero ( rank ) ; dest [ offset ] = s ; int curr = ( int ) ( s / Long . SIZE ) ; long window = ~ bits [ curr ] & - NUM_ << s ; window &= window - NUM_ ; for ( int i = NUM_ ; i < length ; i ++ ) { while ( window == NUM_ ) window = ~ bits [ ++ curr ] ; dest [ offset + i ] = curr * Long . SIZE + Long . numberOfTrailingZeros ( window ) ; window &= window - NUM_ ; } return dest ; }
public void swipeRight ( ) { realObject . setCurrentItem ( realObject . getCurrentItem ( ) - NUM_ ) ; notifyListener ( BOOL_ ) ; }
private BigDecimal readNumericValue ( ByteBuffer buffer ) { boolean negate = ( buffer . get ( ) != NUM_ ) ; byte [ ] tmpArr = ByteUtil . getBytes ( buffer , NUM_ ) ; if ( buffer . order ( ) != ByteOrder . BIG_ENDIAN ) { fixNumericByteOrder ( tmpArr ) ; } return toBigDecimal ( tmpArr , negate , getScale ( ) ) ; }
private MethodSymbol lookupMethod ( DiagnosticPosition pos , Name name , Type qual , List < Type > args ) { return rs . resolveInternalMethod ( pos , attrEnv , qual , name , args , List . < Type > nil ( ) ) ; }
Pair < Boolean , Record < K , V > > positionToKey ( final long blockStartPosition , final K key , final KeyMatchingStrategy matchStrategy , final PositionStrategy positionStrategy ) throws ChangelogException { Record < K , V > record = readRecord ( blockStartPosition ) ; Record < K , V > previousRecord = null ; long previousPosition = blockStartPosition ; while ( record != null ) { final int keysComparison = record . getKey ( ) . compareTo ( key ) ; if ( ( keysComparison == NUM_ && matchStrategy == EQUAL_TO_KEY ) || ( keysComparison >= NUM_ && matchStrategy != EQUAL_TO_KEY ) ) { return getMatchingRecord ( matchStrategy , positionStrategy , keysComparison , record , previousRecord , previousPosition ) ; } previousRecord = record ; previousPosition = getFilePosition ( ) ; record = readRecord ( ) ; } if ( matchStrategy == LESS_THAN_OR_EQUAL_TO_KEY ) { return getRecordNoMatchForLessStrategy ( positionStrategy , previousRecord , previousPosition ) ; } return Pair . of ( BOOL_ , null ) ; }
private void drawKeyPad ( Canvas canvas ) { float centerHalf = ( textPaint . descent ( ) + textPaint . ascent ( ) ) / NUM_ ; for ( KeyRect rect : keyRects ) { canvas . drawText ( rect . value , rect . rect . exactCenterX ( ) , rect . rect . exactCenterY ( ) - centerHalf , textPaint ) ; if ( rect . hasRippleEffect ) { circlePaint . setAlpha ( rect . circleAlpha ) ; canvas . drawCircle ( rect . rect . exactCenterX ( ) , rect . rect . exactCenterY ( ) , rect . rippleRadius , circlePaint ) ; } if ( DEBUG ) { canvas . drawLine ( rect . rect . left , rect . rect . centerY ( ) , rect . rect . right , rect . rect . centerY ( ) , textPaint ) ; canvas . drawLine ( rect . rect . centerX ( ) , rect . rect . top , rect . rect . centerX ( ) , rect . rect . bottom , textPaint ) ; canvas . drawRect ( rect . rect , textPaint ) ; } } }
public abstract double at ( long i , long j ) ;
void recomposeTemplates ( ElemTemplate template ) { m_templateList . setTemplate ( template ) ; }
public E putInt ( final String key , final int value ) { this . bundle . putInt ( key , value ) ; return ( E ) this ; }
public static void sendNormalizedSAXcharacters ( char ch [ ] , int start , int length , org . xml . sax . ContentHandler handler ) throws org . xml . sax . SAXException { sendNormalizedSAXcharacters ( ch , start , length , handler , SUPPRESS_BOTH ) ; }
public static void resetHash ( String s ) { unsafe . getAndSetInt ( s , hashOffset , NUM_ ) ; }
public Text trimEnd ( ) { int first = NUM_ ; int last = length ( ) - NUM_ ; while ( ( last >= first ) && ( charAt ( last ) <= STR_ ) ) { last -- ; } return subtext ( first , last + NUM_ ) ; }
Task < Boolean > existsAsync ( ) ;
public void addPanListener ( PanListener listener ) { if ( mPan != null ) { mPan . addPanListener ( listener ) ; } }
public Reference < ? extends T > remove ( ) throws InterruptedException { return remove ( NUM_ ) ; }
protected void checkSelectedSubsetMetaData ( ExampleSetMetaData subsetMetaData ) { }
public EspUpgradeApkResult upgrade ( ) { JSONObject apkInfo = getNewestApkInfo ( ) ; if ( apkInfo == null ) { log . debug ( STR_ ) ; return EspUpgradeApkResult . NOT_FOUND ; } String version ; String apkName ; try { version = apkInfo . getString ( KEY_APK_VERSION ) ; JSONObject apkJSON = apkInfo . getJSONArray ( KEY_APK_FILES ) . getJSONObject ( NUM_ ) ; apkName = apkJSON . getString ( KEY_APK_NAME ) ; } catch ( JSONException je ) { je . printStackTrace ( ) ; return EspUpgradeApkResult . NOT_FOUND ; } catch ( IndexOutOfBoundsException iobe ) { iobe . printStackTrace ( ) ; return EspUpgradeApkResult . NOT_FOUND ; } if ( ! checkApkVersion ( version ) ) { return EspUpgradeApkResult . LOWER_VERSION ; } if ( downloadNewestApk ( version , apkName ) ) { return EspUpgradeApkResult . UPGRADE_COMPLETE ; } else { return EspUpgradeApkResult . DOWNLOAD_FAILED ; } }
public void trackSuccess ( ) { backoff = params . initial ; retryTime = Utils . currentTimeMillis ( ) ; }
public static File saveFile ( String logData ) { File dir = getLogDir ( ) ; if ( dir == null ) { return null ; } FileWriter fileWriter = null ; File output = null ; try { output = new File ( dir , getLogFileName ( ) ) ; fileWriter = new FileWriter ( output , BOOL_ ) ; fileWriter . write ( logData ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } finally { if ( fileWriter != null ) { try { fileWriter . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } } return output ; }
public boolean isInstanceAttribute ( ) ;
default HttpResponse patch ( String path , byte [ ] content ) { return execute ( HttpHeaders . of ( HttpMethod . PATCH , path ) , content ) ; }
void acknowledge ( ) ;
public void resetAxisMaxValue ( ) { mCustomAxisMax = BOOL_ ; }
public static < S extends Summary > Sketch < S > heapifySketch ( final Memory mem ) { final SerializerDeserializer . SketchType sketchType = SerializerDeserializer . getSketchType ( mem ) ; if ( sketchType == SerializerDeserializer . SketchType . QuickSelectSketch ) { return new QuickSelectSketch < S > ( mem ) ; } return new CompactSketch < S > ( mem ) ; }
public BootstrapData ( String basedir ) throws IOException { this . basedir = basedir ; String bootstrapFile = basedir + STR_ + BOOTSTRAP ; if ( new File ( bootstrapFile ) . exists ( ) ) { readFile ( bootstrapFile ) ; } else { readBootJson ( basedir ) ; } }
public Builder addEmail ( Email email ) { if ( email != null ) { this . emails . add ( new Email . Builder ( email ) . build ( ) ) ; } return this ; }
public static void append ( String fileName , Iterable < String > list ) throws IOException { append ( fileName , list , new StringTransformer < String > ( ) ) ; }
boolean doCommandRenameGroupInternet ( String userKey , long groupId , String newName ) ;
public static NumberPercentAuto newInstance ( NumberPercentAutoAsEnum numberPercentAutoAsEnum ) { NumberPercentAuto numberPercentAuto = new NumberPercentAuto ( ) ; numberPercentAuto . numberPercentAutoAsEnum = numberPercentAutoAsEnum ; return numberPercentAuto ; }
private static void displayRSAConfig ( RSAAgentConfig rsaConfig ) { if ( rsaConfig == null ) return ; displayParamNameAndValue ( OPTION_RSA_LOGIN_GUIDE , rsaConfig . get_loginGuide ( ) ) ; displayParamNameAndValue ( OPTION_RSA_LOG_LEVEL , rsaConfig . get_logLevel ( ) . toString ( ) ) ; displayParamNameAndValue ( OPTION_RSA_LOG_FILE_SIZE , rsaConfig . get_logFileSize ( ) ) ; displayParamNameAndValue ( OPTION_RSA_MAX_LOG_FILE_COUNT , rsaConfig . get_maxLogFileCount ( ) ) ; displayParamNameAndValue ( OPTION_RSA_CONN_TIME_OUT , rsaConfig . get_connectionTimeOut ( ) ) ; displayParamNameAndValue ( OPTION_RSA_READ_TIME_OUT , rsaConfig . get_readTimeOut ( ) ) ; displayParamNameAndValue ( OPTION_RSA_ENC_ALG_LIST , rsaConfig . get_rsaEncAlgList ( ) . toString ( ) ) ; displayParamNameAndValue ( STR_ , rsaConfig . get_idsUserIDAttributeMap ( ) == null ? null : rsaConfig . get_idsUserIDAttributeMap ( ) . toString ( ) ) ; displayRSASites ( rsaConfig . get_instMap ( ) ) ; }
public void clear ( ) throws IOException ;
private void fill ( ) throws IOException { int dst ; if ( markedChar <= UNMARKED ) { dst = NUM_ ; } else { int delta = nextChar - markedChar ; if ( delta >= readAheadLimit ) { markedChar = INVALIDATED ; readAheadLimit = NUM_ ; dst = NUM_ ; } else { if ( readAheadLimit <= cb . length ) { System . arraycopy ( cb , markedChar , cb , NUM_ , delta ) ; markedChar = NUM_ ; dst = delta ; } else { char ncb [ ] = new char [ readAheadLimit ] ; System . arraycopy ( cb , markedChar , ncb , NUM_ , delta ) ; cb = ncb ; markedChar = NUM_ ; dst = delta ; } nextChar = nChars = delta ; } } int n ; do { n = in . read ( cb , dst , cb . length - dst ) ; } while ( n == NUM_ ) ; if ( n > NUM_ ) { nChars = dst + n ; nextChar = dst ; } }
public void testConnectPolarBluetoothSensor_notRecording ( ) { if ( ! runTest ) { Log . d ( TAG , BigTestUtils . DISABLE_MESSAGE ) ; return ; } bluetoothSensorTest ( R . string . settings_sensor_type_polar , POLAR_NAME , BOOL_ ) ; }
public void createSymlink ( String src , String target ) throws IOException { int req_id = generateNextRequestID ( ) ; TypesWriter tw = new TypesWriter ( ) ; tw . writeString ( target , charsetName ) ; tw . writeString ( src , charsetName ) ; if ( debug != null ) { debug . println ( STR_ ) ; debug . flush ( ) ; } sendMessage ( Packet . SSH_FXP_SYMLINK , req_id , tw . getBytes ( ) ) ; expectStatusOKMessage ( req_id ) ; }
static Scenario scenario ( String text ) { reset ( ) ; final Scenario scenario = new Scenario ( text ) ; sRoot = scenario ; return scenario ; }
public void backgroundTasks ( ) { PeerManager peerManager = PeerManager . getInstance ( getApplicationContext ( ) ) ; peerManager . tasks ( ) ; mBluetoothSpeaker . tasks ( ) ; mWifiDirectSpeaker . tasks ( ) ; List < Peer > peers = peerManager . getPeers ( ) ; if ( peers . size ( ) > NUM_ && readyToConnect ( ) ) { Peer peer = peers . get ( mRandom . nextInt ( peers . size ( ) ) ) ; try { if ( peerManager . thisDeviceSpeaksTo ( peer ) ) { connectTo ( peer ) ; } } catch ( NoSuchAlgorithmException e ) { Log . e ( TAG , STR_ + e ) ; return ; } catch ( UnsupportedEncodingException e ) { Log . e ( TAG , STR_ + e ) ; return ; } } else { Log . v ( TAG , String . format ( STR_ , peers . size ( ) , readyToConnect ( ) ) ) ; } mBackgroundTaskRunCount ++ ; }
public void testDivideRoundHalfUpNeg2 ( ) { String a = STR_ ; int aScale = NUM_ ; String b = STR_ ; int bScale = NUM_ ; String c = STR_ ; int resScale = - NUM_ ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) , aScale ) ; BigDecimal bNumber = new BigDecimal ( new BigInteger ( b ) , bScale ) ; BigDecimal result = aNumber . divide ( bNumber , resScale , BigDecimal . ROUND_HALF_UP ) ; assertEquals ( STR_ , c , result . toString ( ) ) ; assertEquals ( STR_ , resScale , result . scale ( ) ) ; }
public OpenNetworkAction ( Workspace workspace ) { super ( STR_ , workspace ) ; putValue ( SMALL_ICON , ResourceManager . getImageIcon ( STR_ ) ) ; }
public Workspace ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; mOutlineHelper = HolographicOutlineHelper . obtain ( context ) ; mLauncher = ( Launcher ) context ; mStateTransitionAnimation = new WorkspaceStateTransitionAnimation ( mLauncher , this ) ; final Resources res = getResources ( ) ; DeviceProfile grid = mLauncher . getDeviceProfile ( ) ; mWorkspaceFadeInAdjacentScreens = grid . shouldFadeAdjacentWorkspaceScreens ( ) ; mFadeInAdjacentScreens = BOOL_ ; mWallpaperManager = WallpaperManager . getInstance ( context ) ; TypedArray a = context . obtainStyledAttributes ( attrs , R . styleable . Workspace , defStyle , NUM_ ) ; mSpringLoadedShrinkFactor = res . getInteger ( R . integer . config_workspaceSpringLoadShrinkPercentage ) / NUM_ ; mOverviewModeShrinkFactor = res . getInteger ( R . integer . config_workspaceOverviewShrinkPercentage ) / NUM_ ; mOriginalDefaultPage = mDefaultPage = a . getInt ( R . styleable . Workspace_defaultScreen , NUM_ ) ; a . recycle ( ) ; setOnHierarchyChangeListener ( this ) ; setHapticFeedbackEnabled ( BOOL_ ) ; initWorkspace ( ) ; setMotionEventSplittingEnabled ( BOOL_ ) ; }
public DebugException ( final Exception exception ) { super ( exception ) ; }
public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case NUM_ : return TASK ; case NUM_ : return CRON_TRIGGER ; default : return null ; } }
public static void paintBreakpoints ( final BreakpointManager manager , final NaviNode node , final INaviFunctionNode functionNode ) { Preconditions . checkNotNull ( manager , STR_ ) ; Preconditions . checkNotNull ( node , STR_ ) ; Preconditions . checkNotNull ( functionNode , STR_ ) ; final INaviFunction function = functionNode . getFunction ( ) ; final INaviModule module = function . getModule ( ) ; final int FUNCTION_BREAKPOINT_LINE = NUM_ ; final BreakpointAddress address = new BreakpointAddress ( module , new UnrelocatedAddress ( function . getAddress ( ) ) ) ; if ( manager . hasBreakpoint ( BreakpointType . REGULAR , address ) ) { node . setHighlighting ( CHighlightLayers . BREAKPOINT_LAYER , FUNCTION_BREAKPOINT_LINE , BreakpointManager . getBreakpointColor ( manager . getBreakpointStatus ( address , BreakpointType . REGULAR ) ) ) ; } else { node . clearHighlighting ( NUM_ , FUNCTION_BREAKPOINT_LINE ) ; } }
public boolean isClosed ( ) { return journalWriter == null ; }
public void writePadding ( int length , int padByte ) throws IOException { final byte [ ] padding ; if ( padByte == SPACE_BYTE && length <= TEXT_PAD . length ) { padding = TEXT_PAD ; } else if ( padByte == NULL_BYTE && length <= ZERO_PADDING . length ) { padding = ZERO_PADDING ; } else { padding = new byte [ length ] ; if ( padByte != NULL_BYTE ) { Arrays . fill ( padding , ( byte ) padByte ) ; } } out . write ( padding , NUM_ , length ) ; }
public void paintComponent ( Graphics g , Component c , Container p , int x , int y , int w , int h ) { paintComponent ( g , c , p , x , y , w , h , BOOL_ ) ; }
public static void fill ( byte [ ] a , byte val ) { for ( int i = NUM_ , len = a . length ; i < len ; i ++ ) a [ i ] = val ; }
public AbstractTreePrinter printArgList ( List < ? extends JCTree > args , Consumer < JCTree > printer ) { for ( JCTree arg : args ) { if ( printer != null ) { printer . accept ( arg ) ; } else { print ( arg ) ; } print ( STR_ ) ; inArgListTail = BOOL_ ; } inArgListTail = BOOL_ ; if ( ! args . isEmpty ( ) ) { removeLastChars ( NUM_ ) ; } return this ; }
public DTN2Events ( Settings s ) { this . events = new LinkedList < ExternalEvent > ( ) ; this . bundle_list = new HashMap < String , Bundle > ( ) ; DTN2Manager . setEvents ( this ) ; }
public boolean isAnyLocalAddress ( ) { return BOOL_ ; }
public static int bits2words ( long numBits ) { return ( int ) ( ( numBits - NUM_ ) > > NUM_ ) + NUM_ ; }
protected abstract void releaseSSLContext ( SSLHostConfig sslHostConfig ) ;
public void visitJumpInsn ( int opcode , Label label ) { if ( mv != null ) { mv . visitJumpInsn ( opcode , label ) ; } }
public DPrivateKeyUsagePeriod ( JDialog parent , byte [ ] value ) throws IOException { super ( parent ) ; setTitle ( res . getString ( STR_ ) ) ; initComponents ( ) ; prepopulateWithValue ( value ) ; }
public boolean isSystemUser ( ) { return systemUser ; }
private void dropTables ( SQLiteDatabase paramSQLiteDatabase ) { for ( String table : sTables ) { try { paramSQLiteDatabase . execSQL ( STR_ + table ) ; } catch ( Exception localException ) { localException . printStackTrace ( ) ; } } }
public boolean hasResources ( ) { return ( discoData != null ) && ! discoData . isEmpty ( ) ; }
boolean isPeriodic ( ) ;
private int measureWidth ( int measureSpec ) { float result = NUM_ ; int specMode = MeasureSpec . getMode ( measureSpec ) ; int specSize = MeasureSpec . getSize ( measureSpec ) ; if ( ( specMode == MeasureSpec . EXACTLY ) || ( mViewPager == null ) ) { result = specSize ; } else { final int count = mViewPager . getAdapter ( ) . getCount ( ) ; result = getPaddingLeft ( ) + getPaddingRight ( ) + ( count * mLineWidth ) + ( ( count - NUM_ ) * mGapWidth ) ; if ( specMode == MeasureSpec . AT_MOST ) { result = Math . min ( result , specSize ) ; } } return ( int ) FloatMath . ceil ( result ) ; }
public static BlockObject queryFullCopyResource ( URI fcResourceURI , UriInfo uriInfo , boolean isSource , DbClient dbClient ) { ArgValidator . checkUri ( fcResourceURI ) ; if ( isSource ) { if ( ( ! URIUtil . isType ( fcResourceURI , Volume . class ) ) && ( ! URIUtil . isType ( fcResourceURI , BlockSnapshot . class ) ) ) { throw APIException . badRequests . invalidFullCopySource ( fcResourceURI . toString ( ) ) ; } } else if ( ! URIUtil . isType ( fcResourceURI , Volume . class ) ) { throw APIException . badRequests . protectionVolumeNotFullCopy ( fcResourceURI ) ; } BlockObject blockObj = BlockObject . fetch ( dbClient , fcResourceURI ) ; ArgValidator . checkEntity ( blockObj , fcResourceURI , BlockServiceUtils . isIdEmbeddedInURL ( fcResourceURI , uriInfo ) , BOOL_ ) ; return blockObj ; }
public double eval ( double params [ ] ) { double p1 = params [ NUM_ ] ; double p2 = params [ NUM_ ] ; return ( p1 != p2 ) ? p1 : p2 ; }
protected double [ ] randomSubRange ( double boundStart , double boundLen ) { if ( boundLen >= NUM_ && usually ( ) ) { int intBoundStart = ( int ) Math . ceil ( boundStart ) ; int intBoundEnd = ( int ) ( boundStart + boundLen ) ; int intBoundLen = intBoundEnd - intBoundStart ; int newLen = ( int ) randomGaussianMeanMax ( intBoundLen / NUM_ , intBoundLen ) ; int newStart = intBoundStart + randomInt ( intBoundLen - newLen ) ; return new double [ ] { newStart , newLen } ; } else { double newLen = randomGaussianMeanMax ( boundLen / NUM_ , boundLen ) ; double newStart = boundStart + ( boundLen - newLen == NUM_ ? NUM_ : ( randomDouble ( ) % ( boundLen - newLen ) ) ) ; return new double [ ] { newStart , newLen } ; } }
void addResponseInterceptor ( HttpResponseInterceptor itcp ) ;
< S extends T > S save ( S entity ) ;
public MultiMap ( final Map < K , Collection < V > > map , final MultiMapFactory < V > type ) { mMap = map ; mFactory = type ; }
private void checkLocal ( GridCacheMvccCandidate cand , GridCacheVersion ver , boolean ready , boolean owner , boolean reentry ) { assert cand != null ; info ( STR_ + cand ) ; assert cand . version ( ) . equals ( ver ) ; assert cand . ready ( ) == ready ; assert cand . owner ( ) == owner ; assert cand . reentry ( ) == reentry ; assert ! cand . used ( ) ; assert cand . local ( ) ; }
private void processAcceptAuthSubToken ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { if ( request . getParameter ( STR_ ) != null ) { EventPublisher ep = new EventPublisher ( ) ; try { ep . setSsAuthSubToken ( request . getParameter ( STR_ ) , BOOL_ ) ; request . getSession ( ) . setAttribute ( SESSION_ATTR_SS_AUTH_TOKEN , ep . getSsAuthSubToken ( ) ) ; response . sendRedirect ( STR_ ) ; } catch ( EPAuthenticationException e ) { System . err . println ( STR_ + e . getMessage ( ) ) ; } } }
public void fireSetupGameBecameExamined ( String gameId ) { Game game = getGame ( gameId ) ; if ( game != null ) { synchronized ( listeners ) { for ( GameServiceListener listener : listeners ) { listener . setupGameBecameExamined ( game ) ; } } } }
private ActivityManager ( ) { super ( STR_ ) ; m_activities = new ArrayList ( ) ; m_tmp = new ArrayList ( ) ; m_nextTime = Long . MAX_VALUE ; int priority = PrefuseConfig . getInt ( STR_ ) ; if ( priority >= Thread . MIN_PRIORITY && priority <= Thread . MAX_PRIORITY ) { this . setPriority ( priority ) ; } this . setDaemon ( BOOL_ ) ; this . start ( ) ; }
public boolean isFocusTraversable ( ) { return BOOL_ ; }
public void swap ( int original , int newPosition ) { Song temp = mSongs . get ( original ) ; Song newSong = mSongs . get ( newPosition ) ; mSongs . set ( original , newSong ) ; mSongs . set ( newPosition , temp ) ; int tempVis = mVisible . get ( original ) ; mVisible . set ( original , mVisible . get ( newPosition ) ) ; mVisible . set ( newPosition , tempVis ) ; int tempId = mIds . get ( original ) ; mIds . set ( original , mIds . get ( newPosition ) ) ; mIds . set ( newPosition , tempId ) ; super . notifyDataSetChanged ( ) ; }
private void addOutgoingOneToOneFileTransfer ( String fileTransferId , ContactId contact , MmContent content , MmContent fileicon , State state , long timestamp , long timestampSent ) { mMessagingLog . addOneToOneFileTransfer ( fileTransferId , contact , Direction . OUTGOING , content , fileicon , state , ReasonCode . UNSPECIFIED , timestamp , timestampSent , FileTransferData . UNKNOWN_EXPIRATION , FileTransferData . UNKNOWN_EXPIRATION ) ; }
public boolean isConfigurationAcceptable ( final SambaPasswordPluginCfg configuration , final List < LocalizableMessage > unacceptableReasons ) { return isConfigurationChangeAcceptable ( configuration , unacceptableReasons ) ; }
protected String colorToRGB ( final Color color ) { return String . format ( STR_ , color . getRed ( ) , color . getGreen ( ) , color . getBlue ( ) ) ; }
public void insertAfter ( Node [ ] newChilds , Node refChild ) { int siblingIndex = refChild . getSiblingIndex ( ) + NUM_ ; if ( siblingIndex == refChild . parentNode . getChildNodesCount ( ) ) { refChild . parentNode . addChild ( newChilds ) ; } else { refChild . parentNode . insertChild ( newChilds , siblingIndex ) ; } }
public InternalSearchOperation processSearch ( final SearchRequest request , InternalSearchListener searchListener ) { InternalSearchOperation searchOperation = new InternalSearchOperation ( this , nextOperationID ( ) , nextMessageID ( ) , request , searchListener ) ; searchOperation . run ( ) ; return searchOperation ; }
public void testSignerStringIdentityScope ( ) throws Exception { Signer s = new SignerStub ( STR_ , IdentityScope . getSystemScope ( ) ) ; assertNotNull ( s ) ; assertEquals ( STR_ , s . getName ( ) ) ; assertSame ( IdentityScope . getSystemScope ( ) , s . getScope ( ) ) ; assertNull ( s . getPrivateKey ( ) ) ; try { Signer s2 = new SignerStub ( STR_ , IdentityScope . getSystemScope ( ) ) ; fail ( STR_ ) ; } catch ( KeyManagementException e ) { } Signer s2 = new SignerStub ( null ) ; assertNull ( s2 . getName ( ) ) ; }
public static byte [ ] createRandomBytes ( int length ) { byte [ ] randomBytes = new byte [ length ] ; rnd . nextBytes ( randomBytes ) ; return randomBytes ; }
public boolean hasParentRelation ( long osmId ) { if ( parentRelations == null ) { return BOOL_ ; } for ( Relation r : parentRelations ) { if ( osmId == r . getOsmId ( ) ) return BOOL_ ; } return BOOL_ ; }
protected void notAllowNonAvailableRegisteredSubPartitions ( BusinessObjectFormatKey businessObjectFormatKey , List < List < String > > matchedAvailablePartitionFilters , List < List < String > > availablePartitions , List < String > storageNames ) { List < StorageUnitEntity > matchedNotAvailableStorageUnitEntities = storageUnitDao . getStorageUnitsByPartitionFiltersAndStorages ( businessObjectFormatKey , matchedAvailablePartitionFilters , null , null , storageNames , StoragePlatformEntity . S3 , null , BOOL_ ) ; matchedNotAvailableStorageUnitEntities = storageUnitHelper . excludeBusinessObjectDataStatus ( matchedNotAvailableStorageUnitEntities , BusinessObjectDataStatusEntity . DELETED ) ; matchedNotAvailableStorageUnitEntities = storageUnitHelper . excludePartitions ( matchedNotAvailableStorageUnitEntities , availablePartitions ) ; if ( ! CollectionUtils . isEmpty ( matchedNotAvailableStorageUnitEntities ) ) { BusinessObjectDataKey businessObjectDataKey = businessObjectDataHelper . getBusinessObjectDataKey ( matchedNotAvailableStorageUnitEntities . get ( NUM_ ) . getBusinessObjectData ( ) ) ; throw new ObjectNotFoundException ( String . format ( STR_ + STR_ + STR_ , businessObjectFormatKey . getNamespace ( ) , businessObjectFormatKey . getBusinessObjectDefinitionName ( ) , businessObjectFormatKey . getBusinessObjectFormatUsage ( ) , businessObjectFormatKey . getBusinessObjectFormatFileType ( ) , businessObjectFormatKey . getBusinessObjectFormatVersion ( ) , businessObjectDataKey . getPartitionValue ( ) , StringUtils . join ( businessObjectDataKey . getSubPartitionValues ( ) , STR_ ) , businessObjectDataKey . getBusinessObjectDataVersion ( ) , StringUtils . join ( storageNames , STR_ ) ) ) ; } }
public String toStringKey ( ) { String result ; int i ; result = STR_ + STR_ ; result += STR_ ; result += STR_ ; result += STR_ ; for ( i = NUM_ ; i < getColCount ( ) ; i ++ ) { if ( getColHidden ( i ) ) continue ; result += LEFT_PARENTHESES + ( i + NUM_ ) + RIGHT_PARENTHESES + STR_ + removeFilterName ( m_ColNames [ i ] ) . replace ( STR_ , STR_ ) . replaceAll ( STR_ , STR_ ) + STR_ ; } result += STR_ ; result += STR_ ; result += STR_ ; return result ; }
public void includeFont ( Font font , CharTable charTable , String name ) throws IOException { unicode = null ; charName = null ; this . font = font ; this . charTable = charTable ; this . fontName = name ; this . fontBBox = font . getMaxCharBounds ( context ) ; this . noDefinedChars = NUM_ ; this . unicode = new char [ NUM_ ] ; this . charName = new String [ NUM_ ] ; for ( int i = NUM_ ; i < unicode . length ; i ++ ) { charName [ i ] = charTable . toName ( i ) ; if ( charName [ i ] != null ) { unicode [ i ] = charTable . toUnicode ( charName [ i ] ) ; noDefinedChars ++ ; } else { unicode [ i ] = NUM_ ; } } openIncludeFont ( ) ; writeEncoding ( charTable ) ; closeIncludeFont ( ) ; }
public static X509Certificate convertCertificate ( Certificate certIn ) throws CryptoException { try { CertificateFactory cf = CertificateFactory . getInstance ( X509_CERT_TYPE , BOUNCY_CASTLE . jce ( ) ) ; ByteArrayInputStream bais = new ByteArrayInputStream ( certIn . getEncoded ( ) ) ; return ( X509Certificate ) cf . generateCertificate ( bais ) ; } catch ( CertificateException e ) { throw new CryptoException ( res . getString ( STR_ ) , e ) ; } catch ( NoSuchProviderException e ) { throw new CryptoException ( res . getString ( STR_ ) , e ) ; } }
public void updateWeights ( Counter < FV > weights ) ;
public AddIndexChange ( Table table , IIndex newIndex ) { super ( table ) ; _newIndex = newIndex ; }
public synchronized void fastForwardTo ( long time ) { if ( time < currentTrackTime ) throw new IllegalArgumentException ( STR_ + time + STR_ + currentTrackTime + STR_ ) ; time -= time % NUM_ ; while ( isReady ( ) && currentTrackTime != time ) { provide ( ) ; } }
public TableResult ( ) { clear ( ) ; }
public void postDelete ( Engine . Delete delete , Throwable ex ) { }
public final int committedPages ( ) { return committed ; }
public Matrix [ ] eigSymm ( ) ;
public boolean removeSpringConfig ( SpringConfig springConfig ) { if ( springConfig == null ) { throw new IllegalArgumentException ( STR_ ) ; } return mSpringConfigMap . remove ( springConfig ) != null ; }
void render ( Stage stage , float delta ) ;
public static void main ( String [ ] args ) { runClassifier ( new SGDText ( ) , args ) ; }
public Name child ( final String name ) { return new Name ( this , name ) ; }
public static void registerCodebaseLoader ( ClassLoader loader ) { codebaseLoaders . put ( loader , null ) ; }
public boolean isRunning ( ) { return mRunning . get ( ) ; }
private ViewAnimationUtil ( ) { throw new Error ( STR_ ) ; }
public static URI toURI ( CharSequence self ) throws URISyntaxException { return new URI ( self . toString ( ) ) ; }
public void addGetDataEventListener ( GetDataEventListener listener ) { addGetDataEventListener ( Threading . USER_THREAD , listener ) ; }
public void writeNull ( IonType type ) throws IOException ;
public void runTest ( ) throws Throwable { Document doc ; Node oldChild ; NodeList elementList ; Node elementNode ; Node removedChild ; doc = ( Document ) load ( STR_ , BOOL_ ) ; oldChild = doc . createElement ( STR_ ) ; elementList = doc . getElementsByTagName ( STR_ ) ; elementNode = elementList . item ( NUM_ ) ; { boolean success = BOOL_ ; try { removedChild = elementNode . removeChild ( oldChild ) ; } catch ( DOMException ex ) { success = ( ex . code == DOMException . NOT_FOUND_ERR ) ; } assertTrue ( STR_ , success ) ; } }
public void addProperty ( String key , Object value ) { ri . addProperty ( key , value ) ; }
public void toggleSelection ( int position ) { if ( selectedItems . get ( position , BOOL_ ) ) { selectedItems . delete ( position ) ; } else { selectedItems . put ( position , BOOL_ ) ; } notifyItemChanged ( position ) ; }
public boolean canGetFloat ( ) ;
protected Feed ( ElementKey < ? , ? extends Feed > key ) { super ( key ) ; feedState = new FeedState ( ) ; }
public boolean isNamespaceProcessingEnabled ( ) { return processNamespaces ; }
public void makeSameAs ( UnconditionalValueDerefSet source ) { valueNumbersUnconditionallyDereferenced . clear ( ) ; valueNumbersUnconditionallyDereferenced . or ( source . valueNumbersUnconditionallyDereferenced ) ; lastUpdateTimestamp = source . lastUpdateTimestamp ; derefLocationSetMap . clear ( ) ; if ( source . derefLocationSetMap . size ( ) > NUM_ ) { for ( Map . Entry < ValueNumber , Set < Location > > sourceEntry : source . derefLocationSetMap . entrySet ( ) ) { Set < Location > derefLocationSet = Util . makeSmallHashSet ( sourceEntry . getValue ( ) ) ; derefLocationSetMap . put ( sourceEntry . getKey ( ) , derefLocationSet ) ; } } }
public static boolean isValidBedLine ( String line ) { String [ ] bdg = line . split ( STR_ ) ; if ( bdg . length < NUM_ ) { return BOOL_ ; } try { Integer . parseInt ( bdg [ NUM_ ] ) ; Integer . parseInt ( bdg [ NUM_ ] ) ; } catch ( NumberFormatException e ) { return BOOL_ ; } return BOOL_ ; }
private void validateWWNAlias ( String alias ) { if ( ! WWNUtility . isValidWWNAlias ( alias ) ) { throw APIException . badRequests . illegalWWNAlias ( alias ) ; } }
public SAX2DTM ( DTMManager mgr , Source source , int dtmIdentity , DTMWSFilter whiteSpaceFilter , XMLStringFactory xstringfactory , boolean doIndexing ) { this ( mgr , source , dtmIdentity , whiteSpaceFilter , xstringfactory , doIndexing , DEFAULT_BLOCKSIZE , BOOL_ , BOOL_ ) ; }
private Object readResolve ( ) throws ObjectStreamException { return LexiconKeyOrder . valueOf ( index ) ; }
public HCardParser ( Document document ) { this ( document , null ) ; }
public String spreadInitialCountTipText ( ) { return STR_ ; }
private static synchronized void buildEntityTable ( ) { htmlEntityTable = new Hashtable ( HTML_ENTITIES . length ) ; for ( int i = NUM_ ; i < HTML_ENTITIES . length ; i += NUM_ ) { if ( ! htmlEntityTable . containsKey ( HTML_ENTITIES [ i ] ) ) { htmlEntityTable . put ( HTML_ENTITIES [ i ] , HTML_ENTITIES [ i + NUM_ ] ) ; } } }
public MethodElement ( String methodSignature , String methodName , TypeElement classElement ) { super ( ) ; this . methodSignature = methodSignature ; this . methodName = methodName ; this . classElement = classElement ; }
public String toString ( ) { StringBuffer s = new StringBuffer ( ) ; boolean colon = BOOL_ ; s . append ( STR_ ) ; for ( TypeNode typeNode : typeNodeList ) { if ( colon ) { s . append ( STR_ ) ; } else { colon = BOOL_ ; } s . append ( typeNode ) ; } s . append ( STR_ ) ; return s . toString ( ) ; }
public Type1Message ( int flags , String suppliedDomain , String suppliedWorkstation ) { setFlags ( getDefaultFlags ( ) | flags ) ; setSuppliedDomain ( suppliedDomain ) ; if ( suppliedWorkstation == null ) suppliedWorkstation = getDefaultWorkstation ( ) ; setSuppliedWorkstation ( suppliedWorkstation ) ; }
public boolean add ( String valueString ) { return add ( ByteString . valueOfUtf8 ( valueString ) ) ; }
public void test_8_2_3 ( ) throws Exception { if ( ! store . isQuads ( ) ) return ; new TestHelper ( STR_ , STR_ , STR_ , STR_ ) . runTest ( ) ; }
public FloatArrayDataRow ( float [ ] data ) { this . data = data ; }
public abstract VariableReference clone ( TestCase newTest ) ;
public void tickFlying ( ) { if ( getIsCritical ( ) ) { for ( int i = NUM_ ; i < NUM_ ; ++ i ) { worldObj . spawnParticle ( EnumParticleTypes . CRIT , posX + motionX * ( double ) i / NUM_ , posY + motionY * ( double ) i / NUM_ , posZ + motionZ * ( double ) i / NUM_ , - motionX , - motionY + NUM_ , - motionZ ) ; } } }
public BST ( E [ ] objects ) { for ( int i = NUM_ ; i < objects . length ; i ++ ) insert ( objects [ i ] ) ; }
public void start ( String tag ) { tag ( tag , ( String [ ] ) null , null , NUM_ , BOOL_ ) ; }
public void clearTrackPoints ( ) ;
ClassType superclass ( ) ;
void clear ( ) ;
String componentId ( ) ;
protected void saveSelection ( ) { if ( p_table == null ) return ; log . config ( STR_ + m_ok ) ; if ( ! m_ok ) { m_results . clear ( ) ; p_table = null ; this . detach ( ) ; return ; } if ( p_multipleSelection ) { m_results . addAll ( getSelectedRowKeys ( ) ) ; } else { Integer data = getSelectedRowKey ( ) ; if ( data != null ) m_results . add ( data ) ; } log . config ( getSelectedSQL ( ) ) ; saveSelectionDetail ( ) ; }
public static Bitmap viewToImage ( Context context , WebView viewToBeConverted ) { int extraSpace = NUM_ ; int height = viewToBeConverted . getContentHeight ( ) + extraSpace ; Bitmap viewBitmap = Bitmap . createBitmap ( viewToBeConverted . getWidth ( ) , height , Bitmap . Config . ARGB_8888 ) ; Canvas canvas = new Canvas ( viewBitmap ) ; viewToBeConverted . draw ( canvas ) ; try { int scrollY = viewToBeConverted . getScrollY ( ) ; if ( scrollY > NUM_ ) { viewBitmap = Bitmap . createBitmap ( viewBitmap , NUM_ , scrollY , viewToBeConverted . getWidth ( ) , height - scrollY ) ; } } catch ( Exception ex ) { Log . e ( STR_ , STR_ + ex ) ; } return viewBitmap ; }
public static XMLInputFactory newInstance ( String factoryId , ClassLoader classLoader ) throws FactoryConfigurationError { return FactoryFinder . find ( XMLInputFactory . class , factoryId , classLoader , null ) ; }
public abstract boolean handleKeyword ( String keyword , int parameter ) ;
public static void detectAndHandleLocalLooping ( Mail aMail , ActionContext context , String anAttributeSuffix ) throws MessagingException { MailAddress thisRecipient = getSoleRecipient ( aMail ) ; MailAddress lastRecipient = ( MailAddress ) aMail . getAttribute ( ATTRIBUTE_PREFIX + anAttributeSuffix ) ; if ( null != lastRecipient && lastRecipient . equals ( thisRecipient ) ) { MessagingException ex = new MessagingException ( STR_ + aMail . getMessage ( ) . getMessageID ( ) ) ; context . getLog ( ) . warn ( ex . getMessage ( ) , ex ) ; throw ex ; } aMail . setAttribute ( ATTRIBUTE_PREFIX + anAttributeSuffix , thisRecipient ) ; }
void onError ( String errorMessage , RespokeSignalingChannel sender ) ;
public LaguerreSolver ( ) { this ( DEFAULT_ABSOLUTE_ACCURACY ) ; }
public void addRect ( RectF rect , Direction dir ) { if ( rect == null ) { throw new NullPointerException ( STR_ ) ; } detectSimplePath ( rect . left , rect . top , rect . right , rect . bottom , dir ) ; native_addRect ( mNativePath , rect , dir . nativeInt ) ; }
public void insert_typecode ( org . omg . CORBA . TypeCode value ) throws org . omg . DynamicAny . DynAnyPackage . TypeMismatch , org . omg . DynamicAny . DynAnyPackage . InvalidValue { org . omg . CORBA . portable . ServantObject $so = _servant_preinvoke ( STR_ , _opsClass ) ; DynArrayOperations $self = ( DynArrayOperations ) $so . servant ; try { $self . insert_typecode ( value ) ; } finally { _servant_postinvoke ( $so ) ; } }
private ServiceRequestBuffer createStatsSRB ( FbService service , int options ) { return createRequestBuffer ( service , isc_action_svc_db_stats , options ) ; }
public EntryChangelogNotificationControl ( boolean isCritical , String cookie ) { super ( OID_ECL_COOKIE_EXCHANGE_CONTROL , isCritical ) ; this . cookie = cookie ; }
public float boost ( ) { return boost ; }
static ReplayPromise < Void > allReplay ( final Duration timeout , final long time , final Promise < ? > ... promises ) { return new AllReplayPromise ( timeout , time , promises ) ; }
public static List < DockerPortMapping > fromMap ( Map < String , List < Map < String , String > > > map ) { return map . entrySet ( ) . stream ( ) . map ( null ) . filter ( null ) . collect ( Collectors . toList ( ) ) ; }
public final boolean isUp ( ) { return getState ( ) . isActive ( ) ; }
public final boolean isStatic ( ) { return ( modifiers & ACC_STATIC ) != NUM_ ; }
public final void sendMessage ( int what , Object obj ) { SmHandler smh = mSmHandler ; if ( smh == null ) return ; smh . sendMessage ( obtainMessage ( what , obj ) ) ; }
public static native String error_string ( int error_code ) ;
public boolean isDocControlled ( ) ;
public boolean canFollow ( ) { return canFollow_native ( pointer ) ; }
public CubicSplineInterpolator ( double [ ] x , double [ ] y ) { this . x = x ; this . y = y ; validate ( ) ; spline ( ) ; }
public KnowledgeModelEdge ( KnowledgeModelNode node1 , KnowledgeModelNode node2 , int type ) { super ( node1 , node2 , Endpoint . TAIL , Endpoint . ARROW ) ; if ( node1 == null || node2 == null ) { throw new NullPointerException ( ) ; } if ( this . type != FORBIDDEN_EXPLICITLY && this . type != FORBIDDEN_BY_TIERS && this . type != REQUIRED && this . type != FORBIDDEN_BY_GROUPS && this . type != REQUIRED_BY_GROUPS ) { throw new IllegalArgumentException ( STR_ ) ; } this . type = type ; }
private void storeActivityList ( ) { SharedPreferences prefs = mContext . getSharedPreferences ( PREF_PACKAGE , Context . MODE_PRIVATE ) ; SharedPreferences . Editor editor = prefs . edit ( ) ; editor . clear ( ) ; editor . putInt ( PREF_NUM_SAVED_ENTRIES , mActivityList . size ( ) ) ; for ( int i = NUM_ ; i < mActivityList . size ( ) ; ++ i ) { String currentActivityIndexPref = PREF_ACTIVITY_INDEX + i ; String currentWebappIdPref = PREF_WEBAPP_ID + i ; editor . putInt ( currentActivityIndexPref , mActivityList . get ( i ) . mActivityIndex ) ; editor . putString ( currentWebappIdPref , mActivityList . get ( i ) . mWebappId ) ; } editor . apply ( ) ; }
public JSONObject putOpt ( String key , Object value ) throws JSONException { if ( key != null && value != null ) { this . put ( key , value ) ; } return this ; }
void deletedTrace ( Project project , Trace trace ) ;
void invalidatePermissionCalculators ( ) ;
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( characterdataindexsizeerrinsertdataoffsetgreater . class , args ) ; }
private void checkLegality ( ExpressionTree node ) { if ( isLocalVarOrParam ( node ) ) { if ( atypeFactory . getAnnotatedType ( node ) . hasAnnotation ( Unusable . class ) ) { checker . report ( Result . failure ( STR_ , TreeUtils . elementFromUse ( node ) , node ) , node ) ; } } }
public CipherParameters generateDerivedParameters ( int keySize , int ivSize ) { keySize = keySize / NUM_ ; ivSize = ivSize / NUM_ ; byte [ ] dKey = generateDerivedKey ( keySize + ivSize ) ; return new ParametersWithIV ( new KeyParameter ( dKey , NUM_ , keySize ) , dKey , keySize , ivSize ) ; }
private ReplaceTokens createMetaserverPortToken ( ) { ReplaceTokens . Token tokenPort = new ReplaceTokens . Token ( ) ; tokenPort . setKey ( GeneralPropertySet . RMI_PORT ) ; String port = getPropertyValue ( GeneralPropertySet . RMI_PORT ) ; if ( port == null ) { throw new IllegalArgumentException ( STR_ + GeneralPropertySet . RMI_PORT + STR_ ) ; } tokenPort . setValue ( port ) ; ReplaceTokens replacePort = new ReplaceTokens ( ) ; replacePort . addConfiguredToken ( tokenPort ) ; return replacePort ; }
public CostInsufficientQtyException ( int product_id , int asi_id , BigDecimal qty , BigDecimal remainingQty ) { super ( createMessage ( product_id , asi_id , qty , remainingQty ) ) ; }
public static String createLink ( String uri , String label ) { return STR_ + uri + STR_ + label + STR_ ; }
public void updateApps ( List < AppInfo > apps ) { mApps . updateApps ( apps ) ; }
public Maybe < List < A > > maybeInit ( ) { return Maybe . JustWhenTrue ( ! isEmpty ( ) , null ) ; }
protected static int toDigit ( char ch , int index ) throws DecoderException { int digit = Character . digit ( ch , NUM_ ) ; if ( digit == - NUM_ ) { throw new DecoderException ( STR_ + ch + STR_ + index ) ; } return digit ; }
public void removeListener ( final PropertyChangeListener listener ) { pcs . removePropertyChangeListener ( listener ) ; }
public void testLoadWithMultipleSubtitutions ( ) throws Exception { Properties props = new Properties ( ) ; props . setProperty ( STR_ , STR_ ) ; props . setProperty ( STR_ , STR_ ) ; props . setProperty ( STR_ , STR_ ) ; props . setProperty ( STR_ , STR_ ) ; int count = TungstenProperties . substituteSystemValues ( props , NUM_ ) ; Assert . assertEquals ( STR_ , NUM_ , count ) ; Assert . assertEquals ( STR_ , props . getProperty ( STR_ ) ) ; Assert . assertEquals ( STR_ , props . getProperty ( STR_ ) ) ; Assert . assertEquals ( STR_ , props . getProperty ( STR_ ) ) ; Assert . assertEquals ( STR_ , props . getProperty ( STR_ ) ) ; }
void addUngroupedControl ( String title ) ;
public void runQueue ( ) { synchronized ( sync ) { while ( ! queue . isEmpty ( ) ) { Runnable r = queue . poll ( ) ; if ( r != null ) { try { r . run ( ) ; } catch ( Exception e ) { LoggingUtil . exception ( e ) ; } } else { LoggingUtil . warning ( STR_ ) ; } } } }
public ObjectFactory ( ) { }
synchronized void start ( GridStartContext startCtx ) throws IgniteCheckedException { if ( startGuard . compareAndSet ( BOOL_ , BOOL_ ) ) { try { starterThread = Thread . currentThread ( ) ; start0 ( startCtx ) ; } catch ( Exception e ) { if ( log != null ) stopExecutors ( log ) ; throw e ; } finally { startLatch . countDown ( ) ; } } else U . awaitQuiet ( startLatch ) ; }
public static int duplicate ( int _int ) { return _int ; }
public void createFullCopy ( URI storage , List < URI > fullCopyVolumes , Boolean createInactive , String opId ) throws InternalException ;
public static boolean vpoolChangeRequiresMigration ( VirtualPool currentVpool , VirtualPool newVpool ) { s_logger . info ( String . format ( STR_ , currentVpool . getLabel ( ) , newVpool . getLabel ( ) ) ) ; if ( isSameVirtualPool ( currentVpool , newVpool ) ) { return BOOL_ ; } String [ ] include = new String [ ] { PROTOCOLS , PROVISIONING_TYPE , USE_MATCHED_POOLS , ARRAY_INFO , DRIVE_TYPE , AUTO_TIER_POLICY_NAME , HOST_IO_LIMIT_IOPS , HOST_IO_LIMIT_BANDWIDTH , VMAX_COMPRESSION_ENABLED , IS_THIN_VOLUME_PRE_ALLOCATION_ENABLED , ASSIGNED_STORAGE_POOLS } ; return ! analyzeChanges ( currentVpool , newVpool , include , null , null ) . isEmpty ( ) ; }
private ComponentName findWebSearchActivity ( ComponentName globalSearchActivity ) { if ( globalSearchActivity == null ) { return null ; } Intent intent = new Intent ( Intent . ACTION_WEB_SEARCH ) ; intent . setPackage ( globalSearchActivity . getPackageName ( ) ) ; List < ResolveInfo > activities = queryIntentActivities ( intent , PackageManager . MATCH_DEFAULT_ONLY ) ; if ( activities != null && ! activities . isEmpty ( ) ) { ActivityInfo ai = activities . get ( NUM_ ) . activityInfo ; return new ComponentName ( ai . packageName , ai . name ) ; } Log . w ( LOG_TAG , STR_ ) ; return null ; }
MonthDay ( MonthDay partial , Chronology chrono ) { super ( partial , chrono ) ; }
public Queue queue ( int concurrency ) { return new Queue ( this . executor_ , concurrency ) ; }
private List < Race > parseRaces ( String json ) { List < Race > result = new ArrayList < > ( ) ; if ( json == null ) { return null ; } JSONParser parser = new JSONParser ( ) ; try { JSONObject root = ( JSONObject ) parser . parse ( json . trim ( ) ) ; JSONArray races = ( JSONArray ) root . get ( STR_ ) ; for ( Object o : races ) { if ( o instanceof JSONObject ) { Race race = parseRace ( ( JSONObject ) o ) ; if ( race != null ) { result . add ( race ) ; } } } } catch ( ParseException | ClassCastException | NullPointerException ex ) { LOGGER . warning ( STR_ + ex ) ; return null ; } return result ; }
public static long reverseBits ( final short value ) { final int b0 = JBBPUtils . reverseBitsInByte ( ( byte ) value ) & NUM_ ; final int b1 = JBBPUtils . reverseBitsInByte ( ( byte ) ( value > > NUM_ ) ) & NUM_ ; return ( long ) ( ( b0 << NUM_ ) | b1 ) & NUM_ ; }
public abstract void executeAction ( ) throws Exception ;
public boolean needsForegroundScaling ( ) { return this == LAUNCHER ; }
public GVTFont deriveFont ( float size , Map attrs ) { return null ; }
public E poll ( ) { return transferer . transfer ( null , BOOL_ , NUM_ ) ; }
public boolean isAuditEnabled ( ) { return auditEnabled ; }
public void loadImage ( ImageView imageView , String imagePath , int width , int height ) { loadImage ( imageView , imagePath , width , height , null ) ; }
public static byte [ ] generate ( byte [ ] P , byte [ ] S , int N , int r , int p , int dkLen ) { if ( P == null ) { throw new IllegalArgumentException ( STR_ ) ; } if ( S == null ) { throw new IllegalArgumentException ( STR_ ) ; } if ( N <= NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } if ( r == NUM_ && N > NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } if ( r < NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } int maxParallel = Integer . MAX_VALUE / ( NUM_ * r * NUM_ ) ; if ( p < NUM_ || p > maxParallel ) { throw new IllegalArgumentException ( STR_ + maxParallel + STR_ + r + STR_ ) ; } if ( dkLen < NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } return MFcrypt ( P , S , N , r , p , dkLen ) ; }
protected void checkMissing ( Instances instances ) throws Exception { for ( int i = NUM_ ; i < instances . numInstances ( ) ; i ++ ) { Instance ins = instances . instance ( i ) ; for ( int j = NUM_ ; j < ins . numValues ( ) ; j ++ ) { if ( ins . index ( j ) != ins . classIndex ( ) ) if ( ins . isMissingSparse ( j ) ) { throw new Exception ( STR_ + STR_ + STR_ ) ; } } } }
private void addMinimizedSection ( Composite parent , FormToolkit toolkit , String sectionTitle , int numColums ) { Section section = toolkit . createSection ( parent , ExpandableComposite . TITLE_BAR | ExpandableComposite . TWISTIE ) ; section . setText ( sectionTitle ) ; section . setLayoutData ( new GridData ( SWT . FILL , SWT . FILL , BOOL_ , BOOL_ ) ) ; Composite sectionComposite = toolkit . createComposite ( section ) ; GridLayout gridLayout = new GridLayout ( numColums , BOOL_ ) ; gridLayout . marginLeft = NUM_ ; gridLayout . marginTop = NUM_ ; sectionComposite . setLayout ( gridLayout ) ; section . setClient ( sectionComposite ) ; if ( ! minimizedSections . containsKey ( sectionTitle ) ) { minimizedSections . put ( sectionTitle , sectionComposite ) ; } }
void trim ( ) ;
public EntryGenerator ( ) { }
public static String evaluateTemplate ( Template template , CompilationUnit compilationUnit , int position ) throws CoreException , BadLocationException , TemplateException { TemplateContextType contextType = new ContextTypeRegistry ( ) . getContextType ( template . getContextTypeId ( ) ) ; if ( ! ( contextType instanceof CompilationUnitContextType ) ) throw new CoreException ( new Status ( IStatus . ERROR , STR_ , IStatus . ERROR , STR_ , null ) ) ; Document document = new WorkerDocument ( ) ; CompilationUnitContext context = ( ( CompilationUnitContextType ) contextType ) . createContext ( document , position , NUM_ , compilationUnit ) ; context . setForceEvaluation ( BOOL_ ) ; TemplateBuffer buffer = context . evaluate ( template ) ; if ( buffer == null ) return null ; return buffer . getString ( ) ; }
public DefaultMapEntry ( final K key , final V value ) { super ( key , value ) ; }
public boolean supportsNonNullableColumns ( ) throws SQLException ;
private void stopManagingActivity ( ) { try { this . pooledMembershipExecutor . shutdownNow ( ) ; Iterator < DistributedMember > it = repo . getMonitoringRegionMap ( ) . keySet ( ) . iterator ( ) ; while ( it . hasNext ( ) ) { removeMemberArtifacts ( it . next ( ) , BOOL_ ) ; } } catch ( Exception e ) { throw new ManagementException ( e ) ; } finally { } }
public Segment ( char [ ] array , int offset , int count ) { this . array = array ; this . offset = offset ; this . count = count ; partialReturn = BOOL_ ; }
private void raster ( ) { glEnable ( GL_DEPTH_TEST ) ; glUseProgram ( rasterProgram ) ; glUniformMatrix4fv ( viewMatrixUniform , BOOL_ , viewMatrix . get ( matrixBuffer ) ) ; glUniformMatrix4fv ( projectionMatrixUniform , BOOL_ , projMatrix . get ( matrixBuffer ) ) ; glBindFramebuffer ( GL_FRAMEBUFFER , fbo ) ; glClear ( GL_DEPTH_BUFFER_BIT ) ; glBindVertexArray ( vaoScene ) ; glDrawArrays ( GL_TRIANGLES , NUM_ , NUM_ * NUM_ * boxes . length / NUM_ ) ; glBindVertexArray ( NUM_ ) ; glBindFramebuffer ( GL_FRAMEBUFFER , NUM_ ) ; glUseProgram ( NUM_ ) ; }
public byte [ ] data ( ) { ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; try { toData ( bos ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } return bos . toByteArray ( ) ; }
public void dispose ( ) { mYellow = null ; super . dispose ( ) ; }
private static void openAndroidAccountCreationScreen ( Context applicationContext ) { logEvent ( ProfileAccountManagementMetrics . DIRECT_ADD_ACCOUNT , GAIA_SERVICE_TYPE_SIGNUP ) ; Intent createAccountIntent = new Intent ( Settings . ACTION_ADD_ACCOUNT ) ; createAccountIntent . putExtra ( EXTRA_ACCOUNT_TYPES , new String [ ] { EXTRA_VALUE_GOOGLE_ACCOUNTS } ) ; createAccountIntent . setFlags ( Intent . FLAG_ACTIVITY_REORDER_TO_FRONT | Intent . FLAG_ACTIVITY_SINGLE_TOP | Intent . FLAG_ACTIVITY_NEW_TASK | Intent . FLAG_ACTIVITY_CLEAR_TOP ) ; applicationContext . startActivity ( createAccountIntent ) ; }
public void forEach ( Allocation ain , Allocation aout ) { if ( mDirty ) { mDirty = BOOL_ ; mTables . copyFromUnchecked ( mCache ) ; } forEach ( NUM_ , ain , aout , null ) ; }
public boolean isEdgeTouched ( int edges ) { final int count = mInitialEdgeTouched . length ; for ( int i = NUM_ ; i < count ; i ++ ) { if ( isEdgeTouched ( edges , i ) ) { return BOOL_ ; } } return BOOL_ ; }
protected abstract void compact ( long from , long to , long length ) ;
public synchronized void reply ( SpeedoReply l ) { count = l . getCount ( ) ; series = l . getSeries ( ) ; if ( count > NUM_ ) { switch ( series ) { case NUM_ : circ = NUM_ ; readerLabel . setText ( rb . getString ( STR_ ) ) ; break ; case NUM_ : circ = NUM_ ; readerLabel . setText ( rb . getString ( STR_ ) ) ; break ; case NUM_ : circ = NUM_ ; readerLabel . setText ( rb . getString ( STR_ ) ) ; break ; default : speedTextField . setText ( rb . getString ( STR_ ) ) ; log . error ( STR_ ) ; break ; } calcSpeed ( ) ; } if ( timerRunning == BOOL_ ) { startReplyTimer ( ) ; startDisplayTimer ( ) ; startFastDisplayTimer ( ) ; timerRunning = BOOL_ ; } else { replyTimer . restart ( ) ; } }
public CopiesSupported ( int lowerBound , int upperBound ) { super ( lowerBound , upperBound ) ; if ( lowerBound > upperBound ) { throw new IllegalArgumentException ( STR_ ) ; } else if ( lowerBound < NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } }
public Shape modelToView ( int pos , Shape a , Position . Bias b ) throws BadLocationException { Container c = getContainer ( ) ; if ( c instanceof JPasswordField ) { JPasswordField f = ( JPasswordField ) c ; if ( ! f . echoCharIsSet ( ) ) { return super . modelToView ( pos , a , b ) ; } char echoChar = f . getEchoChar ( ) ; FontMetrics m = f . getFontMetrics ( f . getFont ( ) ) ; Rectangle alloc = adjustAllocation ( a ) . getBounds ( ) ; int dx = ( pos - getStartOffset ( ) ) * m . charWidth ( echoChar ) ; alloc . x += dx ; alloc . width = NUM_ ; return alloc ; } return null ; }
protected static boolean isCommutative ( JoinType joinType ) { return ( commuteJoinType ( joinType ) != null ) ; }
public X509AttributeCertificateHolder ( byte [ ] certEncoding ) throws IOException { this ( parseBytes ( certEncoding ) ) ; }
public void removeUpdate ( DocumentEvent e ) { try { int offs = e . getOffset ( ) ; if ( firstOffsetModded == null || offs < firstOffsetModded . getOffset ( ) ) { firstOffsetModded = e . getDocument ( ) . createPosition ( offs ) ; } if ( lastOffsetModded == null || offs > lastOffsetModded . getOffset ( ) ) { lastOffsetModded = e . getDocument ( ) . createPosition ( offs ) ; } } catch ( BadLocationException ble ) { ble . printStackTrace ( ) ; } handleDocumentEvent ( e ) ; }
private boolean matchesEthernet ( NetworkIdentity ident ) { return ident . mType == TYPE_ETHERNET ; }
public < R > LazyImmutable < ? extends R > flatMap ( final Function < ? super T , ? extends LazyImmutable < ? extends R > > fn ) { final T val = get ( ) ; if ( val == UNSET ) return ( LazyImmutable ) this ; else return fn . apply ( val ) ; }
V [ ] values ( V [ ] array ) ;
private void showFeedback ( String message ) { if ( myHost != null ) { myHost . showFeedback ( message ) ; } else { System . out . println ( message ) ; } }
public static synchronized void removeKey ( String key ) { getInstance ( ) . properties . remove ( key ) ; }
public BoardDeleteCommentQuery deleteComment ( UserActor actor , int groupId , int topicId , int commentId ) { return new BoardDeleteCommentQuery ( getClient ( ) , actor , groupId , topicId , commentId ) ; }
void onOutsidePhotoTap ( ) ;
void removeSessionHandlingAction ( ISessionHandlingAction action ) ;
public Builder considerExifParams ( boolean considerExifParams ) { this . considerExifParams = considerExifParams ; return this ; }
private void render ( ShaderProgram shader , Array < BillboardDecal > decals ) { BillboardDecalMaterial lastMaterial = null ; int idx = NUM_ ; for ( BillboardDecal decal : decals ) { if ( lastMaterial == null || ! lastMaterial . equals ( decal . getMaterial ( ) ) ) { if ( idx > NUM_ ) { flush ( shader , idx ) ; idx = NUM_ ; } decal . material . set ( ) ; lastMaterial = decal . material ; } decal . update ( ) ; System . arraycopy ( decal . vertices , NUM_ , vertices , idx , decal . vertices . length ) ; idx += decal . vertices . length ; if ( idx == vertices . length ) { flush ( shader , idx ) ; idx = NUM_ ; } } if ( idx > NUM_ ) { flush ( shader , idx ) ; } }
public void addCustomModelBuilder ( Object o ) ;
public void trainModelsWithParser ( Parser parser ) { Chunker . isTraining = BOOL_ ; for ( int i = NUM_ ; i <= iter ; i ++ ) { LinkedVector ex ; while ( ( ex = ( LinkedVector ) parser . next ( ) ) != null ) { for ( int j = NUM_ ; j < ex . size ( ) ; j ++ ) { chunker . learn ( ex . get ( j ) ) ; } } parser . reset ( ) ; chunker . doneWithRound ( ) ; System . out . println ( STR_ + i ) ; } chunker . doneLearning ( ) ; }
private void addVolumesToCG ( URI cgURI , Collection < URI > vplexVolumeURIList , String cgName , String clusterName , VPlexApiClient client ) { List < String > vplexVolumeNames = new ArrayList < String > ( ) ; List < Volume > vplexVolumes = new ArrayList < Volume > ( ) ; for ( URI vplexVolumeURI : vplexVolumeURIList ) { Volume vplexVolume = getDataObject ( Volume . class , vplexVolumeURI , dbClient ) ; if ( vplexVolume == null || vplexVolume . getInactive ( ) ) { log . error ( String . format ( STR_ , vplexVolumeURI . toString ( ) ) ) ; continue ; } vplexVolume . setConsistencyGroup ( cgURI ) ; vplexVolumes . add ( vplexVolume ) ; log . info ( String . format ( STR_ , vplexVolume . getNativeId ( ) , vplexVolume . getDeviceLabel ( ) , cgName , clusterName ) ) ; vplexVolumeNames . add ( vplexVolume . getDeviceLabel ( ) ) ; } client . addVolumesToConsistencyGroup ( cgName , vplexVolumeNames ) ; log . info ( STR_ ) ; dbClient . updateObject ( vplexVolumes ) ; }
public void list ( PrintWriter out , int indent ) { for ( int i = NUM_ ; i < indent ; i ++ ) { out . print ( STR_ ) ; } out . println ( this ) ; }
private Ignite startGridNoOptimize ( String gridName ) throws Exception { return G . start ( getConfiguration ( gridName ) ) ; }
public boolean hasData ( ) { if ( disposed ) { throw new IllegalStateException ( STR_ ) ; } for ( Counter counter : counters . values ( ) ) { if ( counter . getInvocations ( TimeKind . INTERPRETED_AND_COMPILED ) > NUM_ ) { return BOOL_ ; } } return BOOL_ ; }
static int findBestSampleSize ( int actualWidth , int actualHeight , int desiredWidth , int desiredHeight ) { double wr = ( double ) actualWidth / desiredWidth ; double hr = ( double ) actualHeight / desiredHeight ; double ratio = Math . min ( wr , hr ) ; float n = NUM_ ; while ( ( n * NUM_ ) <= ratio ) { n *= NUM_ ; } return ( int ) n ; }
public BubbleChart ( XYMultipleSeriesDataset dataset , XYMultipleSeriesRenderer renderer ) { super ( dataset , renderer ) ; }
public static boolean isLowerCase ( char c ) { return isLowerCase ( ( int ) c ) ; }
private static int decodeOctets ( int i , ByteBuffer bb , StringBuilder sb ) { if ( bb . limit ( ) == NUM_ && ( bb . get ( NUM_ ) & NUM_ ) < NUM_ ) { sb . append ( ( char ) bb . get ( NUM_ ) ) ; return i + NUM_ ; } else { CharBuffer cb = UTF_8_CHARSET . decode ( bb ) ; sb . append ( cb . toString ( ) ) ; return i + bb . limit ( ) * NUM_ - NUM_ ; } }
public static void init ( Component component ) { if ( Registry . is ( STR_ ) || Registry . is ( STR_ ) ) { new MnemonicHelper ( ) . register ( component ) ; } else { LISTENER . addTo ( component ) ; } }
public static char [ ] convertFromUtf32ToCharArray ( int codePoint ) { if ( codePoint < NUM_ ) { return new char [ ] { ( char ) codePoint } ; } codePoint -= NUM_ ; return new char [ ] { ( char ) ( codePoint / NUM_ + NUM_ ) , ( char ) ( codePoint % NUM_ + NUM_ ) } ; }
public HttpConstraintElement ( ) { this . emptyRoleSemantic = EmptyRoleSemantic . PERMIT ; this . transportGuarantee = TransportGuarantee . NONE ; this . rolesAllowed = new String [ NUM_ ] ; }
public MultiDirectionalSimplex ( final int n ) { this ( n , NUM_ ) ; }
public void notationDecl ( String name , String publicId , String systemId ) throws SAXException { if ( m_dtdHandler != null ) { m_dtdHandler . notationDecl ( name , publicId , systemId ) ; } }
private void traceAction ( Bundle data ) { if ( traceCallback != null ) { String severity = data . getString ( MqttServiceConstants . CALLBACK_TRACE_SEVERITY ) ; String message = data . getString ( MqttServiceConstants . CALLBACK_ERROR_MESSAGE ) ; String tag = data . getString ( MqttServiceConstants . CALLBACK_TRACE_TAG ) ; if ( MqttServiceConstants . TRACE_DEBUG . equals ( severity ) ) traceCallback . traceDebug ( tag , message ) ; else if ( MqttServiceConstants . TRACE_ERROR . equals ( severity ) ) traceCallback . traceError ( tag , message ) ; else { Exception e = ( Exception ) data . getSerializable ( MqttServiceConstants . CALLBACK_EXCEPTION ) ; traceCallback . traceException ( tag , message , e ) ; } } }
public void startBackgroundFetchService ( ) { LocalNotification n = new LocalNotification ( ) ; n . setId ( BACKGROUND_FETCH_NOTIFICATION_ID ) ; cancelLocalNotification ( BACKGROUND_FETCH_NOTIFICATION_ID ) ; scheduleLocalNotification ( n , System . currentTimeMillis ( ) + getPreferredBackgroundFetchInterval ( ) * NUM_ , NUM_ ) ; }
public static AffineTransform createAffineTransform ( String s ) throws ParseException { TransformListParser p = new TransformListParser ( ) ; AWTTransformProducer th = new AWTTransformProducer ( ) ; p . setTransformListHandler ( th ) ; p . parse ( s ) ; return th . getAffineTransform ( ) ; }
public void removeStickyFooterItemAtPosition ( int position ) { if ( mDrawerBuilder . mStickyDrawerItems != null && mDrawerBuilder . mStickyDrawerItems . size ( ) > position ) { mDrawerBuilder . mStickyDrawerItems . remove ( position ) ; } DrawerUtils . rebuildStickyFooterView ( mDrawerBuilder ) ; }
public long startTime ( ) { return DistributionStats . getStatTime ( ) ; }
public static void validateMethodSignature ( String sig ) { Assert . isTrue ( isValidMethodSignature ( sig ) ) ; }
public String process ( Item item ) throws ProcessException { int count = NUM_ ; Item ss = item . getItemAs ( Relation . SYLLABLE ) ; Item firstSyllable = FIRST_SYLLABLE_PATH . findItem ( item ) ; for ( Item p = ss ; p != null ; p = p . getPrevious ( ) ) { if ( isAccented ( p ) ) { count ++ ; } if ( p . equalsShared ( firstSyllable ) ) { break ; } } return Integer . toString ( rail ( count ) ) ; }
public static ArtifactCreator makeResourceArtifactCreator ( RepositoryManager repoManager , Iterable < ? extends File > sourcePaths , Iterable < ? extends File > resourcePaths , String resourceRootName , String moduleName , String moduleVersion , boolean verbose , Logger log ) throws IOException { return new ResourceArtifactCreatorImpl ( repoManager , sourcePaths , resourcePaths , resourceRootName , moduleName , moduleVersion , verbose , log ) ; }
public static void shutdownForcely ( int status ) throws Exception { Class z = Class . forName ( STR_ ) ; Method exit = z . getDeclaredMethod ( STR_ , int . class ) ; exit . setAccessible ( BOOL_ ) ; exit . invoke ( z , status ) ; }
private Route nextPostponed ( ) { return postponedRoutes . remove ( NUM_ ) ; }
Attachment generateCode ( ModelId model , String serviceKey ) ;
public Rectangle modelToView ( JTextComponent tc , int pos , Position . Bias bias ) throws BadLocationException { Document doc = editor . getDocument ( ) ; if ( doc instanceof AbstractDocument ) { ( ( AbstractDocument ) doc ) . readLock ( ) ; } try { Rectangle alloc = getVisibleEditorRect ( ) ; if ( alloc != null ) { rootView . setSize ( alloc . width , alloc . height ) ; Shape s = rootView . modelToView ( pos , alloc , bias ) ; if ( s != null ) { return s . getBounds ( ) ; } } } finally { if ( doc instanceof AbstractDocument ) { ( ( AbstractDocument ) doc ) . readUnlock ( ) ; } } return null ; }
public static Properties readProperties ( InputStream in ) throws IOException { return readProperties ( in , null ) ; }
public static final int hashCode ( char [ ] array ) { int length = array . length ; int hash = length == NUM_ ? NUM_ : array [ NUM_ ] ; if ( length < NUM_ ) { for ( int i = length ; -- i > NUM_ ; ) hash = ( hash * NUM_ ) + array [ i ] ; } else { for ( int i = length - NUM_ , last = i > NUM_ ? i - NUM_ : NUM_ ; i > last ; i -= NUM_ ) hash = ( hash * NUM_ ) + array [ i ] ; } return hash & NUM_ ; }
public boolean isUnitVector ( ) { float len = length ( ) ; return NUM_ < len && len < NUM_ ; }
private void writeAttribute ( java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( namespace . equals ( STR_ ) ) { xmlWriter . writeAttribute ( attName , attValue ) ; } else { registerPrefix ( xmlWriter , namespace ) ; xmlWriter . writeAttribute ( namespace , attName , attValue ) ; } }
protected boolean removeLeastRecentlyUsedEntry ( ) { if ( this . entryMap . isEmpty ( ) ) return BOOL_ ; Entry [ ] timeOrderedEntries = new Entry [ this . entryMap . size ( ) ] ; Arrays . sort ( this . entryMap . values ( ) . toArray ( timeOrderedEntries ) ) ; Entry entryToRemove = timeOrderedEntries [ NUM_ ] ; this . entryMap . remove ( entryToRemove . key ) ; this . doRemove ( entryToRemove ) ; return BOOL_ ; }
public void update ( int fps , float angle ) { double speed = ( SPEED / FPS ) * Math . log ( radius ) ; y -= speed ; x += amp * Math . sin ( freq * ( step ++ * speed ) ) + skew ; if ( radius < maxRadius ) { radius += maxRadius / ( ( ( float ) fps / SPEED ) * radius ) ; if ( radius > maxRadius ) radius = maxRadius ; } }
public static < V > List < V > waitUntilMinValuesRecordsReceived ( Properties consumerConfig , String topic , int expectedNumRecords , long waitTime ) throws InterruptedException { List < V > accumData = new ArrayList < > ( ) ; long startTime = System . currentTimeMillis ( ) ; while ( BOOL_ ) { List < V > readData = readValues ( topic , consumerConfig , expectedNumRecords ) ; accumData . addAll ( readData ) ; if ( accumData . size ( ) >= expectedNumRecords ) return accumData ; if ( System . currentTimeMillis ( ) > startTime + waitTime ) throw new AssertionError ( STR_ + expectedNumRecords + STR_ + accumData . size ( ) + STR_ + waitTime + STR_ ) ; Thread . sleep ( Math . min ( waitTime , NUM_ ) ) ; } }
public BaseViewHolder linkify ( int viewId ) { TextView view = getView ( viewId ) ; Linkify . addLinks ( view , Linkify . ALL ) ; return this ; }
public GraphicAttributes ( Properties props ) { super ( props ) ; }
public void handleButton1Request ( RequestInvocationEvent event ) throws ModelControlException { submitCycle = BOOL_ ; modifyProperties ( ) ; forwardTo ( ) ; }
public void writeText ( String text ) throws IOException ;
public abstract void onActionButtonClicked ( ) ;
public static < T extends Key < T > > GroupMatcher < T > anyGroup ( ) { return new GroupMatcher < T > ( STR_ , StringOperatorName . ANYTHING ) ; }
public OpenIDConnect ( IHttpRequestResponse message , String protocol , IBurpExtenderCallbacks callbacks ) { super ( message , protocol , callbacks ) ; super . setToken ( findToken ( ) ) ; super . setProtocolflowID ( analyseProtocol ( ) ) ; add ( this , getProtocolflowID ( ) ) ; }
public int next ( ) { int next = _currentNode ; int pos = -- m_ancestorsPos ; _currentNode = ( pos >= NUM_ ) ? m_ancestors . elementAt ( m_ancestorsPos ) : DTM . NULL ; return returnNode ( next ) ; }
public void init$Children ( ) { children = new ASTNode [ NUM_ ] ; }
static void migrateGlobal ( int counts [ ] , int segCounts [ ] , int subIndex , OrdinalMap map ) { final LongValues ordMap = map . getGlobalOrds ( subIndex ) ; counts [ NUM_ ] += segCounts [ NUM_ ] ; for ( int ord = NUM_ ; ord < segCounts . length ; ord ++ ) { int count = segCounts [ ord ] ; if ( count != NUM_ ) { counts [ NUM_ + ( int ) ordMap . get ( ord - NUM_ ) ] += count ; } } }
public static String toString ( double M_ [ ] [ ] ) { return toString ( M_ , NUM_ ) ; }
public void gen ( ) throws Exception { infoGen . gen ( ) ; }
public CharSequenceCompiler ( ProxyClassLoader loader , Iterable < String > options ) { compiler = ToolProvider . getSystemJavaCompiler ( ) ; if ( compiler == null ) { throw new IllegalStateException ( STR_ + STR_ ) ; } classLoader = new ClassLoaderImpl ( loader ) ; diagnostics = new DiagnosticCollector < > ( ) ; final JavaFileManager fileManager = compiler . getStandardFileManager ( diagnostics , null , null ) ; javaFileManager = new FileManagerImpl ( fileManager , classLoader ) ; this . options = new ArrayList < > ( ) ; if ( options != null ) { for ( String option : options ) { this . options . add ( option ) ; } } }
public static Integer EKEYREJECTED ( ) { return getPlatformErrorCodes ( ) . EKEYREJECTED ( ) ; }
public boolean drawImage ( Image img , int dx1 , int dy1 , int dx2 , int dy2 , int sx1 , int sy1 , int sx2 , int sy2 , ImageObserver observer ) { return drawImage ( img , dx1 , dy1 , dx2 , dy2 , sx1 , sy1 , sx2 , sy2 , null , observer ) ; }
static native long OpenThreadToken ( long hThread , int desiredAccess , boolean openAsSelf ) throws WindowsException ;
public ISO9796d2PSSSigner ( AsymmetricBlockCipher cipher , Digest digest , int saltLength , boolean implicit ) { this . cipher = cipher ; this . digest = digest ; this . hLen = digest . getDigestSize ( ) ; this . saltLength = saltLength ; if ( implicit ) { trailer = TRAILER_IMPLICIT ; } else { Integer trailerObj = ( Integer ) trailerMap . get ( digest . getAlgorithmName ( ) ) ; if ( trailerObj != null ) { trailer = trailerObj . intValue ( ) ; } else { throw new IllegalArgumentException ( STR_ ) ; } } }
public char charAt ( int index ) ;
public void onDataConnectionStateChanged ( int state ) { }
public abstract int size ( ) ;
protected boolean axisHasBeenProcessed ( int axisRoot ) { return ! ( m_nextsib . elementAt ( axisRoot ) == NOTPROCESSED ) ; }
public void testGetFilterMappingsWithMultipleMappings ( ) throws Exception { String xml = WEBAPP_TEST_HEADER + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ ; this . builder . build ( new ByteArrayInputStream ( xml . getBytes ( STR_ ) ) ) ; WebXml webXml = WebXmlIo . parseWebXml ( new ByteArrayInputStream ( xml . getBytes ( STR_ ) ) , getEntityResolver ( ) ) ; List < String > filterMappings = WebXmlUtils . getFilterMappings ( webXml , STR_ ) ; assertEquals ( NUM_ , filterMappings . size ( ) ) ; assertEquals ( STR_ , filterMappings . get ( NUM_ ) ) ; assertEquals ( STR_ , filterMappings . get ( NUM_ ) ) ; assertEquals ( STR_ , filterMappings . get ( NUM_ ) ) ; }
private Hasher update ( int bytes ) { try { update ( scratch . array ( ) , NUM_ , bytes ) ; } finally { scratch . clear ( ) ; } return this ; }
protected boolean extensionsAreInitialized ( ) { return extensions . isInitialized ( ) ; }
public final void initialize ( InetAddress ipAddress , int port , SIPTransactionStack transactionStack ) { this . sipStack = transactionStack ; this . savedIpAddress = ipAddress . getHostAddress ( ) ; this . ipAddress = ipAddress ; this . port = port ; this . sentByHostPort = new HostPort ( ) ; this . sentByHostPort . setHost ( new Host ( ipAddress . getHostAddress ( ) ) ) ; this . sentByHostPort . setPort ( port ) ; }
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( nodeprocessinginstructionnodename . class , args ) ; }
public void addListener ( IEntityClassListener listener ) ;
public boolean wasShiftKeyPressedWhenActionInvoked ( ) { if ( event != null ) { return ( event . stateMask & SWT . SHIFT ) > NUM_ ; } else { return BOOL_ ; } }
public static < T > List < T > emptyList ( final List < T > list ) { return ( list != null ? list : Collections . < T > emptyList ( ) ) ; }
public synchronized void save ( ) throws IOException { try ( KeyTabOutputStream kos = new KeyTabOutputStream ( new FileOutputStream ( tabName ) ) ) { kos . writeVersion ( kt_vno ) ; for ( int i = NUM_ ; i < entries . size ( ) ; i ++ ) { kos . writeEntry ( entries . elementAt ( i ) ) ; } } }
public MoveTargetEdit ( int offset , MoveSourceEdit source ) { this ( offset ) ; setSourceEdit ( source ) ; }
public void end ( ) { String tag = ( String ) m_tagStack . remove ( m_tagStack . size ( ) - NUM_ ) ; spacing ( ) ; m_out . print ( STR_ ) ; m_out . print ( STR_ ) ; m_out . print ( tag ) ; m_out . print ( STR_ ) ; println ( ) ; }
protected void readContents ( ) { boolean done = BOOL_ ; while ( ! ( done || err ( ) ) ) { int code = read ( ) ; switch ( code ) { case NUM_ : readBitmap ( ) ; break ; case NUM_ : code = read ( ) ; switch ( code ) { case NUM_ : currentFrame = new GifFrame ( ) ; readGraphicControlExt ( ) ; break ; case NUM_ : readBlock ( ) ; String app = STR_ ; for ( int i = NUM_ ; i < NUM_ ; i ++ ) { app += ( char ) block [ i ] ; } if ( app . equals ( STR_ ) ) { readNetscapeExt ( ) ; } else { skip ( ) ; } break ; case NUM_ : skip ( ) ; break ; case NUM_ : skip ( ) ; break ; default : skip ( ) ; } break ; case NUM_ : done = BOOL_ ; break ; case NUM_ : default : status = STATUS_FORMAT_ERROR ; } } }
public LogControllerTest ( ) { testLines = new String [ numOfLines ] ; for ( int i = NUM_ ; i < numOfLines ; i ++ ) { testLines [ i ] = STR_ + i ; } }
public static void writeLongInteger ( OutputStream theOs , long theValue ) throws IOException { int nOctets = NUM_ ; while ( ( theValue > > ( NUM_ * nOctets ) ) > NUM_ ) { nOctets ++ ; } theOs . write ( ( byte ) nOctets ) ; for ( int i = nOctets ; i > NUM_ ; i -- ) { byte octet = ( byte ) ( theValue > > ( NUM_ * ( i - NUM_ ) ) ) ; byte byteValue = ( byte ) ( octet & ( byte ) ( NUM_ ) ) ; theOs . write ( byteValue ) ; } }
protected GridClient startClient ( String addr , int port ) throws GridClientException { GridClientConfiguration cliCfg = new GridClientConfiguration ( ) ; cliCfg . setServers ( Collections . singleton ( addr + STR_ + port ) ) ; cliCfg . setProtocol ( protocol ( ) ) ; return GridClientFactory . start ( cliCfg ) ; }
private void upgradePrivileges ( PrivilegeManager pm , String appName , String resourceTypeUUID ) throws UpgradeException { final SearchFilter searchFilter = new SearchFilter ( Privilege . APPLICATION_SEARCH_ATTRIBUTE , appName ) ; try { final List < Privilege > privileges = pm . search ( Collections . singleton ( searchFilter ) ) ; for ( Privilege privilege : privileges ) { if ( StringUtils . isEmpty ( privilege . getResourceTypeUuid ( ) ) ) { upgradePrivilege ( pm , privilege , resourceTypeUUID ) ; } } } catch ( EntitlementException ee ) { throw new UpgradeException ( STR_ + appName , ee ) ; } }
public StringDate ( String identifier , AbstractTagFrameBody frameBody ) { super ( identifier , frameBody , NUM_ ) ; }
public WeibullDistr ( Random seed , double alpha , double beta ) { this ( alpha , beta ) ; numGen . reseedRandomGenerator ( seed . nextLong ( ) ) ; }
public final void flush ( ) { if ( offset > NUM_ && offset >= minLenToWrite ( ) ) { ChunkRaw c = new ChunkRaw ( offset , getChunkId ( ) , BOOL_ ) ; c . data = buf ; c . writeChunk ( outputStream ) ; totalBytesWriten += c . len + NUM_ ; chunksWriten ++ ; offset = NUM_ ; availLen = maxChunkLen ; postReset ( ) ; } }
void copy ( InputStream in , OutputStream out , int bufSize ) ;
public GPUImageFilterGroup ( List < GPUImageFilter > filters ) { mFilters = filters ; if ( mFilters == null ) { mFilters = new ArrayList < GPUImageFilter > ( ) ; } else { updateMergedFilters ( ) ; } mGLCubeBuffer = ByteBuffer . allocateDirect ( CUBE . length * NUM_ ) . order ( ByteOrder . nativeOrder ( ) ) . asFloatBuffer ( ) ; mGLCubeBuffer . put ( CUBE ) . position ( NUM_ ) ; mGLTextureBuffer = ByteBuffer . allocateDirect ( TEXTURE_NO_ROTATION . length * NUM_ ) . order ( ByteOrder . nativeOrder ( ) ) . asFloatBuffer ( ) ; mGLTextureBuffer . put ( TEXTURE_NO_ROTATION ) . position ( NUM_ ) ; float [ ] flipTexture = TextureRotationUtil . getRotation ( Rotation . NORMAL , BOOL_ , BOOL_ ) ; mGLTextureFlipBuffer = ByteBuffer . allocateDirect ( flipTexture . length * NUM_ ) . order ( ByteOrder . nativeOrder ( ) ) . asFloatBuffer ( ) ; mGLTextureFlipBuffer . put ( flipTexture ) . position ( NUM_ ) ; }
public static void run ( String scheduleFile , String networkFile , String crs , String outputFolder ) { TransitSchedule schedule = ScheduleTools . readTransitSchedule ( scheduleFile ) ; Network network = NetworkTools . readNetwork ( networkFile ) ; ScheduleShapeFileWriter s2s = new ScheduleShapeFileWriter ( schedule , network , crs ) ; s2s . routes2Polylines ( outputFolder + STR_ ) ; s2s . stopFacilities2Shapes ( outputFolder + STR_ , STR_ ) ; }
public static UpperBoundCapture fromInclusive ( Instant lower ) { return from ( Optional . of ( TimeRangeBound . inclusive ( lower ) ) ) ; }
public void storeOriginals ( ) { mStartingStartTrim = mStartTrim ; mStartingEndTrim = mEndTrim ; mStartingRotation = mRotation ; }
public void onLastItemVisible ( ) ;
public boolean writeCharacteristic ( BluetoothGattCharacteristic characteristic , byte [ ] value ) { if ( mBluetoothGatt != null ) { characteristic . setValue ( value ) ; return mBluetoothGatt . writeCharacteristic ( characteristic ) ; } return BOOL_ ; }
public Object runSafely ( Catbert . FastStack stack ) throws Exception { MediaNode node = getMediaNode ( stack ) ; return new Integer ( node == null ? NUM_ : node . getNumChildren ( ) ) ; }
public static PlaceholderFragment newInstance ( ) { PlaceholderFragment fragment = new PlaceholderFragment ( ) ; Bundle args = new Bundle ( ) ; fragment . setArguments ( args ) ; return fragment ; }
public void rollback ( ) { try { transaction . rollback ( ) ; } finally { endTransaction ( ) ; } }
void onSourcePathChanged ( ) ;
public GeneralRBFKernel ( DistanceMetric d , double sigma ) { super ( d ) ; setSigma ( sigma ) ; }
void invalidate ( ) ;
private static float saturate ( float f ) { return Math . max ( NUM_ , Math . min ( NUM_ , f ) ) ; }
public final void mul ( float scalar , Matrix4f m1 ) { this . m00 = m1 . m00 * scalar ; this . m01 = m1 . m01 * scalar ; this . m02 = m1 . m02 * scalar ; this . m03 = m1 . m03 * scalar ; this . m10 = m1 . m10 * scalar ; this . m11 = m1 . m11 * scalar ; this . m12 = m1 . m12 * scalar ; this . m13 = m1 . m13 * scalar ; this . m20 = m1 . m20 * scalar ; this . m21 = m1 . m21 * scalar ; this . m22 = m1 . m22 * scalar ; this . m23 = m1 . m23 * scalar ; this . m30 = m1 . m30 * scalar ; this . m31 = m1 . m31 * scalar ; this . m32 = m1 . m32 * scalar ; this . m33 = m1 . m33 * scalar ; }
public synchronized boolean isRunning ( ) throws ReplicatorException { String command = vmrrControlScript + STR_ ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STR_ + command ) ; } int result = this . execAndReturnExitValue ( command ) ; return ( result == NUM_ ) ; }
public boolean checkValidGenericType ( Type t ) { return firstIncompatibleTypeArg ( t ) == null ; }
protected Transferable createTransferable ( JComponent comp ) { exportComp = ( JTextComponent ) comp ; shouldRemove = BOOL_ ; p0 = exportComp . getSelectionStart ( ) ; p1 = exportComp . getSelectionEnd ( ) ; return ( p0 != p1 ) ? ( new TextTransferable ( exportComp , p0 , p1 ) ) : null ; }
private boolean onTap ( float rawX , float rawY ) { OcrGraphic graphic = mGraphicOverlay . getGraphicAtLocation ( rawX , rawY ) ; TextBlock text = null ; if ( graphic != null ) { text = graphic . getTextBlock ( ) ; if ( text != null && text . getValue ( ) != null ) { Log . d ( TAG , STR_ + text . getValue ( ) ) ; tts . speak ( text . getValue ( ) , TextToSpeech . QUEUE_ADD , null , STR_ ) ; } else { Log . d ( TAG , STR_ ) ; } } else { Log . d ( TAG , STR_ ) ; } return text != null ; }
private static List < BatchResponse > fromJsonString ( final String json ) { return new Gson ( ) . fromJson ( json , new TypeToken < List < BatchResponse > > ( ) { } . getType ( ) ) ; }
public boolean isDynazoomAvailable ( String userAgent ) { if ( this . defaultMaster || this . isEmpty ( ) ) return BOOL_ ; MuninNode node = getChildren ( ) . get ( NUM_ ) ; if ( node == null ) return BOOL_ ; MuninPlugin plugin = node . getPlugin ( NUM_ ) ; return plugin != null && isDynazoomAvailable ( plugin , userAgent ) ; }
protected void waitForRelease ( ) { }
public TimerWorker ( ) { total = new AtomicLong ( ) ; callsNumber = new AtomicLong ( ) ; minimum = new AtomicLong ( ) ; maximum = new AtomicLong ( ) ; }
private void switchCurrentBuffer ( ) { currBuf = currBufIdx == file . numBuffers ( ) ? file . addBuffer ( ) : file . getBuffer ( currBufIdx ) ; bufPosition = NUM_ ; bufStart = ( long ) BUFFER_SIZE * ( long ) currBufIdx ; bufLength = BUFFER_SIZE ; }
public boolean isPrepareError ( ) { return BOOL_ ; }
public void calculateTermFrequency ( Set < Word > terms ) { termFrequency = new int [ terms . size ( ) ] ; termMagnitude = NUM_ ; int i = NUM_ ; for ( final Word term : terms ) { for ( final Word token : tokens ) { if ( term . getLemma ( ) . equals ( token . getLemma ( ) ) ) { termFrequency [ i ] ++ ; termMagnitude ++ ; } } i ++ ; } }
public static void storagePortsJson ( String id ) { List < StoragePortInfo > items = Lists . newArrayList ( ) ; CachedResources < StorageSystemRestRep > storageSystems = StorageSystemUtils . createCache ( ) ; List < StoragePortRestRep > storagePorts = StoragePortUtils . getStoragePortsByVirtualArray ( uri ( id ) ) ; Map < URI , String > networks = NetworkUtils . getNetworkNamesByVirtualArray ( id ) ; for ( StoragePortRestRep storagePort : storagePorts ) { StoragePortInfo item = new StoragePortInfo ( storagePort , storageSystems . get ( storagePort . getStorageDevice ( ) ) ) ; item . assigned = VirtualArrayUtils . isAssigned ( storagePort , id ) ; item . network = networks . get ( id ( storagePort . getNetwork ( ) ) ) ; items . add ( item ) ; } renderJSON ( DataTablesSupport . createJSON ( items , params ) ) ; }
public static final Criterion flagIsSet ( Flag flag ) { return new FlagCriterion ( flag , BooleanOperator . set ( ) ) ; }
private void pathCreateNode ( float x , float y ) throws OsmIllegalOperationException { Node lastSelectedNode = logic . getSelectedNode ( ) ; Way lastSelectedWay = logic . getSelectedWay ( ) ; if ( appendTargetNode != null ) { logic . performAppendAppend ( x , y ) ; } else { logic . performAdd ( x , y ) ; } if ( logic . getSelectedNode ( ) == null ) { if ( currentActionMode != null ) currentActionMode . finish ( ) ; tagApplicable ( lastSelectedNode , lastSelectedWay , BOOL_ , BOOL_ ) ; } else { createdWay = logic . getSelectedWay ( ) ; if ( createdWay == null ) { createdNodes = new ArrayList < Node > ( ) ; } createdNodes . add ( logic . getSelectedNode ( ) ) ; } main . invalidateMap ( ) ; }
private void incorporateTimestampValidationData ( final ValidationContext validationContext ) { final Element timeStampValidationDataDom = DSSXMLUtils . addElement ( documentDom , unsignedSignaturePropertiesDom , XAdESNamespaces . XAdES141 , STR_ ) ; final Set < CertificateToken > toIncludeSetOfCertificates = xadesSignature . getCertificatesForInclusion ( validationContext ) ; final List < CertificateToken > toIncludeCertificates = new ArrayList < CertificateToken > ( ) ; toIncludeCertificates . addAll ( toIncludeSetOfCertificates ) ; incorporateCertificateValues ( timeStampValidationDataDom , toIncludeCertificates ) ; incorporateRevocationValues ( timeStampValidationDataDom , validationContext ) ; String id = STR_ ; final List < TimestampToken > archiveTimestamps = xadesSignature . getArchiveTimestamps ( ) ; if ( archiveTimestamps . size ( ) > NUM_ ) { final TimestampToken timestampToken = archiveTimestamps . get ( archiveTimestamps . size ( ) - NUM_ ) ; id = timestampToken . getDSSId ( ) . asXmlId ( ) ; } timeStampValidationDataDom . setAttribute ( STR_ , STR_ + id ) ; }
public boolean checkPermission ( java . security . acl . Permission perm ) { return ( permList . contains ( perm ) ) ; }
public boolean isPackage ( ) { return ! testAnyFlags ( ALL_ACCESS ) ; }
protected WallRepostQuery object ( String value ) { return unsafeParam ( STR_ , value ) ; }
ExecutionQuery activityId ( String activityId ) ;
public String fileName ( ) { return fileName ; }
void done ( T object , SabresException e ) ;
abstract protected void updateView ( ) ;
public boolean isSelectionFindable ( ) { return selected . size ( ) > NUM_ ; }
public ASN1Primitive toASN1Primitive ( ) { ASN1EncodableVector v = new ASN1EncodableVector ( ) ; v . add ( oid ) ; v . add ( accessRights ) ; return new DERApplicationSpecific ( EACTags . CERTIFICATE_HOLDER_AUTHORIZATION_TEMPLATE , v ) ; }
public void onRefreshComplete ( ) ;
ClientResponse post ( URI uri , String body ) throws InternalException ;
public static void testRef2Prim ( ) { for ( Wrapper from : Wrapper . values ( ) ) { for ( Wrapper to : Wrapper . values ( ) ) { if ( from == Wrapper . VOID || to == Wrapper . VOID || to == Wrapper . OBJECT ) { continue ; } Object value = RANDOM_VALUES . get ( from ) ; for ( TestConversionMode mode : TestConversionMode . values ( ) ) { if ( from != Wrapper . OBJECT ) { Object convValue = to . wrap ( value ) ; testConversion ( mode , from . wrapperType ( ) , to . primitiveType ( ) , value , convValue , BOOL_ , null ) ; } else { testConversion ( mode , from . wrapperType ( ) , to . primitiveType ( ) , value , null , BOOL_ , ClassCastException . class ) ; } } } } }
public void createStructure ( ) { MP3File . getStructureFormatter ( ) . openHeadingElement ( TYPE_FRAME , getIdentifier ( ) ) ; MP3File . getStructureFormatter ( ) . addElement ( TYPE_FRAME_SIZE , frameSize ) ; statusFlags . createStructure ( ) ; encodingFlags . createStructure ( ) ; frameBody . createStructure ( ) ; MP3File . getStructureFormatter ( ) . closeHeadingElement ( TYPE_FRAME ) ; }
public void deleteDirectoryIgnoreException ( S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto ) ;
void onMoveMotionEvent ( MotionEvent ev , float diffX , float diffY ) ;
public static boolean validateData ( String data ) { return ( data != null && data . replaceAll ( STR_ , STR_ ) . startsWith ( BEGIN_VCARD ) && data . replaceAll ( STR_ , STR_ ) . endsWith ( END_VCARD ) ) ; }
protected void parseColumnName ( Marker start , Map < String , String > tableAliasByColumnAliases , Map < String , String > columnNameByAliases ) { try { String tableName = tokens . consume ( ) ; String columnName = null ; if ( tokens . canConsume ( STR_ ) ) { columnName = tokens . consume ( ) ; } else { columnName = tableName ; tableName = null ; } String alias = columnName ; if ( tokens . canConsume ( STR_ ) ) { alias = tokens . consume ( ) ; } columnNameByAliases . put ( alias , columnName ) ; tableAliasByColumnAliases . put ( alias , tableName ) ; } catch ( ParsingException e ) { } }
public Collection createCollection ( int userId , int attachId , String attachType ) ;
public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; String childData ; doc = ( Document ) load ( STR_ , BOOL_ ) ; elementList = doc . getElementsByTagName ( STR_ ) ; nameNode = elementList . item ( NUM_ ) ; child = ( CharacterData ) nameNode . getFirstChild ( ) ; child . deleteData ( NUM_ , NUM_ ) ; childData = child . getData ( ) ; assertEquals ( STR_ , STR_ , childData ) ; }
public void printErrorMessage ( final String message ) ;
private void createFASTPolicy ( String policyID , AutoTieringPolicy policy , String policyRuleName , URI storageSystemURI , String policyEnabled , String provisioningType ) throws IOException { boolean newPolicy = BOOL_ ; if ( null == policy ) { newPolicy = BOOL_ ; policy = new AutoTieringPolicy ( ) ; policy . setId ( URIUtil . createId ( AutoTieringPolicy . class ) ) ; policy . setStorageSystem ( storageSystemURI ) ; policy . setNativeGuid ( policyID ) ; policy . setSystemType ( getDeviceType ( storageSystemURI ) ) ; } policy . setLabel ( policyRuleName ) ; policy . setPolicyName ( policyRuleName ) ; policy . setPolicyEnabled ( policyEnabled . equalsIgnoreCase ( STR_ ) ) ; policy . setProvisioningType ( provisioningType ) ; if ( newPolicy ) { _newFastPolicies . add ( policy ) ; } else { _updateFastPolicies . add ( policy ) ; } }
protected FileStore ( DataHandler handler , String name , String mode ) { this . handler = handler ; this . name = name ; try { boolean exists = FileUtils . exists ( name ) ; if ( exists && ! FileUtils . canWrite ( name ) ) { mode = STR_ ; } else { FileUtils . createDirectories ( FileUtils . getParent ( name ) ) ; } file = FileUtils . open ( name , mode ) ; if ( exists ) { fileLength = file . size ( ) ; } } catch ( IOException e ) { throw DbException . convertIOException ( e , STR_ + name + STR_ + mode ) ; } this . mode = mode ; }
public static < K extends Comparable < ? > , V > ImmutableRangeMap < K , V > of ( Range < K > range , V value ) { return new ImmutableRangeMap < K , V > ( ImmutableList . of ( range ) , ImmutableList . of ( value ) ) ; }
public static RE mkPlus ( RE x ) { if ( x . equals ( epsilon ) || x . equals ( empty ) ) { return epsilon ; } RE res = new RE ( ReOp . PLUS ) ; res . unaryArg = x ; return res ; }
private static void test_getResourceAsStream ( Configuration config ) throws Exception { createInstanceAndCallStaticMethod ( config , STR_ , STR_ ) ; }
void loaded ( ) ;
public void displayNodeInfo ( String nodeID ) { if ( ! nodeID . equals ( selNodeID ) ) { int nAdd = Integer . parseInt ( nodeID ) ; SerialNode s = null ; for ( int k = NUM_ ; k < numConfigNodes ; k ++ ) { if ( nAdd == configNodeAddresses [ k ] ) { s = configNodes [ k ] ; } } if ( s == null ) { log . error ( STR_ + nodeID + STR_ ) ; return ; } selNodeID = nodeID ; selNode = s ; selNodeNum = nAdd ; numInputBits = InputBits . getNumInputBits ( ) ; numOutputBits = OutputBits . getNumOutputBits ( ) ; nodeInfoText . setText ( STR_ + numInputBits + STR_ + rb . getString ( STR_ ) + STR_ + numOutputBits + STR_ + rb . getString ( STR_ ) ) ; } if ( inputSelected ) { numBits = numInputBits ; assignmentPanel . setBorder ( inputBorderTitled ) ; } else { numBits = numOutputBits ; assignmentPanel . setBorder ( outputBorderTitled ) ; } ( ( AssignmentTableModel ) assignmentListModel ) . fireTableDataChanged ( ) ; }
public static void writeln ( boolean b , boolean flush ) { write ( b ) ; writelnWithFlush ( flush ) ; }
public MySqlSpoutConfig ( MySqlConfig mysqlConfig , ZkBinLogStateConfig zkBinLogStateConfig , FailureConfig failureConfig , int metricsTimeBucketSizeInSecs , int bufferCapacity ) { this . mysqlConfig = mysqlConfig ; this . zkBinLogStateConfig = zkBinLogStateConfig ; this . failureConfig = failureConfig ; this . metricsTimeBucketSizeInSecs = metricsTimeBucketSizeInSecs ; this . bufferCapacity = bufferCapacity ; }
public synchronized void saveCommitPoint ( Long indexCommitGen ) { AtomicInteger reserveCount = savedCommits . get ( indexCommitGen ) ; if ( reserveCount == null ) reserveCount = new AtomicInteger ( ) ; reserveCount . incrementAndGet ( ) ; savedCommits . put ( indexCommitGen , reserveCount ) ; }
void endNamespaceDecls ( ) throws SAXException ;
public GraphBuilder < N > expectedNodeCount ( int expectedNodeCount ) { checkArgument ( expectedNodeCount >= NUM_ , STR_ , expectedNodeCount ) ; this . expectedNodeCount = Optional . of ( expectedNodeCount ) ; return this ; }
void onRouteSelected ( String name , MediaRouteController mediaRouteController ) ;
public GitlabProject createUserProject ( Integer userId , String name ) throws IOException { return createUserProject ( userId , name , null , null , null , null , null , null , null , null , null , null ) ; }
public Keyboard ( Context context , int xmlLayoutResId , int modeId , int width , int height ) { mDisplayWidth = width ; mDisplayHeight = height ; mDefaultHorizontalGap = NUM_ ; mDefaultWidth = mDisplayWidth / NUM_ ; mDefaultVerticalGap = NUM_ ; mDefaultHeight = mDefaultWidth ; mKeys = new ArrayList < Key > ( ) ; mModifierKeys = new ArrayList < Key > ( ) ; mKeyboardMode = modeId ; loadKeyboard ( context , context . getResources ( ) . getXml ( xmlLayoutResId ) ) ; }
public int writeLong ( int index , long l ) { return this . writeULong ( index , l ) ; }
public static void clearConfiguration ( Context context ) { PreferenceManager . getDefaultSharedPreferences ( context ) . edit ( ) . remove ( BundleKeys . FOLDER_NAME ) . remove ( BundleKeys . FOLDER_LOCATION ) . remove ( BundleKeys . PUBLIC_TEMP ) . apply ( ) ; }
public static int maxFill ( final int n , final float f ) { return Math . min ( ( int ) Math . ceil ( n * f ) , n - NUM_ ) ; }
private void updateExistingStorageSize ( StorageData storageData ) throws IOException , SerializationException { if ( null != storageData ) { synchronized ( storageData ) { long newSize = getDiskSizeForStorage ( storageData ) ; if ( newSize != storageData . getDiskSize ( ) ) { storageData . setDiskSize ( newSize ) ; writeStorageDataToDisk ( storageData ) ; } } } }
protected void computeAdditionalDimensionForCompositeAggregators ( ) { Map < Set < String > , Integer > keysToCombinationId = getKeysToCombinationId ( ) ; final int initialKeysCombinationsSize = dimensionsDescriptorIDToKeys . size ( ) ; for ( int keysIndex = NUM_ ; keysIndex < initialKeysCombinationsSize ; ++ keysIndex ) { Set < String > keys = dimensionsDescriptorIDToKeys . get ( keysIndex ) . getFields ( ) ; int ddId = keysIndex * customTimeBucketsCombination . size ( ) ; Map < String , Set < String > > valueToAggregators = dimensionsDescriptorIDToValueToCompositeAggregator . get ( ddId ) ; Map < String , Set < String > > compositeAggregatorToValues = getAggregatorToValues ( valueToAggregators ) ; for ( Map . Entry < String , Set < String > > aggregatorToValuesEntry : compositeAggregatorToValues . entrySet ( ) ) { AbstractTopBottomAggregator aggregator = getCompositeAggregatorByName ( aggregatorToValuesEntry . getKey ( ) ) ; Set < String > subCombination = aggregator . getSubCombinations ( ) ; addSubKeysAndAggregator ( aggregatorToValuesEntry . getValue ( ) , keys , subCombination , aggregator . getEmbedAggregatorName ( ) , keysToCombinationId ) ; } } }
public String toString ( ) { String s = this . getClass ( ) . getName ( ) + STR_ + this . name + STR_ + this . n + STR_ ; for ( int r = NUM_ ; r < this . n ; r ++ ) { for ( int c = NUM_ ; c < this . n ; c ++ ) { s = s + this . getValue ( r , c ) + STR_ ; } s = s + STR_ ; } return s ; }
public Prepared prepare ( String sql , boolean rightsChecked ) { Parser parser = new Parser ( this ) ; parser . setRightsChecked ( rightsChecked ) ; return parser . prepare ( sql ) ; }
public Triangle rayTest ( Ray ray , float distance , Bits allowedMeshParts ) { Triangle hitTriangle = null ; tmpRayTestRayFrom . set ( ray . origin ) ; tmpRayTestRayTo . set ( ray . direction ) . scl ( distance ) . add ( tmpRayTestRayFrom ) ; raycastCallback . setHitFraction ( NUM_ ) ; raycastCallback . clearReport ( ) ; raycastCallback . setFrom ( tmpRayTestRayFrom ) ; raycastCallback . setTo ( tmpRayTestRayTo ) ; raycastCallback . setAllowedMeshPartIndices ( allowedMeshParts ) ; collisionShape . performRaycast ( raycastCallback , tmpRayTestRayFrom , tmpRayTestRayTo ) ; if ( raycastCallback . triangleIndex != - NUM_ ) { hitTriangle = graph . getTriangleFromMeshPart ( raycastCallback . partId , raycastCallback . triangleIndex ) ; } return hitTriangle ; }
void parseRule ( String source ) throws CSSException , IOException ;
public MethodInfo ( ClassInfo myClass , String name , ClassInfo returnType , ClassInfo [ ] paramTypes , int accessFlags ) { this . myClass = myClass ; this . name = name ; this . returnType = returnType ; this . paramTypes = paramTypes ; this . modifiers = accessFlags ; }
private Builder ( ) { super ( Event35Id . SCHEMA$ ) ; }
protected void save ( File file , double [ ] data ) throws IOException { PrintWriter writer = null ; try { writer = new PrintWriter ( file ) ; for ( int i = NUM_ ; i < data . length ; i ++ ) { writer . println ( data [ i ] ) ; } } finally { if ( writer != null ) { writer . close ( ) ; } } }
public static String toString ( URL url ) throws IOException { return toString ( url , Charset . defaultCharset ( ) ) ; }
public Maybe < Zipper < A > > maybeRemoveNext ( ) { return Maybe . JustWhenTrue ( ! isEnd ( ) , null ) ; }
public CEPTextWatcher ( EventoDeValidacao callbackErros ) { setEventoDeValidacao ( callbackErros ) ; }
public final static String base64Decode ( String str ) { if ( str == null ) return null ; return new String ( base64Decode ( str . getBytes ( ) ) ) ; }
public void startIndexFileRepoJobs ( String uniquename ) { try { Scheduler scheduler = Singleton . getScheduler ( ) ; JobDetail job = newJob ( IndexFileRepoJob . class ) . withIdentity ( STR_ + uniquename ) . build ( ) ; SimpleTrigger trigger = newTrigger ( ) . withIdentity ( STR_ + uniquename ) . withSchedule ( simpleSchedule ( ) . withIntervalInSeconds ( this . INDEXTIME ) . repeatForever ( ) ) . build ( ) ; job . getJobDataMap ( ) . put ( STR_ , this . REPOLOCATION ) ; job . getJobDataMap ( ) . put ( STR_ , this . LOWMEMORY ) ; scheduler . scheduleJob ( job , trigger ) ; scheduler . start ( ) ; } catch ( SchedulerException ex ) { LOGGER . severe ( STR_ + ex . getClass ( ) + STR_ + ex . getMessage ( ) ) ; } }
public boolean stem ( char [ ] word ) { return stem ( word , word . length ) ; }
public void viewPhotoSphere ( PanoramaViewHelper helper ) ;
private void updateProgress ( int progress ) { if ( myHost != null ) { myHost . updateProgress ( progress ) ; } else { System . out . println ( STR_ + progress + STR_ ) ; } }
public static double optimizeWindowSize ( double delta , double maxDelta , double currentLevel , double targetLevel ) { if ( delta <= NUM_ ) { throw new IllegalArgumentException ( STR_ + delta ) ; } double ratio = currentLevel / targetLevel ; if ( ratio > NUM_ ) ratio = NUM_ ; if ( ratio < NUM_ ) ratio = NUM_ ; double newDelta = delta * ratio ; if ( newDelta > maxDelta ) newDelta = maxDelta ; return newDelta ; }
private String binaryNameToClassName ( boolean isSignature , String name ) { while ( name . startsWith ( STR_ ) ) { name = name . substring ( NUM_ , name . length ( ) ) ; isSignature = BOOL_ ; } if ( name . startsWith ( STR_ ) && name . endsWith ( STR_ ) ) { name = name . substring ( NUM_ , name . length ( ) - NUM_ ) ; } else if ( isSignature ) { if ( name . equals ( STR_ ) || name . equals ( STR_ ) || name . equals ( STR_ ) || name . equals ( STR_ ) || name . equals ( STR_ ) || name . equals ( STR_ ) || name . equals ( STR_ ) || name . equals ( STR_ ) || name . equals ( STR_ ) ) { return null ; } else { throw new RuntimeException ( STR_ + name ) ; } } else { } name = name . replace ( STR_ , STR_ ) ; return name ; }
public ByteBuffer readBinary ( ) throws IOException { _messageReader . next ( ) ; return _messageReader . getBinary ( ) ; }
public final CharBuffer append ( boolean b ) { return append ( String . valueOf ( b ) ) ; }
public File saveFile ( String where ) { return new File ( savePath ( where ) ) ; }
public boolean validate ( Problems problems , String compName , T model ) ;
public static Matcher < BindingSet > binds ( String name , String value ) { if ( value . startsWith ( STR_ ) ) { value = WikibaseUris . getURISystem ( ) . property ( PropertyType . CLAIM ) + value ; } return new BindsMatcher < URI > ( name , equalTo ( uri ( value ) ) ) ; }
public abstract String clientTypeName ( ) ;
public void localEvict ( Collection < ? extends K > keys ) ;
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( namednodemapreturnattrnode . class , args ) ; }
public static void isValid ( final String rsql ) { parseRsql ( rsql ) ; }
public GameEventEntry ( final String id , final String timestamp , final String source , final String event , final String param1 , final String param2 ) { this . id = id ; this . timestamp = timestamp ; this . source = source ; this . event = event ; this . param1 = param1 ; this . param2 = param2 ; }
public String nextToken ( boolean trim ) { for ( int i = NUM_ ; i < regexps . length ; i ++ ) { if ( ! matchers [ i ] . region ( position , input . length ( ) ) . lookingAt ( ) ) continue ; position = matchers [ i ] . end ( ) ; matchingIndex = i ; return ( trim ? matchers [ i ] . group ( ) . trim ( ) : matchers [ i ] . group ( ) ) ; } matchingIndex = - NUM_ ; return null ; }
private static boolean unwanted ( Symbol s ) { return s == null || ( s . flags ( ) & SYNTHETIC ) != NUM_ ; }
public FileAsyncHttpResponseHandler ( File file ) { super ( ) ; assert ( file != null ) ; this . mFile = file ; }
protected double [ ] parseDoubleArray ( String doubleArrayString ) { String [ ] arrayOfNumbers = doubleArrayString . trim ( ) . split ( STR_ ) ; double [ ] doubles = new double [ arrayOfNumbers . length ] ; int i = NUM_ ; for ( String s : arrayOfNumbers ) { doubles [ i ++ ] = Double . parseDouble ( s ) ; } return doubles ; }
public void onPullEvent ( final PullToRefreshBase < V > refreshView , State state , Mode direction ) ;
protected void updateAllPatterns ( ) { if ( updatePattern != null ) { for ( int i = NUM_ ; i < patternCount ; i ++ ) { updatePattern [ i ] = BOOL_ ; } } likelihoodKnown = BOOL_ ; }
public void deleteOrigin ( String origin ) { }
public CategoryColumn tokenizeAndSort ( ) { CategoryColumn newColumn = CategoryColumn . create ( name ( ) + STR_ , this . size ( ) ) ; for ( int r = NUM_ ; r < size ( ) ; r ++ ) { String value = get ( r ) ; Splitter splitter = Splitter . on ( CharMatcher . WHITESPACE ) ; splitter = splitter . trimResults ( ) ; splitter = splitter . omitEmptyStrings ( ) ; List < String > tokens = new ArrayList < > ( splitter . splitToList ( value ) ) ; Collections . sort ( tokens ) ; value = String . join ( STR_ , tokens ) ; newColumn . add ( value ) ; } return newColumn ; }
public final boolean isProxiable ( ) { return flags [ PROXIABLE_TICKET_FLAG ] ; }
private List < FacetResult > sumAssociations ( ) throws IOException { DirectoryReader indexReader = DirectoryReader . open ( indexDir ) ; IndexSearcher searcher = new IndexSearcher ( indexReader ) ; TaxonomyReader taxoReader = new DirectoryTaxonomyReader ( taxoDir ) ; FacetsCollector fc = new FacetsCollector ( ) ; FacetsCollector . search ( searcher , new MatchAllDocsQuery ( ) , NUM_ , fc ) ; Facets tags = new TaxonomyFacetSumIntAssociations ( STR_ , taxoReader , config , fc ) ; Facets genre = new TaxonomyFacetSumFloatAssociations ( STR_ , taxoReader , config , fc ) ; List < FacetResult > results = new ArrayList < > ( ) ; results . add ( tags . getTopChildren ( NUM_ , STR_ ) ) ; results . add ( genre . getTopChildren ( NUM_ , STR_ ) ) ; indexReader . close ( ) ; taxoReader . close ( ) ; return results ; }
public boolean correctlyClassifies ( Instance inst ) ;
public static ProtoMethodName parseFullGrpcMethodName ( String fullMethodName ) { String fullServiceName = io . grpc . MethodDescriptor . extractFullServiceName ( fullMethodName ) ; if ( fullServiceName == null ) { throw new IllegalArgumentException ( STR_ + fullMethodName ) ; } int serviceLength = fullServiceName . length ( ) ; if ( serviceLength + NUM_ >= fullMethodName . length ( ) || fullMethodName . charAt ( serviceLength ) != STR_ ) { throw new IllegalArgumentException ( STR_ + fullMethodName ) ; } String methodName = fullMethodName . substring ( fullServiceName . length ( ) + NUM_ ) ; int index = fullServiceName . lastIndexOf ( STR_ ) ; if ( index == - NUM_ ) { throw new IllegalArgumentException ( STR_ + fullServiceName ) ; } String packageName = fullServiceName . substring ( NUM_ , index ) ; if ( index + NUM_ >= fullServiceName . length ( ) || fullServiceName . charAt ( index ) != STR_ ) { throw new IllegalArgumentException ( STR_ + fullServiceName ) ; } String serviceName = fullServiceName . substring ( index + NUM_ ) ; return new ProtoMethodName ( packageName , serviceName , methodName ) ; }
public IntTable ( IntTable t ) { count = t . count ; table = new Entry [ t . table . length ] ; for ( int i = NUM_ ; i < table . length ; i ++ ) { Entry e = t . table [ i ] ; Entry n = null ; if ( e != null ) { n = new Entry ( e . hash , e . key , e . value , null ) ; table [ i ] = n ; e = e . next ; while ( e != null ) { n . next = new Entry ( e . hash , e . key , e . value , null ) ; n = n . next ; e = e . next ; } } } }
public static String fileContentsToString ( String file ) { String contents = STR_ ; File f = new File ( file ) ; if ( f . exists ( ) ) { try { FileReader fr = new FileReader ( f ) ; char [ ] template = new char [ ( int ) f . length ( ) ] ; fr . read ( template ) ; contents = new String ( template ) ; } catch ( Exception e ) { System . out . println ( e ) ; e . printStackTrace ( ) ; } } return contents ; }
private void checkConfiguration ( ) { if ( configuration == null ) { throw new IllegalStateException ( ERROR_NOT_INIT ) ; } }
private CertificateMapper < ? > loadMapper ( String className , CertificateMapperCfg configuration , boolean initialize ) throws InitializationException { try { CertificateMapperCfgDefn definition = CertificateMapperCfgDefn . getInstance ( ) ; ClassPropertyDefinition propertyDefinition = definition . getJavaClassPropertyDefinition ( ) ; Class < ? extends CertificateMapper > mapperClass = propertyDefinition . loadClass ( className , CertificateMapper . class ) ; CertificateMapper mapper = mapperClass . newInstance ( ) ; if ( initialize ) { mapper . initializeCertificateMapper ( configuration ) ; } else { List < LocalizableMessage > unacceptableReasons = new ArrayList < > ( ) ; if ( ! mapper . isConfigurationAcceptable ( configuration , unacceptableReasons ) ) { String reasons = Utils . joinAsString ( STR_ , unacceptableReasons ) ; throw new InitializationException ( ERR_CONFIG_CERTMAPPER_CONFIG_NOT_ACCEPTABLE . get ( configuration . dn ( ) , reasons ) ) ; } } return mapper ; } catch ( InitializationException e ) { throw e ; } catch ( Exception e ) { LocalizableMessage message = ERR_CONFIG_CERTMAPPER_INITIALIZATION_FAILED . get ( className , configuration . dn ( ) , stackTraceToSingleLineString ( e ) ) ; throw new InitializationException ( message , e ) ; } }
MyDate ( long elapsedTime ) { setDate ( elapsedTime ) ; }
public final boolean isMaximized ( ) { return rootView != null && rootView . isMaximized ( ) ; }
public Pair ( ObjTypeFirst oFirst , ObjTypeSecond oSecond ) { first = oFirst ; second = oSecond ; }
public boolean isSealed ( URL url ) { return sealBase != null && sealBase . sameFile ( url ) ; }
protected void startup ( final int callsBeforeExceptionIsThrown , final Exception whatToThrow ) throws Exception { mockStore ( ) ; configuration = PowerMock . createStrictMock ( HGConfiguration . class ) ; EasyMock . expect ( configuration . getHandleFactory ( ) ) . andReturn ( ( HGHandleFactory ) Class . forName ( HGHANDLEFACTORY_IMPLEMENTATION_CLASS_NAME ) . newInstance ( ) ) ; EasyMock . expect ( configuration . isTransactional ( ) ) . andReturn ( BOOL_ ) . times ( callsBeforeExceptionIsThrown ) ; EasyMock . expect ( configuration . isTransactional ( ) ) . andThrow ( whatToThrow ) ; replay ( ) ; storage . startup ( store , configuration ) ; }
public static boolean verify ( PublicKey publicKey , String signedData , String signature ) { Signature sig ; try { sig = Signature . getInstance ( SIGNATURE_ALGORITHM ) ; sig . initVerify ( publicKey ) ; sig . update ( signedData . getBytes ( ) ) ; if ( ! sig . verify ( Base64 . decode ( signature ) ) ) { Log . e ( TAG , STR_ ) ; return BOOL_ ; } return BOOL_ ; } catch ( NoSuchAlgorithmException e ) { Log . e ( TAG , STR_ ) ; } catch ( InvalidKeyException e ) { Log . e ( TAG , STR_ ) ; } catch ( SignatureException e ) { Log . e ( TAG , STR_ ) ; } catch ( Base64DecoderException e ) { Log . e ( TAG , STR_ ) ; } return BOOL_ ; }
private boolean rangeContainsReserved ( int ropRangeStart , int width ) { for ( int i = ropRangeStart ; i < ( ropRangeStart + width ) ; i ++ ) { if ( reservedRopRegs . get ( i ) ) { return BOOL_ ; } } return BOOL_ ; }
public static void append ( Path file , Writer writer ) throws IOException { append ( file , writer , Charset . defaultCharset ( ) . name ( ) ) ; }
public boolean canBeCollidedWith ( ) { return ! this . isDead ; }
private void fixOnMeasure ( int widthMeasureSpec , int heightMeasureSpec ) { CharSequence text = getText ( ) ; if ( text instanceof Spanned ) { SpannableStringBuilder builder = new SpannableStringBuilder ( text ) ; fixSpannedWithSpaces ( builder , widthMeasureSpec , heightMeasureSpec ) ; } else { if ( BuildConfig . DEBUG ) { Log . d ( HtmlTextView . TAG , STR_ ) ; } fallbackToString ( widthMeasureSpec , heightMeasureSpec ) ; } }
public Value copyToTemp ( ) { return this ; }
private void ExtractSym ( AST ast , String context ) { if ( ast . getClass ( ) . equals ( AST . UniprocessObj . getClass ( ) ) ) ExtractUniprocess ( ( AST . Uniprocess ) ast , context ) ; else if ( ast . getClass ( ) . equals ( AST . MultiprocessObj . getClass ( ) ) ) ExtractMultiprocess ( ( AST . Multiprocess ) ast , context ) ; else PcalDebug . ReportBug ( STR_ ) ; }
public static boolean isDefaultUseSystemBrowser ( ) { return BrowserUtil . canUseSystemBrowser ( ) ; }
public abstract void addDeviceCert ( Certificate cert , String deviceName ) ;
private static void checkKey ( String key ) throws MalformedObjectNameException { if ( key == null ) throw new NullPointerException ( STR_ ) ; final int len = key . length ( ) ; if ( len == NUM_ ) throw new MalformedObjectNameException ( STR_ ) ; final char [ ] k = key . toCharArray ( ) ; final int endKey = parseKey ( k , NUM_ ) ; if ( endKey < len ) throw new MalformedObjectNameException ( STR_ + k [ endKey ] + STR_ ) ; }
protected void doBefore ( ) { }
public final TXCommitMessage processed ( TXCommitMessage processedMess ) { final TXCommitMessage mess ; final Object key = processedMess . getTrackerKey ( ) ; synchronized ( this . txInProgress ) { mess = ( TXCommitMessage ) this . txInProgress . remove ( key ) ; if ( mess != null ) { this . txHistory [ this . lastHistoryItem ++ ] = key ; if ( lastHistoryItem >= txHistory . length ) { lastHistoryItem = NUM_ ; } if ( txInProgress . isEmpty ( ) ) { this . txInProgress . notifyAll ( ) ; } } } if ( mess != null ) { synchronized ( mess ) { mess . setProcessed ( BOOL_ ) ; mess . notifyAll ( ) ; } } return mess ; }
public CUtexref ( ) { }
public DatabaseGetCitiesQuery count ( Integer value ) { return unsafeParam ( STR_ , value ) ; }
public boolean isSameHash ( MethodHash other ) { return Arrays . equals ( this . hash , other . hash ) ; }
public void testNullStoredBytesRefFieldReuse ( ) throws Exception { Directory dir = newDirectory ( ) ; Analyzer analyzer = new MockAnalyzer ( random ( ) ) ; IndexWriter iw = new IndexWriter ( dir , new IndexWriterConfig ( analyzer ) ) ; Document doc = new Document ( ) ; Field theField = new StoredField ( STR_ , new BytesRef ( STR_ ) ) ; doc . add ( theField ) ; iw . addDocument ( doc ) ; expectThrows ( IllegalArgumentException . class , null ) ; assertNull ( iw . getTragicException ( ) ) ; iw . close ( ) ; DirectoryReader r = DirectoryReader . open ( dir ) ; assertEquals ( NUM_ , r . numDocs ( ) ) ; r . close ( ) ; dir . close ( ) ; }
private boolean handleScroll ( MotionEvent e1 , MotionEvent e2 , float distanceY ) { if ( ! mHasDeterminedGestureOrientation && isDistanceGreaterThanTouchSlop ( e1 , e2 ) ) { determineGestureOrientation ( e1 , e2 ) ; } final boolean mayChangeEventTarget = mMayChangeEventTarget && e2 . getPointerCount ( ) == NUM_ ; if ( mHasDeterminedGestureOrientation && ( ! mHasDeterminedEventTarget || mayChangeEventTarget ) ) { determineEventTarget ( distanceY ) ; } return BOOL_ ; }
public void init ( int address ) { slice = pool . buffers [ address > > ByteBlockPool . BYTE_BLOCK_SHIFT ] ; assert slice != null ; upto = address & ByteBlockPool . BYTE_BLOCK_MASK ; offset0 = address ; assert upto < slice . length ; }
public DERSequence ( ) { }
public static void parseIPAddress ( String ipString , TraitMap map ) { String [ ] s = ipString . split ( STR_ ) ; if ( s . length == IP6_BYTES ) { throw new java . lang . IllegalArgumentException ( STR_ + ipString ) ; } else if ( s . length <= IP4_BYTES + NUM_ ) { if ( s . length == IP4_BYTES + NUM_ ) { map . parseThenPut ( Trait . CIDR , s [ NUM_ ] ) ; } int val ; val = intVal ( s [ NUM_ ] ) ; val <<= NUM_ ; val |= intVal ( s [ NUM_ ] ) ; val <<= NUM_ ; val |= intVal ( s [ NUM_ ] ) ; val <<= NUM_ ; val |= intVal ( s [ NUM_ ] ) ; map . put ( Trait . IPv4 , val ) ; } }
public boolean isScalar ( ) { return length == NUM_ ; }
public Object encode ( Object pObject ) throws EncoderException { if ( pObject == null ) { return null ; } else if ( pObject instanceof byte [ ] ) { return encode ( ( byte [ ] ) pObject ) ; } else if ( pObject instanceof String ) { return encode ( ( String ) pObject ) ; } else { throw new EncoderException ( STR_ + pObject . getClass ( ) . getName ( ) + STR_ ) ; } }
public static String initCap ( String in ) { if ( in == null || in . length ( ) == NUM_ ) return in ; boolean capitalize = BOOL_ ; char [ ] data = in . toCharArray ( ) ; for ( int i = NUM_ ; i < data . length ; i ++ ) { if ( data [ i ] == STR_ || Character . isWhitespace ( data [ i ] ) ) capitalize = BOOL_ ; else if ( capitalize ) { data [ i ] = Character . toUpperCase ( data [ i ] ) ; capitalize = BOOL_ ; } else data [ i ] = Character . toLowerCase ( data [ i ] ) ; } return new String ( data ) ; }
public final double oldEnt ( Distribution bags ) { double returnValue = NUM_ ; int j ; for ( j = NUM_ ; j < bags . numClasses ( ) ; j ++ ) returnValue = returnValue + lnFunc ( bags . perClass ( j ) ) ; return ( lnFunc ( bags . total ( ) ) - returnValue ) / ContingencyTables . log2 ; }
public String toString ( ) { return STR_ + getValueString ( ) ; }
private boolean disableAllBaseDns ( ConnectionWrapper conn , DisableReplicationUserData uData ) { if ( uData . disableAll ( ) ) { return BOOL_ ; } Set < DN > replicatedSuffixes = findAllReplicatedSuffixDNs ( getReplicas ( conn ) ) ; for ( DN dn : replicatedSuffixes ) { if ( ! ADSContext . getAdministrationSuffixDN ( ) . equals ( dn ) && ! Constants . SCHEMA_DN . equals ( dn ) && ! uData . getBaseDNs ( ) . contains ( dn ) ) { return BOOL_ ; } } return BOOL_ ; }
public boolean equals ( Object obj ) { if ( ! ( obj instanceof MagicCookieAttribute ) ) return BOOL_ ; if ( obj == this ) return BOOL_ ; MagicCookieAttribute att = ( MagicCookieAttribute ) obj ; if ( att . getAttributeType ( ) != getAttributeType ( ) || att . getDataLength ( ) != getDataLength ( ) || att . value != value ) return BOOL_ ; return BOOL_ ; }
boolean supportsHeartRateMeasurement ( GBDevice device ) ;
public synchronized void zoom ( final Point2D p , double scale ) { m_itransform . transform ( p , m_tmpPoint ) ; zoomAbs ( m_tmpPoint , scale ) ; }
public abstract C identify ( ) throws SQLException ;
public void scale ( float x , float y , float z ) { g . scale ( x , y , z ) ; }
public void access ( ) { lastAccessedTime = System . currentTimeMillis ( ) ; }
private void readObject ( ObjectInputStream s ) throws IOException , ClassNotFoundException , InvalidObjectException { s . defaultReadObject ( ) ; if ( firstDayOfWeek == null ) { throw new InvalidObjectException ( STR_ ) ; } if ( minimalDays < NUM_ || minimalDays > NUM_ ) { throw new InvalidObjectException ( STR_ ) ; } }
public boolean isSet ( _Fields field ) { if ( field == null ) { throw new IllegalArgumentException ( ) ; } switch ( field ) { case STORE_NAME : return isSetStoreName ( ) ; case SCOPE : return isSetScope ( ) ; case PERSIST : return isSetPersist ( ) ; } throw new IllegalStateException ( ) ; }
public boolean hasRegistrationToken ( ) { return null != mRegistrationToken ; }
protected void engineUpdate ( ByteBuffer input ) { messageDigest . update ( input ) ; needsReset = BOOL_ ; }
void cancelRedirectsAndImages ( ) { if ( redirectThread != null ) { redirectThread . cancel ( ) ; redirectThread = null ; } threadQueue . discardQueue ( ) ; embeddedCSS = null ; externalCSS = null ; if ( getComponentForm ( ) != null ) { marqueeMotion = null ; getComponentForm ( ) . deregisterAnimated ( this ) ; } }
public boolean containsKey ( String url ) { return getFromCache ( url ) != null ; }
public IgniteConfiguration ( ) { }
void initializedComment ( Function function , List < IComment > comment ) ;
public void post ( CoapHandler handler , byte [ ] payload , int format , int accept ) { asynchronous ( accept ( format ( newPost ( ) . setURI ( uri ) . setPayload ( payload ) , format ) , accept ) , handler ) ; }
public Abstract_ createAbstract_ ( ) { Abstract_Impl abstract_ = new Abstract_Impl ( ) ; return abstract_ ; }
RedisFuture < KeyScanCursor < String > > jscan ( ScanCursor scanCursor , JScanArgs < K > scanArgs ) ;
public SootMethod ( String name , List parameterTypes , Type returnType , int modifiers , List < SootClass > thrownExceptions ) { this . name = name ; this . parameterTypes = new ArrayList ( ) ; this . parameterTypes . addAll ( parameterTypes ) ; this . parameterTypes = Collections . unmodifiableList ( this . parameterTypes ) ; this . returnType = returnType ; this . modifiers = modifiers ; if ( exceptions == null && ! thrownExceptions . isEmpty ( ) ) { exceptions = new ArrayList < SootClass > ( ) ; this . exceptions . addAll ( thrownExceptions ) ; } Scene . v ( ) . getMethodNumberer ( ) . add ( this ) ; subsignature = Scene . v ( ) . getSubSigNumberer ( ) . findOrAdd ( getSubSignature ( ) ) ; }
Vertex createFormula ( String text ) ;
public void testMetricsStatisticsEnabled ( ) throws Exception { createCaches ( BOOL_ ) ; populateCacheData ( cache1 , ENTRY_CNT_CACHE1 ) ; populateCacheData ( cache2 , ENTRY_CNT_CACHE2 ) ; readCacheData ( cache1 , ENTRY_CNT_CACHE1 ) ; readCacheData ( cache2 , ENTRY_CNT_CACHE2 ) ; awaitMetricsUpdate ( ) ; Collection < ClusterNode > nodes = grid ( NUM_ ) . cluster ( ) . forRemotes ( ) . nodes ( ) ; for ( ClusterNode node : nodes ) { Map < Integer , CacheMetrics > metrics = ( ( TcpDiscoveryNode ) node ) . cacheMetrics ( ) ; assertNotNull ( metrics ) ; assertFalse ( metrics . isEmpty ( ) ) ; } assertMetrics ( cache1 ) ; assertMetrics ( cache2 ) ; destroyCaches ( ) ; }
public boolean isMounted ( ) { return mounted ; }
public WizardPage ( String stepDescription ) { this ( null , stepDescription ) ; }
protected boolean checkExecutionState ( ) throws Exception { return BOOL_ ; }
final protected void activate ( ) { if ( ! isVisible ( ) ) { getSite ( ) . getPage ( ) . activate ( this ) ; } }
public boolean equals ( Object other ) ;
public void addPair ( String var , double val ) { map . put ( var , ValueFactory . create ( val ) ) ; cachedHash = NUM_ ; }
public static RRSIGRecord sign ( RRset rrset , DNSKEYRecord key , PrivateKey privkey , Date inception , Date expiration , String provider ) throws DNSSECException { int alg = key . getAlgorithm ( ) ; checkAlgorithm ( privkey , alg ) ; RRSIGRecord rrsig = new RRSIGRecord ( rrset . getName ( ) , rrset . getDClass ( ) , rrset . getTTL ( ) , rrset . getType ( ) , alg , rrset . getTTL ( ) , expiration , inception , key . getFootprint ( ) , key . getName ( ) , null ) ; rrsig . setSignature ( sign ( privkey , key . getPublicKey ( ) , alg , digestRRset ( rrsig , rrset ) , provider ) ) ; return rrsig ; }
public static CartFragment newInstance ( boolean showTabBar ) { CartFragment fragment = new CartFragment ( ) ; Bundle args = new Bundle ( ) ; args . putBoolean ( SHOW_TAB_BAR , showTabBar ) ; fragment . setArguments ( args ) ; return fragment ; }
public boolean reinit ( ) { Map < String , Integer > newEntryColourMap = buildEntryColourMap ( ) ; if ( newEntryColourMap == null || newEntryColourMap . size ( ) < NUM_ ) { return BOOL_ ; } Map < String , EntryHierarchyData > newEntryHierarchyDataMap ; try { newEntryHierarchyDataMap = entryHierarchyDataResourceReader . read ( entryHierarchyDataResource ) ; } catch ( IOException e ) { LOGGER . warn ( STR_ + e . getMessage ( ) ) ; return BOOL_ ; } if ( newEntryHierarchyDataMap == null || newEntryHierarchyDataMap . size ( ) < NUM_ ) { return BOOL_ ; } entryColourMap = newEntryColourMap ; entryHierarchyDataMap = newEntryHierarchyDataMap ; return BOOL_ ; }
private void writeAttributes ( Attributes atts ) throws SAXException { int len = atts . getLength ( ) ; for ( int i = NUM_ ; i < len ; i ++ ) { write ( STR_ ) ; writeName ( atts . getURI ( i ) , atts . getLocalName ( i ) , atts . getQName ( i ) , BOOL_ ) ; if ( htmlMode && booleanAttribute ( atts . getLocalName ( i ) , atts . getQName ( i ) , atts . getValue ( i ) ) ) break ; write ( STR_ ) ; String s = atts . getValue ( i ) ; writeEscUTF16 ( s , NUM_ , s . length ( ) , BOOL_ ) ; write ( STR_ ) ; } }
public DefaultLmlData ( ) { this ( InterfaceSkin . get ( ) ) ; }
private void returnData ( Object ret ) { if ( myHost != null ) { myHost . returnData ( ret ) ; } }
public PreparedStatement prepareStatement ( String sql ) throws DatabaseException { PreparedStatement statement = null ; try { statement = connection . prepareStatement ( sql ) ; } catch ( SQLException e ) { throw ( new DatabaseException ( e ) ) ; } return statement ; }
private void configureToolbar ( ) { final ToolbarDecorator decorator = ToolbarDecorator . createDecorator ( table ) . disableUpDownActions ( ) . disableAddAction ( ) . setToolbarPosition ( ActionToolbarPosition . TOP ) ; decorator . setRemoveAction ( new RemoveSelectedBreakpointsAction ( ) ) ; decorator . addExtraAction ( new RemoveAllBreakpointsAction ( ) ) ; decorator . addExtraAction ( new ReactivateBreakpointAction ( ) ) ; this . add ( decorator . createPanel ( ) ) ; }
public TypeDeserializer buildTypeDeserializer ( DeserializationConfig config , JavaType baseType , Collection < NamedType > subtypes , BeanProperty property ) ;
public ConcurrentSkipListSet ( Comparator < ? super E > comparator ) { m = new ConcurrentSkipListMap < E , Object > ( comparator ) ; }
public boolean addCaps ( String name , String value ) { return getSession ( ) . addCaps ( name , value ) ; }
public abstract void onSuccess ( ServiceResponse < T > result ) ;
private void resetMatrix ( ) { mSuppMatrix . reset ( ) ; setImageViewMatrix ( getDrawMatrix ( ) ) ; checkMatrixBounds ( ) ; }
public Object createOn ( String cqName , Connection conn , String queryStr , int cqState , boolean isDurable , byte regionDataPolicy ) { return CreateCQOp . executeOn ( this . pool , conn , cqName , queryStr , cqState , isDurable , regionDataPolicy ) ; }
static int join4 ( FileDescriptor fd , int group , int interf , int source ) throws IOException { return joinOrDrop4 ( BOOL_ , fd , group , interf , source ) ; }
static public void assertNull ( String message , Object object ) { assertTrue ( message , object == null ) ; }
public void addListener ( final IDebugPerspectiveModelListener listener ) { m_listeners . addListener ( listener ) ; }
public ExtensionDescription ( ) { }
public Object runSafely ( Catbert . FastStack stack ) throws Exception { return new Float ( stack . getUIMgrSafe ( ) . getVideoFrame ( ) . getDisplayAspectRatio ( ) ) ; }
public static _Fields findByThriftIdOrThrow ( int fieldId ) { _Fields fields = findByThriftId ( fieldId ) ; if ( fields == null ) throw new IllegalArgumentException ( STR_ + fieldId + STR_ ) ; return fields ; }
public FractionFormat ( final NumberFormat numeratorFormat , final NumberFormat denominatorFormat ) { super ( numeratorFormat , denominatorFormat ) ; }
public static Vector padRight ( Collection strings ) { Vector v = new Vector ( ) ; int length = maxLength ( strings ) ; for ( Iterator i = strings . iterator ( ) ; i . hasNext ( ) ; ) { String string = ( String ) i . next ( ) ; v . add ( padRight ( string , length ) ) ; } return v ; }
private org . apache . carbondata . format . Encoding fromWrapperToExternalEncoding ( Encoding encoder ) { if ( null == encoder ) { return null ; } switch ( encoder ) { case DICTIONARY : return org . apache . carbondata . format . Encoding . DICTIONARY ; case DELTA : return org . apache . carbondata . format . Encoding . DELTA ; case RLE : return org . apache . carbondata . format . Encoding . RLE ; case INVERTED_INDEX : return org . apache . carbondata . format . Encoding . INVERTED_INDEX ; case BIT_PACKED : return org . apache . carbondata . format . Encoding . BIT_PACKED ; case DIRECT_DICTIONARY : return org . apache . carbondata . format . Encoding . DIRECT_DICTIONARY ; default : return org . apache . carbondata . format . Encoding . DICTIONARY ; } }
static final int roundCapacity ( int cap ) { int n = cap - NUM_ ; n |= n > > > NUM_ ; n |= n > > > NUM_ ; n |= n > > > NUM_ ; n |= n > > > NUM_ ; n |= n > > > NUM_ ; return ( n <= NUM_ ) ? NUM_ : ( n >= BUFFER_CAPACITY_LIMIT ) ? BUFFER_CAPACITY_LIMIT : n + NUM_ ; }
public int size ( ) { return size ; }
public Builder penaltyDialog ( ) { return enable ( PENALTY_DIALOG ) ; }
public void addLocalClass ( String namespace , String localPart , String className ) { assert rootNode != null ; rootNode . addLocalClass ( namespace , localPart , className ) ; }
protected void buildExceptionalEdges ( Map unitToSuccs , Map unitToPreds ) { for ( Iterator trapIt = body . getTraps ( ) . iterator ( ) ; trapIt . hasNext ( ) ; ) { Trap trap = ( Trap ) trapIt . next ( ) ; Unit first = trap . getBeginUnit ( ) ; Unit last = ( Unit ) unitChain . getPredOf ( trap . getEndUnit ( ) ) ; Unit catcher = trap . getHandlerUnit ( ) ; for ( Iterator unitIt = unitChain . iterator ( first , last ) ; unitIt . hasNext ( ) ; ) { Unit trapped = ( Unit ) unitIt . next ( ) ; addEdge ( unitToSuccs , unitToPreds , trapped , catcher ) ; } } }
private static void assertAuthHeader ( Request request , String signature ) { assertThat ( request . header ( STR_ ) ) . isEqualTo ( STR_ + STR_ + STR_ + STR_ + signature + STR_ + STR_ + STR_ + STR_ + STR_ ) ; }
public void addContainer ( ImageContainer container ) { mContainers . add ( container ) ; }
public void printStackTrace ( PrintStream s ) { printStackTrace ( new WrappedPrintStream ( s ) ) ; }
public static void main ( final String [ ] args ) { final int retCode = new SearchRate ( ) . run ( args ) ; System . exit ( filterExitCode ( retCode ) ) ; }
char escape ( char c ) ;
public boolean isProcessing ( ) ;
private String validateSnmpDirectory ( String snmpDir ) { return snmpDir ; }
public com . sun . identity . wsfederation . jaxb . wsfederation . ClientPseudonymElement createClientPseudonymElement ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . wsfederation . jaxb . wsfederation . impl . ClientPseudonymElementImpl ( ) ; }
public Base64InputStream ( InputStream in , int flags , boolean encode ) { super ( in ) ; eof = BOOL_ ; inputBuffer = new byte [ BUFFER_SIZE ] ; if ( encode ) { coder = new Base64 . Encoder ( flags , null ) ; } else { coder = new Base64 . Decoder ( flags , null ) ; } coder . output = new byte [ coder . maxOutputSize ( BUFFER_SIZE ) ] ; outputStart = NUM_ ; outputEnd = NUM_ ; }
public static LuaViewDialog createFullScreen ( Context context ) { return new LuaViewDialog ( context , android . R . style . Theme_Translucent_NoTitleBar_Fullscreen ) ; }
public static Function sum ( Object column ) { return new Function ( format ( STR_ , column ) ) ; }
public static boolean equal ( DBIDRef id1 , DBIDRef id2 ) { return DBIDFactory . FACTORY . equal ( id1 , id2 ) ; }
public final < Type > boolean hasExtension ( final GeneratedExtension < MessageType , Type > extension ) { verifyExtensionContainingType ( extension ) ; return extensions . hasField ( extension . descriptor ) ; }
public abstract String toString ( T object ) ;
private final int internalNextInt ( int origin , int bound ) { int r = TLRandom . mix32 ( nextSeed ( ) ) ; if ( origin < bound ) { int n = bound - origin , m = n - NUM_ ; if ( ( n & m ) == NUM_ ) r = ( r & m ) + origin ; else if ( n > NUM_ ) { for ( int u = r > > > NUM_ ; u + m - ( r = u % n ) < NUM_ ; u = TLRandom . mix32 ( nextSeed ( ) ) > > > NUM_ ) ; r += origin ; } else { while ( r < origin || r >= bound ) r = TLRandom . mix32 ( nextSeed ( ) ) ; } } return r ; }
public void startWatching ( String fileName ) { synchronized ( mObservedChildren ) { if ( ! mObservedChildren . containsKey ( fileName ) ) { mObservedChildren . put ( fileName , Boolean . valueOf ( BOOL_ ) ) ; } } if ( new File ( mPath ) . exists ( ) ) { startWatching ( ) ; Log_OC . d ( TAG , STR_ + mPath + STR_ ) ; } }
public FractionFormat ( final NumberFormat numeratorFormat , final NumberFormat denominatorFormat ) { super ( numeratorFormat , denominatorFormat ) ; }
private void registerExtraValidSubject ( String subject ) { extraValidSubjects . add ( subject ) ; restoredStatements . addAll ( unknownSubjects . removeAll ( subject ) ) ; }
public void saveToFileSystem ( final String appName , final File propertyFileLocation ) throws IOException { final OutputStream outputStream = new FileOutputStream ( propertyFileLocation ) ; properties . store ( outputStream , STR_ + appName + STR_ ) ; }
public static void zip ( File inFile , File outFile ) throws IOException { FileInputStream fin = new FileInputStream ( inFile ) ; FileOutputStream fout = new FileOutputStream ( outFile ) ; ZipOutputStream zout = new ZipOutputStream ( fout ) ; try { zout . putNextEntry ( new ZipEntry ( inFile . getName ( ) ) ) ; byte [ ] buffer = new byte [ NUM_ ] ; int len ; while ( ( len = fin . read ( buffer ) ) > NUM_ ) { zout . write ( buffer , NUM_ , len ) ; } zout . closeEntry ( ) ; } finally { zout . close ( ) ; fin . close ( ) ; } }
void assertElementIsClickableAfter ( By by , int timeoutInSeconds ) ;
public ExpressionSubPanel ( ExpressionFilterInterface parent ) { this . parent = parent ; createUI ( ) ; }
void notifyForName ( RVMType type ) ;
private void addSuccessMessage ( RequestAndResponse requestAndResponse , String message ) throws IOException { requestAndResponse . print ( STR_ + message + STR_ ) ; }
public static SM_SYSTEM_MESSAGE STR_MSG_DELETE_CASH_CUSTOMANIMATION_BY_TIMEOUT ( String value0 ) { return new SM_SYSTEM_MESSAGE ( NUM_ , value0 ) ; }
public abstract void save ( InputStream image , OutputStream response , String format , int width , int height , float quality ) throws IOException ;
public int size ( ) { return NUM_ ; }
private void addLinksFromPattern ( Link linkWithPattern ) { Pattern pattern = linkWithPattern . getPattern ( ) ; Matcher m = pattern . matcher ( text ) ; while ( m . find ( ) ) { links . add ( new Link ( linkWithPattern ) . setText ( m . group ( ) ) ) ; } }
public InteractiveShell ( Class < T > className ) { type = className ; }
boolean alias ( String src , String target ) { if ( src == null ) return BOOL_ ; PluginHolder < T > a = registry . get ( src ) ; if ( a == null ) return BOOL_ ; PluginHolder < T > b = registry . get ( target ) ; if ( b != null ) return BOOL_ ; registry . put ( target , a ) ; return BOOL_ ; }
public Cache ( ) { this ( DEFAULT_CAPACITY ) ; }
UnsortedIter unsortedIter ( ) ;
OfPrimitive ( int initialCapacity ) { super ( initialCapacity ) ; curChunk = newArray ( NUM_ << initialChunkPower ) ; }
public void removeChangingListener ( OnWheelChangedListener listener ) { changingListeners . remove ( listener ) ; }
final public void println ( char [ ] v ) { try { _out . println ( v ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } }
protected abstract void injectComponent ( BrainPhaserComponent component ) ;
public boolean writeSyncValue ( K key , Iterable < Versioned < V > > values ) ;
final void paintInternal ( Graphics g ) { paintInternal ( g , BOOL_ ) ; }
protected void initMatrixStorage ( ) { this . A = new short [ this . n ] [ this . n ] ; }
public static double calculateKilometers ( double meters ) { double kilometers = meters * NUM_ ; return kilometers ; }
void onJustify ( ) ;
private void loadIcons ( ) { if ( iconName == null ) { icons = null ; return ; } icons = new ImageIcon [ NUM_ ] ; icons [ NUM_ ] = SwingTools . createIcon ( STR_ + iconName ) ; icons [ NUM_ ] = SwingTools . createIcon ( STR_ + iconName ) ; icons [ NUM_ ] = SwingTools . createIcon ( STR_ + iconName ) ; }
protected double calculatePairwiseDistance ( int taxon1 , int taxon2 ) { int state1 , state2 ; int n = patterns . getPatternCount ( ) ; double weight , distance ; double sumDistance = NUM_ ; double sumWeight = NUM_ ; int [ ] pattern ; for ( int i = NUM_ ; i < n ; i ++ ) { pattern = patterns . getPattern ( i ) ; state1 = pattern [ taxon1 ] ; state2 = pattern [ taxon2 ] ; weight = patterns . getPatternWeight ( i ) ; if ( ! dataType . isAmbiguousState ( state1 ) && ! dataType . isAmbiguousState ( state2 ) && state1 != state2 ) { sumDistance += weight ; } sumWeight += weight ; } distance = sumDistance / sumWeight ; return distance ; }
private void escape ( CharSequence text , int start , int end ) { for ( int i = start ; i < end ; i ++ ) { char c = text . charAt ( i ) ; if ( c == STR_ ) { mOut . append ( BR ) ; } else if ( c == STR_ ) { mOut . append ( LT ) ; } else if ( c == STR_ ) { mOut . append ( GT ) ; } else if ( c == STR_ ) { mOut . append ( AMP ) ; } else if ( c == STR_ ) { while ( i + NUM_ < end && text . charAt ( i + NUM_ ) == STR_ ) { mOut . append ( NBSP ) ; i ++ ; } mOut . append ( STR_ ) ; } else if ( c < STR_ ) { mOut . append ( STR_ + ( ( int ) c ) + STR_ ) ; } else { mOut . append ( c ) ; } } }
public void testLabels ( ) { performTest ( getFilter ( BOOL_ , STR_ ) ) ; }
private boolean selectItemByName ( CCombo combo , String name , String [ ] cString ) { for ( int i = NUM_ ; i < cString . length ; i ++ ) { String propName = cString [ i ] ; if ( name . equalsIgnoreCase ( propName ) ) { combo . select ( i ) ; return BOOL_ ; } } return BOOL_ ; }
public org . w3c . dom . Document encryptAndReplace ( org . w3c . dom . Document doc , org . w3c . dom . Element element , java . lang . String secretKeyAlg , int keyStrength , java . lang . String certAlias , int kekStrength , java . lang . String providerID ) throws EncryptionException ;
public OMDistance ( ) { super ( ) ; setRenderType ( RENDERTYPE_LATLON ) ; }
public void createConnection ( NetworkInterface anotherInterface ) { if ( ! isConnected ( anotherInterface ) && ( this != anotherInterface ) ) { Connection con = new VBRConnection ( this . host , this , anotherInterface . getHost ( ) , anotherInterface ) ; connect ( con , anotherInterface ) ; } }
public float noise ( float x , float y ) { return noise ( x , y , NUM_ ) ; }
public void release ( ) throws Exception { if ( receiver == null ) { throw new IllegalStateException ( STR_ ) ; } receiver . release ( delivery ) ; }
public MarketService locale ( String locale ) { this . locale = locale ; return this ; }
public void onPause ( Activity activity ) { synchronized ( activities ) { for ( int i = activities . size ( ) - NUM_ ; i >= NUM_ ; i -- ) { if ( activities . get ( i ) . getActivity ( ) . equals ( activity ) ) { activities . get ( i ) . pause ( ) ; break ; } } } }
void addChangeListener ( ChangeListener x ) ;
public void readTurns ( final int [ ] columnsIndices , final BufferedReader reader ) throws IOException { String line = reader . readLine ( ) ; while ( line != null && line . length ( ) > NUM_ ) { line = reader . readLine ( ) ; } }
protected final void addViewInternal ( View child , ViewGroup . LayoutParams params ) { super . addView ( child , - NUM_ , params ) ; }
private static boolean isScreenDefinition ( JSONObject cruxObject ) throws JSONException { if ( cruxObject . has ( STR_ ) ) { String type = cruxObject . getString ( STR_ ) ; return ( type != null && ViewParser . SCREEN_TYPE . equals ( type ) ) ; } return BOOL_ ; }
public void attrAdded ( Attr node , String newv ) { if ( ! changing ) { valid = BOOL_ ; } fireBaseAttributeListeners ( ) ; if ( ! hasAnimVal ) { fireAnimatedAttributeListeners ( ) ; } }
void unsubscribe ( final Object subscriber ) ;
List < SRVRecord > lookupSRVRecords ( String name ) ;
public void reset ( ) { System . arraycopy ( IV , NUM_ , cfbV , NUM_ , IV . length ) ; Arrays . fill ( inBuf , ( byte ) NUM_ ) ; byteCount = NUM_ ; cipher . reset ( ) ; }
public abstract boolean needsWrapper ( String childNamespaceURI ) ;
public abstract boolean willCollate ( ) ;
public IAssignmentAlgorithm createAssignmentAlgorithm ( ) { return new AssignmentUsingWeightedLCA ( cName , refId2weight , ref2weight , taxId2SpeciesId , percentToCover , useIdentityFilter ) ; }
public static void clearAllAnimations ( ) { sAnimations . get ( ) . clear ( ) ; sPendingAnimations . get ( ) . clear ( ) ; sDelayedAnims . get ( ) . clear ( ) ; }
ThreadPool ( ThreadGroup threadGroup ) { this . threadGroup = threadGroup ; }
public AugmentedDickeyFuller ( double [ ] ts ) { this . ts = ts ; this . lag = ( int ) Math . floor ( Math . cbrt ( ( ts . length - NUM_ ) ) ) ; computeADFStatistics ( ) ; }
public final void sync ( Object sender ) { sync ( NUM_ , sender ) ; }
public boolean booleanValue ( ) { return this . value ; }
WorkspaceClient workspace ( ) ;
public CountingOutputStream ( OutputStream out ) { super ( checkNotNull ( out ) ) ; }
public MethodNode makeDynamic ( MethodCall call , ClassNode returnType ) { TypeCheckingContext . EnclosingClosure enclosingClosure = context . getEnclosingClosure ( ) ; MethodNode enclosingMethod = context . getEnclosingMethod ( ) ; ( ( ASTNode ) call ) . putNodeMetaData ( StaticTypesMarker . DYNAMIC_RESOLUTION , returnType ) ; if ( enclosingClosure != null ) { enclosingClosure . getClosureExpression ( ) . putNodeMetaData ( StaticTypesMarker . DYNAMIC_RESOLUTION , Boolean . TRUE ) ; } else { enclosingMethod . putNodeMetaData ( StaticTypesMarker . DYNAMIC_RESOLUTION , Boolean . TRUE ) ; } setHandled ( BOOL_ ) ; if ( debug ) { LOG . info ( STR_ + call . getText ( ) + STR_ + returnType . toString ( BOOL_ ) ) ; } return new MethodNode ( call . getMethodAsString ( ) , NUM_ , returnType , Parameter . EMPTY_ARRAY , ClassNode . EMPTY_ARRAY , EmptyStatement . INSTANCE ) ; }
public void invalidateCache ( ) { readUncached = BOOL_ ; }
public void put ( String key , InputStream stream , String name , String contentType , boolean autoClose ) { if ( key != null && stream != null ) { streamParams . put ( key , StreamWrapper . newInstance ( stream , name , contentType , autoClose ) ) ; } }
public void addFocusListener ( FocusListener l ) ;
public static < S extends HasItemChangedHandlers & HasHandlers > void fire ( S source , JavaScriptObject jsObj ) { if ( TYPE != null ) { ItemChangedEvent event = new ItemChangedEvent ( jsObj ) ; source . fireEvent ( event ) ; } }
Vertex nextMostConscious ( Vertex type , Vertex ignoring , float min ) ;
public void putLocation ( int position , LatLon ll ) { if ( position < NUM_ || position >= this . getSize ( ) ) { String message = Logging . getMessage ( STR_ , STR_ ) ; Logging . logger ( ) . severe ( message ) ; throw new IllegalArgumentException ( message ) ; } if ( ll == null ) { String message = Logging . getMessage ( STR_ ) ; Logging . logger ( ) . severe ( message ) ; throw new IllegalArgumentException ( message ) ; } if ( this . coordsPerVec < NUM_ ) { String message = Logging . getMessage ( STR_ , this ) ; Logging . logger ( ) . severe ( message ) ; throw new IllegalArgumentException ( message ) ; } double [ ] compArray = new double [ NUM_ ] ; compArray [ NUM_ ] = ll . getLatitude ( ) . degrees ; compArray [ NUM_ ] = ll . getLongitude ( ) . degrees ; this . put ( position , compArray ) ; }
private void assignUnitMatrix ( int n ) { numRows = n ; numColumns = n ; length = ( n + NUM_ ) > > > NUM_ ; matrix = new int [ numRows ] [ length ] ; for ( int i = NUM_ ; i < numRows ; i ++ ) { for ( int j = NUM_ ; j < length ; j ++ ) { matrix [ i ] [ j ] = NUM_ ; } } for ( int i = NUM_ ; i < numRows ; i ++ ) { int rest = i & NUM_ ; matrix [ i ] [ i > > > NUM_ ] = NUM_ << rest ; } }
public static void checkArgument ( boolean expression ) { if ( ! expression ) { throw new IllegalArgumentException ( ) ; } }
public byte [ ] encode ( byte [ ] bytes ) { return encodeUrl ( WWW_FORM_URL , bytes ) ; }
public ToastBuilder duration ( int duration ) { this . duration = duration ; return this ; }
public boolean isChannelUsed ( int channelId ) { return channels . get ( channelId ) != null ; }
public boolean contains ( Entry e ) { for ( Entry entry : mYVals ) { if ( entry . equals ( e ) ) return BOOL_ ; } return BOOL_ ; }
public void putAllWithPrefix ( TungstenProperties props , String prefix ) { TungstenProperties newProps = new TungstenProperties ( ) ; if ( props . isEmpty ( ) ) { newProps . setObject ( prefix , props ) ; } else { for ( String key : props . keyNames ( ) ) { newProps . setObject ( prefix + key , props . getObject ( key ) ) ; } } putAll ( newProps ) ; }
protected static PDFCMap parseCMap ( PDFObject map ) throws IOException { throw new IOException ( STR_ ) ; }
public boolean taxApplies ( ) { GenericValue product = getProduct ( ) ; if ( product != null ) { return ProductWorker . taxApplies ( product ) ; } else { return BOOL_ ; } }
T writeUnsignedShort ( int s ) ;
public abstract int compareChromosomes ( T chromosome1 , T chromosome2 ) ;
public org . smpte_ra . schemas . st2067_2_2013 . ContentMaturityRatingType buildContentMaturityRatingType ( String agency , String rating , org . smpte_ra . schemas . st2067_2_2013 . ContentMaturityRatingType . Audience audience ) throws URISyntaxException { org . smpte_ra . schemas . st2067_2_2013 . ContentMaturityRatingType contentMaturityRatingType = new org . smpte_ra . schemas . st2067_2_2013 . ContentMaturityRatingType ( ) ; if ( ! agency . matches ( STR_ ) == BOOL_ ) { throw new URISyntaxException ( STR_ , STR_ ) ; } contentMaturityRatingType . setAgency ( agency ) ; contentMaturityRatingType . setRating ( rating ) ; contentMaturityRatingType . setAudience ( audience ) ; return contentMaturityRatingType ; }
public List < FacetResult > runDrillSideways ( ) throws IOException { index ( ) ; return drillSideways ( ) ; }
private String escapeJson ( String string ) { if ( string != null ) { return string . replace ( STR_ , STR_ ) . replace ( STR_ , STR_ ) ; } else { return STR_ ; } }
public void zoomInImage ( float deltaScale ) { zoomInImage ( deltaScale , mCropRect . centerX ( ) , mCropRect . centerY ( ) ) ; }
public void note ( Element e , String msg ) { messager . printMessage ( Diagnostic . Kind . NOTE , msg , e ) ; }
public static String joinSizeTagToKey ( String key , String tag ) { return new StringBuilder ( key ) . append ( SIZE_SP ) . append ( tag ) . toString ( ) ; }
private int [ ] determineDimensions ( int sourceCodeWords , int errorCorrectionCodeWords ) throws WriterException { float ratio = NUM_ ; int [ ] dimension = null ; for ( int cols = minCols ; cols <= maxCols ; cols ++ ) { int rows = calculateNumberOfRows ( sourceCodeWords , errorCorrectionCodeWords , cols ) ; if ( rows < minRows ) { break ; } if ( rows > maxRows ) { continue ; } float newRatio = ( ( NUM_ * cols + NUM_ ) * DEFAULT_MODULE_WIDTH ) / ( rows * HEIGHT ) ; if ( dimension != null && Math . abs ( newRatio - PREFERRED_RATIO ) > Math . abs ( ratio - PREFERRED_RATIO ) ) { continue ; } ratio = newRatio ; dimension = new int [ ] { cols , rows } ; } if ( dimension == null ) { int rows = calculateNumberOfRows ( sourceCodeWords , errorCorrectionCodeWords , minCols ) ; if ( rows < minRows ) { dimension = new int [ ] { minCols , minRows } ; } } if ( dimension == null ) { throw new WriterException ( STR_ ) ; } return dimension ; }
ObjectRef [ ] mc_enum_etas ( String username , String password ) throws RemoteException ;
public static String readBytesToString ( FileSystem fs , Path path , int length ) throws IOException { FSDataInputStream in = fs . open ( path ) ; try { byte [ ] buf = new byte [ length ] ; in . readFully ( NUM_ , buf ) ; return toChar ( buf ) ; } finally { in . close ( ) ; } }
protected abstract void clearOnlineState ( Session session , OnlineSession onlineSession ) ;
default boolean rebind ( UserAction action , KeyCode key ) { return rebind ( action , key , InputModifier . NONE ) ; }
public Utf8Constant ( ConstantPool pool , int index , String value ) { super ( pool , index ) ; _value = value ; }
public CLIOutputResponse propdel ( final PropertyDeleteRequest request ) throws IOException , ServerException { final File projectPath = new File ( request . getProjectPath ( ) ) ; final List < String > uArgs = defaultArgs ( ) ; addDepth ( uArgs , request . getDepth ( ) . getValue ( ) ) ; uArgs . add ( STR_ ) ; uArgs . add ( request . getName ( ) ) ; final CommandLineResult result = runCommand ( null , uArgs , projectPath , Arrays . asList ( request . getPath ( ) ) ) ; return DtoFactory . getInstance ( ) . createDto ( CLIOutputResponse . class ) . withCommand ( result . getCommandLine ( ) . toString ( ) ) . withOutput ( result . getStdout ( ) ) . withErrOutput ( result . getStderr ( ) ) ; }
public boolean containsValue ( Object value ) { purgeBeforeRead ( ) ; if ( value == null ) { return BOOL_ ; } return super . containsValue ( value ) ; }
public static int value ( String s ) { return protocols . getValue ( s ) ; }
public ValueNode popLock ( ) { try { return lockedObjects [ lockedObjects . length - NUM_ ] ; } finally { lockedObjects = lockedObjects . length == NUM_ ? EMPTY_ARRAY : Arrays . copyOf ( lockedObjects , lockedObjects . length - NUM_ ) ; monitorIds = monitorIds . length == NUM_ ? EMPTY_MONITOR_ARRAY : Arrays . copyOf ( monitorIds , monitorIds . length - NUM_ ) ; assert lockedObjects . length == monitorIds . length ; } }
public native Boolean hasLeaves ( TreeNode node ) ;
public boolean remove ( Object o ) { if ( ! ( o instanceof GraphicsNode ) ) { throw new IllegalArgumentException ( o + STR_ ) ; } GraphicsNode node = ( GraphicsNode ) o ; if ( node . getParent ( ) != this ) { return BOOL_ ; } int index = NUM_ ; for ( ; node != children [ index ] ; index ++ ) ; remove ( index ) ; return BOOL_ ; }
public void undoCommand ( IUndoableCommand command ) { IUndoableCommand temp ; do { temp = undoStack . pop ( ) ; temp . undo ( ) ; redoStack . push ( temp ) ; } while ( temp != command ) ; fireOperationsHistoryChanged ( ) ; }
Domino < T , R > defaultScheduler ( ) { return schedule ( new DefaultScheduler ( ) ) ; }
public static void checkArgument ( boolean test , String message , Object ... arguments ) { if ( ! test ) { throw newIllegalArgumentException ( message , arguments ) ; } }
public static String removeSubstring ( String inString , String substring ) { StringBuffer result = new StringBuffer ( ) ; int oldLoc = NUM_ , loc = NUM_ ; while ( ( loc = inString . indexOf ( substring , oldLoc ) ) != - NUM_ ) { result . append ( inString . substring ( oldLoc , loc ) ) ; oldLoc = loc + substring . length ( ) ; } result . append ( inString . substring ( oldLoc ) ) ; return result . toString ( ) ; }
public static void main ( String ... a ) throws Exception { TestBase . createCaller ( ) . init ( ) . test ( ) ; }
public void popCurrentTemplateRuleIsNull ( ) { m_currentTemplateRuleIsNull . pop ( ) ; }
public void onResume ( ) ;
public void makeImmutable ( ) { if ( isMutable ) { if ( subjectConfirmationData != null ) { subjectConfirmationData . makeImmutable ( ) ; } if ( baseId != null ) { baseId . makeImmutable ( ) ; } if ( nameId != null ) { nameId . makeImmutable ( ) ; } isMutable = BOOL_ ; } }
public void testWithMimeMagic ( ) { for ( String [ ] testPage : textBasedFormats ) { String mimeType = getMimeType ( urlPrefix , testPage [ NUM_ ] . getBytes ( defaultCharset ) , testPage [ NUM_ ] , BOOL_ ) ; assertEquals ( STR_ , testPage [ NUM_ ] , mimeType ) ; } }
public void hide ( ) { LayoutParams lp = ( LayoutParams ) mContentView . getLayoutParams ( ) ; lp . height = NUM_ ; mContentView . setLayoutParams ( lp ) ; }
public boolean RKwarn ( ) { return RKwarning ; }
public Log4JDailyRollingFileAppender ( Layout layout , String filename , String datePtrn ) throws IOException { super ( layout , filename , datePtrn ) ; init ( ) ; }
public synchronized final int evictionCount ( ) { return evictionCount ; }
public ColorGradient ( ) { gradient = new TreeSet < GradPoint > ( ) ; }
protected boolean hasOutstandingChanges ( ) { return ( txt1 . hasChanged ( ) || txt2 . hasChanged ( ) || txt3 . hasChanged ( ) || txt4 . hasChanged ( ) ) ; }
public SpaceTypeDescriptorBuilder fifoGroupingProperty ( String fifoGroupingPropertyPath ) { if ( fifoGroupingPropertyPath == null ) throw new IllegalArgumentException ( STR_ ) ; if ( _fifoGroupingPropertyPath != null ) throw new IllegalStateException ( STR_ + fifoGroupingPropertyPath + STR_ + _fifoGroupingPropertyPath + STR_ ) ; validateNoCollectionPath ( fifoGroupingPropertyPath ) ; this . _fifoGroupingPropertyPath = fifoGroupingPropertyPath ; return this ; }
protected MessageReactor findMessageReactor ( byte [ ] messageType , int offset , int length ) { for ( int i = NUM_ ; i < messageReactors . length ; i ++ ) { if ( NodeUtil . equals ( messageType , offset , length , messageReactors [ i ] . messageType , NUM_ , messageReactors [ i ] . messageType . length ) ) { return messageReactors [ i ] ; } } return null ; }
public static MutableTableRequirement mutableTable ( TableDefinition tableDefinition ) { return MutableTableRequirement . builder ( tableDefinition ) . build ( ) ; }
public Identity ( String name , IdentityScope scope ) throws KeyManagementException { this ( name ) ; if ( scope != null ) { scope . addIdentity ( this ) ; } this . scope = scope ; }
void deletedNode ( INaviView view , INaviViewNode node ) ;
public Bagging ( Regressor baseRegressor ) { this ( baseRegressor , DEFAULT_EXTRA_SAMPLES , DEFAULT_SIMULTANIOUS_TRAINING ) ; }
public int Count_Get ( StreamKind StreamKind , int StreamNumber ) { return MediaInfoDLL_Internal . INSTANCE . Count_Get ( Handle , StreamKind . ordinal ( ) , StreamNumber ) ; }
private Mailbox cacheMailbox ( Mailbox mailbox ) { mailboxCache . add ( new SimpleMailbox ( mailbox ) ) ; int id = mailboxCache . size ( ) - NUM_ ; ( ( SimpleMailbox ) mailbox ) . setMailboxId ( MaildirId . of ( id ) ) ; return mailbox ; }
public static Document toDocument ( String xml ) throws SAXException { try { return toDocument ( new StringReader ( xml ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }
public void destroyView ( ) throws CanceledException { MeganProperties . removePropertiesListListener ( menuBar . getRecentFilesListener ( ) ) ; ProgramProperties . put ( STR_ , urlComboBox . getItemsAsString ( NUM_ , STR_ ) ) ; dir . removeViewer ( this ) ; searchManager . getFindDialogAsToolBar ( ) . close ( ) ; if ( ! ProgramProperties . get ( STR_ , BOOL_ ) ) ProgramProperties . put ( STR_ , new String [ NUM_ ] ) ; dispose ( ) ; }
public RelativeDecoratorLocator ( double relativeX , double relativeY ) { super ( relativeX , relativeY ) ; }
public void closeHistory ( String documentId ) ;
protected final void addViewInternal ( View child , int index , ViewGroup . LayoutParams params ) { super . addView ( child , index , params ) ; }
private void updateEmptySearchBackgroundBounds ( ) { if ( mEmptySearchBackground == null ) { return ; } int x = ( getMeasuredWidth ( ) - mEmptySearchBackground . getIntrinsicWidth ( ) ) / NUM_ ; int y = mEmptySearchBackgroundTopOffset ; mEmptySearchBackground . setBounds ( x , y , x + mEmptySearchBackground . getIntrinsicWidth ( ) , y + mEmptySearchBackground . getIntrinsicHeight ( ) ) ; }
public MutualInfoCalculatorMultiVariateKernel ( ) { mvkeSource = new KernelEstimatorMultiVariate ( ) ; mvkeDest = new KernelEstimatorMultiVariate ( ) ; mvkeJoint = new KernelEstimatorMultiVariate ( ) ; mvkeSource . setNormalise ( normalise ) ; mvkeDest . setNormalise ( normalise ) ; mvkeJoint . setNormalise ( normalise ) ; }
public final boolean equals ( Object o ) { return this == o ; }
public static boolean start ( RootDoc root ) throws IOException { return new ResourceDoclet ( ) . startDoc ( root ) ; }
public HandleErrorResult handleFailover ( QueryException qe , Method method , Object [ ] args , Protocol protocol ) throws Throwable { if ( isExplicitClosed ( ) ) { throw new QueryException ( STR_ ) ; } if ( protocol . mustBeMasterConnection ( ) ) { if ( setMasterHostFail ( ) ) { logger . warn ( STR_ + this . currentProtocol . getHostAddress ( ) . toString ( ) + STR_ + this . currentProtocol . getServerThreadId ( ) + STR_ + qe . getMessage ( ) ) ; addToBlacklist ( protocol . getHostAddress ( ) ) ; } return primaryFail ( method , args ) ; } else { if ( setSecondaryHostFail ( ) ) { logger . warn ( STR_ + this . currentProtocol . getHostAddress ( ) . toString ( ) + STR_ + this . currentProtocol . getServerThreadId ( ) + STR_ + qe . getMessage ( ) ) ; addToBlacklist ( protocol . getHostAddress ( ) ) ; } return secondaryFail ( method , args ) ; } }
public static RectF trapToRect ( float [ ] array ) { RectF r = new RectF ( Float . POSITIVE_INFINITY , Float . POSITIVE_INFINITY , Float . NEGATIVE_INFINITY , Float . NEGATIVE_INFINITY ) ; for ( int i = NUM_ ; i < array . length ; i += NUM_ ) { float x = array [ i - NUM_ ] ; float y = array [ i ] ; r . left = ( x < r . left ) ? x : r . left ; r . top = ( y < r . top ) ? y : r . top ; r . right = ( x > r . right ) ? x : r . right ; r . bottom = ( y > r . bottom ) ? y : r . bottom ; } r . sort ( ) ; return r ; }
public static Uri buildRowAccessUri ( Long id ) { return ContentUris . withAppendedId ( WEATHER_VALUES_CONTENT_URI , id ) ; }
public MessagesGetLongPollServerQuery ( VkApiClient client , Actor actor ) { super ( client , STR_ , LongpollParams . class ) ; accessToken ( actor . getAccessToken ( ) ) ; }
public CCheckBox ( String text ) { super ( text ) ; init ( ) ; }
public void writeImage ( BufferedImage img , TranscoderOutput output ) throws TranscoderException { boolean forceTransparentWhite = BOOL_ ; if ( hints . containsKey ( PNGTranscoder . KEY_FORCE_TRANSPARENT_WHITE ) ) { forceTransparentWhite = ( ( Boolean ) hints . get ( PNGTranscoder . KEY_FORCE_TRANSPARENT_WHITE ) ) . booleanValue ( ) ; } if ( forceTransparentWhite ) { SinglePixelPackedSampleModel sppsm ; sppsm = ( SinglePixelPackedSampleModel ) img . getSampleModel ( ) ; forceTransparentWhite ( img , sppsm ) ; } WriteAdapter adapter = getWriteAdapter ( STR_ ) ; if ( adapter == null ) { adapter = getWriteAdapter ( STR_ ) ; } if ( adapter == null ) { throw new TranscoderException ( STR_ ) ; } adapter . writeImage ( this , img , output ) ; }
public static Bound named ( String name ) { return new Bound ( ) . named ( name ) ; }
public ValueNode lockAt ( int i ) { assert i >= NUM_ && i < locksSize ( ) ; return values . get ( localsSize + stackSize + i ) ; }
static Result fromContent ( StructuredContent content ) throws IllegalArgumentException { if ( content == null ) { throw new IllegalArgumentException ( STR_ ) ; } return new Result ( content ) ; }
public static int methodModifiers ( ) { return PUBLIC | PROTECTED | PRIVATE | ABSTRACT | STATIC | FINAL | SYNCHRONIZED | NATIVE | STRICT ; }
public List queryAll ( ) { List foundItems = new ArrayList ( ) ; root . addAllItems ( foundItems ) ; return foundItems ; }
public static void showViewInNewWindow ( final Window parent , final IViewContainer container , final INaviView [ ] views ) { showViews ( parent , container , views , null ) ; }
protected ExecutionImpl ( ) { super ( ) ; }
void removeHttpListener ( IHttpListener listener ) ;
public double pmf ( int x ) { return pmf ( x , n , p ) ; }
public ReplaceAll ( ) { super ( STR_ , NUM_ ) ; }
public static boolean expressionHasErrors ( String expression ) { final JEP parser = getJep ( ) ; parser . parseExpression ( expression ) ; return parser . hasError ( ) ; }
void onParentMoved ( com . smartgwt . client . widgets . events . ParentMovedEvent event ) ;
public boolean isPartitionTag ( String field ) { if ( partitions == null || ( ! isTag ( field ) ) ) { return BOOL_ ; } for ( String partition : partitions ) { if ( partition . equals ( field ) ) { return BOOL_ ; } } return BOOL_ ; }
public char nextClean ( ) throws JSONException { for ( ; ; ) { char c = this . next ( ) ; if ( c == NUM_ || c > STR_ ) { return c ; } } }
private void resetNotes2 ( ) { if ( errorInStatus2 ) { if ( editMode ) { statusText1 . setText ( editStatus2 ) ; } else { statusText2 . setText ( stdStatus2 ) ; } errorInStatus2 = BOOL_ ; } }
public int end ( int group ) { ensureMatch ( ) ; return matchOffsets [ ( group * NUM_ ) + NUM_ ] ; }
void matsim4UrbanSimShutdown ( ) { BackupMATSimOutput . prepareHotStart ( scenario ) ; UrbanSimParameterConfigModuleV3 module = ConfigurationUtils . getUrbanSimParameterConfigModule ( scenario ) ; if ( module == null ) { log . error ( STR_ ) ; } else if ( module . isBackup ( ) ) { BackupMATSimOutput . saveRunOutputs ( scenario ) ; } }
protected void checkStatistics ( String expr , double stats ) { m_Filter = getFilter ( expr ) ; Instances result = useFilter ( ) ; assertEquals ( m_Instances . numAttributes ( ) , result . numAttributes ( ) ) ; assertEquals ( m_Instances . numInstances ( ) , result . numInstances ( ) ) ; boolean equal = BOOL_ ; for ( int i = NUM_ ; i < result . numInstances ( ) ; i ++ ) { if ( ! Utils . eq ( stats , result . instance ( i ) . value ( m_AttIndex ) ) ) { equal = BOOL_ ; break ; } } if ( ! equal ) fail ( STR_ + expr + STR_ ) ; }
void trigger ( JComponent c , MouseEvent e , int srcActions , int action ) { setComponent ( c ) ; setSourceActions ( srcActions ) ; appendEvent ( e ) ; fireDragGestureRecognized ( action , e . getPoint ( ) ) ; }
public com . sun . identity . liberty . ws . common . jaxb . ps . LogoutResponseElement createLogoutResponseElement ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . liberty . ws . common . jaxb . ps . impl . LogoutResponseElementImpl ( ) ; }
protected void calculateNodeHeights ( ) { if ( ! lengthsKnown ) { throw new IllegalArgumentException ( STR_ ) ; } nodeLengthsToHeights ( ( FlexibleNode ) getRoot ( ) , NUM_ ) ; double maxHeight = NUM_ ; FlexibleNode node ; for ( int i = NUM_ ; i < getExternalNodeCount ( ) ; i ++ ) { node = ( FlexibleNode ) getExternalNode ( i ) ; if ( node . getHeight ( ) > maxHeight ) { maxHeight = node . getHeight ( ) ; } } for ( int i = NUM_ ; i < getNodeCount ( ) ; i ++ ) { node = ( FlexibleNode ) getNode ( i ) ; node . setHeight ( maxHeight - node . getHeight ( ) ) ; } heightsKnown = BOOL_ ; }
public void changePerformed ( Change change ) ;
public void applyStageChart ( ) { PieChart chart = ( PieChart ) mItemView . findViewById ( R . id . statisticsChart ) ; mStatisticsLogic . fillChart ( chart , StatisticType . TYPE_STAGE ) ; }
public boolean isRelationTableExist ( ) { return relationTableExist ; }
void initFromCameraParameters ( Camera camera ) { Camera . Parameters parameters = camera . getParameters ( ) ; previewFormat = parameters . getPreviewFormat ( ) ; previewFormatString = parameters . get ( STR_ ) ; Log . d ( TAG , STR_ + previewFormat + STR_ + previewFormatString ) ; WindowManager manager = ( WindowManager ) context . getSystemService ( Context . WINDOW_SERVICE ) ; Display display = manager . getDefaultDisplay ( ) ; screenResolution = new Point ( display . getWidth ( ) , display . getHeight ( ) ) ; Log . d ( TAG , STR_ + screenResolution ) ; cameraResolution = getCameraResolution ( parameters , screenResolution ) ; Log . d ( TAG , STR_ + screenResolution ) ; }
public Builder withInterval ( int interval ) { this . gpsConfig . setInterval ( interval ) ; return this ; }
public long lowerBound ( ) { return ( Long ) super . getRequiredProperty ( Annotations . LOWER_BOUND ) ; }
void copyParentSets ( BayesNet dest , BayesNet source ) { int nNodes = source . getNrOfNodes ( ) ; for ( int iNode = NUM_ ; iNode < nNodes ; iNode ++ ) { dest . getParentSet ( iNode ) . copy ( source . getParentSet ( iNode ) ) ; } }
private void clearExplicitKnowledge ( ) { requiredEdges = new HashSet < > ( ) ; explicitlyForbiddenEdges = new HashSet < > ( ) ; requiredCommonCauses = new HashSet < > ( ) ; forbiddenCommonCauses = new HashSet < > ( ) ; this . knowledgeGroups = new ArrayList < > ( ) ; this . allRequiredEdges = new HashSet < > ( ) ; tierMap = new HashMap < > ( ) ; }
public RegexPartitionStateRepo copyForIterate ( boolean forOutOfOrderReprocessing ) ;
protected static String branchString ( DalvInsn insn ) { TargetInsn ti = ( TargetInsn ) insn ; int address = ti . getTargetAddress ( ) ; return ( address == ( char ) address ) ? Hex . u2 ( address ) : Hex . u4 ( address ) ; }
public static String encodeNumericKeyIdShort ( long keyId ) { String longKeyId = encodeNumericKeyId ( keyId ) ; return longKeyId . substring ( NUM_ ) ; }
public void add ( final String text ) { final String [ ] lines = text . split ( STR_ ) ; if ( lines . length > NUM_ ) { addToBuffer ( lines ) ; } else { addToBuffer ( new String [ ] { text } ) ; } }
public void clear ( ) { SharedPreferences prefs = mContext . getSharedPreferences ( PREFS_LOGIN , Context . MODE_PRIVATE ) ; SharedPreferences . Editor editor = prefs . edit ( ) ; editor . remove ( PREFS_KEY_CONNECTION_CONFIGS ) ; editor . apply ( ) ; }
public static PerfDataType toPerfDataType ( byte type ) { for ( int j = NUM_ ; j < basicTypes . length ; j ++ ) { if ( basicTypes [ j ] . byteValue ( ) == type ) { return ( basicTypes [ j ] ) ; } } return ILLEGAL ; }
ScheduledFutureTask ( Callable < V > callable , long ns ) { super ( callable ) ; this . time = ns ; this . period = NUM_ ; this . sequenceNumber = sequencer . getAndIncrement ( ) ; }
public final boolean add ( Node n ) { if ( pag . getTypeManager ( ) . castNeverFails ( n . getType ( ) , type ) ) { return fastAdd ( n ) ; } return BOOL_ ; }
public static int nameToOp ( String name ) { for ( int i = NUM_ ; i < sOpNames . length ; i ++ ) { if ( sOpNames [ i ] . equals ( name ) ) { return i ; } } return OP_NONE ; }
public static boolean isStringArrayType ( PsiType type ) { if ( isPrimitiveType ( type ) ) return BOOL_ ; return type . getCanonicalText ( ) . indexOf ( STR_ ) > NUM_ ; }
public static void materialize ( Object obj ) { }
public static < T > Predicate < T > memoizePredicate ( Predicate < T > p , Cacheable < Boolean > cache ) { Function < T , Boolean > memoised = memoizeFunction ( ( Function1 < T , Boolean > ) null , cache ) ; return null ; }
boolean matches ( int type , int child1 , int child2 ) { return matches ( type , child1 ) && get ( NUM_ , BOOL_ ) . isA ( child2 ) ; }
public CoNLLNerReader ( String conlldirectory ) { super ( CorpusReaderConfigurator . buildResourceManager ( STR_ , conlldirectory ) ) ; this . taCounter = NUM_ ; }
public void appendCompilationUnitLabel ( ICompilationUnit cu , long flags ) { if ( getFlag ( flags , JavaElementLabels . CU_QUALIFIED ) ) { IPackageFragment pack = ( IPackageFragment ) cu . getParent ( ) ; if ( ! pack . isDefaultPackage ( ) ) { appendPackageFragmentLabel ( pack , ( flags & QUALIFIER_FLAGS ) ) ; fBuffer . append ( STR_ ) ; } } fBuffer . append ( cu . getElementName ( ) ) ; if ( getFlag ( flags , JavaElementLabels . CU_POST_QUALIFIED ) ) { int offset = fBuffer . length ( ) ; fBuffer . append ( JavaElementLabels . CONCAT_STRING ) ; appendPackageFragmentLabel ( ( IPackageFragment ) cu . getParent ( ) , flags & QUALIFIER_FLAGS ) ; } }
public static ObjectInputStream newObjectInputStream ( File file , final ClassLoader classLoader ) throws IOException { return IOGroovyMethods . newObjectInputStream ( new FileInputStream ( file ) , classLoader ) ; }
public boolean showDialog ( ) { setVisible ( BOOL_ ) ; return continueQueue ; }
void trackEditor ( EditorPartPresenter editor ) ;
public Role findRoleByRoleName ( String roleName ) { return roleRepository . findTopByRoleName ( roleName ) ; }
public boolean isVoidSigOn ( ) { return BOOL_ ; }
private static boolean isNullBitKey ( int bitIndex ) { return bitIndex == KeyAnalyzer . NULL_BIT_KEY ; }
public static MethodNoExceptionCoverageTestFitness createMethodTestFitness ( BytecodeInstruction instruction ) { if ( instruction == null ) throw new IllegalArgumentException ( STR_ ) ; return createMethodTestFitness ( instruction . getClassName ( ) , instruction . getMethodName ( ) ) ; }
public static void serializeShort ( short val , byte [ ] buffer , MutableInt offset ) { int offsetInt = offset . intValue ( ) ; buffer [ NUM_ + offsetInt ] = ( byte ) ( ( val > > NUM_ ) & NUM_ ) ; buffer [ NUM_ + offsetInt ] = ( byte ) ( val & NUM_ ) ; offset . add ( Type . SHORT . getByteSize ( ) ) ; }
public void rollbackLinkBlockSnapshotSessionTarget ( URI systemURI , URI snapSessionURI , URI snapshotURI , String stepId ) { BlockSnapshotSession snapSession = _dbClient . queryObject ( BlockSnapshotSession . class , snapSessionURI ) ; StringSet linkedTargets = snapSession . getLinkedTargets ( ) ; if ( ( linkedTargets == null ) || ( ! linkedTargets . contains ( snapshotURI . toString ( ) ) ) ) { unlinkBlockSnapshotSessionTarget ( systemURI , snapSessionURI , snapshotURI , Boolean . TRUE , stepId ) ; } else { WorkflowStepCompleter . stepSucceded ( stepId ) ; } }
public abstract void postReceiveEnd ( ReceivePacket entity , boolean isSuccess ) ;
private static Indexed fromGreyRamp ( int intensity ) { int rescaled = ( int ) ( ( ( double ) intensity / NUM_ ) * NUM_ ) + NUM_ ; return new Indexed ( rescaled ) ; }
E pollLast ( long timeout , TimeUnit unit ) throws InterruptedException ;
public final void execute ( Action1 < ? super ResponseModel > onNext ) { execute ( onNext , ( RequestModel ) null ) ; }
private ResourceResponse patchResourceById ( Context context , Request request , String resourceId , String revision , List < PatchOperation > patchOperations ) throws ResourceException { idRequired ( request . getResourcePath ( ) ) ; noSubObjects ( request . getResourcePath ( ) ) ; ResourceResponse resource = readResource ( context , repoId ( resourceId ) ) ; return patchResource ( context , request , resource , revision , patchOperations ) ; }
public static SelectionJavaElementResolver from ( ISelection selection ) { Collection < ? > adaptables = selection instanceof IStructuredSelection ? ( ( StructuredSelection ) selection ) . toList ( ) : Collections . emptyList ( ) ; return new SelectionJavaElementResolver ( adaptables ) ; }
public abstract Canvas fillRoundRect ( float x , float y , float width , float height , float radius ) ;
public void addMarker ( String tag ) { if ( VinciLog . logLevel != LogLevel . NONE ) { mEventLog . add ( tag , Thread . currentThread ( ) . getId ( ) ) ; } }
public void joinChannelImmediately ( String channel ) { if ( state >= STATE_REGISTERED ) { if ( ! channel . startsWith ( STR_ ) ) { channel = STR_ + channel ; } send ( STR_ + channel ) ; onJoinAttempt ( channel ) ; } }
public boolean isLocked ( ) { return isLocked ; }
Iterator < E > descendingIterator ( ) ;
void close ( IGraphPanel panel ) ;
public void stop ( ) { this . pollingThread . close ( ) ; try { this . pollingThread . join ( NUM_ ) ; } catch ( InterruptedException e ) { logger . warn ( LocalizedMessage . create ( LocalizedStrings . LoadMonitor_INTERRUPTED_WAITING_FOR_POLLING_THREAD_TO_FINISH ) ) ; Thread . currentThread ( ) . interrupt ( ) ; } probe . close ( ) ; }
static < T > GeneralRange < T > all ( Comparator < ? super T > comparator ) { return new GeneralRange < T > ( comparator , BOOL_ , null , OPEN , BOOL_ , null , OPEN ) ; }
public synchronized int size ( ) { return rrs . size ( ) - nsigs ; }
private void copyCurrentConfigFileToArchiveFile ( File archiveFile ) throws DirectoryException { byte [ ] buffer = new byte [ NUM_ ] ; try ( FileInputStream inputStream = new FileInputStream ( configFile ) ; GZIPOutputStream outputStream = new GZIPOutputStream ( new FileOutputStream ( archiveFile ) ) ) { int bytesRead = inputStream . read ( buffer ) ; while ( bytesRead > NUM_ ) { outputStream . write ( buffer , NUM_ , bytesRead ) ; bytesRead = inputStream . read ( buffer ) ; } } catch ( IOException e ) { logger . traceException ( e ) ; throw new DirectoryException ( ResultCode . UNDEFINED , ERR_CONFIG_FILE_CANNOT_WRITE_CONFIG_ARCHIVE . get ( stackTraceToSingleLineString ( e ) ) ) ; } }
private void findRelatedVolumes ( ) { for ( VolumeSpec volume : volumes ) { volume . relatedVolumes = Lists . newArrayList ( ) ; Set < String > volumeWwns = getVolumeWwns ( volume ) ; for ( String relatedWwn : volumeWwns ) { BlockObjectRestRep related = findVolumeRestRepByWwn ( relatedWwn ) ; if ( related == null ) { related = BlockStorageUtils . getVolumeByWWN ( relatedWwn ) ; } if ( related != null ) { volume . relatedVolumes . add ( related ) ; } } } }
private static String findFirstMatchingLine ( String data , String prefix ) { if ( data == null ) { return STR_ ; } int ix = data . indexOf ( prefix ) ; if ( ix >= NUM_ ) { int iy = data . indexOf ( STR_ , ix ) ; if ( iy > NUM_ ) { return data . substring ( ix , iy ) ; } } return STR_ ; }
protected boolean supportsNetLoad ( ) { return BOOL_ ; }
private double [ ] projectSparse ( SparseNumberVector in , double [ ] ret ) { Arrays . fill ( ret , NUM_ ) ; for ( int iter = in . iter ( ) ; in . iterValid ( iter ) ; iter = in . iterAdvance ( iter ) ) { final int i = in . iterDim ( iter ) ; final double val = in . iterDoubleValue ( iter ) ; for ( int o = NUM_ ; o < ret . length ; o ++ ) { ret [ o ] += val * matrix [ o ] [ i ] ; } } return ret ; }
public void sendPacketToPlayer ( IPacket packet , EntityPlayerMP player ) { checkClassAndSync ( packet . getClass ( ) ) ; serverOutboundChannel . attr ( FMLOutboundHandler . FML_MESSAGETARGET ) . set ( FMLOutboundHandler . OutboundTarget . PLAYER ) ; serverOutboundChannel . attr ( FMLOutboundHandler . FML_MESSAGETARGETARGS ) . set ( player ) ; serverOutboundChannel . writeOutbound ( packet ) ; isCurrentlySendingSemaphor = BOOL_ ; }
public SafeAsyncTask ( Handler handler ) { this . handler = handler ; this . executor = DEFAULT_EXECUTOR ; }
public GroupsGetMembersQueryWithFields offset ( Integer value ) { return unsafeParam ( STR_ , value ) ; }
abstract boolean next ( ) throws IOException ;
public MarketSearchQuery priceFrom ( Integer value ) { return unsafeParam ( STR_ , value ) ; }
public static < T > Type < T > limitedValueOf ( final java . lang . reflect . Type type , final Set < java . lang . reflect . Type > recursiveBounds ) { if ( type instanceof Type ) { return ( Type < T > ) type ; } else if ( type instanceof ParameterizedType ) { return limitedValueOf ( ( ParameterizedType ) type , recursiveBounds ) ; } else if ( type instanceof Class ) { return limitedValueOf ( ( Class < T > ) type , recursiveBounds , new java . lang . reflect . Type [ NUM_ ] ) ; } else if ( type instanceof TypeVariable ) { return limitedValueOf ( ( TypeVariable < ? > ) type , recursiveBounds ) ; } else if ( type instanceof WildcardType ) { return limitedValueOf ( ( WildcardType ) type , recursiveBounds ) ; } else { throw new IllegalArgumentException ( type + STR_ ) ; } }
public Object asObject ( ) { return this . source ; }
private static boolean hasXMPHeader ( byte [ ] data ) { if ( data . length < XMP_HEADER_SIZE ) { return BOOL_ ; } try { byte [ ] header = new byte [ XMP_HEADER_SIZE ] ; System . arraycopy ( data , NUM_ , header , NUM_ , XMP_HEADER_SIZE ) ; if ( new String ( header , STR_ ) . equals ( XMP_HEADER ) ) { return BOOL_ ; } } catch ( UnsupportedEncodingException e ) { return BOOL_ ; } return BOOL_ ; }
public boolean isUseLastIp ( ) { return lastIp != null ; }
public void shutdown ( ) { unregisterShutdownHook ( ) ; syncExecutor . shutdown ( ) ; }
public static RegionUpdater newRegionUpdater ( ReplaceEdit originalEdit , ASTNode node , ReferenceUpdater referenceUpdater , ASTMatcher matcher ) throws RefactoringException { if ( node instanceof Name ) { return new NameRegionUpdater ( originalEdit , referenceUpdater , ( Name ) node , matcher ) ; } else if ( node instanceof TextElement ) { return new TextElementRegionUpdater ( originalEdit , referenceUpdater , ( TextElement ) node , matcher ) ; } throw new RefactoringException ( STR_ ) ; }
protected abstract void iterate ( ) ;
public URI toURILenient ( ) throws URISyntaxException { if ( streamHandler == null ) { throw new IllegalStateException ( protocol ) ; } return new URI ( streamHandler . toExternalForm ( this , BOOL_ ) ) ; }
private void createPiedPiper ( ) { TPPQuestHelperFunctions . setupPiper ( piedpiper ) ; fullpath = PathsBuildHelper . getAdosCollectingRatsPaths ( ) ; leadNPC ( ) ; }
public DatagramSocket createDatagramSocket ( int port , InetAddress laddr ) throws SocketException ;
private void goForward ( ) { if ( this . inAppWebView . canGoForward ( ) ) { this . inAppWebView . goForward ( ) ; } }
protected void defaultPublicExceptionHandling ( Object exchange , IPublicException publicException ) throws Throwable { if ( getServer ( ) . isResponseHeadersSent ( exchange ) ) { this . logger . info ( STR_ + SpincastStatics . getStackTrace ( ( Throwable ) publicException ) ) ; return ; } String errorMessage = ( ( Throwable ) publicException ) . getMessage ( ) ; if ( getSpincastConfig ( ) . isDebugEnabled ( ) ) { errorMessage += STR_ + SpincastStatics . getStackTrace ( ( ( Throwable ) publicException ) ) ; } sendErrorUsingBestMatchContentType ( exchange , errorMessage , publicException . getStatusCode ( ) ) ; }
public PlaPointFloat right_tangential_point ( PlaPointFloat p_to_point , double p_distance ) { if ( p_to_point == null ) return null ; PlaPointFloat [ ] tangent_points = tangential_points ( p_to_point , p_distance ) ; if ( tangent_points . length < NUM_ ) return null ; if ( p_to_point . side_of ( this , tangent_points [ NUM_ ] ) == PlaSide . ON_THE_RIGHT ) return tangent_points [ NUM_ ] ; else return tangent_points [ NUM_ ] ; }
public StringBuffer encode ( StringBuffer buffer ) { return buffer . append ( encode ( ) ) ; }
private void inqueueStubActivity ( ActivityInfo ai , String realActivityClazz ) { if ( ai . launchMode == ActivityInfo . LAUNCH_MULTIPLE ) return ; if ( mStubQueue == null ) return ; int countForMode = STUB_ACTIVITIES_COUNT ; int offset = ( ai . launchMode - NUM_ ) * countForMode ; for ( int i = NUM_ ; i < countForMode ; i ++ ) { String stubClazz = mStubQueue [ i + offset ] ; if ( stubClazz != null && stubClazz . equals ( realActivityClazz ) ) { mStubQueue [ i + offset ] = null ; break ; } } }
private void handleSubscriptionError ( AzureAllocationContext ctx , String namespace , Throwable e ) { if ( e instanceof CloudException ) { CloudException ce = ( CloudException ) e ; CloudError body = ce . getBody ( ) ; if ( body != null ) { String code = body . getCode ( ) ; if ( MISSING_SUBSCRIPTION_CODE . equals ( code ) ) { registerSubscription ( ctx , namespace ) ; return ; } } } handleError ( ctx , e ) ; }
public static void testValidity ( Object o ) throws JSONException { if ( o != null ) { if ( o instanceof Double ) { if ( ( ( Double ) o ) . isInfinite ( ) || ( ( Double ) o ) . isNaN ( ) ) { throw new JSONException ( STR_ ) ; } } else if ( o instanceof Float ) { if ( ( ( Float ) o ) . isInfinite ( ) || ( ( Float ) o ) . isNaN ( ) ) { throw new JSONException ( STR_ ) ; } } } }
public static void initQualityFormatFlag ( CFlags flags ) { final Flag qualFormatFlag = flags . registerOptional ( STR_ , QUALITY_FLAG , String . class , STR_ , STR_ ) . setCategory ( CommonFlagCategories . INPUT_OUTPUT ) ; qualFormatFlag . setParameterRange ( QUALITY_FORMAT_OPTIONS ) ; }
public static < T > T checkNotNull ( T reference , Object errorMessage ) { if ( reference == null ) { throw new NullPointerException ( String . valueOf ( errorMessage ) ) ; } return reference ; }
public boolean isReferenceType ( ) ;
public void subtract ( final Number operand ) { this . value -= operand . floatValue ( ) ; }
public final void add ( double scalar , Matrix3d m1 ) { this . m00 = m1 . m00 + scalar ; this . m01 = m1 . m01 + scalar ; this . m02 = m1 . m02 + scalar ; this . m10 = m1 . m10 + scalar ; this . m11 = m1 . m11 + scalar ; this . m12 = m1 . m12 + scalar ; this . m20 = m1 . m20 + scalar ; this . m21 = m1 . m21 + scalar ; this . m22 = m1 . m22 + scalar ; }
private void buildViewForMeasuring ( ) { if ( itemsLayout != null ) { recycle . recycleItems ( itemsLayout , firstItem , new ItemsRange ( ) ) ; } else { createItemsLayout ( ) ; } int addItems = visibleItems / NUM_ ; for ( int i = currentItem + addItems ; i >= currentItem - addItems ; i -- ) { if ( addViewItem ( i , BOOL_ ) ) { firstItem = i ; } } }
public static String replace ( final Object source , final Properties valueProperties ) { if ( valueProperties == null ) { return source . toString ( ) ; } final Map < String , String > valueMap = new HashMap < String , String > ( ) ; final Enumeration < ? > propNames = valueProperties . propertyNames ( ) ; while ( propNames . hasMoreElements ( ) ) { final String propName = ( String ) propNames . nextElement ( ) ; final String propValue = valueProperties . getProperty ( propName ) ; valueMap . put ( propName , propValue ) ; } return StrSubstitutor . replace ( source , valueMap ) ; }
public abstract boolean isValidInput ( ) ;
private static long longLCM ( long a , long b ) { return a * ( b / longGCD ( a , b ) ) ; }
public String [ ] toASS ( ) { return new FormatASS ( ) . toFile ( this ) ; }
public XObject execute ( XPathContext xctxt ) throws javax . xml . transform . TransformerException { XObject expr1 = m_left . execute ( xctxt ) ; if ( expr1 . bool ( ) ) { XObject expr2 = m_right . execute ( xctxt ) ; return expr2 . bool ( ) ? XBoolean . S_TRUE : XBoolean . S_FALSE ; } else return XBoolean . S_FALSE ; }
protected void onAdjustChildViews ( boolean down ) { if ( down ) correctTooHigh ( getChildCount ( ) ) ; else correctTooLow ( getChildCount ( ) ) ; }
public void remove ( Vertex v ) throws Exception { if ( hVertexTypes . containsKey ( v ) ) hVertexTypes . remove ( v ) ; super . remove ( v ) ; }
E next ( ) ;
public Ditherer ( int steps , Color from , Color to ) { this ( from , to , Y_AXIS , new LinearShader ( ) , steps ) ; if ( steps <= NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } }
public void showSecondaryMenu ( boolean animate ) { mViewAbove . setCurrentItem ( NUM_ , animate ) ; }
public static String matchCount ( String content , String pattern , int count , int group ) { return matchCount ( content , pattern , count , group , BOOL_ ) ; }
public void matchEvent ( EventBean theEvent , Collection < FilterHandle > matches ) ;
public void recompose ( StylesheetRoot root ) { root . recomposeAttributeSets ( this ) ; }
List < PriceListDTO > findBy ( long shopId , String currency , String filter , int page , int pageSize ) throws UnmappedInterfaceException , UnableToCreateInstanceException ;
private void updateRegion ( ) { Insets i = autoScroll . getAutoscrollInsets ( ) ; Dimension size = component . getSize ( ) ; if ( size . width != outer . width || size . height != outer . height ) outer . reshape ( NUM_ , NUM_ , size . width , size . height ) ; if ( inner . x != i . left || inner . y != i . top ) inner . setLocation ( i . left , i . top ) ; int newWidth = size . width - ( i . left + i . right ) ; int newHeight = size . height - ( i . top + i . bottom ) ; if ( newWidth != inner . width || newHeight != inner . height ) inner . setSize ( newWidth , newHeight ) ; }
private void addParameterDeletesObligationDatabaseEntry ( XMethod xmethod , Obligation obligation , ObligationPolicyDatabaseEntryType entryType ) { ObligationPolicyDatabaseEntry entry = database . addParameterDeletesObligationDatabaseEntry ( xmethod , obligation , entryType ) ; if ( DEBUG_ANNOTATIONS ) { System . out . println ( STR_ + entry ) ; } }
public boolean containsLogin ( ) { return prompts . contains ( PROMPT_LOGIN ) ; }
public Iterator < E > reverseOrderIterator ( ) { return new BinarySearchTreeIterator < E > ( this . root , BOOL_ ) ; }
public void createDatabaseEntitiesForBusinessObjectDataAvailabilityCollectionTesting ( ) { storageUnitDaoTestHelper . createStorageUnitEntity ( AbstractServiceTest . STORAGE_NAME , AbstractServiceTest . NAMESPACE , AbstractServiceTest . BDEF_NAME , AbstractServiceTest . FORMAT_USAGE_CODE , AbstractServiceTest . FORMAT_FILE_TYPE_CODE , AbstractServiceTest . FORMAT_VERSION , AbstractServiceTest . PARTITION_VALUE , AbstractServiceTest . SUBPARTITION_VALUES , AbstractServiceTest . DATA_VERSION , AbstractServiceTest . LATEST_VERSION_FLAG_SET , BusinessObjectDataStatusEntity . VALID , StorageUnitStatusEntity . ENABLED , AbstractServiceTest . NO_STORAGE_DIRECTORY_PATH ) ; }
public void start ( ) { coapServer . start ( ) ; LOG . info ( STR_ , getNonSecureAddress ( ) , getSecureAddress ( ) ) ; }
public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Element testAddr ; Attr addrAttr ; int nodeType ; doc = ( Document ) load ( STR_ , BOOL_ ) ; elementList = doc . getElementsByTagName ( STR_ ) ; testAddr = ( Element ) elementList . item ( NUM_ ) ; addrAttr = testAddr . getAttributeNode ( STR_ ) ; nodeType = ( int ) addrAttr . getNodeType ( ) ; assertEquals ( STR_ , NUM_ , nodeType ) ; }
public CascadingNetworkBuilder ( Network network , int numLayers , int numBrachesPerNeuron ) { this . network = network ; this . numLayers = numLayers ; this . numBrachesPerNeuron = numBrachesPerNeuron ; }
private void checkConnection ( int dsId , int rsId , String msg ) throws Exception { int rsPort = - NUM_ ; LDAPReplicationDomain rd = null ; switch ( dsId ) { case DS1_ID : rd = rd1 ; break ; case DS2_ID : rd = rd2 ; break ; default : fail ( STR_ ) ; } switch ( rsId ) { case RS1_ID : rsPort = rs1Port ; break ; case RS2_ID : rsPort = rs2Port ; break ; case RS3_ID : rsPort = rs3Port ; break ; default : fail ( STR_ ) ; } waitConnected ( dsId , rsId , rsPort , rd , msg ) ; }
public PbrpcException ( ) { super ( ) ; }
public static String [ ] handle ( String [ ] args , ICommand command , ICommandSender sender ) { final CommandEvent event = new CommandEvent ( args , command , sender ) ; return OpenModLoader . getEventBus ( ) . post ( event ) ? event . getArgs ( ) : null ; }
public BaleenConsoleLoggerBuilder ( String name , String pattern , Filter < ILoggingEvent > filter ) { super ( name , pattern , filter ) ; }
private InputStream writeNQuads ( Model statements ) throws RDFHandlerException { StringWriter writer = new StringWriter ( ) ; RDFWriter nQuadsWriter = new NQuadsWriter ( writer ) ; nQuadsWriter . startRDF ( ) ; for ( Statement nextStatement : statements ) { nQuadsWriter . handleStatement ( nextStatement ) ; } nQuadsWriter . endRDF ( ) ; return new ByteArrayInputStream ( writer . toString ( ) . getBytes ( Charset . forName ( STR_ ) ) ) ; }
public void kill ( Session session ) throws SQLException , ReplicatorException ;
private void applyForegroundColor ( Color color , Control control , List exclusions ) { if ( ! exclusions . contains ( control ) ) { control . setForeground ( color ) ; } if ( control instanceof Composite ) { Control [ ] children = ( ( Composite ) control ) . getChildren ( ) ; for ( int i = NUM_ ; i < children . length ; i ++ ) { applyForegroundColor ( color , children [ i ] , exclusions ) ; } } }
boolean supportsStoredProcedures ( ) throws SQLException ;
public static Object readField ( final Object target , final String fieldName , final boolean forceAccess ) throws IllegalAccessException { if ( target == null ) { throw new IllegalArgumentException ( STR_ ) ; } Class < ? > cls = target . getClass ( ) ; Field field = FieldUtils . getField ( cls , fieldName , forceAccess ) ; if ( field == null ) { throw new IllegalArgumentException ( STR_ + fieldName + STR_ + cls ) ; } return FieldUtils . readField ( field , target ) ; }
public ServiceChannel createServiceChannel ( TransportChannelSettings settings ) throws ServiceResultException { return new ServiceChannel ( createSecureChannel ( settings ) ) ; }
Entry removeMapping ( Object o ) { if ( ! ( o instanceof Map . Entry ) ) { return null ; } Map . Entry entry = ( Map . Entry ) o ; Object k = maskNull ( entry . getKey ( ) ) ; int hash = hash ( k ) ; int i = indexFor ( hash , table . length ) ; Entry prev = table [ i ] ; Entry e = prev ; while ( e != null ) { Entry next = e . next ; if ( e . hash == hash && e . equals ( entry ) ) { modCount ++ ; size -- ; if ( prev == e ) table [ i ] = next ; else prev . next = next ; e . recordRemoval ( this ) ; return e ; } prev = e ; e = next ; } return e ; }
public Node < E > next ( ) { return next ; }
public void dump ( String prefix , Appendable out ) throws IOException { out . append ( prefix ) . append ( this . toString ( ) ) ; for ( Node childNode : children ) { if ( childNode != null ) { out . append ( LINE_SEPARATOR ) ; ( ( SimpleNode ) childNode ) . dump ( prefix + STR_ , out ) ; } } }
protected void initializeState ( S current ) { InitializationUtils . initialize ( current ) ; if ( current . documentExpirationTimeMicros <= NUM_ ) { current . documentExpirationTimeMicros = ServiceUtils . computeExpirationTime ( ServiceUtils . DEFAULT_DOC_EXPIRATION_TIME_MICROS ) ; } }
public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Node employeeNode ; NodeList childList ; Node refChild = null ; Node newChild ; Node child ; String childName ; Node insertedNode ; doc = ( Document ) load ( STR_ , BOOL_ ) ; elementList = doc . getElementsByTagName ( STR_ ) ; employeeNode = elementList . item ( NUM_ ) ; childList = employeeNode . getChildNodes ( ) ; newChild = doc . createElement ( STR_ ) ; insertedNode = employeeNode . insertBefore ( newChild , refChild ) ; child = employeeNode . getLastChild ( ) ; childName = child . getNodeName ( ) ; assertEqualsAutoCase ( STR_ , STR_ , STR_ , childName ) ; }
public QuadTreeNode child ( QuadTreeNode node ) { return node . getNorthEast ( ) ; }
private static void maybeAddRunConfiguration ( Project project , BlazeProjectData blazeProjectData , Label label ) { final RunManager runManager = RunManager . getInstance ( project ) ; for ( BlazeRunConfigurationFactory configurationFactory : BlazeRunConfigurationFactory . EP_NAME . getExtensions ( ) ) { if ( configurationFactory . handlesTarget ( project , blazeProjectData , label ) ) { final RunnerAndConfigurationSettings settings = configurationFactory . createForTarget ( project , runManager , label ) ; runManager . addConfiguration ( settings , BOOL_ ) ; if ( runManager . getSelectedConfiguration ( ) == null ) { runManager . setSelectedConfiguration ( settings ) ; } break ; } } }
public p ( Element value , String align ) { addElement ( value ) ; setAlign ( align ) ; }
public boolean addBlastRecipe ( ItemStack aInput1 , ItemStack aInput2 , FluidStack aFluidInput , FluidStack aFluidOutput , ItemStack aOutput1 , ItemStack aOutput2 , int aDuration , int aEUt , int aLevel ) ;
public boolean isSetEchoReply ( ) { return this . echoReply != null ; }
public FileTreeModel ( boolean showFiles ) { this . showFiles = showFiles ; }
public static final boolean isOracleJCEProvider ( String providerName ) { return providerName != null && ( providerName . equals ( STR_ ) || providerName . equals ( STR_ ) || providerName . equals ( STR_ ) || providerName . startsWith ( STR_ ) ) ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public static TransitLine mergeTransitLine ( TransitLine oldLine ) { return mergeTransitLine ( new TransitScheduleFactoryImpl ( ) , oldLine ) ; }
protected abstract RealVector calculateBeta ( ) ;
public Builder withText ( CharSequence text ) { this . text = text ; return this ; }
InstanceofExpression ( AST ast ) { super ( ast ) ; }
public LatLonPoint toLatLonPoint ( Ellipsoid ellip ) { return UTMtoLL ( this , ellip , new LatLonPoint . Double ( ) ) ; }
public String toString ( ) { if ( tokens == null ) { return STR_ ; } return STR_ + getTokenList ( ) ; }
public void startEditMode ( ) { startEditMode ( - NUM_ ) ; }
public static void d ( String message , Object ... args ) { TREE_OF_SOULS . d ( message , args ) ; }
public void componentResized ( ComponentEvent e ) { if ( AWTEventMonitor . componentListener_private != null ) { AWTEventMonitor . componentListener_private . componentResized ( e ) ; } }
public static void main ( String [ ] args ) { new AsteroidsWithUI ( ) . createController ( ) ; }
protected boolean canScroll ( View v , boolean checkV , int dx , int x , int y ) { if ( v instanceof ViewGroup ) { final ViewGroup group = ( ViewGroup ) v ; final int scrollX = v . getScrollX ( ) ; final int scrollY = v . getScrollY ( ) ; final int count = group . getChildCount ( ) ; for ( int i = count - NUM_ ; i >= NUM_ ; i -- ) { final View child = group . getChildAt ( i ) ; if ( x + scrollX >= child . getLeft ( ) && x + scrollX < child . getRight ( ) && y + scrollY >= child . getTop ( ) && y + scrollY < child . getBottom ( ) && canScroll ( child , BOOL_ , dx , x + scrollX - child . getLeft ( ) , y + scrollY - child . getTop ( ) ) ) { return BOOL_ ; } } } return checkV && ViewCompat . canScrollHorizontally ( v , ( isLayoutRtlSupport ( ) ? dx : - dx ) ) ; }
public static List < String > parseExpression ( String expression ) { return convertForJSSE ( parse ( expression ) ) ; }
public InlineQueryResultPhoto . InlineQueryResultPhotoBuilder photoHeight ( int photoHeight ) { this . photo_height = photoHeight ; return this ; }
public Path createIncludePath ( ) { if ( includePath == null ) { includePath = new Path ( getProject ( ) ) ; } return includePath . createPath ( ) ; }
public CRemoveGroupAction ( final INaviView view , final CGroupNode node ) { super ( STR_ ) ; m_graph = view ; m_node = node ; }
public void beforeReleasingPrimaryLockDuringDemotion ( ) { }
public boolean isServerUnRegistred ( ) { return mRegistrationState == RegistrationState . GCM_REGISTRED ; }
public static List < Partition > toPartitions ( Collection < NamedPartition > collection ) { List < Partition > partitions = new ArrayList < > ( ) ; for ( NamedPartition pwn : collection ) { partitions . add ( pwn . getPartition ( ) ) ; } return partitions ; }
public static void sendCrashReport ( Throwable t , String message , boolean fatal ) { ConnectionRequest req = GetGARequest ( ) ; req . addArgument ( STR_ , STR_ ) ; System . out . println ( message ) ; req . addArgument ( STR_ , message . substring ( NUM_ , Math . min ( message . length ( ) , NUM_ ) - NUM_ ) ) ; if ( fatal ) { req . addArgument ( STR_ , STR_ ) ; } else { req . addArgument ( STR_ , STR_ ) ; } NetworkManager . getInstance ( ) . addToQueue ( req ) ; }
private void init ( ) { String homeBase = userConfig . getHomeBase ( ) ; File homeBaseDir = new File ( homeBase ) ; if ( ! homeBaseDir . exists ( ) || ! homeBaseDir . isDirectory ( ) ) return ; String homeBaseFiles [ ] = homeBaseDir . list ( ) ; if ( homeBaseFiles == null ) { return ; } for ( int i = NUM_ ; i < homeBaseFiles . length ; i ++ ) { File homeDir = new File ( homeBaseDir , homeBaseFiles [ i ] ) ; if ( ! homeDir . isDirectory ( ) || ! homeDir . canRead ( ) ) continue ; homes . put ( homeBaseFiles [ i ] , homeDir . toString ( ) ) ; } }
public int readInt ( ) throws IOException { return dis . readInt ( ) ; }
public FloatValue ( short unitType , float floatValue ) { this . unitType = unitType ; this . floatValue = floatValue ; }
public static void main ( String ... args ) throws Throwable { AtomicInteger failures = new AtomicInteger ( ) ; vertx . eventBus ( ) . consumer ( STR_ , null ) ; Failsafe . with ( retryPolicy . copy ( ) . withDelay ( NUM_ , TimeUnit . SECONDS ) ) . with ( scheduler ) . runAsync ( null ) ; Thread . sleep ( NUM_ ) ; }
private void changeDefault ( Component component , boolean setDefault ) { if ( component instanceof JButton ) { JButton button = ( JButton ) component ; JRootPane parent = button . getRootPane ( ) ; if ( parent != null ) { if ( setDefault ) { parent . setDefaultButton ( button ) ; } else { parent . setDefaultButton ( null ) ; } } } }
public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DPHeal_Instant_HEAL_A_TO_ME ( int num0 , String skillcaster , String skillname ) { return new SM_SYSTEM_MESSAGE ( NUM_ , num0 , skillcaster , skillname ) ; }
public static Request newUploadVideoRequest ( Session session , File file , Callback callback ) throws FileNotFoundException { ParcelFileDescriptor descriptor = ParcelFileDescriptor . open ( file , ParcelFileDescriptor . MODE_READ_ONLY ) ; Bundle parameters = new Bundle ( NUM_ ) ; parameters . putParcelable ( file . getName ( ) , descriptor ) ; return new Request ( session , MY_VIDEOS , parameters , HttpMethod . POST , callback ) ; }
boolean isSynchronizationContextRequested ( ) ;
public void boardNewBoard ( BoardEvent b ) { }
public static Attribute [ ] createFourAttributes ( ) { Attribute [ ] attributes = new Attribute [ NUM_ ] ; attributes [ NUM_ ] = ExampleTestTools . attributeDogCatMouse ( ) ; attributes [ NUM_ ] = ExampleTestTools . attributeYesNo ( ) ; attributes [ NUM_ ] = ExampleTestTools . attributeInt ( ) ; attributes [ NUM_ ] = ExampleTestTools . attributeReal ( ) ; for ( int i = NUM_ ; i < attributes . length ; i ++ ) attributes [ i ] . setTableIndex ( i ) ; return attributes ; }
public int readDelta ( ) throws IOException { int preComp ; if ( ( fill >= NUM_ || refill ( ) >= NUM_ ) && ( preComp = DELTA [ current > > ( fill - NUM_ ) & NUM_ ] ) != NUM_ ) { readBits += preComp > > NUM_ ; fill -= preComp > > NUM_ ; return preComp & NUM_ ; } final int msb = readGamma ( ) ; return ( ( NUM_ << msb ) | readInt ( msb ) ) - NUM_ ; }
boolean unjailPlayer ( User user ) ;
public Zdiagmat ( Zmat A ) throws JampackException { this ( A , NUM_ ) ; }
public ProguardLoader ( ) { super ( null ) ; }
public static void queryAsync ( final int taskId , final Object tag , final Object cookie , final boolean distinct , final String table , final String [ ] columns , final String selection , final String [ ] selectionArgs , final String groupBy , final String having , final String orderBy , final String limit , final AsyncDbQueryCallback callback ) { logIfNotOnMainThread ( ) ; ASYNC_QUERY_HANDLER . startQuery ( taskId , tag , cookie , distinct , table , columns , selection , selectionArgs , groupBy , having , orderBy , limit , callback ) ; }
public void addArg ( String key ) { if ( ! args . get ( key ) . equals ( Collections . singletonList ( STR_ ) ) ) { args . put ( key , STR_ ) ; } }
public abstract Collection < NamedType > collectAndResolveSubtypes ( AnnotatedMember property , MapperConfig < ? > config , AnnotationIntrospector ai ) ;
public boolean isSafeClass ( SootClass clz ) { return safeClasses . contains ( clz . getName ( ) ) ; }
public ReplEvent peek ( int taskId ) throws InterruptedException , ReplicatorException { assertTaskIdWithinRange ( taskId ) ; return readTasks . get ( taskId ) . peek ( ) ; }
public void open_aux_file ( String filename ) throws SQLite . Exception { synchronized ( this ) { _open_aux_file ( filename ) ; } }
public void parseForMethod ( GenericDeclaration genericDecl , SignatureTag signature , SootClassType [ ] rawExceptionTypes ) { setInput ( genericDecl , signature ) ; if ( ! eof ) { parseMethodTypeSignature ( rawExceptionTypes ) ; } else { if ( genericDecl instanceof SootMethodType ) { SootMethodType m = ( SootMethodType ) genericDecl ; this . formalTypeParameters = ListOfVariables . EMPTY ; this . parameterTypes = new ListOfTypes ( m . getParameterTypes ( ) ) ; this . exceptionTypes = new ListOfTypes ( m . getExceptionTypes ( ) ) ; this . returnType = m . getReturnType ( ) ; } else { this . formalTypeParameters = ListOfVariables . EMPTY ; this . parameterTypes = ListOfTypes . EMPTY ; this . exceptionTypes = ListOfTypes . EMPTY ; this . returnType = new SootTypeType ( VoidType . v ( ) ) ; } } }
public void componentHidden ( ComponentEvent e ) ;
protected abstract void doUpdateUser ( User user ) throws UsersRepositoryException ;
int length ( ) ;
public CopyOnWriteArrayList ( Collection c ) { Object [ ] elements = new Object [ c . size ( ) ] ; int size = NUM_ ; for ( Iterator itr = c . iterator ( ) ; itr . hasNext ( ) ; ) { Object e = itr . next ( ) ; elements [ size ++ ] = e ; } setArray ( elements ) ; }
boolean matchIdAndDatatype ( MetadataKey < ? > other ) { if ( id != null && ! id . matches ( other . id ) ) { return BOOL_ ; } return datatype . isAssignableFrom ( other . datatype ) || other . datatype == String . class ; }
public void startAppium ( String port , String chromePort , String bootstrapPort ) throws Exception { String command = STR_ + port + STR_ + chromePort + STR_ + bootstrapPort ; System . out . println ( command ) ; String output = cp . runCommand ( command ) ; System . out . println ( output ) ; }
public NotificationChain basicSetTarget ( Expression newTarget , NotificationChain msgs ) { Expression oldTarget = target ; target = newTarget ; if ( eNotificationRequired ( ) ) { ENotificationImpl notification = new ENotificationImpl ( this , Notification . SET , N4JSPackage . PARAMETERIZED_CALL_EXPRESSION__TARGET , oldTarget , newTarget ) ; if ( msgs == null ) msgs = notification ; else msgs . add ( notification ) ; } return msgs ; }
private RefactoringStatus checkCanCreateIntermediaryMethod ( ) throws JavaModelException { List < ITypeBinding > parameterBindings = new ArrayList < ITypeBinding > ( ) ; if ( ! isStaticTarget ( ) ) parameterBindings . add ( fIntermediaryFirstParameterType ) ; parameterBindings . addAll ( Arrays . asList ( fTargetMethodBinding . getParameterTypes ( ) ) ) ; return Checks . checkMethodInType ( fIntermediaryTypeBinding , fIntermediaryMethodName , parameterBindings . toArray ( new ITypeBinding [ parameterBindings . size ( ) ] ) ) ; }
public void addBodyDecl ( BodyDecl node ) { List < BodyDecl > list = ( parent == null || state == null ) ? getBodyDeclListNoTransform ( ) : getBodyDeclList ( ) ; list . addChild ( node ) ; }
protected boolean isImageWrapCropBounds ( ) { return isImageWrapCropBounds ( mCurrentImageCorners ) ; }
private void verifyExtraEntryFromOpLogs ( ) { assertTrue ( STR_ , cache != null ) ; Region rgn = cache . getRegion ( regionName ) ; assertEquals ( NUM_ , rgn . size ( ) ) ; }
public boolean showNotificationsSites ( ) { return mContentSettingsType == ContentSettingsType . CONTENT_SETTINGS_TYPE_NOTIFICATIONS ; }
public IStaticResourceBuilder < R > create ( IRouter < R , W > router , boolean isDir ) ;
public void start ( ) { super . start ( ) ; createGrids ( ) ; for ( int x = NUM_ ; x < bugCount ; x ++ ) { bugs [ x ] = new HeatBug ( random . nextDouble ( ) * ( maxIdealTemp - minIdealTemp ) + minIdealTemp , random . nextDouble ( ) * ( maxOutputHeat - minOutputHeat ) + minOutputHeat , randomMovementProbability ) ; buggrid . setObjectLocation ( bugs [ x ] , random . nextInt ( gridWidth ) , random . nextInt ( gridHeight ) ) ; schedule . scheduleRepeating ( bugs [ x ] ) ; } if ( HeatBugs . availableProcessors ( ) > NUM_ ) { diffuser = new ThreadedDiffuser ( NUM_ ) ; schedule . scheduleRepeating ( Schedule . EPOCH , NUM_ , diffuser , NUM_ ) ; } else if ( HeatBugs . availableProcessors ( ) >= NUM_ ) { diffuser = new ThreadedDiffuser ( NUM_ ) ; schedule . scheduleRepeating ( Schedule . EPOCH , NUM_ , diffuser , NUM_ ) ; } else { schedule . scheduleRepeating ( Schedule . EPOCH , NUM_ , new Diffuser ( ) , NUM_ ) ; } }
public void decreaseDpi ( ) { if ( this . currentDpiPos > NUM_ ) { -- this . currentDpiPos ; } }
private static char [ ] zzUnpackCMap ( String packed ) { char [ ] map = new char [ NUM_ ] ; int i = NUM_ ; int j = NUM_ ; while ( i < NUM_ ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > NUM_ ) ; } return map ; }
public ManagedResource cleanupRegionResources ( String regionPath ) { ManagedResource cleaned = null ; synchronized ( this . managedRegionResourcesMap ) { Set < Entry < String , SystemMemberRegionJmxImpl > > entries = managedRegionResourcesMap . entrySet ( ) ; for ( Iterator < Entry < String , SystemMemberRegionJmxImpl > > it = entries . iterator ( ) ; it . hasNext ( ) ; ) { Entry < String , SystemMemberRegionJmxImpl > entry = it . next ( ) ; SystemMemberRegionJmxImpl managedResource = entry . getValue ( ) ; ObjectName objName = managedResource . getObjectName ( ) ; String pathProp = objName . getKeyProperty ( STR_ ) ; if ( pathProp != null && pathProp . equals ( regionPath ) ) { cleaned = managedResource ; it . remove ( ) ; break ; } } } return cleaned ; }
public void removeWindow ( View view ) { View rootView ; mWindowsLock . writeLock ( ) . lock ( ) ; try { rootView = view . getRootView ( ) ; mWindows . remove ( rootView ) ; } finally { mWindowsLock . writeLock ( ) . unlock ( ) ; } mFocusLock . writeLock ( ) . lock ( ) ; try { if ( mFocusedWindow == rootView ) { mFocusedWindow = null ; } } finally { mFocusLock . writeLock ( ) . unlock ( ) ; } fireWindowsChangedEvent ( ) ; }
public BlobStoreIndexShardSnapshot ( String snapshot , long indexVersion , List < FileInfo > indexFiles , long startTime , long time , int numberOfFiles , long totalSize ) { assert snapshot != null ; assert indexVersion >= NUM_ ; this . snapshot = snapshot ; this . indexVersion = indexVersion ; this . indexFiles = Collections . unmodifiableList ( new ArrayList < > ( indexFiles ) ) ; this . startTime = startTime ; this . time = time ; this . numberOfFiles = numberOfFiles ; this . totalSize = totalSize ; }
public void technicalServiceChanged ( ValueChangeEvent event ) { Long newServiceKey = ( Long ) event . getNewValue ( ) ; techServiceBean . setSelectedTechnicalServiceKeyWithExceptionAndRefresh ( newServiceKey . longValue ( ) ) ; supplierIdToAdd = null ; suppliersForTechnicalService = null ; }
public MailBuilder text ( String text ) { return param ( STR_ , text ) ; }
public static InternalDistributedSystem distributedSystem ( ) { return cache ( ) . getDistributedSystem ( ) ; }
public boolean isApplicable ( ) { final SamplesViewer samplesViewer = ( ( SamplesViewer ) getViewer ( ) ) ; return samplesViewer != null && samplesViewer . getSamplesTable ( ) . getNumberOfSelectedSamples ( ) > NUM_ ; }
public boolean isMcastEnabled ( ) { return this . getMcastPort ( ) > NUM_ ; }
protected static boolean processConfig ( ) { CollectorConfiguration config = configService . getCollector ( null , null , null , null ) ; if ( config != null ) { try { updateInstrumentation ( config ) ; } catch ( Exception e ) { log . severe ( STR_ + e ) ; } } return config != null ; }
public XMLTableModel ( Element tableDefinition , Object source ) { this ( XMLTableDefinition . load ( tableDefinition ) , source ) ; }
protected abstract void bindItem ( T item ) ;
private static String doGetFullPath ( String filename , boolean includeSeparator ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < NUM_ ) { return null ; } if ( prefix >= filename . length ( ) ) { if ( includeSeparator ) { return getPrefix ( filename ) ; } else { return filename ; } } int index = indexOfLastSeparator ( filename ) ; if ( index < NUM_ ) { return filename . substring ( NUM_ , prefix ) ; } int end = index + ( includeSeparator ? NUM_ : NUM_ ) ; if ( end == NUM_ ) { end ++ ; } return filename . substring ( NUM_ , end ) ; }
public static < R , A , B , C > Future < R > chain ( A input , Function < A , Future < B > > operation1 , Function < B , Future < C > > operation2 , Function < C , Future < R > > operation3 ) { Future < R > future = Future . future ( ) ; operation1 . apply ( input ) . setHandler ( null ) ; return future ; }
public void addScriptChangeEventListener ( Executor executor , ScriptsChangeEventListener listener ) { scriptChangeListeners . add ( new ListenerRegistration < ScriptsChangeEventListener > ( listener , executor ) ) ; }
public static void main ( String [ ] args ) throws Exception { Main main = new Main ( ) ; main . run ( ) ; }
public boolean hasError ( ) { return isOnError ( ) && throwable != null ; }
public void makeImmutable ( ) { }
public static String composePamData ( OTPUserRecord otp ) { if ( otp == null ) { return STR_ ; } String secret = otp . getSecret ( ) ; OTPUserRecord . Type type = otp . getType ( ) ; List < OTPUserRecord . RecoveryCode > recoveryCodes = otp . getRecoveryCodes ( ) ; String pamData = secret + STR_ ; if ( OTPUserRecord . Type . HOTP . equals ( type ) ) { pamData += String . format ( STR_ , otp . getAttemptCount ( ) ) ; } else { pamData += STR_ ; } if ( recoveryCodes != null && recoveryCodes . size ( ) > NUM_ ) { for ( OTPUserRecord . RecoveryCode code : recoveryCodes ) { if ( ! code . isUsed ( ) ) { pamData += code . getHashCode ( ) + STR_ ; } } } return pamData ; }
public void testNonSerializable5 ( ) throws IgniteCheckedException { Marshaller marsh = marshaller ( ) ; byte [ ] bytes = marsh . marshal ( BOOL_ ) ; Boolean val = marsh . unmarshal ( bytes , null ) ; assertTrue ( val ) ; }
void onGroupExpanded ( int positionStart , int itemCount ) ;
protected abstract void install ( Container c , Object layoutConstraint , Wizard awizard , Action helpAction , Map initialProperties , WizardResultReceiver receiver ) ;
public AttributeList ( String name ) { this . name = name ; }
private void addDataSource ( EsriDataSourceInterface dataSourceObj ) { logger . info ( STR_ + dataSourceObj . getName ( ) ) ; dataSourceMap . put ( dataSourceObj . getType ( ) , dataSourceObj ) ; }
public static void forceAddWorld ( int dimensionId , WorldServer worldServer ) { worldByDimensionId . put ( dimensionId , worldServer ) ; weakWorldByWorld . put ( worldServer , worldServer ) ; ( ( IMixinMinecraftServer ) SpongeImpl . getServer ( ) ) . getWorldTickTimes ( ) . put ( dimensionId , new long [ NUM_ ] ) ; }
public String rawSource ( ) { return source ; }
public void prepareForConfigurationChange ( ) { mCardView = null ; for ( CardAction action : mCardActions ) { action . actionView = null ; } mCardProgress . progressView = null ; }
public String namespace ( String name , boolean attribute ) { int colon = name . indexOf ( STR_ ) ; if ( colon == - NUM_ ) { return attribute ? STR_ : theSchema . getURI ( ) ; } String prefix = name . substring ( NUM_ , colon ) ; if ( prefix . equals ( STR_ ) ) { return STR_ ; } else { return ( STR_ + prefix ) . intern ( ) ; } }
public static DiscCacheAware createReserveDiscCache ( File cacheDir ) { File individualDir = new File ( cacheDir , STR_ ) ; if ( individualDir . exists ( ) || individualDir . mkdir ( ) ) { cacheDir = individualDir ; } return new TotalSizeLimitedDiscCache ( cacheDir , NUM_ * NUM_ * NUM_ ) ; }
public boolean shouldTickerStart ( ) { if ( ! tickerEnabled ) { return BOOL_ ; } Style style = getStyle ( ) ; int txtW = style . getFont ( ) . stringWidth ( getText ( ) ) ; int textSpaceW = getAvaliableSpaceForText ( ) ; return txtW > textSpaceW && textSpaceW > NUM_ ; }
public boolean saveModel ( FModel model , String filename , String cwd ) { return saveModel ( model , filename , cwd , null ) ; }
public void callExpiryCallback ( ) { expiryCallback . onEntryExpiry ( super . getValue ( ) ) ; }
public void register ( ) { core . getInfoRegistry ( ) . put ( STR_ , this ) ; core . getInfoRegistry ( ) . put ( name , this ) ; for ( SolrCache cache : cacheList ) { cache . setState ( SolrCache . State . LIVE ) ; core . getInfoRegistry ( ) . put ( cache . name ( ) , cache ) ; } registerTime = System . currentTimeMillis ( ) ; }
void computeScroll ( ) { if ( ! overScroller . computeScrollOffset ( ) ) { isScrollingFast = BOOL_ ; return ; } int distanceX = overScroller . getCurrX ( ) - view . getScrollX ( ) ; int distanceY = overScroller . getCurrY ( ) - view . getScrollY ( ) ; int dX = ( int ) calculateDx ( distanceX ) ; int dY = ( int ) calculateDy ( distanceY ) ; boolean stopScrolling = dX == NUM_ && dY == NUM_ ; if ( stopScrolling ) { isScrollingFast = BOOL_ ; } view . scrollBy ( dX , dY ) ; }
public GridCacheQueryRequest ( int cacheId , long id , boolean fields , AffinityTopologyVersion topVer , boolean addDepInfo ) { this . cacheId = cacheId ; this . id = id ; this . fields = fields ; this . topVer = topVer ; this . addDepInfo = addDepInfo ; cancel = BOOL_ ; }
public static void requireWrapper ( Writer writer , Module mod ) throws IOException { writer . write ( STR_ + JsCompiler . scriptPath ( mod ) + STR_ ) ; }
public void testDefaults ( ) throws Exception { Similarity sim = getSimilarity ( STR_ ) ; assertEquals ( DefaultSimilarity . class , sim . getClass ( ) ) ; ; }
private void updateProgress ( int progress ) { if ( myHost != null && progress != previousProgress ) { myHost . updateProgress ( progress ) ; } previousProgress = progress ; }
public ExtendedBufferedReader ( Reader r ) { super ( r ) ; }
public double toDouble ( ) { return mNumerator / ( double ) mDenominator ; }
public void branchPassed ( int branch , int bytecode_id , double true_distance , double false_distance ) ;
public void actionPerformed ( ActionEvent e ) { FileDialog chooser = new FileDialog ( StdDraw . frame , STR_ , FileDialog . SAVE ) ; chooser . setVisible ( BOOL_ ) ; String filename = chooser . getFile ( ) ; if ( filename != null ) { StdDraw . save ( chooser . getDirectory ( ) + File . separator + chooser . getFile ( ) ) ; } }
public RefEll ( double maj , double min ) { this . maj = maj ; this . min = min ; this . ecc = ( ( maj * maj ) - ( min * min ) ) / ( maj * maj ) ; }
public SetupPanel ( Experiment exp ) { this ( ) ; setExperiment ( exp ) ; }
public DateTimeFormatterBuilder appendYear ( int minDigits , int maxDigits ) { return appendSignedDecimal ( DateTimeFieldType . year ( ) , minDigits , maxDigits ) ; }
public synchronized void addNamespace ( String prefix , String namespaceURI ) { if ( prefix == null ) { String message = Logging . getMessage ( STR_ ) ; Logging . logger ( ) . severe ( message ) ; throw new IllegalArgumentException ( message ) ; } if ( namespaceURI == null ) { String message = Logging . getMessage ( STR_ ) ; Logging . logger ( ) . severe ( message ) ; throw new IllegalArgumentException ( message ) ; } this . urisByPrefix . put ( prefix , namespaceURI ) ; if ( this . prefixesByURI . containsKey ( namespaceURI ) ) { this . prefixesByURI . get ( namespaceURI ) . add ( prefix ) ; } else { Set < String > set = new HashSet < String > ( ) ; set . add ( prefix ) ; this . prefixesByURI . put ( namespaceURI , set ) ; } }
public void hideResults ( ) { mSearchEditText . setVisibility ( View . GONE ) ; mResultsListView . setVisibility ( View . GONE ) ; }
void selectElement ( PsiElement element ) ;
public final void clear ( ) { mActiveIssues . clear ( ) ; }
private void finishScan ( int state ) { switch ( state ) { case SEEK_ALGORITHM : pcalStartCommentOffset = - NUM_ ; pcalStartOffset = - NUM_ ; pcalEndCommentOffset = - NUM_ ; break ; case START_ALGORITHM : break ; case IN_ALGORITHM : break ; } }
public static BooleanArgument advancedModeArgument ( ) throws ArgumentException { return BooleanArgument . builder ( OPTION_LONG_ADVANCED ) . description ( INFO_DESCRIPTION_ADVANCED . get ( ) ) . buildArgument ( ) ; }
public int generate ( int uc , int len , char [ ] da , int dp , int dl ) { if ( Character . isBmpCodePoint ( uc ) ) { char c = ( char ) uc ; if ( Character . isSurrogate ( c ) ) { error = CoderResult . malformedForLength ( len ) ; return - NUM_ ; } if ( dl - dp < NUM_ ) { error = CoderResult . OVERFLOW ; return - NUM_ ; } da [ dp ] = c ; error = null ; return NUM_ ; } else if ( Character . isValidCodePoint ( uc ) ) { if ( dl - dp < NUM_ ) { error = CoderResult . OVERFLOW ; return - NUM_ ; } da [ dp ] = Character . highSurrogate ( uc ) ; da [ dp + NUM_ ] = Character . lowSurrogate ( uc ) ; error = null ; return NUM_ ; } else { error = CoderResult . unmappableForLength ( len ) ; return - NUM_ ; } }
public void loadLocal ( final int local ) { loadInsn ( getLocalType ( local ) , local ) ; }
public void updateAchievement ( Integer id , Achievement achievement ) throws SQLException { DBTransaction transaction = TransactionPool . get ( ) . beginWork ( ) ; updateAchievement ( transaction , id , achievement ) ; TransactionPool . get ( ) . commit ( transaction ) ; }
private void createPaints ( ) { if ( bitmapPaint == null ) { bitmapPaint = new Paint ( ) ; bitmapPaint . setAntiAlias ( BOOL_ ) ; bitmapPaint . setFilterBitmap ( BOOL_ ) ; bitmapPaint . setDither ( BOOL_ ) ; } if ( debugPaint == null && debug ) { debugPaint = new Paint ( ) ; debugPaint . setTextSize ( NUM_ ) ; debugPaint . setColor ( Color . MAGENTA ) ; debugPaint . setStyle ( Style . STROKE ) ; } }
public com . sun . identity . liberty . ws . common . jaxb . protocol . RespondWithElement createRespondWithElement ( javax . xml . namespace . QName value ) throws javax . xml . bind . JAXBException { return new com . sun . identity . liberty . ws . common . jaxb . protocol . impl . RespondWithElementImpl ( value ) ; }
public void initializeUserPlugins ( Set < PluginType > pluginTypes ) throws ConfigException , InitializationException { for ( String pluginName : pluginRootConfig . listPlugins ( ) ) { PluginCfg pluginConfiguration = pluginRootConfig . getPlugin ( pluginName ) ; pluginConfiguration . addChangeListener ( this ) ; if ( ! pluginConfiguration . isEnabled ( ) ) { continue ; } HashSet < PluginType > initTypes = new HashSet < > ( ) ; for ( PluginCfgDefn . PluginType pluginType : pluginConfiguration . getPluginType ( ) ) { PluginType t = getPluginType ( pluginType ) ; if ( pluginTypes == null || pluginTypes . contains ( t ) ) { initTypes . add ( t ) ; } } if ( initTypes . isEmpty ( ) ) { continue ; } try { DirectoryServerPlugin < ? extends PluginCfg > plugin = loadPlugin ( pluginConfiguration . getJavaClass ( ) , initTypes , pluginConfiguration , BOOL_ ) ; registerPlugin ( plugin , pluginConfiguration . dn ( ) , initTypes ) ; } catch ( InitializationException ie ) { logger . error ( ie . getMessageObject ( ) ) ; continue ; } } }
boolean containsDomain ( String domain ) throws Exception ;
public boolean attempt ( ObjectReference old , ObjectReference val , Offset offset ) { return this . plus ( offset ) . attempt ( old , val ) ; }
public boolean remove ( INode n ) { INode state = contains ( n ) ; if ( state == null ) { return BOOL_ ; } return closed . remove ( state ) ; }
private Node enq ( final Node node ) { for ( ; ; ) { Node t = tail ; if ( t == null ) { if ( compareAndSetHead ( new Node ( ) ) ) tail = head ; } else { node . prev = t ; if ( compareAndSetTail ( t , node ) ) { t . next = node ; return t ; } } } }
public String buildServiceDocument ( ) throws ODataRenderException { LOG . info ( STR_ ) ; try ( ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( BUFFER_SIZE ) ) { XMLStreamWriter writer = startServiceDocument ( outputStream ) ; writeEntitySets ( writer ) ; writeSingleton ( writer ) ; endServiceDocument ( writer ) ; LOG . info ( STR_ ) ; return outputStream . toString ( ) ; } catch ( XMLStreamException | IOException e ) { String msg = STR_ ; LOG . error ( msg , e ) ; throw new ODataRenderException ( msg , e ) ; } }
public void testOverlapping ( ) { Instances result = null ; m_Instances . setClassIndex ( NUM_ ) ; try { result = applyFilter ( new Filter [ ] { new AllFilter ( ) , new AllFilter ( ) } , new Range [ ] { new Range ( STR_ ) , new Range ( STR_ ) } , BOOL_ ) ; } catch ( Exception e ) { fail ( STR_ + e ) ; } assertEquals ( m_Instances . numInstances ( ) , result . numInstances ( ) ) ; assertEquals ( m_Instances . numAttributes ( ) + NUM_ , result . numAttributes ( ) ) ; }
static Column of ( String name , Value value ) { return new DefaultColumn ( name , value ) ; }
private void initSizeClasses ( ) { for ( int sc = NUM_ ; sc < sizeClassCount ( ) ; sc ++ ) { cellSize [ sc ] = getBaseCellSize ( sc ) ; for ( byte blk = NUM_ ; blk < BlockAllocator . BLOCK_SIZE_CLASSES ; blk ++ ) { int usableBytes = BlockAllocator . blockSize ( blk ) ; int cells = usableBytes / cellSize [ sc ] ; blockSizeClass [ sc ] = blk ; blockHeaderSize [ sc ] = BlockAllocator . blockSize ( blk ) - cells * cellSize [ sc ] ; if ( ( ( usableBytes < BYTES_IN_PAGE ) && ( cells * NUM_ > MAX_CELLS ) ) || ( ( usableBytes > ( BYTES_IN_PAGE > > NUM_ ) ) && ( cells > MIN_CELLS ) ) ) break ; } } }
public void addUnnamedTask ( TmmTask task ) { if ( unnamedTaskExecutor == null || unnamedTaskExecutor . isShutdown ( ) ) { unnamedTaskExecutor = createUnnamedTaskExecutor ( ) ; } task . addListener ( this ) ; task . setState ( TaskState . QUEUED ) ; unnamedTaskExecutor . execute ( task ) ; }
public void allowSubstitutions ( boolean allow ) { splitter . allowSubstitutions ( allow ) ; }
public void fireNeuronLabelChanged ( final Neuron changed ) { for ( NeuronListener listener : neuronListeners ) { listener . labelChanged ( new NetworkEvent < Neuron > ( this , changed ) ) ; } }
boolean isWrapperFor ( Class < ? > iface ) throws SQLException ;
public static void deleteConfigSubtree ( ConfigurationHandler confHandler , DN dn ) throws OpenDsException , ConfigException { Entry confEntry = confHandler . getEntry ( dn ) ; if ( confEntry != null ) { for ( DN childDN : new ArrayList < > ( confHandler . getChildren ( dn ) ) ) { deleteConfigSubtree ( confHandler , childDN ) ; } confHandler . deleteEntry ( dn ) ; } }
public boolean removeChild ( V orphan ) { return removeVertex ( orphan ) ; }
void delete ( DeleteIndexRequest request , ActionListener < DeleteIndexResponse > listener ) ;
protected void addSimplePropertyDescriptor ( Object object ) { itemPropertyDescriptors . add ( createItemPropertyDescriptor ( ( ( ComposeableAdapterFactory ) adapterFactory ) . getRootAdapterFactory ( ) , getResourceLocator ( ) , getString ( STR_ ) , getString ( STR_ , STR_ , STR_ ) , SGraphPackage . Literals . STATE__SIMPLE , BOOL_ , BOOL_ , BOOL_ , ItemPropertyDescriptor . BOOLEAN_VALUE_IMAGE , null , null ) ) ; }
public void addProcessingItem ( IProcessingItem procItem ) { addProcessingItem ( procItem , NUM_ ) ; }
boolean handleTouch ( MotionEvent event ) ;
public FancyButton ( ) { this ( null , null ) ; }
public JFXDialogLayout ( ) { super ( ) ; initialize ( ) ; layout . getChildren ( ) . add ( heading ) ; heading . getStyleClass ( ) . add ( STR_ ) ; heading . getStyleClass ( ) . add ( STR_ ) ; layout . getChildren ( ) . add ( body ) ; body . getStyleClass ( ) . add ( STR_ ) ; body . prefHeightProperty ( ) . bind ( this . prefHeightProperty ( ) ) ; body . prefWidthProperty ( ) . bind ( this . prefWidthProperty ( ) ) ; layout . getChildren ( ) . add ( actions ) ; actions . getStyleClass ( ) . add ( STR_ ) ; this . getChildren ( ) . add ( layout ) ; }
public void duplicate ( ) ;
void onMapInitialised ( ) ;
public char nextClean ( ) throws JSONException { for ( ; ; ) { char c = this . next ( ) ; if ( c == NUM_ || c > STR_ ) { return c ; } } }
private static int parseId3Header ( ParsableByteArray id3Buffer ) throws ParserException { int id1 = id3Buffer . readUnsignedByte ( ) ; int id2 = id3Buffer . readUnsignedByte ( ) ; int id3 = id3Buffer . readUnsignedByte ( ) ; if ( id1 != STR_ || id2 != STR_ || id3 != STR_ ) { throw new ParserException ( String . format ( STR_ , id1 , id2 , id3 ) ) ; } id3Buffer . skip ( NUM_ ) ; int flags = id3Buffer . readUnsignedByte ( ) ; int id3Size = id3Buffer . readSynchSafeInt ( ) ; if ( ( flags & NUM_ ) != NUM_ ) { int extendedHeaderSize = id3Buffer . readSynchSafeInt ( ) ; if ( extendedHeaderSize > NUM_ ) { id3Buffer . skip ( extendedHeaderSize - NUM_ ) ; } id3Size -= extendedHeaderSize ; } if ( ( flags & NUM_ ) != NUM_ ) { id3Size -= NUM_ ; } return id3Size ; }
void bufferContentAboutToBeReplaced ( IFileBuffer buffer ) ;
public abstract void draw ( Canvas canvas ) ;
void resetRuntimeCounters ( ) ;
public ServiceReturnsFault ( ) { requestFileName = STR_ ; }
public Boolean isDot11Configuration ( ) { return dot11Configuration ; }
public TransactionIsolation isolation ( ) ;
public boolean isSetNoteId ( ) { return this . noteId != null ; }
public boolean isCapturedViewUnder ( int x , int y ) { return isViewUnder ( mCapturedView , x , y ) ; }
public boolean isShapeOutlineVisible ( ) { return this . shapeOutlineVisible ; }
public VectorApproximation calculateApproximation ( DBID id , V dv ) { int [ ] approximation = new int [ dv . getDimensionality ( ) ] ; for ( int d = NUM_ ; d < splitPositions . length ; d ++ ) { final double val = dv . doubleValue ( d ) ; final int lastBorderIndex = splitPositions [ d ] . length - NUM_ ; if ( val < splitPositions [ d ] [ NUM_ ] ) { approximation [ d ] = NUM_ ; if ( id != null ) { LOG . warning ( STR_ ) ; } } else if ( val > splitPositions [ d ] [ lastBorderIndex ] ) { approximation [ d ] = lastBorderIndex - NUM_ ; if ( id != null ) { LOG . warning ( STR_ ) ; } } else { int pos = Arrays . binarySearch ( splitPositions [ d ] , val ) ; pos = ( pos >= NUM_ ) ? pos : ( ( - pos ) - NUM_ ) ; approximation [ d ] = pos ; } } return new VectorApproximation ( id , approximation ) ; }
public void asyncAddEntry ( byte [ ] data , AddEntryCallback callback , Object ctx ) ;
public void addGatewaySenderToSystem ( ObjectName objectName , GatewaySenderMXBean proxy , FederationComponent newState ) { if ( mapOfGatewaySenders != null ) { mapOfGatewaySenders . put ( objectName , proxy ) ; gatewaySenderSetSize = mapOfGatewaySenders . values ( ) . size ( ) ; } updateGatewaySender ( objectName , newState , null ) ; }
private void toPolyArc ( Polygon2D poly , Vec2D o , float radius , float theta , int res ) { for ( int i = NUM_ ; i <= res ; i ++ ) { poly . add ( o . add ( Vec2D . fromTheta ( theta + i * MathUtils . HALF_PI / res ) . scaleSelf ( radius ) ) ) ; } }
protected abstract void notifyListeners ( U event ) ;
private static void write ( CharSequence from , File to , Charset charset , boolean append ) throws IOException { asCharSink ( to , charset , modes ( append ) ) . write ( from ) ; }
public static < T extends ParseObject > void deleteAll ( List < T > objects ) throws ParseException { ParseTaskUtils . wait ( deleteAllInBackground ( objects ) ) ; }
public com . sun . identity . liberty . ws . common . jaxb . xmlenc . CipherReferenceElement createCipherReferenceElement ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . liberty . ws . common . jaxb . xmlenc . impl . CipherReferenceElementImpl ( ) ; }
public Builder autoPanPadding ( Point autoPanPadding ) { this . autoPanPadding = autoPanPadding ; return this ; }
public static Calendar stringToCalendar ( String s ) { Date date = null ; try { date = TIME_FORMAT . parse ( s ) ; } catch ( ParseException e ) { try { date = DATE_FORMAT . parse ( s ) ; } catch ( ParseException e1 ) { return null ; } } if ( date == null ) { return null ; } Calendar output = Calendar . getInstance ( ) ; output . setTime ( date ) ; return output ; }
public void waitTransformThread ( ) throws SAXException { Thread transformThread = this . getTransformThread ( ) ; if ( null != transformThread ) { try { ThreadControllerWrapper . waitThread ( transformThread , this ) ; if ( ! this . hasTransformThreadErrorCatcher ( ) ) { Exception e = this . getExceptionThrown ( ) ; if ( null != e ) { e . printStackTrace ( ) ; throw new org . xml . sax . SAXException ( e ) ; } } this . setTransformThread ( null ) ; } catch ( InterruptedException ie ) { } } }
public void encode ( OutputStream out ) throws IOException { DerOutputStream tmp = new DerOutputStream ( ) ; if ( extensionValue == null ) { extensionId = PKIXExtensions . CertificatePolicies_Id ; critical = BOOL_ ; encodeThis ( ) ; } super . encode ( tmp ) ; out . write ( tmp . toByteArray ( ) ) ; }
public void onNextPressed ( ) { }
public void validateSendEvent ( ) { if ( ! coordinatorClientExt . isControlNode ( ) ) { throw APIException . badRequests . eventsNotAllowedOnNonControlNode ( ) ; } if ( ! isConnectEMCConfigured ( ) ) { throw APIException . badRequests . connectEMCNotConfigured ( ) ; } }
public void endElement ( ) throws SAXException { writePendingText ( ) ; String uri = getCurrentElementUri ( ) ; String local = getCurrentElementLocal ( ) ; String prefix = nsContext . getPrefix ( uri ) ; _assert ( prefix != null ) ; String qname ; if ( prefix . length ( ) != NUM_ ) qname = prefix + STR_ + local ; else qname = local ; writer . endElement ( uri , local , qname ) ; nsContext . iterateDeclaredPrefixes ( endPrefixCallback ) ; popElement ( ) ; textBuf . setLength ( NUM_ ) ; nsContext . endElement ( ) ; }
private StyleDefinition ( String name ) { this . name = name ; }
public static XContentType xContentType ( byte [ ] data ) { return xContentType ( data , NUM_ , data . length ) ; }
public MyGraph ( List < V > vertices , List < Edge > edges ) { super ( vertices , edges ) ; }
private void writeAttribute ( java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( namespace . equals ( STR_ ) ) { xmlWriter . writeAttribute ( attName , attValue ) ; } else { registerPrefix ( xmlWriter , namespace ) ; xmlWriter . writeAttribute ( namespace , attName , attValue ) ; } }
public void testAddBroadcastReceiver ( ) throws Exception { final VirtualFile file = myFixture . copyFileToProject ( STR_ , STR_ ) ; myFixture . configureFromExistingVirtualFile ( file ) ; final IntentionAction action = AndroidTestUtils . getIntentionAction ( myFixture , STR_ ) ; assertNotNull ( action ) ; action . invoke ( getProject ( ) , myFixture . getEditor ( ) , myFixture . getFile ( ) ) ; myFixture . checkResultByFile ( STR_ , STR_ , BOOL_ ) ; }
protected boolean matches ( String phrase ) { String canonical = phrase . toLowerCase ( Locale . US ) ; for ( int i = NUM_ ; i < ban . size ( ) ; i ++ ) { String badWord = ban . get ( i ) ; if ( canonical . indexOf ( badWord ) != - NUM_ ) return BOOL_ ; } return BOOL_ ; }
protected void addMapBeanToPanel ( MapBean map ) { layoutPanel ( map ) ; map . addPropertyChangeListener ( this ) ; }
boolean isDeprecateDelegates ( ) ;
public RecordableHistoryEvent ( String eventType , Recordable recordable , String referrer , String action , Map < String , String > parameters ) { this ( eventType , System . currentTimeMillis ( ) , recordable , referrer , action , parameters ) ; }
void expandCapacity ( int minimumCapacity ) { int newCapacity = ( value . length + NUM_ ) * NUM_ ; if ( newCapacity < NUM_ ) { newCapacity = Integer . MAX_VALUE ; } else if ( minimumCapacity > newCapacity ) { newCapacity = minimumCapacity ; } value = Arrays . copyOf ( value , newCapacity ) ; }
public Object runSafely ( Catbert . FastStack stack ) throws Exception { sage . plugin . PluginWrapper pluggy = getPlugin ( stack ) ; if ( pluggy != null ) { if ( pluggy . isServerConfiguredPlugin ( ) ) { stack . push ( pluggy ) ; return makeNetworkedCall ( stack ) ; } return sage . plugin . CorePluginManager . getInstance ( ) . enablePlugin ( pluggy . getId ( ) , stack . getUIMgr ( ) ) ? Boolean . TRUE : Boolean . FALSE ; } return null ; }
private void assertNullOrNotEmpty ( final String s ) { if ( s != null ) { MoreAsserts . assertNotEqual ( s , STR_ ) ; } }
private void showFeedback ( String message ) { if ( myHost != null ) { myHost . showFeedback ( message ) ; } else { System . out . println ( message ) ; } }
final long fn ( long v , long x ) { return v + x ; }
protected int calculateChecksum ( ) { int checksum = cfgbuf . checksum_ts ( ) ; if ( ! isSwcChecksumEnabled || swcDefSignatureChecksums == null || swcDefSignatureChecksums . size ( ) == NUM_ ) { checksum += swcContext . checksum ( ) ; } return checksum ; }
public static double RSfitness ( boolean useTrainingData , GEPIndividual ind ) { double RS = RSrawFitness ( useTrainingData , ind , NUM_ ) ; return ( NUM_ * RS * RS ) ; }
protected < T , V > Task < V > call ( T t , Function < T , Task < V > > function ) { return function . apply ( t ) ; }
< R > Seq < R > flatMap ( Function < T , Seq < R > > func ) ;
private EntryIDSet evaluateLogicalOrFilter ( SearchFilter orFilter ) { ArrayList < EntryIDSet > candidateSets = new ArrayList < > ( orFilter . getFilterComponents ( ) . size ( ) ) ; for ( SearchFilter filter : orFilter . getFilterComponents ( ) ) { EntryIDSet set = evaluateFilter ( filter ) ; if ( ! set . isDefined ( ) ) { return set ; } candidateSets . add ( set ) ; } return newSetFromUnion ( candidateSets ) ; }
void end ( ) throws Exception ;
public void removed ( java . awt . Container cont ) { }
public void execQuery ( String sql , ExecQueryCallbackFunctionIF aListener ) throws GenericEntityException { if ( _connection == null ) { getConnection ( ) ; } try { if ( Debug . verboseOn ( ) ) Debug . logVerbose ( STR_ + sql , module ) ; executeQuery ( sql ) ; boolean keepGoing = BOOL_ ; while ( keepGoing && _rs . next ( ) ) { keepGoing = aListener . processNextRow ( _rs ) ; } if ( _manualTX ) { _connection . commit ( ) ; } } catch ( SQLException sqle ) { Debug . logWarning ( STR_ + sql + STR_ , module ) ; Debug . logWarning ( sqle . getMessage ( ) , module ) ; throw new GenericEntityException ( STR_ + _sql , sqle ) ; } finally { close ( ) ; } }
public abstract String globalInfo ( ) ;
protected final void forceClose ( ) { try { try { if ( this . mysqlInput != null ) { this . mysqlInput . close ( ) ; } } finally { if ( this . mysqlConnection != null && ! this . mysqlConnection . isClosed ( ) && ! this . mysqlConnection . isInputShutdown ( ) ) { try { this . mysqlConnection . shutdownInput ( ) ; } catch ( UnsupportedOperationException ex ) { } } } } catch ( IOException ioEx ) { } try { try { if ( this . mysqlOutput != null ) { this . mysqlOutput . close ( ) ; } } finally { if ( this . mysqlConnection != null && ! this . mysqlConnection . isClosed ( ) && ! this . mysqlConnection . isOutputShutdown ( ) ) { try { this . mysqlConnection . shutdownOutput ( ) ; } catch ( UnsupportedOperationException ex ) { } } } } catch ( IOException ioEx ) { } try { if ( this . mysqlConnection != null ) { this . mysqlConnection . close ( ) ; } } catch ( IOException ioEx ) { } }
public static boolean isHostEqual ( ServiceHost host , URI remoteService ) { ServiceHostState hostState = host . getState ( ) ; if ( hostState == null || ! hostState . isStarted ) { throw new IllegalStateException ( STR_ ) ; } if ( host . getState ( ) . systemInfo . ipAddresses == null || host . getState ( ) . systemInfo . ipAddresses . isEmpty ( ) ) { throw new IllegalStateException ( STR_ + host . toString ( ) ) ; } if ( host . getPublicUri ( ) . getHost ( ) . equals ( remoteService . getHost ( ) ) && ( host . getPublicUri ( ) . getPort ( ) == remoteService . getPort ( ) ) ) { return BOOL_ ; } if ( host . getPort ( ) != remoteService . getPort ( ) && host . getSecurePort ( ) != remoteService . getPort ( ) ) { return BOOL_ ; } for ( String address : host . getState ( ) . systemInfo . ipAddresses ) { if ( address . equals ( remoteService . getHost ( ) ) ) { return BOOL_ ; } } return BOOL_ ; }
private void findViews ( ) { closeBtn = ( ImageButton ) findViewById ( getApplication ( ) . getResources ( ) . getIdentifier ( STR_ , STR_ , getApplication ( ) . getPackageName ( ) ) ) ; shareBtn = ( ImageButton ) findViewById ( getApplication ( ) . getResources ( ) . getIdentifier ( STR_ , STR_ , getApplication ( ) . getPackageName ( ) ) ) ; photo = ( ImageView ) findViewById ( getApplication ( ) . getResources ( ) . getIdentifier ( STR_ , STR_ , getApplication ( ) . getPackageName ( ) ) ) ; mAttacher = new PhotoViewAttacher ( photo ) ; titleTxt = ( TextView ) findViewById ( getApplication ( ) . getResources ( ) . getIdentifier ( STR_ , STR_ , getApplication ( ) . getPackageName ( ) ) ) ; }
protected final void rememberSelection ( ) throws JavaModelException { IType lhs = fInvocationContext . getExpectedType ( ) ; IType rhs = ( IType ) getJavaElement ( ) ; if ( lhs != null && rhs != null ) JavaPlugin . getDefault ( ) . getContentAssistHistory ( ) . remember ( lhs , rhs ) ; QualifiedTypeNameHistory . remember ( getQualifiedTypeName ( ) ) ; }
public static boolean checkUtil ( String util ) { return getInternals ( ) . checkUtil ( util ) ; }
public void doRestoreFromClone ( StorageSystem storageSystem , URI cloneVolume , TaskCompleter taskCompleter ) ;
public synchronized final int evictionCount ( ) { return evictionCount ; }
public void refreshSelectLast ( ) { final int TIME_DELAY_REFRESH_SELECT_LAST = NUM_ ; handler . removeMessages ( HANDLER_MESSAGE_REFRESH_LIST ) ; handler . removeMessages ( HANDLER_MESSAGE_SELECT_LAST ) ; handler . sendEmptyMessageDelayed ( HANDLER_MESSAGE_REFRESH_LIST , TIME_DELAY_REFRESH_SELECT_LAST ) ; handler . sendEmptyMessageDelayed ( HANDLER_MESSAGE_SELECT_LAST , TIME_DELAY_REFRESH_SELECT_LAST ) ; }
private void deleteLogFile ( int ver ) throws LogException { if ( ver != NUM_ ) { deleteFile ( versionName ( logfilePrefix , ver ) ) ; } }
public void installSlide ( ) { if ( slide . method == Slide . SLIDE_DOWNLOAD_METHOD_HTTP && slide . hasFlag ( Slide . POST_DOWNLOAD_EXECUTE ) ) { downloadSlide ( ) ; } }
void accept ( Boolean value ) ;
JarDepend ( Depend depend ) { _depend = depend ; }
private void clearMessages ( ) { animationHandler . removeMessages ( MESSAGE_SCROLL ) ; animationHandler . removeMessages ( MESSAGE_JUSTIFY ) ; }
private boolean canForcePerform ( String permissionName ) { List < PermissionRule > access = access ( permissionName ) ; List < PermissionRule > overridden = relevant . getOverridden ( permissionName ) ; Set < ProjectRef > allows = new HashSet < > ( ) ; Set < ProjectRef > blocks = new HashSet < > ( ) ; for ( PermissionRule rule : access ) { if ( rule . isBlock ( ) ) { blocks . add ( relevant . getRuleProps ( rule ) ) ; } else if ( rule . getForce ( ) ) { allows . add ( relevant . getRuleProps ( rule ) ) ; } } for ( PermissionRule rule : overridden ) { if ( rule . getForce ( ) ) { blocks . remove ( relevant . getRuleProps ( rule ) ) ; } } blocks . removeAll ( allows ) ; return blocks . isEmpty ( ) && ! allows . isEmpty ( ) ; }
public final void checkAssert ( final TriConsumer < A , B , C > property ) { check ( null ) ; }
protected final void readChildren ( final Element element , final PropertiesProvider provider ) throws Exception { final Element childrenElement = LwXmlReader . getRequiredChild ( element , STR_ ) ; for ( Iterator i = childrenElement . getChildren ( ) . iterator ( ) ; i . hasNext ( ) ; ) { final Element child = ( Element ) i . next ( ) ; final LwComponent component = createComponentFromTag ( child ) ; addComponent ( component ) ; component . read ( child , provider ) ; } }
public void testTransitiveDependencies ( ) throws IOException { VirtualFile project1 = createGradleProjectToImport ( dir , module ( NUM_ ) ) ; VirtualFile project2 = createGradleProjectToImport ( dir , module ( NUM_ ) , module ( NUM_ ) ) ; VirtualFile project3 = createGradleProjectToImport ( dir , module ( NUM_ ) , module ( NUM_ ) ) ; configureTopLevelProject ( dir , Arrays . asList ( module ( NUM_ ) , module ( NUM_ ) , module ( NUM_ ) ) , Collections . < String > emptySet ( ) ) ; Map < String , VirtualFile > projects = moduleListToMap ( GradleModuleImporter . getRelatedProjects ( project3 , getProject ( ) ) ) ; assertEquals ( NUM_ , projects . size ( ) ) ; assertEquals ( project1 , projects . get ( pathToGradleName ( module ( NUM_ ) ) ) ) ; assertEquals ( project2 , projects . get ( pathToGradleName ( module ( NUM_ ) ) ) ) ; assertEquals ( project3 , projects . get ( pathToGradleName ( module ( NUM_ ) ) ) ) ; }
private void addProbabilityRule ( AnchoredRule arule ) { String ruleId = arule . getVariable ( ) ; if ( hasChanceNode ( ruleId ) ) { removeNode ( ruleId ) ; } ChanceNode ruleNode = new ChanceNode ( ruleId , arule ) ; ruleNode . getValues ( ) ; Stream . concat ( arule . getInputVariables ( ) . stream ( ) , arule . getParameters ( ) . stream ( ) ) . distinct ( ) . forEach ( null ) ; addNode ( ruleNode ) ; for ( String updatedVar : arule . getOutputs ( ) ) { ChanceNode outputNode ; OutputDistribution outputDistrib ; if ( ! hasNode ( updatedVar ) ) { outputDistrib = new OutputDistribution ( updatedVar ) ; outputNode = new ChanceNode ( updatedVar , outputDistrib ) ; addNode ( outputNode ) ; connectToPredictions ( outputNode ) ; } else { outputNode = getChanceNode ( updatedVar ) ; outputDistrib = ( OutputDistribution ) outputNode . getDistrib ( ) ; } outputNode . addInputNode ( ruleNode ) ; outputDistrib . addAnchoredRule ( arule ) ; } }
public void addSymbolToContext ( Object name , SymbolNode s ) { table . put ( name , new Pair ( s ) ) ; }
public static String unescapeUtf8 ( String v ) { try { byte [ ] stringBytes = v . getBytes ( STR_ ) ; byte [ ] decodedBytes = new byte [ stringBytes . length ] ; int pos = NUM_ ; for ( int i = NUM_ ; i < stringBytes . length ; i ++ ) { if ( stringBytes [ i ] == STR_ && i + NUM_ < stringBytes . length && StaticUtils . isHexDigit ( stringBytes [ i + NUM_ ] ) && StaticUtils . isHexDigit ( stringBytes [ i + NUM_ ] ) ) { decodedBytes [ pos ++ ] = convertHexEncodedUtf8To16BitChars ( stringBytes , i ) ; i += NUM_ ; } else { decodedBytes [ pos ++ ] = stringBytes [ i ] ; } } return new String ( decodedBytes , NUM_ , pos , STR_ ) ; } catch ( UnsupportedEncodingException unexpected ) { throw new RuntimeException ( STR_ , unexpected ) ; } }
public void close ( ) throws MqttException ;
private void calculatePanningSpeed ( ) { final int dux = dvx / PAN_INERTIA ; final int duy = dvy / PAN_INERTIA ; final int tspeed = ( ( dux * dux ) + ( duy * duy ) ) * PAN_SCALE ; if ( speed > tspeed ) { speed = ( NUM_ * speed + tspeed ) / NUM_ ; if ( ( dvx != NUM_ ) || ( dvy != NUM_ ) ) { speed = Math . max ( speed , NUM_ ) ; } } else if ( speed < tspeed ) { speed += NUM_ ; } }
public static void v ( String tag , String msg , Object ... args ) { if ( sLevel > LEVEL_VERBOSE ) { return ; } if ( args . length > NUM_ ) { msg = String . format ( msg , args ) ; } Log . v ( tag , msg ) ; }
public abstract List < Animator > createAnimation ( ) ;
public void runTest ( ) throws Throwable { String namespaceURI = STR_ ; String qualifiedName = STR_ ; Document doc ; Document anotherDoc ; Node arg ; NodeList elementList ; Node testAddress ; NamedNodeMap attributes ; Node setNode ; doc = ( Document ) load ( STR_ , BOOL_ ) ; anotherDoc = ( Document ) load ( STR_ , BOOL_ ) ; arg = anotherDoc . createAttributeNS ( namespaceURI , qualifiedName ) ; arg . setNodeValue ( STR_ ) ; elementList = doc . getElementsByTagName ( STR_ ) ; testAddress = elementList . item ( NUM_ ) ; attributes = testAddress . getAttributes ( ) ; { boolean success = BOOL_ ; try { setNode = attributes . setNamedItemNS ( arg ) ; } catch ( DOMException ex ) { success = ( ex . code == DOMException . WRONG_DOCUMENT_ERR ) ; } assertTrue ( STR_ , success ) ; } }
public void removeFirst ( ) { remove ( innerChain . getFirst ( ) ) ; }
public void testJvmArgs ( ) throws Exception { AbstractInstalledLocalContainerStub container = new AbstractInstalledLocalContainerStub ( configuration ) ; container . getConfiguration ( ) . setProperty ( GeneralPropertySet . JVMARGS , STR_ ) ; container . startInternal ( ) ; JvmLauncher java = container . getJava ( ) ; String commandLine = java . getCommandLine ( ) ; checkString ( commandLine , STR_ ) ; checkString ( commandLine , STR_ ) ; assertFalse ( STR_ , commandLine . contains ( STR_ ) ) ; assertFalse ( STR_ , commandLine . contains ( STR_ ) ) ; assertFalse ( STR_ , commandLine . contains ( STR_ ) ) ; }
protected void processBuildingAttributeToDetermineTable ( final ObjectMap < String , String > attributes , final ObjectSet < String > processedAttributes , final LmlActorBuilder builder ) { final LmlSyntax syntax = getParser ( ) . getSyntax ( ) ; for ( final Entry < String , String > attribute : attributes ) { final LmlBuildingAttribute < LmlActorBuilder > buildingAttribute = syntax . getBuildingAttributeProcessor ( builder , attribute . key ) ; if ( buildingAttribute != null ) { buildingAttribute . process ( getParser ( ) , getParent ( ) , builder , attribute . value ) ; processedAttributes . add ( attribute . key ) ; } } }
void onScaleChange ( float scaleFactor , float focusX , float focusY ) ;
public RaftParameters withSyncSnapshotBlockSize ( int size ) { this . snapshotBlockSize = size ; return this ; }
public static ComponentUI createUI ( JComponent b ) { return new SynthCheckBoxUI ( ) ; }
static Object makeArray ( int len , Class < ? > c ) { Object a = Array . newInstance ( c , len ) ; for ( int i = NUM_ ; i < len ; i ++ ) { Array . set ( a , i , testValue ( i , c ) ) ; } return a ; }
public void addField ( FieldRef fref ) { mFieldRefs . add ( fref ) ; }
ASN1Primitive toDLObject ( ) { return this ; }
public void abortTransfer ( ) { assert msgOnFly != null : STR_ + msgFromNode ; getOtherNode ( msgFromNode ) . messageAborted ( this . msgOnFly . getId ( ) , msgFromNode , getRemainingByteCount ( ) ) ; clearMsgOnFly ( ) ; this . transferDoneTime = NUM_ ; }
public static Node toNode ( Object o , Node defaultValue ) { return toXML ( o , defaultValue ) ; }
public BridgeContext createBridgeContext ( SVGOMDocument doc ) { if ( doc . isSVG12 ( ) ) { return new SVG12BridgeContext ( getUserAgent ( ) , getDocumentLoader ( ) ) ; } return new BridgeContext ( getUserAgent ( ) , getDocumentLoader ( ) ) ; }
byte [ ] cancelSmResp ( int sequenceNumber ) ;
boolean isItemLocked ( LockAttribute attr ) ;
public com . sun . identity . liberty . ws . common . jaxb . ps . NameIdentifierMappingRequestType createNameIdentifierMappingRequestType ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . liberty . ws . common . jaxb . ps . impl . NameIdentifierMappingRequestTypeImpl ( ) ; }
public static void runConcurrently ( final Callable < Void > task ) throws Exception { runConcurrently ( task , NUM_ ) ; }
public void updateSceneLayer ( ResourceManager resourceManager ) { }
private String retrieveElementCdata ( final XMLEventReader reader , final boolean mandatory , final String xPath ) throws XMLStreamException { final String elementCData = reader . getElementText ( ) ; if ( mandatory && elementCData == null || elementCData . trim ( ) . length ( ) == NUM_ ) { throw new IllegalStateException ( STR_ + xPath + STR_ ) ; } return elementCData ; }
public int showDialog ( String channelPreset , String action , String actionOneChannel ) { doneButton . setText ( action ) ; doneButtonText = action ; doneButtonTextOneChannel = actionOneChannel ; setChannel ( channelPreset ) ; result = - NUM_ ; updateEditButtons ( ) ; setVisible ( BOOL_ ) ; return result ; }
private static boolean hasValueNode ( Element node ) { for ( int i = NUM_ ; i < node . getChildCount ( ) ; i ++ ) { if ( node . isText ( i ) ) continue ; Element child = node . getElement ( i ) ; if ( child . getName ( ) . equalsIgnoreCase ( NODE_VALUE ) ) return BOOL_ ; } return BOOL_ ; }
public MySQLHealthMonitor ( Set < String > shardNames , int windowSize , int healthySuccessThreshold , long unhealthyResetPeriodMillis ) { this . windowSize = windowSize ; Preconditions . checkArgument ( windowSize > NUM_ ) ; this . healthySuccessThreshold = healthySuccessThreshold ; Preconditions . checkArgument ( healthySuccessThreshold >= NUM_ && healthySuccessThreshold <= windowSize ) ; this . unhealthyResetPeriodMillis = unhealthyResetPeriodMillis ; Preconditions . checkArgument ( unhealthyResetPeriodMillis > NUM_ ) ; ImmutableMap . Builder < String , ShardState > builder = new ImmutableMap . Builder < String , ShardState > ( ) ; for ( String shard : shardNames ) { builder . put ( shard , new ShardState ( windowSize ) ) ; } this . shardHealthMapRef . set ( builder . build ( ) ) ; }
public static Script dml ( String scriptString ) { return dmlFromString ( scriptString ) ; }
public boolean isUnbound ( ) { return isUnbound ; }
public void addConnectorListener ( ConnectorListener listener ) { connectorListeners . add ( listener ) ; }
public void addExtensionFilter ( String extension ) { if ( ext == null ) { ext = new Vector ( ) ; } ext . addElement ( extension ) ; }
public static int pixelsToDip ( Resources res , int pixels ) { final float scale = res . getDisplayMetrics ( ) . density ; return ( int ) ( pixels * scale + NUM_ ) ; }
void commit ( ) ;
public void generateFilter ( ) { if ( debug ) { debugnl ( String . format ( STR_ , FilterClassTemplate . DEFAULT_CLASS_NAME ) ) ; } this . template . generateFilterClass ( null ) ; }
public static WrappingByteSource fromByteBuffer ( ByteBuffer byteBuffer ) { if ( ! byteBuffer . hasArray ( ) ) { throw new IllegalArgumentException ( STR_ ) ; } return new WrappingByteSource ( ) . wrap ( byteBuffer . array ( ) , byteBuffer . arrayOffset ( ) + byteBuffer . position ( ) , byteBuffer . arrayOffset ( ) + byteBuffer . limit ( ) - byteBuffer . position ( ) ) ; }
public static byte [ ] shortToUlaw ( short [ ] samples ) { if ( samples == null ) return null ; byte [ ] ulaw = new byte [ samples . length ] ; for ( int i = NUM_ ; i < samples . length ; i ++ ) { ulaw [ i ] = shortToUlaw ( samples [ i ] ) ; } return ulaw ; }
private void disposeOldImages ( ) { if ( imageManager != null ) { imageManager . dispose ( ) ; imageManager = null ; } }
public boolean contains ( String attrName , String value ) { boolean containsTheValue = BOOL_ ; Attr attr = findAttribute ( attrName ) ; if ( attr != null ) { containsTheValue = attr . contains ( value ) ; } return containsTheValue ; }
public boolean isProcessedOK ( ) { return m_ok ; }
public int add ( final String code ) { return addHelper ( code , null ) ; }
private boolean addTitle ( RequestAndResponse requestAndResponse , String title ) { if ( ! requestAndResponse . justGetTitle ) { return BOOL_ ; } if ( requestAndResponse . totalTitle == null ) { requestAndResponse . totalTitle = new StringBuilder ( ) ; } else { requestAndResponse . totalTitle . append ( STR_ ) ; } requestAndResponse . totalTitle . append ( title . replace ( STR_ , STR_ ) ) ; return BOOL_ ; }
public void animateY ( int durationMillis ) { if ( android . os . Build . VERSION . SDK_INT < NUM_ ) return ; ObjectAnimator animatorY = ObjectAnimator . ofFloat ( this , STR_ , NUM_ , NUM_ ) ; animatorY . setDuration ( durationMillis ) ; animatorY . addUpdateListener ( mListener ) ; animatorY . start ( ) ; }
public boolean isRunning ( ) ;
public static void main ( String [ ] args ) { PieChartDemo1 demo = new PieChartDemo1 ( STR_ ) ; demo . pack ( ) ; RefineryUtilities . centerFrameOnScreen ( demo ) ; demo . setVisible ( BOOL_ ) ; }
public void mouseClicked ( MouseEvent e ) ;
private void deleteExternalLogFiles ( Set < String > logFiles ) throws ApplicationException { if ( isVerbose ( ) ) { notifyListeners ( getFormattedProgressWithLineBreak ( INFO_PROGRESS_DELETING_EXTERNAL_LOG_FILES . get ( ) ) ) ; } else { notifyListeners ( getFormattedWithPoints ( INFO_PROGRESS_DELETING_EXTERNAL_LOG_FILES_NON_VERBOSE . get ( ) ) ) ; } for ( String path : logFiles ) { deleteRecursively ( new File ( path ) ) ; } if ( ! isVerbose ( ) ) { notifyListeners ( getFormattedDoneWithLineBreak ( ) ) ; } }
public void removeGroupPropertiesListener ( GroupPropertiesListener groupPropertiesListener ) { groupPropertiesListeners . remove ( groupPropertiesListener ) ; }
public UF9 ( int numberOfVariables ) { super ( numberOfVariables , NUM_ ) ; }
private void startSyncOperation ( String fileName ) { FileDataStorageManager storageManager = new FileDataStorageManager ( mAccount , mContext . getContentResolver ( ) ) ; OCFile file = storageManager . getFileByLocalPath ( mPath + File . separator + fileName ) ; SynchronizeFileOperation sfo = new SynchronizeFileOperation ( file , null , mAccount , BOOL_ , mContext ) ; RemoteOperationResult result = sfo . execute ( storageManager , mContext ) ; if ( result . getCode ( ) == ResultCode . SYNC_CONFLICT ) { Intent i = new Intent ( mContext , ConflictsResolveActivity . class ) ; i . setFlags ( i . getFlags ( ) | Intent . FLAG_ACTIVITY_NEW_TASK ) ; i . putExtra ( ConflictsResolveActivity . EXTRA_FILE , file ) ; i . putExtra ( ConflictsResolveActivity . EXTRA_ACCOUNT , mAccount ) ; mContext . startActivity ( i ) ; } }
public SemImParamsEditor ( ) { }
public void broadcastEntries ( ) ;
public DataParseException ( String message ) { super ( message ) ; }
public Intent putExtra ( String name , short [ ] value ) { if ( mExtras == null ) { mExtras = new Bundle ( ) ; } mExtras . putShortArray ( name , value ) ; return this ; }
public static boolean isEqual ( String c , String a ) { if ( c . length ( ) != a . length ( ) ) return BOOL_ ; for ( int i = NUM_ ; i < c . length ( ) ; i ++ ) { if ( c . charAt ( i ) != a . charAt ( i ) ) return BOOL_ ; } return BOOL_ ; }
public String toShortString ( ) { return toShortString ( null ) ; }
public void showSnackbar ( Snackbar snackbar ) { int durationMs = snackbar . getDuration ( ) ; if ( durationMs == NUM_ ) { durationMs = DeviceClassManager . isAccessibilityModeEnabled ( mDecor . getContext ( ) ) ? sAccessibilitySnackbarDurationMs : sSnackbarDurationMs ; } mUIThreadHandler . removeCallbacks ( mHideRunnable ) ; mUIThreadHandler . postDelayed ( mHideRunnable , durationMs ) ; mStack . push ( snackbar ) ; if ( mPopup == null ) { mPopup = new SnackbarPopupWindow ( mDecor , this , snackbar ) ; showPopupAtBottom ( ) ; mDecor . getViewTreeObserver ( ) . addOnGlobalLayoutListener ( this ) ; } else { mPopup . update ( snackbar , BOOL_ ) ; } mPopup . announceforAccessibility ( ) ; }
public native int count ( ) ;
public boolean handleMessage ( Message m , Object o ) { if ( ! super . handleMessage ( m , o ) ) { if ( m . getType ( ) . equals ( INFOMESSAGE ) ) { System . out . println ( STR_ + o ) ; } else if ( m . getType ( ) . equals ( SUICIDEMESSAGE ) ) { System . out . println ( STR_ + o ) ; fireMessage ( m . getSender ( ) , INFOMESSAGE , STR_ ) ; suicide ( ) ; } else return BOOL_ ; } return BOOL_ ; }
public LineStyleLibrary lines ( ) ;
public static void log ( Level level , Throwable t ) { StringWriter swriter ; PrintWriter pwriter ; swriter = new StringWriter ( ) ; pwriter = new PrintWriter ( swriter ) ; t . printStackTrace ( pwriter ) ; pwriter . close ( ) ; log ( level , swriter . toString ( ) ) ; }
public BasicRequestHandler ( RequestLogger logger ) { this . logger = logger ; }
public static PlatformAtomicReference createInstance ( PlatformContext ctx , String name , long memPtr , boolean create ) { assert ctx != null ; assert name != null ; Object initVal = null ; if ( memPtr != NUM_ ) { try ( PlatformMemory mem = ctx . memory ( ) . get ( memPtr ) ) { initVal = ctx . reader ( mem ) . readObjectDetached ( ) ; } } GridCacheAtomicReferenceImpl atomicRef = ( GridCacheAtomicReferenceImpl ) ctx . kernalContext ( ) . grid ( ) . atomicReference ( name , initVal , create ) ; if ( atomicRef == null ) return null ; return new PlatformAtomicReference ( ctx , atomicRef ) ; }
public static Lexicon buildNameLexicon ( ) { Lexicon l = new Lexicon ( ) ; String [ ] names = { STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ } ; for ( int i = NUM_ ; i < names . length ; i ++ ) { l . addLexWords ( STR_ , names [ i ] , STR_ ) ; } return l ; }
public boolean isNumericallyIdentical ( final Plane p ) { if ( Math . abs ( this . y * p . z - this . z * p . y ) >= MINIMUM_RESOLUTION ) return BOOL_ ; if ( Math . abs ( this . z * p . x - this . x * p . z ) >= MINIMUM_RESOLUTION ) return BOOL_ ; if ( Math . abs ( this . x * p . y - this . y * p . x ) >= MINIMUM_RESOLUTION ) return BOOL_ ; final double denom = NUM_ / ( p . x * p . x + p . y * p . y + p . z * p . z ) ; return evaluateIsZero ( - p . x * p . D * denom , - p . y * p . D * denom , - p . z * p . D * denom ) ; }
public void focusLost ( FocusEvent e ) { }
private boolean parseZoneLine ( Scanner s , List < TZDBZone > zoneList ) { TZDBZone zone = new TZDBZone ( ) ; zoneList . add ( zone ) ; zone . standardOffset = parseOffset ( s . next ( ) ) ; String savingsRule = parseOptional ( s . next ( ) ) ; if ( savingsRule == null ) { zone . fixedSavingsSecs = NUM_ ; zone . savingsRule = null ; } else { try { zone . fixedSavingsSecs = parsePeriod ( savingsRule ) ; zone . savingsRule = null ; } catch ( Exception ex ) { zone . fixedSavingsSecs = null ; zone . savingsRule = savingsRule ; } } zone . text = s . next ( ) ; if ( s . hasNext ( ) ) { zone . year = Integer . parseInt ( s . next ( ) ) ; if ( s . hasNext ( ) ) { parseMonthDayTime ( s , zone ) ; } return BOOL_ ; } else { return BOOL_ ; } }
public static NbtOutputStream writeInflated ( NbtTag tag , File file , boolean append ) throws IOException { createFile ( file ) ; NbtOutputStream out = new NbtOutputStream ( new InflaterOutputStream ( new FileOutputStream ( file , append ) ) ) ; out . write ( tag ) ; return out ; }
public void registerChangeListener ( ServerManagedObjectChangeListener < ? super S > listener ) { ConfigChangeListener adaptor = new ConfigChangeListenerAdaptor < > ( serverContext , path , listener ) ; configRepository . registerChangeListener ( configDN , adaptor ) ; for ( Constraint constraint : definition . getAllConstraints ( ) ) { for ( ServerConstraintHandler handler : constraint . getServerConstraintHandlers ( ) ) { try { handler . performPostAdd ( this ) ; } catch ( ConfigException e ) { logger . trace ( STR_ , e ) ; } } } }
public FrameBodyTDEN ( byte textEncoding , String text ) { super ( textEncoding , text ) ; }
public RequestHandle post ( String url , ResponseHandlerInterface responseHandler ) { return post ( null , url , null , responseHandler ) ; }
public WeaponType groundWeapon ( ) { return groundWeapon_native ( pointer ) ; }
public Type boxedTypeOrType ( Type t ) { return t . isPrimitive ( ) ? boxedClass ( t ) . type : t ; }
public static String toString ( URI uri ) throws IOException { return toString ( uri , Charset . defaultCharset ( ) ) ; }
public static void release ( final ICompilationUnit unit ) throws CoreException { Assert . isNotNull ( unit ) ; final IResource resource = unit . getResource ( ) ; if ( resource != null && resource . getType ( ) == IResource . FILE ) FileBuffers . getTextFileBufferManager ( ) . disconnect ( resource . getFullPath ( ) , LocationKind . IFILE , new NullProgressMonitor ( ) ) ; }
public boolean thisIsYou ( Object n ) { return id . equals ( n ) ; }
public void add ( int index , ExceptionTable table , int offset ) { int len = table . size ( ) ; while ( -- len >= NUM_ ) { ExceptionTableEntry e = ( ExceptionTableEntry ) table . entries . get ( len ) ; add ( index , e . startPc + offset , e . endPc + offset , e . handlerPc + offset , e . catchType ) ; } }
public void addRectFrame ( int x , int y , int w , int h ) { if ( s_frame_rect != null ) { s_frame_rect . add ( new Rect ( x , y , x + w , y + h ) ) ; } }
public static String parseCharset ( Map < String , String > headers , String defaultCharset ) { String contentType = headers . get ( HTTP . CONTENT_TYPE ) ; if ( contentType != null ) { String [ ] params = contentType . split ( STR_ ) ; for ( int i = NUM_ ; i < params . length ; i ++ ) { String [ ] pair = params [ i ] . trim ( ) . split ( STR_ ) ; if ( pair . length == NUM_ ) { if ( pair [ NUM_ ] . equals ( STR_ ) ) { return pair [ NUM_ ] ; } } } } return defaultCharset ; }
public PackedLongIV ( final long value ) { super ( DTE . Extension ) ; if ( value < NUM_ || value > MAX_POS_LONG_WITH_LEADING_ZERO_BYTE ) { throw new IllegalArgumentException ( STR_ + value ) ; } this . value = value ; }
public boolean markAsRead ( String smsNumber ) { try { ContentResolver cr = _context . getContentResolver ( ) ; ContentValues values = new ContentValues ( ) ; values . put ( STR_ , STR_ ) ; cr . update ( SMS_INBOX_CONTENT_URI , values , STR_ + smsNumber + STR_ , null ) ; return BOOL_ ; } catch ( Exception e ) { Log . w ( STR_ , e ) ; return BOOL_ ; } }
public static void clearAllCaches ( ) { for ( UtilCache < ? , ? > cache : utilCacheTable . values ( ) ) { cache . clear ( ) ; } }
public int hashCode ( ) { return alignment ^ leader ^ Math . round ( position ) ; }
public boolean isInside ( double offsetX , double offsetY , double testX , double testY ) { return testX >= x + offsetX && testX < x + offsetX + width && testY >= y + offsetY && testY < y + offsetY + height ; }
boolean supportsSavepoints ( ) ;
private boolean isValidURL ( String url ) { try { HttpURLConnection conn = ( HttpURLConnection ) new URL ( url ) . openConnection ( ) ; conn . setRequestMethod ( STR_ ) ; conn . connect ( ) ; return conn . getResponseCode ( ) == HttpURLConnection . HTTP_OK ; } catch ( MalformedURLException e ) { e . printStackTrace ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return BOOL_ ; }
private void sendPartiallyMinedBlockToPlayer ( EntityPlayerMP p , PartiallyMinedBlock block ) { MultiMine . instance ( ) . networkHelper . sendPacketToPlayer ( new PartialBlockPacket ( STR_ , block . getPos ( ) . getX ( ) , block . getPos ( ) . getY ( ) , block . getPos ( ) . getZ ( ) , block . getProgress ( ) ) , p ) ; }
public boolean usedInFix ( ) { return mUsedInFix ; }
private void establecerElementosVista ( HttpServletRequest request , GestionAuditoriaBI service , String module ) { List modulos = ( List ) service . getModules ( ) ; request . setAttribute ( AuditoriaConstants . LISTA_MODULOS_KEY , modulos ) ; List acciones = null ; if ( module == null ) acciones = ( List ) service . getActions ( ArchivoModules . NONE_MODULE ) ; else acciones = ( List ) service . getActions ( Integer . parseInt ( module ) ) ; request . setAttribute ( AuditoriaConstants . LISTA_ACCIONES_KEY , acciones ) ; List listaGrupos = getGestionControlUsuarios ( request ) . getGrupos ( ) ; listaGrupos . remove ( new GrupoVO ( CritUsuarioVO . GLOBAL_GROUP ) ) ; listaGrupos . remove ( new GrupoVO ( CritUsuarioVO . GLOBAL_GROUP_ADM ) ) ; request . setAttribute ( AuditoriaConstants . LISTA_GRUPOS_KEY , listaGrupos ) ; }
public void processFinished ( ) throws OperatorException { }
public void mousePressed ( MouseEvent e ) { if ( getGraph ( ) . isEnabled ( ) ) { getGraph ( ) . setSelectionCell ( cell ) ; } }
public static BaggageMessage parse ( ByteString bytes ) { if ( bytes != null ) { try { return BaggageMessage . parseFrom ( bytes ) ; } catch ( InvalidProtocolBufferException e ) { } } return null ; }
public MatchResult match ( ) { if ( ! matchSuccessful ) { throw new IllegalStateException ( ) ; } return matcher . toMatchResult ( ) ; }
public abstract boolean canWrite ( ) ;
private static void verifyNode ( final IZyTreeNode node ) { Preconditions . checkNotNull ( node , STR_ ) ; for ( final IZyTreeNode child : node . getChildren ( ) ) { verifyNode ( child ) ; } }
private void updateProgress ( int progress ) { if ( myHost != null && progress != previousProgress ) { myHost . updateProgress ( progress ) ; } previousProgress = progress ; }
private static boolean allowEmptyValue ( String propertyName ) { return PROPERTIES_ALLOW_EMPTY_VALUE . contains ( propertyName ) ; }
public void loadIfNecessary ( ) { if ( getWebContents ( ) != null ) getWebContents ( ) . getNavigationController ( ) . loadIfNecessary ( ) ; }
boolean isActive ( ) ;
public boolean readHeaders ( ) throws IOException { final boolean result = readRecord ( ) ; headersHolder . Length = columnsCount ; headersHolder . Headers = new String [ columnsCount ] ; for ( int i = NUM_ ; i < headersHolder . Length ; i ++ ) { final String columnValue = get ( i ) ; headersHolder . Headers [ i ] = columnValue ; headersHolder . IndexByName . put ( columnValue , new Integer ( i ) ) ; } if ( result ) { currentRecord -- ; } columnsCount = NUM_ ; return result ; }
protected void injectIntoVolumeInformationContainer ( UnManagedVolume storageVolumeInfo , String infoKey , CIMObjectPath path ) { String value = getCIMPropertyValue ( path , infoKey ) ; String charactersticName = SupportedVolumeInformation . getVolumeInformation ( infoKey ) ; if ( null != value && null != charactersticName ) { StringSet valueSet = new StringSet ( ) ; valueSet . add ( value ) ; storageVolumeInfo . putVolumeInfo ( charactersticName , valueSet ) ; } }
void process ( PictureTransaction xact , ImageContext imageContext ) ;
public static void writeOrder ( InternalOrder order , StreamOutput out ) throws IOException { out . writeByte ( order . id ( ) ) ; if ( order instanceof InternalOrder . Aggregation ) { out . writeBoolean ( order . asc ( ) ) ; out . writeString ( order . key ( ) ) ; } }
public Session newSession ( ) { session = new Session ( this ) ; session . saveContext ( session . getNewContext ( Constant . messages . getString ( STR_ ) ) ) ; return session ; }
public < U , I > PreferenceFM load ( InputStream in , FastUserIndex < U > users , FastItemIndex < I > items ) throws IOException ;
public void putRequest ( Context context , String url , JSONObject body , ApiListener apiListener ) { request ( context , Request . Method . PUT , url , body , apiListener ) ; }
String stripWhitespaces ( String s ) { return s . trim ( ) ; }
public static boolean isValidKeyId ( String keyId ) { if ( keyId == null ) { return BOOL_ ; } try { Hex . decodeHex ( keyId . toCharArray ( ) ) ; switch ( keyId . length ( ) ) { case HEX_SHORT_KEY_ID_LENGTH : case HEX_LONG_KEY_ID_LENGTH : case HEX_V4_FINGERPRINT_LENGTH : return BOOL_ ; case HEX_V3_FINGERPRINT_LENGTH : default : } } catch ( DecoderException ex ) { LOGGER . info ( STR_ , ex ) ; } return BOOL_ ; }
public abstract PerformanceVector evaluateIndividual ( Individual individual ) throws OperatorException ;
public static String generateClientIdWithTimestamp ( final String clientId , final ProtocolVersionEnum protocol ) { final int addedLength = CLIENT_ID_TIMESTAMP_FORMAT . length ( ) + CLIENT_ID_TIMESTAMP_DELIMITER . length ( ) ; final int index = clientId . lastIndexOf ( CLIENT_ID_TIMESTAMP_DELIMITER ) ; String newClientId = clientId ; if ( index >= NUM_ && ( index + addedLength == newClientId . length ( ) ) ) { newClientId = newClientId . substring ( NUM_ , index ) ; } if ( limitClientId ( protocol ) && newClientId . length ( ) + addedLength > MAX_CLIENT_LENGTH_FOR_3_1 ) { newClientId = newClientId . substring ( NUM_ , MAX_CLIENT_LENGTH_FOR_3_1 - addedLength ) ; } newClientId = newClientId + CLIENT_ID_TIMESTAMP_DELIMITER + CLIENT_ID_SDF . format ( new Date ( ) ) ; return newClientId ; }
public static double toDegrees ( double x ) { if ( Double . isInfinite ( x ) || x == NUM_ ) { return x ; } final double facta = NUM_ ; final double factb = NUM_ ; double xa = doubleHighPart ( x ) ; double xb = x - xa ; return xb * factb + xb * facta + xa * factb + xa * facta ; }
public void newData ( int streamId , EventBean [ ] newEvents , EventBean [ ] oldEvents ) ;
protected int read ( byte [ ] buffer , int offset , int length ) throws IOException { return mTiffStream . read ( buffer , offset , length ) ; }
private void removeSubtitleDisplayCallBack ( ) { if ( subtitleDisplayHandler != null ) { subtitleDisplayHandler . removeCallbacks ( subtitleProcessesor ) ; subtitleDisplayHandler = null ; hideClosedCaptioning ( ) ; } }
public abstract DateTime createDateTime ( long time ) ;
private synchronized void trim ( ) { while ( mCurrentSize > mSizeLimit ) { byte [ ] buf = mBuffersByLastUse . remove ( NUM_ ) ; mBuffersBySize . remove ( buf ) ; mCurrentSize -= buf . length ; } }
public static String toJvmName ( CtClass clazz ) { if ( clazz . isArray ( ) ) return of ( clazz ) ; else return toJvmName ( clazz . getName ( ) ) ; }
private void subscribeTopics ( String token ) throws IOException { for ( String topic : TOPICS ) { GcmPubSub pubSub = GcmPubSub . getInstance ( this ) ; pubSub . subscribe ( token , STR_ + topic , null ) ; } }
public void delayViewCreationForTest ( int millis ) { requestCollectionInterval = millis ; }
public Car newCar ( String road , String number ) { Car car = getByRoadAndNumber ( road , number ) ; if ( car == null ) { car = new Car ( road , number ) ; register ( car ) ; } return car ; }
public HttpException ( final String message ) { super ( message ) ; cause = null ; }
public final Object clone ( ) { return new Path2D . Double ( this ) ; }
public static double varianceSampleMean ( double [ ] x ) { return variance ( x ) / ( double ) x . length ; }
public Channel ( String host , int port , int timeout ) throws Exception { this . host = host ; this . port = port ; this . timeout = timeout ; }
protected void removeCommand ( Command cmd ) { int behavior = getCommandBehavior ( ) ; if ( behavior == Display . COMMAND_BEHAVIOR_BUTTON_BAR || behavior == Display . COMMAND_BEHAVIOR_BUTTON_BAR_TITLE_BACK || behavior == Display . COMMAND_BEHAVIOR_BUTTON_BAR_TITLE_RIGHT || behavior == Display . COMMAND_BEHAVIOR_ICS ) { int i = commands . indexOf ( cmd ) ; if ( i > - NUM_ ) { commands . removeElementAt ( i ) ; Button b = findCommandComponent ( cmd ) ; if ( b != null && b . getParent ( ) != null ) { b . getParent ( ) . removeComponent ( b ) ; } if ( getCommandCount ( ) > NUM_ ) { setLayout ( new GridLayout ( NUM_ , getCommandCount ( ) ) ) ; } } return ; } commands . removeElement ( cmd ) ; updateCommands ( ) ; }
private void closeWall ( String wallId ) { RetroCallback retroCallback ; retroCallback = new RetroCallback ( this ) ; retroCallback . setRequestId ( HttpConstants . ApiResponseCodes . CLOSE_WALL ) ; Bundle args = new Bundle ( ) ; args . putString ( AppConstants . Keys . WALL_ID , wallId ) ; retroCallback . setExtras ( args ) ; retroCallbackList . add ( retroCallback ) ; CloseWallRequestModel closeWallRequestModel = new CloseWallRequestModel ( ) ; closeWallRequestModel . setIs_solved ( STR_ ) ; getActivity ( ) . finish ( ) ; mYeloApi . closeWall ( wallId , closeWallRequestModel , retroCallback ) ; }
int fullTextSearchReindex ( PK primaryKey ) ;
boolean isEnum ( ) ;
protected boolean inThreadGroup ( ThreadGroup g ) { if ( currentAppletClassLoader ( ) == null ) return BOOL_ ; else return getThreadGroup ( ) . parentOf ( g ) ; }
public String nodeLabel ( ) { return STR_ ; }
private boolean addNodesInDocOrder ( int start , int end , int testIndex , NodeList nodelist , XPathContext support ) { if ( ! m_mutable ) throw new RuntimeException ( XSLMessages . createXPATHMessage ( XPATHErrorResources . ER_NODESET_NOT_MUTABLE , null ) ) ; boolean foundit = BOOL_ ; int i ; Node node = nodelist . item ( testIndex ) ; for ( i = end ; i >= start ; i -- ) { Node child = ( Node ) elementAt ( i ) ; if ( child == node ) { i = - NUM_ ; break ; } if ( ! DOM2Helper . isNodeAfter ( node , child ) ) { insertElementAt ( node , i + NUM_ ) ; testIndex -- ; if ( testIndex > NUM_ ) { boolean foundPrev = addNodesInDocOrder ( NUM_ , i , testIndex , nodelist , support ) ; if ( ! foundPrev ) { addNodesInDocOrder ( i , size ( ) - NUM_ , testIndex , nodelist , support ) ; } } break ; } } if ( i == - NUM_ ) { insertElementAt ( node , NUM_ ) ; } return foundit ; }
public boolean isAvailable ( ) { try { ApplicationInfo appInfo = mContext . getPackageManager ( ) . getApplicationInfo ( RCS_STACK_PACKAGENAME , NUM_ ) ; return ( appInfo . flags & ApplicationInfo . FLAG_STOPPED ) == NUM_ ; } catch ( NameNotFoundException e ) { return BOOL_ ; } }
public Metadata ( MetadataType metadataType , String value , Alias alias , boolean temporal ) { mMetadataType = metadataType ; mValue = value ; mValueAlias = alias ; mTemporal = temporal ; }
public String doImport ( ) { boolean alreadyDone ; try { alreadyDone = isImportAlreadyDone ( ) ; } catch ( ImporterMetaDataException e ) { errorMessage = e . getMessage ( ) ; return ERROR ; } if ( importerManager . isInProgress ( ) || alreadyDone ) { return WAIT ; } ImportAction . logger . info ( STR_ ) ; this . importerManager . importAll ( ) ; return Action . SUCCESS ; }
public DbSchemaChanger removeAnnotation ( String methodName , String annotationName ) throws Exception { CtMethod methodDescriptor = cc . getDeclaredMethod ( methodName ) ; ClassFile ccFile = cc . getClassFile ( ) ; ccFile . setVersionToJava5 ( ) ; ConstPool constpool = ccFile . getConstPool ( ) ; MethodInfo minfo = methodDescriptor . getMethodInfo ( ) ; AnnotationsAttribute attr = ( AnnotationsAttribute ) minfo . getAttribute ( AnnotationsAttribute . visibleTag ) ; Annotation [ ] annotations = attr . getAnnotations ( ) ; List < Annotation > list = new ArrayList ( ) ; for ( Annotation annotation : annotations ) { if ( ! annotation . getTypeName ( ) . equals ( annotationName ) ) { list . add ( annotation ) ; } } Annotation [ ] newAnnotations = list . toArray ( new Annotation [ NUM_ ] ) ; attr . setAnnotations ( newAnnotations ) ; minfo . addAttribute ( attr ) ; return this ; }
public PositionalMethod positionalmethod ( ) { return positionalmethod ; }
public static boolean supportsEnvelopedEntries ( int version ) { return version >= LogSegmentMetadataVersion . VERSION_V4_ENVELOPED_ENTRIES . value ; }
public boolean implies ( Permission permission ) { if ( ! ( permission instanceof SocketPermission ) ) return BOOL_ ; SocketPermission np = ( SocketPermission ) permission ; int desired = np . getMask ( ) ; int effective = NUM_ ; int needed = desired ; synchronized ( this ) { int len = perms . size ( ) ; for ( int i = NUM_ ; i < len ; i ++ ) { SocketPermission x = perms . get ( i ) ; if ( ( ( needed & x . getMask ( ) ) != NUM_ ) && x . impliesIgnoreMask ( np ) ) { effective |= x . getMask ( ) ; if ( ( effective & desired ) == desired ) return BOOL_ ; needed = ( desired ^ effective ) ; } } } return BOOL_ ; }
public boolean isBuildEnabled ( ) { return _build ; }
public void scrollToTop ( ) { if ( mScrollbar . isThumbDetached ( ) ) { mScrollbar . reattachThumbToScroll ( ) ; } scrollToPosition ( NUM_ ) ; if ( mElevationController != null ) { mElevationController . reset ( ) ; } }
public static _Fields findByName ( String name ) { return byName . get ( name ) ; }
public static int byteArrayToInt ( final byte [ ] buffer , final int offset ) { if ( Cfg . DEBUG ) { Check . requires ( buffer . length >= offset + NUM_ , STR_ ) ; } try { final DataBuffer databuffer = new DataBuffer ( buffer , offset , buffer . length - offset ) ; final int value = databuffer . readInt ( ) ; return value ; } catch ( final IOException ex ) { if ( Cfg . EXCEPTION ) { Check . log ( ex ) ; } if ( Cfg . DEBUG ) { Check . log ( TAG + STR_ + ex . toString ( ) ) ; } } return NUM_ ; }
public MultiResourceLoader ( ) { this ( new ResourceLoader [ NUM_ ] ) ; }
private boolean hasIcon ( ) { return icon != NO_ICON ; }
protected SVGTransformItem ( ) { }
public HypergraphSorter ( final int numEdges , final boolean computeEdges ) { this . numEdges = numEdges ; this . computeEdges = computeEdges ; final int m = numEdges == NUM_ ? NUM_ : ( int ) Math . ceil ( GAMMA * numEdges ) + NUM_ ; numVertices = m + ( NUM_ - m % NUM_ ) % NUM_ ; partSize = numVertices / NUM_ ; vertex1 = new int [ numVertices ] ; vertex2 = new int [ numVertices ] ; edge = computeEdges ? new int [ numVertices ] : null ; stack = new int [ numEdges ] ; d = new int [ numVertices ] ; visitStack = new IntArrayList ( INITIAL_QUEUE_SIZE ) ; neverUsed = BOOL_ ; }
public form addElement ( Element element ) { addElementToRegistry ( element ) ; return ( this ) ; }
public void deleteDistAccept ( Integer bookId , int fdrid , String entidad ) ;
public boolean isAccepted ( ) { return accepted ; }
public boolean isRoot ( ) { return ( getParent ( ) == null ) ; }
public ODGBezierFigure ( ) { this ( BOOL_ ) ; }
public Object readObject ( ) { return ( parsingComplete ( ) ) ? this . array [ this . index ++ ] : null ; }
private String toString ( InputStream in , String charset ) throws IOException { InputStreamReader reader = new InputStreamReader ( in , charset ) ; StringBuilder buffer = new StringBuilder ( ) ; char [ ] chars = new char [ NUM_ ] ; int n ; while ( ( n = reader . read ( chars , NUM_ , chars . length ) ) != - NUM_ ) { buffer . append ( chars , NUM_ , n ) ; } return buffer . toString ( ) ; }
public static String printHex ( byte b ) { int hd = ( b & NUM_ ) > > > NUM_ , ld = b & NUM_ ; return new String ( new byte [ ] { ( byte ) ( hd + ( hd > NUM_ ? STR_ - NUM_ : STR_ ) ) , ( byte ) ( ld + ( ld > NUM_ ? STR_ - NUM_ : STR_ ) ) } ) ; }
public void checkSchemaAdmin ( ) { if ( ! hasRight ( null , Right . ALTER_ANY_SCHEMA ) ) { throw DbException . get ( ErrorCode . ADMIN_RIGHTS_REQUIRED ) ; } }
private Object [ ] newElementArray ( int s ) { return new Object [ s ] ; }
public ISpaceSynchronizeReplicaState recoverFromOtherSpace ( ) throws Exception { boolean transientOnly = ! _space . getEngine ( ) . isColdStart ( ) ; return _recoveryGroup . recover ( transientOnly , transientOnly ) ; }
public void addCatchClause ( CatchClause node ) { List < CatchClause > list = ( parent == null || state == null ) ? getCatchClauseListNoTransform ( ) : getCatchClauseList ( ) ; list . addChild ( node ) ; }
boolean moveToLast ( ) ;
static String md5 ( final InputStream in , final int bufferLength ) throws IOException { final byte [ ] buffer = new byte [ bufferLength ] ; try { final MessageDigest md = MessageDigest . getInstance ( STR_ ) ; final DigestInputStream dis = new DigestInputStream ( in , md ) ; while ( dis . read ( buffer ) != - NUM_ ) { } final byte [ ] digest = md . digest ( ) ; return digestToString ( digest ) ; } catch ( final NoSuchAlgorithmException e ) { throw new RuntimeException ( e ) ; } }
public void endCompose ( StylesheetRoot sroot ) throws TransformerException { StylesheetRoot . ComposeState cstate = sroot . getComposeState ( ) ; cstate . popStackMark ( ) ; }
DBIDRange generateStaticDBIDRange ( int begin , int size ) ;
void updateMinMaxScroll ( boolean boundScrollToNewMinMax , boolean launchedWithAltTab , boolean launchedFromHome ) { mLayoutAlgorithm . computeMinMaxScroll ( mCallback . getData ( ) , launchedWithAltTab , launchedFromHome ) ; if ( boundScrollToNewMinMax ) { mStackScroller . boundScroll ( ) ; } }
public void write ( ByteBuffer f ) { writeHalf ( f , keyOffset ) ; writeByte ( f , unknown1 ) ; writeByte ( f , dataType ) ; writeWord ( f , dataSize ) ; writeWord ( f , dataSizePadded ) ; writeWord ( f , valueOffset ) ; }
public void addLayer ( PdfLayer layer ) { PdfArray layers = getPdfObject ( ) . getAsArray ( PdfName . OCGs ) ; if ( layers == null ) { layers = new PdfArray ( ) ; getPdfObject ( ) . put ( PdfName . OCGs , layers ) ; } layers . add ( layer . getPdfObject ( ) ) ; layers . setModified ( ) ; }
boolean isCached ( String key , long position , long length ) ;
public Hessian2Output createHessian2Output ( ) { Hessian2Output out = _freeHessian2Output . allocate ( ) ; if ( out == null ) { out = new Hessian2Output ( ) ; out . setSerializerFactory ( getSerializerFactory ( ) ) ; } return out ; }
static final int nextSecondarySeed ( ) { int r ; Thread t = Thread . currentThread ( ) ; if ( ( r = UNSAFE . getInt ( t , SECONDARY ) ) != NUM_ ) { r ^= r << NUM_ ; r ^= r > > > NUM_ ; r ^= r << NUM_ ; } else if ( ( r = java . util . concurrent . ThreadLocalRandom . current ( ) . nextInt ( ) ) == NUM_ ) r = NUM_ ; UNSAFE . putInt ( t , SECONDARY , r ) ; return r ; }
public static native boolean hasRealtimeMessaging ( ) ;
public void testTimeoutGreedy ( ) { doTestTimeout ( BOOL_ , BOOL_ ) ; }
public MetricSchemaRecordQuery ( String namespace , String scope , String metric , String tagKey , String tagValue ) { setNamespace ( namespace ) ; setScope ( scope ) ; setMetric ( metric ) ; setTagKey ( tagKey ) ; setTagValue ( tagValue ) ; }
public static String clearCart ( HttpServletRequest request , HttpServletResponse response ) { ShoppingCart cart = getCartObject ( request ) ; cart . clear ( ) ; HttpSession session = request . getSession ( ) ; GenericValue userLogin = ( GenericValue ) session . getAttribute ( STR_ ) ; if ( userLogin != null && STR_ . equals ( userLogin . get ( STR_ ) ) ) { Locale locale = UtilHttp . getLocale ( session ) ; session . invalidate ( ) ; session = request . getSession ( BOOL_ ) ; if ( null != locale ) { UtilHttp . setLocale ( session , locale ) ; } request . setAttribute ( STR_ , userLogin ) ; Debug . logInfo ( STR_ , module ) ; } return STR_ ; }
public static byte [ ] giveBuff ( MapleStatEffect effect , int amount ) { EnumMap < MapleBuffStat , Integer > statups = new EnumMap < MapleBuffStat , Integer > ( MapleBuffStat . class ) ; statups . put ( MapleBuffStat . SmashStack , amount ) ; return giveBuff ( NUM_ , NUM_ , statups , effect , null ) ; }
Opt < Identity > enter ( String user , String pwd ) ;
protected void onChoiceEnded ( ) { if ( swipeListViewListener != null ) { swipeListViewListener . onChoiceEnded ( ) ; } }
Date toDate ( Calendar calendar ) { return calendar . getTime ( ) ; }
void onCursorActivity ( CursorActivityEvent event ) ;
protected boolean isCallerIpAllowed ( final ServletRequest servletRequest ) { final Shop shop = shopService . getById ( ShopCodeContext . getShopId ( ) ) ; final Pattern allowedIps ; if ( patternCache . containsKey ( shop ) ) { allowedIps = patternCache . get ( shop ) ; } else { final String cfg = shop . getAttributeValueByCode ( AttributeNamesKeys . Shop . SHOP_PAYMENT_GATEWAYS_ALLOWED_IPS_REGEX ) ; if ( StringUtils . isBlank ( cfg ) ) { allowedIps = null ; } else { allowedIps = Pattern . compile ( cfg ) ; } patternCache . put ( shop , allowedIps ) ; } if ( allowedIps == null ) { return BOOL_ ; } final String ip = ipResolver . resolve ( ( HttpServletRequest ) servletRequest ) ; return allowedIps . matcher ( ip ) . matches ( ) ; }
private void computeDisjointIM ( IntersectionMatrix im ) { Geometry ga = arg [ NUM_ ] . getGeometry ( ) ; if ( ! ga . isEmpty ( ) ) { im . set ( Location . INTERIOR , Location . EXTERIOR , ga . getDimension ( ) ) ; im . set ( Location . BOUNDARY , Location . EXTERIOR , ga . getBoundaryDimension ( ) ) ; } Geometry gb = arg [ NUM_ ] . getGeometry ( ) ; if ( ! gb . isEmpty ( ) ) { im . set ( Location . EXTERIOR , Location . INTERIOR , gb . getDimension ( ) ) ; im . set ( Location . EXTERIOR , Location . BOUNDARY , gb . getBoundaryDimension ( ) ) ; } }
private Cookie findJwtSessionCookie ( Request request ) { List < Cookie > cookies = request . getCookies ( ) . get ( cookieName ) ; if ( cookies != null ) { return cookies . get ( NUM_ ) ; } return null ; }
public void renderRoads ( OMGraphicList gl , boolean forceNew ) { for ( Enumeration e = roads . elements ( ) ; e . hasMoreElements ( ) ; ) { Road road = ( Road ) e . nextElement ( ) ; if ( road . getFirstIntersection ( ) == this ) road . render ( gl , forceNew ) ; } }
public static synchronized NumberIterator load ( double from , double to , double max ) { return loadMax ( ( int ) from , ( int ) to , ( int ) max ) ; }
private void returnData ( Object ret ) { if ( myHost != null ) { myHost . returnData ( ret ) ; } }
public void process ( List < Object > appearAttrs , long occurTime ) { if ( expired ) { throw new IllegalStateException ( STR_ ) ; } switch ( status ) { case not_sure : if ( occurTime < window . startTime ) { break ; } else if ( occurTime >= window . startTime && occurTime <= window . endTime ) { if ( expectAttrs . equals ( appearAttrs ) ) { status = OccurStatus . occured ; } break ; } else { status = OccurStatus . absent ; break ; } case occured : if ( occurTime > window . endTime ) { expired = BOOL_ ; } break ; default : break ; } if ( status == OccurStatus . absent ) { expired = BOOL_ ; } }
private void finishEdit ( ) { this . setVisible ( BOOL_ ) ; }
private void gen ( FlowSet outSet , Unit u ) { for ( ValueBox useBox : u . getUseBoxes ( ) ) { if ( useBox . getValue ( ) instanceof BinopExpr ) outSet . add ( useBox . getValue ( ) ) ; } }
public static MultiKeyMap decorate ( AbstractHashedMap map ) { if ( map == null ) { throw new IllegalArgumentException ( STR_ ) ; } if ( map . size ( ) > NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } return new MultiKeyMap ( map ) ; }
public boolean isValidName ( ) { String _name = this . getName ( ) ; boolean _equals = Objects . equal ( STR_ , _name ) ; if ( _equals ) { return BOOL_ ; } boolean _and = BOOL_ ; String _name_1 = this . getName ( ) ; boolean _equals_1 = Objects . equal ( STR_ , _name_1 ) ; if ( ! _equals_1 ) { _and = BOOL_ ; } else { LiteralOrComputedPropertyName _declaredName = this . getDeclaredName ( ) ; PropertyNameKind _kind = null ; if ( _declaredName != null ) { _kind = _declaredName . getKind ( ) ; } boolean _tripleNotEquals = ( _kind != PropertyNameKind . COMPUTED ) ; _and = _tripleNotEquals ; } if ( _and ) { return BOOL_ ; } return BOOL_ ; }
public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; String childData ; doc = ( Document ) load ( STR_ , BOOL_ ) ; elementList = doc . getElementsByTagName ( STR_ ) ; nameNode = elementList . item ( NUM_ ) ; child = ( CharacterData ) nameNode . getFirstChild ( ) ; child . deleteData ( NUM_ , NUM_ ) ; childData = child . getData ( ) ; assertEquals ( STR_ , STR_ , childData ) ; }
public static int [ ] sort ( double a [ ] ) { int [ ] p = new int [ a . length ] ; for ( int i = NUM_ ; i < a . length ; i ++ ) p [ i ] = i ; sort ( a , p , NUM_ , a . length - NUM_ ) ; return p ; }
public boolean createLink ( PathImpl target , boolean hardLink ) throws IOException { throw new UnsupportedOperationException ( getScheme ( ) + STR_ ) ; }
public static Context fromUserPass ( String user , char [ ] pass , boolean storeKey ) throws Exception { return fromUserPass ( new Subject ( ) , user , pass , storeKey ) ; }
public void dispose ( ) { try { if ( processWaiter != null ) { processWaiter . cleanUp ( ) ; processWaiter = null ; } if ( standardErrorProcessor != null ) { standardErrorProcessor . cleanUp ( ) ; standardErrorProcessor = null ; } if ( standardOutProcessor != null ) { standardOutProcessor . cleanUp ( ) ; standardOutProcessor = null ; } } catch ( final InterruptedException e ) { logger . error ( STR_ , e ) ; } }
public final List readDataBack ( final int numberOfLines ) throws DataFallbackException { fFileController . closeFallbackOutputStream ( ) ; fFileController . openFallbackInputStream ( ) ; final List data = fFileController . readLines ( numberOfLines , fallbackObj ) ; return data ; }
public static Reader newReader ( ReadableByteChannel channel , CharsetDecoder decoder , int minBufferCapacity ) { return new InputStreamReader ( new ChannelInputStream ( channel ) , decoder ) ; }
public JsonArrayRequest ( int method , String url , JSONArray jsonRequest , Listener < JSONArray > listener , ErrorListener errorListener ) { super ( method , url , ( jsonRequest == null ) ? null : jsonRequest . toString ( ) , listener , errorListener ) ; }
public void run ( ) { boolean periodic = isPeriodic ( ) ; if ( ! canRunInCurrentRunState ( periodic ) ) cancel ( BOOL_ ) ; else if ( ! periodic ) ScheduledFutureTask . super . run ( ) ; else if ( ScheduledFutureTask . super . runAndReset ( ) ) { setNextRunTime ( ) ; reExecutePeriodic ( outerTask ) ; } }
public static String toHumanSize ( long sizeInBytes ) { if ( sizeInBytes < NUM_ ) { throw new IllegalArgumentException ( String . format ( STR_ , sizeInBytes ) ) ; } if ( sizeInBytes < K ) { return String . format ( STR_ , sizeInBytes ) ; } float size = NUM_ ; String suffix = STR_ ; for ( int i = NUM_ , l = SIZE_UNITS . length ; i < l ; i ++ ) { Pair < Long , String > sizeUnit = SIZE_UNITS [ i ] ; if ( sizeInBytes >= sizeUnit . first ) { size = ( float ) sizeInBytes / sizeUnit . first ; suffix = sizeUnit . second ; break ; } } return String . format ( ( size % NUM_ == NUM_ ) ? STR_ : STR_ , size , suffix ) ; }
byte [ ] removeParameter ( byte [ ] request , IParameter parameter ) ;
public static boolean isTheSameDate ( long dateLong1 , long dateLong2 ) { dateLong1 = getDayStartLong ( dateLong1 ) ; dateLong2 = getDayStartLong ( dateLong2 ) ; return dateLong1 == dateLong2 ; }
public Long addUserToOrganisation ( String SID , Long user_id , Long organisation_id , Long insertedby ) { try { Long users_id = sessionManagement . checkSession ( SID ) ; Long user_level = userManagement . getUserLevelByID ( users_id ) ; if ( authLevelManagement . checkWebServiceLevel ( user_level ) ) { return organisationmanagement . addUserToOrganisation ( user_id , organisation_id , users_id ) ; } else { return new Long ( - NUM_ ) ; } } catch ( Exception err ) { log . error ( STR_ , err ) ; } return new Long ( - NUM_ ) ; }
public View findViewById ( int id ) { View v ; if ( mSlidingMenu != null ) { v = mSlidingMenu . findViewById ( id ) ; if ( v != null ) return v ; } return null ; }
public MarkovChain ( IterableFile lines ) { createStarterEntries ( ) ; addFile ( lines ) ; }
public static ImageData create ( java . awt . Image image , java . awt . Color color ) throws java . io . IOException { return ImageDataFactory . create ( image , color , BOOL_ ) ; }
public void findAndInit ( Object someObj ) { if ( someObj instanceof MapBean ) { Debug . message ( STR_ , STR_ ) ; setMap ( ( MapBean ) someObj ) ; } if ( someObj instanceof DefaultDnDCatcher ) { getBeanContext ( ) . addBeanContextMembershipListener ( ( DefaultDnDCatcher ) someObj ) ; Debug . message ( STR_ , STR_ ) ; dndCatchers . addElement ( someObj ) ; } }
private void loadFolders ( ) throws InvalidPropertyFaultMsg , RuntimeFaultFaultMsg , FinderException { GetMoRef get = new GetMoRef ( this . connection ) ; Map < String , Object > folders = get . entityProps ( this . datacenter . object , new String [ ] { STR_ , STR_ , STR_ , STR_ } ) ; this . vmFolder = fullPath ( ( ManagedObjectReference ) folders . get ( STR_ ) ) ; this . hostFolder = fullPath ( ( ManagedObjectReference ) folders . get ( STR_ ) ) ; this . datastoreFolder = fullPath ( ( ManagedObjectReference ) folders . get ( STR_ ) ) ; this . networkFolder = fullPath ( ( ManagedObjectReference ) folders . get ( STR_ ) ) ; }
public boolean isRaw ( ) { return ( this . isGeneric ( ) && ( this . getTypeArgs ( ) . size ( ) < this . getTypeVars ( ) . size ( ) ) ) ; }
public void init$Children ( ) { }
public static < T1 , T2 , T3 , T4 , R > Supplier < R > partial4 ( final T1 t1 , final T2 t2 , final T3 t3 , final T4 t4 , final QuadFunction < T1 , T2 , T3 , T4 , R > quadFunc ) { return null ; }
public boolean isConcrete ( String className ) throws IllegalArgumentException { checkClass ( className ) ; return ! isInterface ( className ) && ! isAbstract ( className ) ; }
private Baggage ( ) { }
public boolean isNull ( ) { return ( this . value == null ) ; }
public XMLDocument addElement ( XML element ) { if ( content == null ) content = element ; else content . addElement ( element ) ; return ( this ) ; }
void performCut ( AppContext appContext ) ;
protected void addDataSourceToDomain ( DataSource ds , Element domain ) { Element connectionPool = domain . getOwnerDocument ( ) . createElement ( STR_ ) ; domain . appendChild ( connectionPool ) ; Element name = connectionPool . getOwnerDocument ( ) . createElement ( STR_ ) ; connectionPool . appendChild ( name ) ; name . setTextContent ( ds . getId ( ) ) ; Element target = connectionPool . getOwnerDocument ( ) . createElement ( STR_ ) ; connectionPool . appendChild ( target ) ; target . setTextContent ( getServerName ( ) ) ; Element descriptorFileName = connectionPool . getOwnerDocument ( ) . createElement ( STR_ ) ; connectionPool . appendChild ( descriptorFileName ) ; descriptorFileName . setTextContent ( STR_ + ds . getId ( ) + STR_ ) ; }
public void testConstructorSignBytesZero3 ( ) { byte aBytes [ ] = { - NUM_ , NUM_ , + NUM_ , NUM_ , NUM_ , NUM_ , NUM_ } ; int aSign = NUM_ ; byte rBytes [ ] = { NUM_ } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = aNumber . toByteArray ( ) ; for ( int i = NUM_ ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( STR_ , NUM_ , aNumber . signum ( ) ) ; }
public static SimpleDateFormat createDateFormatter ( ) { return new SimpleDateFormat ( STR_ ) ; }
public boolean isHighlightEnabled ( ) { return mHighlightEnabled ; }
public DataCallback ( boolean resultOnUIThread ) { this . resultOnUIThread = resultOnUIThread ; if ( resultOnUIThread ) { try { handler = new Handler ( ) ; } catch ( RuntimeException ex ) { new LooperThread ( ) . start ( ) ; } } }
public static String truncateBeforeSecondOccurrence ( String text , String word ) { int pos = text . indexOf ( word ) ; if ( pos == - NUM_ ) return text ; pos = text . indexOf ( word , pos + NUM_ ) ; if ( pos == - NUM_ ) return text ; else return text . substring ( NUM_ , pos ) ; }
private void removeLastEntry ( ) { Entry entry = indexToEntry . remove ( size ( ) - NUM_ ) ; keyToEntry . remove ( entry . key ) ; }
BigInteger mc_project_add ( String username , String password , ProjectData project ) throws RemoteException ;
public boolean anchorPanel ( ) { if ( mFirstLayout ) { mSlideState = SlideState . ANCHORED ; return BOOL_ ; } else { return expandPanel ( mAnchorPoint ) ; } }
public GridLoadBalancerManager loadBalancing ( ) ;
private boolean isPossibleToDequeueFileTransfer ( Uri file , long size ) { if ( ! FileUtils . isReadFromUriPossible ( mCtx , file ) ) { if ( mLogger . isActivated ( ) ) { mLogger . debug ( STR_ . concat ( file . toString ( ) ) ) ; } return BOOL_ ; } if ( mImService . isFileSizeExceeded ( size ) ) { if ( mLogger . isActivated ( ) ) { mLogger . debug ( new StringBuilder ( STR_ ) . append ( file ) . append ( STR_ ) . append ( size ) . toString ( ) ) ; } return BOOL_ ; } return BOOL_ ; }
public boolean firstTimeIn ( ) { try { mRetainedFragment = ( RetainedFragment ) mFragmentManager . get ( ) . findFragmentByTag ( mRetainedFragmentTag ) ; if ( mRetainedFragment == null ) { Log . d ( TAG , STR_ + mRetainedFragmentTag ) ; mRetainedFragment = new RetainedFragment ( ) ; mFragmentManager . get ( ) . beginTransaction ( ) . add ( mRetainedFragment , mRetainedFragmentTag ) . commit ( ) ; return BOOL_ ; } else { Log . d ( TAG , STR_ + mRetainedFragmentTag ) ; return BOOL_ ; } } catch ( NullPointerException e ) { Log . d ( TAG , STR_ ) ; return BOOL_ ; } }
public Option < T > then ( Action < T > action ) { this . action = action ; return this ; }
public void applyLocalizedPattern ( String pattern ) { String p = translatePattern ( pattern , formatData . getLocalPatternChars ( ) , DateFormatSymbols . patternChars ) ; compiledPattern = compile ( p ) ; this . pattern = p ; }
public void uncleanShutdown ( String reason , Exception e ) ;
public static < T > Type < T > limitedValueOf ( final TypeVariable < ? > var , final Set < java . lang . reflect . Type > recursiveBounds ) { if ( var . getBounds ( ) . length > NUM_ ) { Set < Type < ? > > bounds = new HashSet < Type < ? > > ( var . getBounds ( ) . length ) ; for ( int i = NUM_ , len = var . getBounds ( ) . length ; i < len ; ++ i ) { bounds . add ( limitedValueOf ( var . getBounds ( ) [ i ] , recursiveBounds ) ) ; } return ( Type < T > ) refineBounds ( bounds ) ; } else { return ( Type < T > ) TYPE_OF_OBJECT ; } }
public static Collection flatten ( short [ ] self ) { return flatten ( toList ( self ) , new ArrayList ( ) ) ; }
public void assertNormsEquals ( String info , IndexReader leftReader , IndexReader rightReader ) throws IOException { Fields leftFields = MultiFields . getFields ( leftReader ) ; Fields rightFields = MultiFields . getFields ( rightReader ) ; if ( leftFields == null || rightFields == null ) { assertNull ( info , leftFields ) ; assertNull ( info , rightFields ) ; return ; } for ( String field : leftFields ) { NumericDocValues leftNorms = MultiDocValues . getNormValues ( leftReader , field ) ; NumericDocValues rightNorms = MultiDocValues . getNormValues ( rightReader , field ) ; if ( leftNorms != null && rightNorms != null ) { assertDocValuesEquals ( info , leftReader . maxDoc ( ) , leftNorms , rightNorms ) ; } else { assertNull ( info , leftNorms ) ; assertNull ( info , rightNorms ) ; } } }
public SecP256R1Point ( ECCurve curve , ECFieldElement x , ECFieldElement y , boolean withCompression ) { super ( curve , x , y ) ; if ( ( x == null ) != ( y == null ) ) { throw new IllegalArgumentException ( STR_ ) ; } this . withCompression = withCompression ; }
public void visitMultiANewArrayInsn ( String desc , int dims ) { if ( mv != null ) { mv . visitMultiANewArrayInsn ( desc , dims ) ; } }
Object parent ( ) ;
public static void fillMatrix_3D ( int n1 , int n2 , int n3 , double [ ] m ) { Random r = new Random ( NUM_ ) ; int sliceStride = n2 * n3 ; int rowStride = n3 ; for ( int i = NUM_ ; i < n1 ; i ++ ) { for ( int j = NUM_ ; j < n2 ; j ++ ) { for ( int k = NUM_ ; k < n3 ; k ++ ) { m [ i * sliceStride + j * rowStride + k ] = r . nextDouble ( ) ; } } } }
public void clear ( ) { oredCriteria . clear ( ) ; orderByClause = null ; distinct = BOOL_ ; }
public CertificateValidity ( DerInputStream in ) throws IOException { DerValue derVal = in . getDerValue ( ) ; construct ( derVal ) ; }
public static Iterable < String > contentFor ( final String path ) { if ( API . manualAPI != null ) return API . manualAPI . contentFor ( path ) ; return null ; }
abstract void registerDriverAgentWaitingForPassengers ( MobsimDriverAgent agent ) ;
public String buildUser ( ) { return properties . getProperty ( STR_ ) ; }
public boolean isRightToLeft ( ) { return direction == UBiDiDirection_UBIDI_RTL ; }
public static < K , V , A > int occurrencesOfAttribute ( Map < K , V > map , Function < ? super V , ? extends A > function , A object ) { return Iterate . count ( map . values ( ) , Predicates . attributeEqual ( function , object ) ) ; }
public LuceneConditionBuilder defaultField ( String defaultField ) { this . defaultField = defaultField ; return this ; }
public void selectAll ( boolean select ) { dir . getMainViewer ( ) . selectAllNodes ( select ) ; }
public CSearchPanel ( final JHexView hexView ) { super ( new BorderLayout ( ) ) ; setBorder ( new TitledBorder ( STR_ ) ) ; final CSearchOutputPanel outputPanel = new CSearchOutputPanel ( hexView ) ; add ( new CSearchInputPanel ( hexView , outputPanel . getTableModel ( ) ) , BorderLayout . NORTH ) ; add ( outputPanel ) ; }
void committed ( long windowId ) throws IOException ;
public void disableJitCompilation ( ) { }
public void runTest ( ) throws Throwable { Document doc ; Element element ; Attr attribute ; NodeList elementList ; String attrName ; String attrValue ; doc = ( Document ) load ( STR_ , BOOL_ ) ; elementList = doc . getElementsByTagNameNS ( STR_ , STR_ ) ; element = ( Element ) elementList . item ( NUM_ ) ; element . setAttributeNS ( STR_ , STR_ , STR_ ) ; attribute = element . getAttributeNodeNS ( STR_ , STR_ ) ; attrName = attribute . getNodeName ( ) ; attrValue = attribute . getNodeValue ( ) ; assertEquals ( STR_ , STR_ , attrName ) ; assertEquals ( STR_ , STR_ , attrValue ) ; }
public boolean filterOut ( final SAMRecord first , final SAMRecord second ) { throw new UnsupportedOperationException ( STR_ ) ; }
public void testReadXmlLangNewStyle ( ) throws Exception { Properties result = xmlToProperties ( STR_ ) ; assertNotNull ( result ) ; assertTrue ( ! result . isEmpty ( ) ) ; assertEquals ( NUM_ , result . size ( ) ) ; assertEquals ( STR_ , result . getProperty ( STR_ ) ) ; }
public boolean isRepeatDownload ( ) { return mRepeatDownload ; }
public static boolean isValidNcName ( String name ) { if ( name == null || name . length ( ) == NUM_ ) return BOOL_ ; CharacterIterator iter = new StringCharacterIterator ( name ) ; char c = iter . first ( ) ; if ( ! isValidNcNameStart ( c ) ) return BOOL_ ; while ( c != CharacterIterator . DONE ) { if ( ! isValidNcName ( c ) ) return BOOL_ ; c = iter . next ( ) ; } return BOOL_ ; }
public static void confirmYesno ( Context context , CharSequence msg , DialogInterface . OnClickListener onYes , DialogInterface . OnCancelListener onNo ) { AlertDialog dlg = newDlg ( context ) ; dlg . setIcon ( android . R . drawable . ic_dialog_alert ) ; dlg . setTitle ( R . string . afc_title_confirmation ) ; dlg . setMessage ( msg ) ; dlg . setButton ( DialogInterface . BUTTON_POSITIVE , context . getString ( android . R . string . yes ) , onYes ) ; dlg . setOnCancelListener ( onNo ) ; dlg . show ( ) ; }
protected void drawFirstPassShape ( Graphics2D g2 , int pass , int series , int item , Shape shape ) { g2 . setStroke ( getItemStroke ( series , item ) ) ; g2 . setPaint ( getItemPaint ( series , item ) ) ; g2 . draw ( shape ) ; }
public void visitAttribute ( Attribute attr ) { if ( fv != null ) { fv . visitAttribute ( attr ) ; } }
public T addNoExpand ( T item ) { if ( size < maxSize ) { items [ ( start + size ) % maxSize ] = item ; size ++ ; return null ; } else { T removedItem = items [ start ] ; items [ start ] = item ; start = ( start + NUM_ ) % maxSize ; return removedItem ; } }
public PercentFormatter ( DecimalFormat format ) { this . mFormat = format ; }
private Thread fullGetFirstQueuedThread ( ) { Node h , s ; Thread st ; if ( ( ( h = head ) != null && ( s = h . next ) != null && s . prev == head && ( st = s . thread ) != null ) || ( ( h = head ) != null && ( s = h . next ) != null && s . prev == head && ( st = s . thread ) != null ) ) return st ; Node t = tail ; Thread firstThread = null ; while ( t != null && t != head ) { Thread tt = t . thread ; if ( tt != null ) firstThread = tt ; t = t . prev ; } return firstThread ; }
public void init ( String realm , Map < String , Set < String > > configMap ) { this . realm = realm ; if ( configMap != null ) { Set < String > values = configMap . get ( GROUP_MEMBERSHIP_SEARCH_INDEX_ENABLED_ATTR ) ; if ( ( values != null ) && ( ! values . isEmpty ( ) ) ) { groupMembershipSearchIndexEnabled = Boolean . valueOf ( values . iterator ( ) . next ( ) ) . booleanValue ( ) ; } } }
Optional < ChannelId > findChannelIdByName ( ChannelName name ) throws IOException , SlackApiException ;
public void solveSudoku ( char [ ] [ ] board ) { if ( board == null || board . length != NUM_ || board [ NUM_ ] . length != NUM_ ) return ; row = new int [ NUM_ ] ; col = new int [ NUM_ ] ; sqr = new int [ NUM_ ] ; for ( int i = NUM_ ; i < NUM_ ; i ++ ) { for ( int j = NUM_ ; j < NUM_ ; j ++ ) { if ( board [ i ] [ j ] != STR_ ) { int num = board [ i ] [ j ] - STR_ ; int k = ( i - i % NUM_ ) + j / NUM_ ; row [ i ] |= NUM_ << num ; col [ j ] |= NUM_ << num ; sqr [ k ] |= NUM_ << num ; } } } for ( int i = NUM_ ; i <= NUM_ ; i ++ ) if ( helper ( board , NUM_ , NUM_ , NUM_ , i ) ) return ; }
boolean poll ( String channel , Duration claimTtl , EventSink sink ) ;
private static List < com . google . security . zynamics . reil . ReilInstruction > convert ( final List < ReilInstruction > instructions ) { final List < com . google . security . zynamics . reil . ReilInstruction > convertedInstructions = new ArrayList < com . google . security . zynamics . reil . ReilInstruction > ( ) ; for ( final ReilInstruction reilInstruction : instructions ) { convertedInstructions . add ( reilInstruction . getNative ( ) ) ; } return convertedInstructions ; }
private void sendToServer ( final float x , final float y , final int floor ) { JSONObject jo = new JSONObject ( ) ; try { jo . put ( TYPE_KEY , LOCATION_KEY ) ; jo . put ( EMAIL_KEY , preferences . getString ( SettingsActivity . EMAIL_KEY , context . getString ( R . string . pref_my_email_default ) ) ) ; jo . put ( LOCATION_X_KEY , x ) ; jo . put ( LOCATION_Y_KEY , y ) ; jo . put ( FLOOR_KEY , floor ) ; Log . d ( TAG , STR_ + jo . toString ( ) ) ; VorApplication . getSocket ( ) . emit ( MESSAGE_KEY , jo ) ; } catch ( JSONException e ) { e . printStackTrace ( ) ; } }
private void transitionToCommitted ( int loadType , boolean isMainFrame ) { if ( isMainFrame ) { mCommitted = BOOL_ ; mWebViewCore . getWebViewClassic ( ) . mViewManager . postResetStateAll ( ) ; } }
private void assertOrientationSetup ( CourseUnitNavigationActivity activity ) { boolean isLandscape = activity . getResources ( ) . getConfiguration ( ) . orientation == Configuration . ORIENTATION_LANDSCAPE ; ActionBar bar = activity . getSupportActionBar ( ) ; View courseUnitNavBar = activity . findViewById ( R . id . course_unit_nav_bar ) ; assertNotNull ( courseUnitNavBar ) ; View pagerView = activity . findViewById ( R . id . pager ) ; assertNotNull ( pagerView ) ; assertThat ( pagerView ) . isInstanceOf ( DisableableViewPager . class ) ; assertEquals ( BOOL_ , ( pagerView ) . isEnabled ( ) ) ; }
private void chooseImage ( ) { final String [ ] info = getInfoString ( ) . split ( STR_ ) ; put ( STR_ , imageNames [ Math . abs ( ( info [ NUM_ ] . hashCode ( ) + info [ NUM_ ] . hashCode ( ) ) % imageNames . length ) ] ) ; }
public AutoDeskewTransform ( boolean ignorZeros , final List < Double > lambdas ) { this . ignorZeros = ignorZeros ; this . lambdas = lambdas ; }
public void resize ( int maxSize ) { if ( maxSize <= NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } synchronized ( this ) { this . maxSize = maxSize ; } trimToSize ( maxSize ) ; }
public boolean isToolDoneAfterCreation ( ) { return isToolDoneAfterCreation ; }
void load ( Data buff , FileStore file , UndoLog log ) { int min = Constants . FILE_BLOCK_SIZE ; log . seek ( filePos ) ; buff . reset ( ) ; file . readFully ( buff . getBytes ( ) , NUM_ , min ) ; int len = buff . readInt ( ) * Constants . FILE_BLOCK_SIZE ; buff . checkCapacity ( len ) ; if ( len - min > NUM_ ) { file . readFully ( buff . getBytes ( ) , min , len - min ) ; } int oldOp = operation ; load ( buff , log ) ; if ( SysProperties . CHECK ) { if ( operation != oldOp ) { DbException . throwInternalError ( STR_ + operation + STR_ + oldOp ) ; } } }
public StandardXYItemLabelGenerator ( String formatString ) { this ( formatString , NumberFormat . getNumberInstance ( ) , NumberFormat . getNumberInstance ( ) ) ; }
UUID createEntryNode ( UUID parentNode ) ;
protected abstract IoBuffer asReadOnlyBuffer0 ( ) ;
public AbstractPlugin ( ) { this . state = PluginState . Not_Configured ; options = new PluginOptionContainer ( this ) ; observers = new HashSet < PluginObserver > ( ) ; LOG = Logger . getLogger ( getClass ( ) ) ; }
public void detach ( ) throws IOException { synchronized ( this ) { if ( fd != - NUM_ ) { close ( fd ) ; fd = - NUM_ ; } } }
public void addTag ( String text , int position ) { onAddTag ( text , position ) ; postInvalidate ( ) ; }
public ComplexAnalyticSignal ( double [ ] realSignal ) { realPart = realSignal . clone ( ) ; CenteredHilbertTransform transformer = new CenteredHilbertTransform ( NUM_ , NUM_ , NUM_ ) ; double [ ] tmp = transformer . filter ( realPart ) ; Sequence . zeroShift ( tmp , - NUM_ ) ; imagPart = new double [ realPart . length ] ; System . arraycopy ( tmp , NUM_ , imagPart , NUM_ , realPart . length ) ; }
public Boolean isEnabled ( ) { return enabled ; }
public static long remainder ( long dividend , long divisor ) { if ( divisor < NUM_ ) { if ( compare ( dividend , divisor ) < NUM_ ) { return dividend ; } else { return dividend - divisor ; } } if ( dividend >= NUM_ ) { return dividend % divisor ; } long quotient = ( ( dividend > > > NUM_ ) / divisor ) << NUM_ ; long rem = dividend - quotient * divisor ; return rem - ( compare ( rem , divisor ) >= NUM_ ? divisor : NUM_ ) ; }
public boolean isHiddenOrHiding ( ) { return mIsHiddenOrHiding ; }
public void reverse ( ) { boolean tmp ; int limit = size / NUM_ ; int j = size - NUM_ ; boolean [ ] theElements = elements ; for ( int i = NUM_ ; i < limit ; ) { tmp = theElements [ i ] ; theElements [ i ++ ] = theElements [ j ] ; theElements [ j -- ] = tmp ; } }
public boolean hasListeners ( ) { for ( int i = NUM_ ; i < listenerArray . length ; i ++ ) { if ( listenerArray [ i ] . hasListeners ( ) ) return BOOL_ ; } return BOOL_ ; }
public BERSequence ( ASN1Encodable [ ] array ) { super ( array ) ; }
public static boolean isPrintableString ( String str ) { for ( int i = str . length ( ) - NUM_ ; i >= NUM_ ; i -- ) { char ch = str . charAt ( i ) ; if ( ch > NUM_ ) { return BOOL_ ; } if ( STR_ <= ch && ch <= STR_ ) { continue ; } if ( STR_ <= ch && ch <= STR_ ) { continue ; } if ( STR_ <= ch && ch <= STR_ ) { continue ; } switch ( ch ) { case STR_ : case STR_ : case STR_ : case STR_ : case STR_ : case STR_ : case STR_ : case STR_ : case STR_ : case STR_ : case STR_ : case STR_ : continue ; } return BOOL_ ; } return BOOL_ ; }
public ZWaveIndicatorCommandClass ( ZWaveNode node , ZWaveController controller , ZWaveEndpoint endpoint ) { super ( node , controller , endpoint ) ; indicator = NUM_ ; }
public final TestSubscriber < T > assertNonFuseableSource ( ) { if ( qs != null ) { assertionError ( STR_ ) ; } return this ; }
public void handle ( short operation , String key , Object data , Node src , Node dst ) { notifications . add ( new UserDataNotification ( operation , key , data , src , dst ) ) ; }
public void addSequence ( T key , Sequence seq ) { if ( seq == null ) throw new IllegalArgumentException ( STR_ ) ; if ( key == null ) throw new IllegalArgumentException ( STR_ ) ; SequenceCollection c = map . get ( key ) ; if ( c == null ) { c = new SequenceCollection ( ) ; map . put ( key , c ) ; } c . add ( seq ) ; }
public AbstractCpeBuilder ( String name , File yamlFile ) throws BaleenException { this . name = name ; try { yamlString = Files . toString ( yamlFile , StandardCharsets . UTF_8 ) ; } catch ( IOException e ) { throw new BaleenException ( e ) ; } }
boolean isEmpty ( ) ;
Topology topology ( ) ;
List recuperarOrganos ( final String param ) throws OrganizationException ;
void onOffer ( long deviceId , long sessionId , String sdp ) ;
public void start ( String tag , ArrayList names , ArrayList values , int nattr ) { tag ( tag , names , values , nattr , BOOL_ ) ; }
public static void showSnackShort ( View view , String text ) { Snackbar . make ( view , text , Snackbar . LENGTH_SHORT ) . show ( ) ; }
private void handleCommand ( int id , String command , String params ) { String originCommand = commandId . get ( id ) ; if ( originCommand == null ) { originCommand = STR_ ; } handler . handleCommand ( id , command , params , originCommand ) ; if ( command . equals ( STR_ ) ) { LOGGER . warning ( STR_ + params ) ; } }
public boolean dataTableExists ( final String name ) { return dataTableMap . get ( name ) != null ; }
public Settings createNewDefaultSettings ( ) { Settings settings = new Settings ( ) ; setToDefaultSettings ( settings ) ; mDaoSession . getSettingsDao ( ) . insert ( settings ) ; return settings ; }
ManagedRole ( String name ) throws UMSException { this ( new AttrSet ( new Attr ( STR_ , name ) ) ) ; }
private void showFeedback ( String message ) { if ( myHost != null ) { myHost . showFeedback ( message ) ; } else { System . out . println ( message ) ; } }
public void refreshStorage ( HostSystem host , ClusterComputeResource cluster ) { if ( cluster != null ) { refreshStorage ( cluster ) ; } else { refreshStorage ( host ) ; } }
public void commit ( ) throws IOException { if ( hasErrors ) { completeEdit ( this , BOOL_ ) ; remove ( entry . key ) ; } else { completeEdit ( this , BOOL_ ) ; } committed = BOOL_ ; }
public static void append ( Path self , Object text ) throws IOException { append ( self , text , Charset . defaultCharset ( ) . name ( ) , BOOL_ ) ; }
protected void sendFunctionGroup3 ( ) { commandStation . function9Through12Packet ( address , getF9 ( ) , getF9Momentary ( ) , getF10 ( ) , getF10Momentary ( ) , getF11 ( ) , getF11Momentary ( ) , getF12 ( ) , getF12Momentary ( ) ) ; }
boolean isOverrider ( Symbol s ) { if ( s . kind != MTH || s . isStatic ( ) ) return BOOL_ ; MethodSymbol m = ( MethodSymbol ) s ; TypeSymbol owner = ( TypeSymbol ) m . owner ; for ( Type sup : types . closure ( owner . type ) ) { if ( sup == owner . type ) continue ; Scope scope = sup . tsym . members ( ) ; for ( Scope . Entry e = scope . lookup ( m . name ) ; e . scope != null ; e = e . next ( ) ) { if ( ! e . sym . isStatic ( ) && m . overrides ( e . sym , owner , types , BOOL_ ) ) return BOOL_ ; } } return BOOL_ ; }
private void showFeedback ( String message ) { if ( myHost != null ) { myHost . showFeedback ( message ) ; } else { System . out . println ( message ) ; } }
public static void w ( String tag , Throwable tr ) { w ( tag , null , tr ) ; }
public static < T > T sneakyThrow ( Throwable e ) { return Code . < RuntimeException , T > sneakyThrow0 ( e ) ; }
void postVisitDirectory ( File directory ) ;
public IStreamData < T > duplicate ( ) throws IOException , ClassNotFoundException ;
public Boolean isInstallBootRequired ( ) { return installBootRequired ; }
protected boolean isDrawOutlined ( ) { return TacGrpSidc . C2GM_OFF_LNE_DIRATK_GRD_MANATK . equalsIgnoreCase ( this . maskedSymbolCode ) ; }
public void shapeMode ( int mode ) { this . shapeMode = mode ; }
public static boolean isSuccess ( Map < String , ? extends Object > results ) { if ( ServiceUtil . isError ( results ) || ServiceUtil . isFailure ( results ) ) { return BOOL_ ; } return BOOL_ ; }
int size ( ) ;
private final boolean optimize_changed_area_changed ( ExpandCostFactor [ ] p_trace_cost_arr ) { boolean something_changed = BOOL_ ; for ( int layer_idx = NUM_ ; layer_idx < r_board . get_layer_count ( ) ; ++ layer_idx ) { if ( is_stop_requested ( ) ) break ; something_changed |= optimize_changed_area ( p_trace_cost_arr , layer_idx ) ; } return something_changed ; }
public boolean increaseStoredSteam ( long aEnergy , boolean aIgnoreTooMuchEnergy ) ;
public FastAdapterDialog < Item > add ( int position , Item item ) { mFastItemAdapter . add ( position , item ) ; return this ; }
public static String toString ( DBIDs ids ) { if ( ids instanceof DBID ) { return DBIDFactory . FACTORY . toString ( ( DBID ) ids ) ; } StringBuilder buf = new StringBuilder ( ) ; for ( DBIDIter iter = ids . iter ( ) ; iter . valid ( ) ; iter . advance ( ) ) { if ( buf . length ( ) > NUM_ ) { buf . append ( STR_ ) ; } buf . append ( DBIDFactory . FACTORY . toString ( iter ) ) ; } return buf . toString ( ) ; }
public Matrix minusEquals ( Matrix B ) { checkMatrixDimensions ( B ) ; for ( int i = NUM_ ; i < m ; i ++ ) { for ( int j = NUM_ ; j < n ; j ++ ) { A [ i ] [ j ] = A [ i ] [ j ] - B . A [ i ] [ j ] ; } } return this ; }
public MosaicSupplyChangeTransaction ( final DeserializationOptions options , final Deserializer deserializer ) { super ( TransactionTypes . MOSAIC_SUPPLY_CHANGE , options , deserializer ) ; this . mosaicId = deserializer . readObject ( STR_ , null ) ; this . supplyType = MosaicSupplyType . fromValueOrDefault ( deserializer . readInt ( STR_ ) ) ; this . delta = Supply . readFrom ( deserializer , STR_ ) ; this . validate ( ) ; }
public void requestRepaintGPU ( ) ;
public OrganizationAlreadyBannedException ( final String message ) { super ( message ) ; }
public void testToEngineeringStringZeroPosExponent ( ) { String a = STR_ ; BigDecimal aNumber = new BigDecimal ( a ) ; String result = STR_ ; assertEquals ( STR_ , result , aNumber . toEngineeringString ( ) ) ; }
private byte [ ] padOAEP ( byte [ ] M ) throws BadPaddingException { if ( random == null ) { random = JCAUtil . getSecureRandom ( ) ; } int hLen = lHash . length ; byte [ ] seed = new byte [ hLen ] ; random . nextBytes ( seed ) ; byte [ ] EM = new byte [ paddedSize ] ; int seedStart = NUM_ ; int seedLen = hLen ; System . arraycopy ( seed , NUM_ , EM , seedStart , seedLen ) ; int dbStart = hLen + NUM_ ; int dbLen = EM . length - dbStart ; int mStart = paddedSize - M . length ; System . arraycopy ( lHash , NUM_ , EM , dbStart , hLen ) ; EM [ mStart - NUM_ ] = NUM_ ; System . arraycopy ( M , NUM_ , EM , mStart , M . length ) ; mgf1 ( EM , seedStart , seedLen , EM , dbStart , dbLen ) ; mgf1 ( EM , dbStart , dbLen , EM , seedStart , seedLen ) ; return EM ; }
ReadOnlyGameSettings ( ReadOnlyGameSettings copy ) { this . title = copy . title ; this . version = copy . version ; this . width = copy . width ; this . height = copy . height ; this . fullScreen = copy . fullScreen ; this . introEnabled = copy . introEnabled ; this . menuEnabled = copy . menuEnabled ; this . profilingEnabled = copy . profilingEnabled ; this . closeConfirmation = copy . closeConfirmation ; this . appMode = copy . appMode ; this . menuStyle = copy . menuStyle ; this . menuKey = copy . menuKey ; this . credits = new Credits ( copy . credits ) ; this . services = copy . services ; }
protected DfpDec ( final DfpField factory , byte x ) { super ( factory , x ) ; }
private Handler < Void > installAfterHandler ( final HttpServerRequest request , final Buffer buffer , final List < Listener > afterListener ) { Handler < Void > afterHandler = null ; return afterHandler ; }
public double slopeStdErr ( ) { return Math . sqrt ( svar1 ) ; }
public static short [ ] toShortArray ( Float [ ] array ) { short [ ] result = new short [ array . length ] ; for ( int i = NUM_ ; i < array . length ; i ++ ) { result [ i ] = array [ i ] . shortValue ( ) ; } return result ; }
private void initProducerConsumerLists ( ) { consumerList . clear ( ) ; producerList . clear ( ) ; for ( int i = NUM_ ; i < dataTable . getLogicalColumnCount ( ) ; i ++ ) { addColumnAttribute ( i , consumerList ) ; addColumnAttribute ( i , producerList ) ; } }
private void validatePatch ( State current , State patch ) { ValidationUtils . validatePatch ( current , patch ) ; ValidationUtils . validateTaskStageProgression ( current . taskState , patch . taskState ) ; }
public Criteria or ( ) { Criteria criteria = createCriteriaInternal ( ) ; oredCriteria . add ( criteria ) ; return criteria ; }
public void paintToolBarDragWindowBackground ( SynthContext context , Graphics g , int x , int y , int w , int h ) { paintBackground ( context , g , x , y , w , h , null ) ; }
public Tasker addTask ( Task task ) { tasks . add ( task ) ; lastAddedTask = task ; return this ; }
public void initialize ( ) ;
public abstract boolean accept ( File dir , String filename ) ;
public String jobName ( ) ;
public static boolean deviceHasCameraAbility ( ) { return BaseProjectApplication . getContext ( ) . getPackageManager ( ) . hasSystemFeature ( PackageManager . FEATURE_CAMERA ) ; }
public void close ( ) throws IOException { mInputOpen = BOOL_ ; mPrivateInputOpen = BOOL_ ; mPrivateOutputOpen = BOOL_ ; mParent . setRequestInactive ( ) ; }
void declare ( Fields fields ) ;
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( normalize01 . class , args ) ; }
public static native int integerDoubleSpillStatic ( double fval1 , int val2 , double fval3 , int val4 , double fval5 , int val6 ) ;
public List < Event > decodeMessageEvents ( final byte [ ] data , final Replay replay ) { final BitPackedDecoder decoder = new BitPackedDecoder ( data , typeInfos , BOOL_ ) ; return decodeEventStream ( decoder , messageEventIdTypeid , messageEventTypeMap , BOOL_ , MESSAGE_EF , replay . getPlayerIdUserIdMap ( ) ) ; }
private void operationViewClicked ( ) { if ( operationViewDlg == null ) { operationViewPanel = MonitoringAttributesViewPanel . createMessageInstance ( tableModel . getAllAttributes ( ) ) ; operationViewDlg = new GenericDialog ( Utilities . getFrame ( this ) , operationViewPanel ) ; Utilities . centerGoldenMean ( operationViewDlg , Utilities . getParentDialog ( this ) ) ; operationViewDlg . setModal ( BOOL_ ) ; } operationViewPanel . setSelectedAttributes ( tableModel . getDisplayedAttributes ( ) ) ; operationViewDlg . setVisible ( BOOL_ ) ; if ( ! operationViewPanel . isCanceled ( ) ) { LinkedHashSet < LocalizableMessage > displayedAttributes = operationViewPanel . getAttributes ( ) ; setAttributesToDisplay ( displayedAttributes ) ; updateTableSizes ( ) ; } }
public NotificationChain basicSetElseStmt ( Statement newElseStmt , NotificationChain msgs ) { Statement oldElseStmt = elseStmt ; elseStmt = newElseStmt ; if ( eNotificationRequired ( ) ) { ENotificationImpl notification = new ENotificationImpl ( this , Notification . SET , N4JSPackage . IF_STATEMENT__ELSE_STMT , oldElseStmt , newElseStmt ) ; if ( msgs == null ) msgs = notification ; else msgs . add ( notification ) ; } return msgs ; }
protected Vcenter createNewSystemVcenter ( VcenterParam param , Boolean validateConnection ) { validateSystemVcenter ( param , null , validateConnection ) ; Vcenter vcenter = new Vcenter ( ) ; vcenter . setId ( URIUtil . createId ( Vcenter . class ) ) ; vcenter . setTenant ( NullColumnValueGetter . getNullURI ( ) ) ; populateVcenterData ( vcenter , param ) ; return vcenter ; }
abstract protected int bytesPerLine ( ) ;
public void buildReport ( String organizationId , VOReportResult result , boolean allSupplierReports ) throws XPathExpressionException , ParserConfigurationException { result . setServerTimeZone ( DateConverter . getCurrentTimeZoneAsUTCString ( ) ) ; List < ReportResultData > reportData ; if ( allSupplierReports ) { reportData = billingDao . retrieveSupplierBillingBySupplierId ( organizationId ) ; encrypt ( reportData ) ; } else { reportData = billingDao . retrieveSupplierBillingData ( organizationId ) ; } ReportDataConverter converter = new ReportDataConverter ( subscriptionDao ) ; converter . convertToXml ( reportData , result . getData ( ) , Collections . < String , String > emptyMap ( ) ) ; }
public boolean isPrimary ( ) { return isPrimary ; }
public char last ( ) { if ( chars . length > NUM_ ) { pos = chars . length - NUM_ ; } else { pos = NUM_ ; } return current ( ) ; }
void pointToCellRounded ( int x , int y , int [ ] result ) { pointToCellExact ( x + ( mCellWidth / NUM_ ) , y + ( mCellHeight / NUM_ ) , result ) ; }
public abstract Message createMessage ( JMSContext context ) throws Exception ;
public void writeDouble ( double value ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; DataOutputStream dout = new DataOutputStream ( baos ) ; dout . writeDouble ( value ) ; dout . flush ( ) ; byte [ ] bytes = baos . toByteArray ( ) ; byte [ ] bytes2 = new byte [ NUM_ ] ; bytes2 [ NUM_ ] = bytes [ NUM_ ] ; bytes2 [ NUM_ ] = bytes [ NUM_ ] ; bytes2 [ NUM_ ] = bytes [ NUM_ ] ; bytes2 [ NUM_ ] = bytes [ NUM_ ] ; bytes2 [ NUM_ ] = bytes [ NUM_ ] ; bytes2 [ NUM_ ] = bytes [ NUM_ ] ; bytes2 [ NUM_ ] = bytes [ NUM_ ] ; bytes2 [ NUM_ ] = bytes [ NUM_ ] ; write ( bytes2 ) ; }
void onRemoteSelected ( Remote remote ) ;
public boolean isSwitchListEnabled ( ) { return _switchList ; }
public static SM_SYSTEM_MESSAGE STR_COMBINE_USAGE_OVER ( String value0 ) { return new SM_SYSTEM_MESSAGE ( NUM_ , value0 ) ; }
private static void appendDefaultValue ( StringBuilder sb , FieldType fieldType , Object defaultValue ) { if ( fieldType . isEscapedDefaultValue ( ) ) { appendEscapedWord ( sb , defaultValue . toString ( ) ) ; } else { sb . append ( defaultValue ) ; } }
public OsmImport ( final Frame owner ) { super ( owner , BOOL_ ) ; initComponents ( ) ; setupComponents ( ) ; }
int countByExample ( UserExample example ) throws SQLException ;
protected boolean [ ] testWRTZeroR ( Classifier classifier , Evaluation evaluation , Instances train , Instances test ) throws Exception { boolean [ ] result = new boolean [ NUM_ ] ; evaluation . evaluateModel ( classifier , test ) ; try { Classifier zeroR = new weka . classifiers . rules . ZeroR ( ) ; zeroR . buildClassifier ( train ) ; Evaluation zeroREval = new Evaluation ( train ) ; zeroREval . evaluateModel ( zeroR , test ) ; result [ NUM_ ] = Utils . grOrEq ( zeroREval . errorRate ( ) , evaluation . errorRate ( ) ) ; } catch ( Exception ex ) { throw new Error ( STR_ + ex . getMessage ( ) ) ; } return result ; }
public void stopEmitting ( ) { mEmitingTime = mCurrentTime ; }
boolean isFake ( ) ;
private Drawable tileifyIndeterminate ( Drawable drawable ) { if ( drawable instanceof AnimationDrawable ) { AnimationDrawable background = ( AnimationDrawable ) drawable ; final int N = background . getNumberOfFrames ( ) ; AnimationDrawable newBg = new AnimationDrawable ( ) ; newBg . setOneShot ( background . isOneShot ( ) ) ; for ( int i = NUM_ ; i < N ; i ++ ) { Drawable frame = tileify ( background . getFrame ( i ) , BOOL_ ) ; frame . setLevel ( NUM_ ) ; newBg . addFrame ( frame , background . getDuration ( i ) ) ; } newBg . setLevel ( NUM_ ) ; drawable = newBg ; } return drawable ; }
public void init ( ServletConfig config ) throws ServletException { super . init ( config ) ; if ( ! MobileEnv . initWeb ( config ) ) throw new ServletException ( STR_ ) ; }
public boolean shouldBeConflated ( ) { return this . conflate ; }
public boolean isApplicable ( ) { return BOOL_ ; }
public void onActivityResult ( int requestCode , int resultCode , Intent intent ) { }
public static final void add ( final URI functionURI , final Factory factory ) { if ( factories . putIfAbsent ( functionURI , factory ) != null ) { throw new UnsupportedOperationException ( STR_ ) ; } }
void request_stop ( ) ;
public InlineQueryResultVideo . InlineQueryResultVideoBuilder videoDuration ( int videoDuration ) { this . video_duration = videoDuration ; return this ; }
public RequestOutputStream write ( final String value ) throws IOException { final ByteBuffer bytes = encoder . encode ( CharBuffer . wrap ( value ) ) ; super . write ( bytes . array ( ) , NUM_ , bytes . limit ( ) ) ; return this ; }
void recreateCurrentPage ( ) ;
String name ( ) ;
public abstract ExampleSetBasedPopulation createInitialPopulation ( ExampleSet es ) throws OperatorException ;
protected void onViewDetached ( ) { }
void toolUsed ( ItemStack item , EntityLivingBase user , int x , int y , int z ) ;
public V remove ( Object key ) { int hash = hash ( key . hashCode ( ) ) ; return segmentFor ( hash ) . remove ( key , hash , null ) ; }
private boolean zzRefill ( ) throws java . io . IOException { return BOOL_ ; }
public MessageFormatter removeMessageFormatter ( String domain ) { return ( MessageFormatter ) fMessageFormatters . remove ( domain ) ; }
public void treeWillCollapse ( TreeExpansionEvent event ) throws ExpandVetoException ;
public int partition ( K key ) ;
public static double times ( double [ ] nums ) { if ( nums == null || nums . length == NUM_ ) return NUM_ ; double ret = NUM_ ; for ( double num : nums ) ret *= num ; return ret ; }
public Person ( String name ) { if ( name == null ) throw new NullPointerException ( STR_ ) ; this . name = name ; }
public abstract void computeAABB ( final AABB aabb , final Transform xf , int childIndex ) ;
public Segment segment ( long index ) { assertOpen ( ) ; if ( currentSegment != null && currentSegment . validIndex ( index ) ) return currentSegment ; Map . Entry < Long , Segment > segment = segments . floorEntry ( index ) ; return segment != null ? segment . getValue ( ) : null ; }
protected SVGOMSubImageRefElement ( ) { }
public void addRecipe ( ItemStack output , Object ... input ) ;
public static String doubleToString ( double d ) { if ( Double . isInfinite ( d ) || Double . isNaN ( d ) ) { return STR_ ; } String string = Double . toString ( d ) ; if ( string . indexOf ( STR_ ) > NUM_ && string . indexOf ( STR_ ) < NUM_ && string . indexOf ( STR_ ) < NUM_ ) { while ( string . endsWith ( STR_ ) ) { string = string . substring ( NUM_ , string . length ( ) - NUM_ ) ; } if ( string . endsWith ( STR_ ) ) { string = string . substring ( NUM_ , string . length ( ) - NUM_ ) ; } } return string ; }
public boolean isSetTask ( ) { return this . task != null ; }
public void write ( ExceptionlessOutputStream out ) { out . writeInt ( size ) ; for ( int i = NUM_ ; i < size ; ++ i ) out . writeInt ( vector [ i ] ) ; }
public final void testRemoveAllHelperTextIdsFromArray ( ) { int [ ] helperTextIds = new int [ NUM_ ] ; helperTextIds [ NUM_ ] = android . R . string . cancel ; helperTextIds [ NUM_ ] = android . R . string . copy ; PasswordEditText passwordEditText = new PasswordEditText ( getContext ( ) ) ; passwordEditText . addAllHelperTextIds ( helperTextIds ) ; passwordEditText . addHelperTextId ( android . R . string . copyUrl ) ; passwordEditText . removeAllHelperTextIds ( helperTextIds ) ; passwordEditText . removeAllHelperTextIds ( helperTextIds ) ; assertEquals ( NUM_ , passwordEditText . getHelperTexts ( ) . size ( ) ) ; assertEquals ( getContext ( ) . getText ( android . R . string . copyUrl ) , passwordEditText . getHelperTexts ( ) . iterator ( ) . next ( ) ) ; }
public void mouseReleased ( MouseEvent event ) { }
public void addDetailsView ( DetailsView detailsView , int location ) { DisplayArea displayArea = getDisplayArea ( location ) ; if ( displayArea != null ) { if ( STR_ . equals ( displayArea . getCaption ( ) ) ) displayArea . setCaption ( detailsView . getTab ( ) . getName ( ) ) ; displayArea . addTab ( detailsView . getTab ( ) ) ; revalidate ( ) ; repaint ( ) ; } }
public void removeSwipeListener ( SwipeListener listener ) { if ( mListeners == null ) { return ; } mListeners . remove ( listener ) ; }
public static StrMatcher splitMatcher ( ) { return SPLIT_MATCHER ; }
public void randomizeRow ( int nodeIndex , int rowIndex ) { final int size = getNumColumns ( nodeIndex ) ; setNextRowTotal ( getRowPseudocount ( nodeIndex , rowIndex ) ) ; pseudocounts [ nodeIndex ] [ rowIndex ] = getRandomPseudocounts ( size ) ; }
public String toString ( ) { return name ; }
public VideoRestoreQuery ( VkApiClient client , UserActor actor , int videoId ) { super ( client , STR_ , OkResponse . class ) ; accessToken ( actor . getAccessToken ( ) ) ; videoId ( videoId ) ; }
public SelectableConsoleHandler ( OutputStream stream ) { super ( ) ; setOutputStream ( stream ) ; }
private boolean isRTLForced ( Context context ) { return isPrefSet ( context , KEY_FOR_PREFS_FORCERTL , BOOL_ ) ; }
public Transaction fromWireDump ( String dump ) throws IOException { WireFormat . Reader reader = new WireFormat . Reader ( ByteUtils . fromHex ( dump ) ) ; return fromWire ( reader ) ; }
private void addSubComponents ( ) { menuButton . setName ( STR_ ) ; iconButton . setName ( STR_ ) ; maxButton . setName ( STR_ ) ; closeButton . setName ( STR_ ) ; add ( menuButton ) ; add ( iconButton ) ; add ( maxButton ) ; add ( closeButton ) ; }
boolean doCommandDeviceConfigureLocal ( InetAddress inetAddress , String apSsid , String apPassword , String randomToken ) ;
public LVQLLC ( DistanceMetric dm , int iterations , Classifier localClasifier ) { super ( dm , iterations ) ; setLocalClassifier ( localClasifier ) ; }
boolean useReadCache ( String name , IOContext context ) { if ( ! blockCacheReadEnabled ) { return BOOL_ ; } if ( blockCacheFileTypes != null && ! isCachableFile ( name ) ) { return BOOL_ ; } switch ( context . context ) { default : { return BOOL_ ; } } }
public void testCloning ( ) { LogFormat f1 = new LogFormat ( NUM_ , STR_ , BOOL_ ) ; LogFormat f2 = ( LogFormat ) f1 . clone ( ) ; assertTrue ( f1 != f2 ) ; assertTrue ( f1 . getClass ( ) == f2 . getClass ( ) ) ; assertTrue ( f1 . equals ( f2 ) ) ; }
private void adjust_table ( ) { this . table_model = new NetClassTableModel ( ) ; this . table = new NetClassTable ( this . table_model ) ; this . main_panel . remove ( this . center_panel ) ; this . add_table ( ) ; this . pack ( ) ; this . board_frame . refresh_windows ( ) ; }
private String determineCallType ( ) { Object [ ] arguments = ( Object [ ] ) _args . get ( NUM_ ) ; CIMArgument < ? > [ ] argsArray = ( CIMArgument < ? > [ ] ) arguments [ NUM_ ] ; CIMArgument < ? > elementType = argsArray [ NUM_ ] ; return elementType . getValue ( ) . toString ( ) ; }
public LuaTable toTable ( ) { LuaTable result = new LuaTable ( ) ; result . set ( STR_ , new UDData ( getGlobals ( ) , getmetatable ( ) , null ) . append ( mData ) ) ; result . set ( STR_ , LuaValue . valueOf ( mStatusCode ) ) ; result . set ( STR_ , LuaUtil . toTable ( mHeaders ) ) ; result . set ( STR_ , LuaValue . valueOf ( mResponseMsg ) ) ; return result ; }
public void removeSection ( int index ) { Section removed = mSections . remove ( index ) ; mSectionIdMap . remove ( removed . getTypeId ( ) ) ; notifyDataSetChanged ( ) ; }
public RDN ( ASN1ObjectIdentifier oid , ASN1Encodable value ) { ASN1EncodableVector v = new ASN1EncodableVector ( ) ; v . add ( oid ) ; v . add ( value ) ; this . values = new DERSet ( new DERSequence ( v ) ) ; }
public PluginResult . PostResponse invokePostResponseSearchPlugins ( PostResponseSearchOperation searchOperation ) { PluginResult . PostResponse result = null ; for ( DirectoryServerPlugin p : postResponseSearchPlugins ) { if ( isInternalOperation ( searchOperation , p ) ) { continue ; } try { result = p . doPostResponse ( searchOperation ) ; } catch ( Exception e ) { logException ( searchOperation , p , e , ERR_PLUGIN_POST_RESPONSE_PLUGIN_EXCEPTION ) ; } if ( result == null ) { logNullResult ( searchOperation , p , ERR_PLUGIN_POST_RESPONSE_PLUGIN_RETURNED_NULL ) ; } else if ( ! result . continuePluginProcessing ( ) ) { return result ; } } if ( result == null ) { result = PluginResult . PostResponse . continueOperationProcessing ( ) ; } return result ; }
Map < String , String > properties ( String path ) throws IOException ;
public boolean isPortAdvanced ( ) { return BOOL_ ; }
public void removeIndex ( Index index ) { ArrayList < Index > indexes = getIndexes ( ) ; if ( indexes != null ) { remove ( indexes , index ) ; if ( index . getIndexType ( ) . isPrimaryKey ( ) ) { for ( Column col : index . getColumns ( ) ) { col . setPrimaryKey ( BOOL_ ) ; } } } }
void onItemSwipeStarted ( int position ) ;
public void focusLost ( FocusEvent e ) { super . focusLost ( e ) ; getComponent ( ) . repaint ( ) ; }
public static byte [ ] toByteArray ( boolean [ ] array ) { byte [ ] result = new byte [ array . length ] ; for ( int i = NUM_ ; i < array . length ; i ++ ) { result [ i ] = array [ i ] ? ( byte ) NUM_ : ( byte ) NUM_ ; } return result ; }
public Object clone ( ) { try { StringCharacterIterator other = ( StringCharacterIterator ) super . clone ( ) ; return other ; } catch ( CloneNotSupportedException e ) { throw new InternalError ( e ) ; } }
public boolean isEating ( ) { return eating ; }
public TextTitle ( String text ) { this ( text , TextTitle . DEFAULT_FONT , TextTitle . DEFAULT_TEXT_PAINT , Title . DEFAULT_POSITION , Title . DEFAULT_HORIZONTAL_ALIGNMENT , Title . DEFAULT_VERTICAL_ALIGNMENT , Title . DEFAULT_PADDING ) ; }
public void fireStackStatus ( UndoEvent undoEvent , UndoEvent redoEvent ) { ArrayList < UndoStackTrigger > targets = getTriggers ( ) ; if ( triggers == null ) { return ; } for ( UndoStackTrigger target : targets ) { if ( logger . isLoggable ( Level . FINE ) ) { logger . fine ( STR_ + target ) ; } target . updateUndoStackStatus ( undoEvent , redoEvent ) ; } }
default boolean preservesOrder ( Condition op , Constant value , ConstantReflectionProvider constantReflection ) { return preservesOrder ( op ) ; }
public boolean isInitialized ( ) { return value != - NUM_ ; }
boolean onGroupClick ( ExpandableHListView parent , View v , int groupPosition , long id ) ;
public X509Attribute ( String oid , ASN1Encodable value ) { this . attr = new Attribute ( new ASN1ObjectIdentifier ( oid ) , new DERSet ( value ) ) ; }
public void testGetWriteRemaining ( ) { int len = NUM_ ; ByteFifoBuffer instance = new ByteFifoBuffer ( len ) ; int expResult = len ; int result = instance . getWriteRemaining ( ) ; assertEquals ( expResult , result ) ; int w_size = NUM_ ; byte [ ] w_data = getWData ( w_size ) ; instance . write ( w_data , w_size ) ; expResult = len - w_size ; result = instance . getWriteRemaining ( ) ; assertEquals ( expResult , result ) ; }
public static String toEditRate ( BigFraction editRate ) { return String . format ( STR_ , String . valueOf ( editRate . getNumeratorAsLong ( ) ) , String . valueOf ( editRate . getDenominatorAsLong ( ) ) ) ; }
public void Notify ( Object oSender , Object oParams ) { double dProgress = ( ( Double ) oParams ) . doubleValue ( ) ; System . err . print ( STR_ + String . format ( STR_ , dProgress ) + STR_ ) ; }
public boolean isSetKey ( ) { return this . key != null ; }
protected void selectNextIndex ( ) { int s = list . getSelectedIndex ( ) ; if ( ( s + NUM_ ) < list . getModel ( ) . getSize ( ) ) { s += NUM_ ; list . setSelectedIndex ( s ) ; list . ensureIndexIsVisible ( s ) ; } }
public CommandResult execute ( String hostId , RequestBuilder requestBuilder , CommandCallback callback ) throws CommandException ;
public void clearAllSelected ( ) { getSelectHelper ( ) . clearAllSelected ( ) ; }
String keyboardSelectionBackgroundColor ( ) ;
public void addNotify ( ) { synchronized ( getTreeLock ( ) ) { int vAdjustableValue = NUM_ ; int hAdjustableValue = NUM_ ; if ( getComponentCount ( ) > NUM_ ) { vAdjustableValue = vAdjustable . getValue ( ) ; hAdjustableValue = hAdjustable . getValue ( ) ; vAdjustable . setValue ( NUM_ ) ; hAdjustable . setValue ( NUM_ ) ; } if ( peer == null ) peer = getToolkit ( ) . createScrollPane ( this ) ; super . addNotify ( ) ; if ( getComponentCount ( ) > NUM_ ) { vAdjustable . setValue ( vAdjustableValue ) ; hAdjustable . setValue ( hAdjustableValue ) ; } } }
public final ParcelFileDescriptor readFileDescriptor ( ) { FileDescriptor fd = nativeReadFileDescriptor ( mNativePtr ) ; return fd != null ? new ParcelFileDescriptor ( fd ) : null ; }
private void checkDependencies ( ) { if ( basedOnResult != null ) { if ( ! input . isComplete ( ) || ! algs . isComplete ( ) || basedOnResult . get ( ) != algs . getAlgorithmStep ( ) . getResult ( ) ) { basedOnResult = null ; firePanelUpdated ( ) ; } } }
public String [ ] [ ] format ( DoubleMatrix2D matrix ) { String [ ] [ ] strings = new String [ matrix . rows ( ) ] [ matrix . columns ( ) ] ; for ( int row = matrix . rows ( ) ; -- row >= NUM_ ; ) strings [ row ] = formatRow ( matrix . viewRow ( row ) ) ; return strings ; }
public void testPipelinedHashIncomingBindingsBufferThresholdAnalyticMode ( ) throws Exception { final ASTContainer astContainer = new TestHelper ( STR_ , STR_ , STR_ , STR_ ) . runTest ( ) ; final PipelineOp queryPlan = astContainer . getQueryPlan ( ) ; assertPipelinedPlanOrNot ( queryPlan , astContainer , BOOL_ , BOOL_ ) ; }
public Node ( final CharSequence s , final int offset , final int length , final boolean isWord , final int numNodes ) { path = new char [ length ] ; MutableString . getChars ( s , offset , offset + length , path , NUM_ ) ; this . isWord = isWord ; this . numNodes = numNodes ; }
public static IntermediateResponse skipFurtherPluginProcesssing ( boolean sendResponse ) { return new IntermediateResponse ( BOOL_ , BOOL_ , sendResponse , null , null , null , null ) ; }
public DsnShape board_to_dsn_rel ( freert . planar . PlaShape p_board_shape , DsnLayer p_layer ) { DsnShape result ; if ( p_board_shape instanceof ShapeTileBox ) { result = new DsnRectangle ( p_layer , board_to_dsn_rel ( ( ShapeTileBox ) p_board_shape ) ) ; } else if ( p_board_shape instanceof ShapeSegments ) { PlaPointFloat [ ] corners = ( ( ShapeSegments ) p_board_shape ) . corner_approx_arr ( ) ; double [ ] coors = board_to_dsn_rel ( corners ) ; result = new DsnPolygon ( p_layer , coors ) ; } else if ( p_board_shape instanceof freert . planar . ShapeCircle ) { freert . planar . ShapeCircle board_circle = ( freert . planar . ShapeCircle ) p_board_shape ; double diameter = NUM_ * board_to_dsn ( board_circle . radius ) ; double [ ] center_coor = board_to_dsn_rel ( board_circle . center . to_float ( ) ) ; result = new DsnCircle ( p_layer , diameter , center_coor [ NUM_ ] , center_coor [ NUM_ ] ) ; } else { System . out . println ( STR_ ) ; result = null ; } return result ; }
public WidgetProposalComputer ( String text , int offset , Element rootElement , Element parentElement , IJavaProject javaProject ) throws JavaModelException , UiBinderException { super ( javaProject , text , offset , text . length ( ) ) ; this . rootElement = rootElement ; this . parentElement = parentElement ; packageManager . readFromElement ( rootElement ) ; }
public static MoveParticipant [ ] loadMoveParticipants ( RefactoringStatus status , RefactoringProcessor processor , Object element , MoveArguments arguments , String [ ] affectedNatures , SharableParticipants shared ) { return loadMoveParticipants ( status , processor , element , arguments , null , affectedNatures , shared ) ; }
void checkRename ( ) ;
public boolean isFilled ( ) { return filled ; }
public State ( PlotRenderingInfo info ) { super ( info ) ; }
private void teardownSpringServlets ( ) { wc . unregisterServlet ( dispatcherServlet ) ; wc . unregisterServlet ( contextLoaderServlet ) ; }
private void addAttribute ( boolean isThickUnderline , boolean isGray , int start , int length ) { int begin = start ; int end = start + length ; int markupType = kRawText ; if ( isThickUnderline && isGray ) { markupType = kRawText ; } else if ( ! isThickUnderline && isGray ) { markupType = kRawText ; } else if ( isThickUnderline && ! isGray ) { markupType = kSelectedConvertedText ; } else if ( ! isThickUnderline && ! isGray ) { markupType = kConvertedText ; } InputMethodHighlight theHighlight ; switch ( markupType ) { case kSelectedRawText : theHighlight = InputMethodHighlight . SELECTED_RAW_TEXT_HIGHLIGHT ; break ; case kConvertedText : theHighlight = InputMethodHighlight . UNSELECTED_CONVERTED_TEXT_HIGHLIGHT ; break ; case kSelectedConvertedText : theHighlight = InputMethodHighlight . SELECTED_CONVERTED_TEXT_HIGHLIGHT ; break ; case kRawText : default : theHighlight = InputMethodHighlight . UNSELECTED_RAW_TEXT_HIGHLIGHT ; break ; } fCurrentText . addAttribute ( TextAttribute . INPUT_METHOD_HIGHLIGHT , theHighlight , begin , end ) ; }
public boolean isCostingMethod ( ) { return COSTELEMENTTYPE_Material . equals ( getCostElementType ( ) ) && getCostingMethod ( ) != null ; }
public static JavaRDD < List < Writable > > normalize ( Schema schema , JavaRDD < List < Writable > > data , double min , double max , List < String > skipColumns ) { DataFrame frame = DataFrames . toDataFrame ( schema , data ) ; return DataFrames . toRecords ( normalize ( frame , min , max , skipColumns ) ) . getSecond ( ) ; }
private Node svol ( ) { Node node = new Node ( NodeType . SVOL , lineargs ) ; return node ; }
CompositeTransaction createCompositeTransaction ( long timeout ) throws SysException ;
public void notifyDataSetChanged ( ) { mObservable . notifyChanged ( ) ; }
public final void scale ( final double scale ) { this . forEach ( null ) ; }
boolean isStartElement ( XMLEvent event , String elementName ) ;
public Pos3D rotateYaw ( double yaw ) { double yawRadians = Math . toRadians ( yaw ) ; double x = xPos ; double z = zPos ; if ( yaw != NUM_ ) { xPos = x * Math . cos ( yawRadians ) - z * Math . sin ( yawRadians ) ; zPos = z * Math . cos ( yawRadians ) + x * Math . sin ( yawRadians ) ; } return this ; }
public void onLastItemVisible ( ) ;
public WeakReference ( T r , ReferenceQueue < ? super T > q ) { super ( r , q ) ; }
public void add ( KeywordInfo info ) { keywords . put ( info . getKeyword ( ) , info ) ; }
public SWFShapeImpl ( TagWriter writer , boolean hasAlpha , boolean hasStyle ) { this . hasAlpha = hasAlpha ; this . hasStyle = hasStyle ; this . writer = writer ; out = writer . getOutStream ( ) ; }
public TypeChecker ( AbstractTreePrinter translator ) { this . translator = translator ; }
public void resumeEncoding ( ) { this . suspendEncoding = BOOL_ ; }
protected ApplicationContext createApplicationContext ( ) { AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext ( ) ; ApplicationContextHolder . setApplicationContext ( applicationContext ) ; applicationContext . register ( CoreSpringModuleConfig . class , DataBridgeSpringModuleConfig . class , DataBridgeAopSpringModuleConfig . class , DataBridgeEnvSpringModuleConfig . class ) ; applicationContext . refresh ( ) ; return applicationContext ; }
public synchronized void exiting ( String sourceClass , String sourceMethod ) { LogRecord record = new LogRecord ( Level . CONFIG , STR_ ) ; record . setSourceClassName ( sourceClass ) ; record . setSourceMethodName ( sourceMethod ) ; log ( record ) ; }
private void prepareAddParam ( ) { if ( paramsAdded ) sb . append ( STR_ ) ; else { sb . append ( STR_ ) ; paramsAdded = BOOL_ ; } }
public boolean isAuditLogDataAvailable ( ) { return ( model . getAuditLogData ( ) != null && model . getAuditLogData ( ) . length > NUM_ ) ; }
boolean isOpen ( ) ;
public int yylength ( ) ;
public int hashCode ( ) { long bits = Double . doubleToLongBits ( m00 ) ; bits = bits * NUM_ + Double . doubleToLongBits ( m01 ) ; bits = bits * NUM_ + Double . doubleToLongBits ( m02 ) ; bits = bits * NUM_ + Double . doubleToLongBits ( m10 ) ; bits = bits * NUM_ + Double . doubleToLongBits ( m11 ) ; bits = bits * NUM_ + Double . doubleToLongBits ( m12 ) ; return ( ( ( int ) bits ) ^ ( ( int ) ( bits > > NUM_ ) ) ) ; }
public Object runSafely ( Catbert . FastStack stack ) throws Exception { String qual = getString ( stack ) ; return new Long ( MMC . getInstance ( ) . getQualityOverallBitrate ( qual ) ) ; }
public static double toDegrees ( double angrad ) { return NUM_ ; }
public TraceInterval splitParent ( ) { assert splitParent . isSplitParent ( ) : STR_ + this ; return splitParent ; }
public static _Fields findByThriftIdOrThrow ( int fieldId ) { _Fields fields = findByThriftId ( fieldId ) ; if ( fields == null ) throw new IllegalArgumentException ( STR_ + fieldId + STR_ ) ; return fields ; }
public boolean hasNamePrefix ( ) { return super . hasElement ( NamePrefix . KEY ) ; }
public com . sun . identity . liberty . ws . disco . jaxb . ResourceOfferingType createResourceOfferingType ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . liberty . ws . disco . jaxb . impl . ResourceOfferingTypeImpl ( ) ; }
protected DROP_TABLE_IF_EXISTS DROP_TABLE_IF_EXISTS ( String tableName ) { return new DROP_TABLE_IF_EXISTS ( tableName ) ; }
public static void closeQuietly ( final Connection conn ) { if ( conn != null ) { try { conn . close ( ) ; } catch ( final Exception e ) { } } }
public void shutdown ( ) { executor . shutdownNow ( ) ; }
public boolean removePermission ( java . security . acl . Permission perm ) { if ( ! permList . contains ( perm ) ) return BOOL_ ; permList . removeElement ( perm ) ; return BOOL_ ; }
public boolean isSupportingAttributeRoles ( ) { return BOOL_ ; }
public void writeToFile ( Path file , Charset charset , OpenOption ... options ) { markupDocBuilder . writeToFile ( file , charset , options ) ; }
public boolean isDisposeOnClose ( ) { return disposeOnClose ; }
public DaemonClient ( URL url , String username ) { this ( url , username , STR_ ) ; }
public boolean favoriteMessage ( String message , boolean favorite ) { SQLiteDatabase db = getWritableDatabase ( ) ; if ( db != null && message != null ) { db . execSQL ( STR_ + TABLE + STR_ + COL_FAVIRITE + STR_ + ( favorite ? TRUE : FALSE ) + STR_ + COL_DELETED + STR_ + FALSE + STR_ + COL_MESSAGE + STR_ + Utils . makeTextSafeForSQL ( message ) + STR_ ) ; return BOOL_ ; } return BOOL_ ; }
private void addTokenToWorld ( String name , int x , int y ) { final BoardToken token = ( BoardToken ) SingletonRepository . getEntityManager ( ) . getItem ( name ) ; token . setPosition ( x , y ) ; token . setHomePosition ( x , y ) ; token . setTokenMoveListener ( this ) ; getZone ( ) . add ( token , BOOL_ ) ; tokens . add ( token ) ; }
public static Document convertToDocument ( String string , boolean nameSpaceAware ) throws ParserConfigurationException , SAXException , IOException { if ( string == null ) { return null ; } DocumentBuilderFactory dfactory = DocumentBuilderFactory . newInstance ( ) ; dfactory . setNamespaceAware ( nameSpaceAware ) ; dfactory . setValidating ( BOOL_ ) ; dfactory . setIgnoringElementContentWhitespace ( BOOL_ ) ; dfactory . setFeature ( XMLConstants . FEATURE_SECURE_PROCESSING , BOOL_ ) ; DocumentBuilder builder = dfactory . newDocumentBuilder ( ) ; Document doc = builder . parse ( new InputSource ( new StringReader ( string ) ) ) ; return doc ; }
private void showProcessing ( boolean inProgress ) { view . setLoaderVisibility ( inProgress ) ; view . setInputsEnableState ( ! inProgress ) ; }
public boolean removeFooterView ( View v ) { if ( mFooterViewInfos . size ( ) > NUM_ ) { boolean result = BOOL_ ; ListAdapter adapter = getAdapter ( ) ; if ( adapter != null && ( ( HeaderViewGridAdapter ) adapter ) . removeFooter ( v ) ) { result = BOOL_ ; } removeFixedViewInfo ( v , mFooterViewInfos ) ; return result ; } return BOOL_ ; }
public static final byte [ ] toByteArray ( MessageNano msg ) { final byte [ ] result = new byte [ msg . getSerializedSize ( ) ] ; toByteArray ( msg , result , NUM_ , result . length ) ; return result ; }
public static void editGlobalCodeNodeComment ( final SQLProvider provider , final INaviCodeNode codeNode , final Integer commentId , final Integer userId , final String newComment ) throws CouldntSaveDataException { Preconditions . checkNotNull ( provider , STR_ ) ; Preconditions . checkNotNull ( codeNode , STR_ ) ; Preconditions . checkNotNull ( commentId , STR_ ) ; Preconditions . checkNotNull ( userId , STR_ ) ; Preconditions . checkNotNull ( newComment , STR_ ) ; PostgreSQLCommentFunctions . editComment ( provider , commentId , userId , newComment ) ; }
public SelectProcessCommand ( final int packetId , final int pid ) { super ( DebugCommandType . CMD_SELECT_PROCESS , packetId ) ; addArgument ( new DebugMessageIntegerArgument ( pid ) ) ; }
public double gaussianTopPercentile ( double percentile ) { return gaussianPercentile ( NUM_ - percentile ) ; }
StartElement asStartElement ( ) ;
public static int calcTextHeight ( Paint paint , String demoText ) { Rect r = new Rect ( ) ; paint . getTextBounds ( demoText , NUM_ , demoText . length ( ) , r ) ; return r . height ( ) ; }
private Packet createTurnIndexPacket ( ) { return new Packet ( Packet . COMMAND_TURN , new Integer ( game . getTurnIndex ( ) ) ) ; }
public GitlabLabel createLabel ( Serializable projectId , GitlabLabel label ) throws IOException { String name = label . getName ( ) ; String color = label . getColor ( ) ; return createLabel ( projectId , name , color ) ; }
void onComplete ( final SubmitResult result ) ;
public org . smpte_ra . schemas . st2067_2_2013 . CompositionPlaylistType . ContentVersionList buildContentVersionList ( List < org . smpte_ra . schemas . st2067_2_2013 . ContentVersionType > contentVersions ) { org . smpte_ra . schemas . st2067_2_2013 . CompositionPlaylistType . ContentVersionList contentVersionList = new CompositionPlaylistType . ContentVersionList ( ) ; contentVersionList . getContentVersion ( ) . addAll ( contentVersions ) ; return contentVersionList ; }
protected static boolean isWhiteSpace ( final byte byteToCheck ) { switch ( byteToCheck ) { case STR_ : case STR_ : case STR_ : case STR_ : return BOOL_ ; default : return BOOL_ ; } }
public void removeByField2 ( boolean field2 ) ;
public int updateByPrimaryKeySelective ( User record ) throws SQLException { int rows = sqlMapClient . update ( STR_ , record ) ; return rows ; }
final public boolean checkDSClosing ( DistributionManager dm ) { InternalDistributedSystem ds = dm . getSystem ( ) ; return ( ds == null || ds . isDisconnecting ( ) ) ; }
CallerInfo markAsEmergency ( Context context ) { phoneNumber = context . getString ( com . android . internal . R . string . emergency_call_dialog_number_for_display ) ; photoResource = com . android . internal . R . drawable . picture_emergency ; mIsEmergency = BOOL_ ; return this ; }
public Buffer read ( ) throws NetworkException { MediaSample sample = player . readSample ( ) ; if ( sample == null ) { return null ; } buffer . setData ( sample . getData ( ) ) ; buffer . setLength ( sample . getLength ( ) ) ; buffer . setFormat ( format ) ; buffer . setSequenceNumber ( seqNo ++ ) ; if ( sample . isMarker ( ) ) { buffer . setFlags ( Buffer . FLAG_RTP_MARKER ) ; } buffer . setTimestamp ( sample . getTimestamp ( ) ) ; return buffer ; }
private void writeQNameAttribute ( java . lang . String namespace , java . lang . String attName , javax . xml . namespace . QName qname , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { java . lang . String attributeNamespace = qname . getNamespaceURI ( ) ; java . lang . String attributePrefix = xmlWriter . getPrefix ( attributeNamespace ) ; if ( attributePrefix == null ) { attributePrefix = registerPrefix ( xmlWriter , attributeNamespace ) ; } java . lang . String attributeValue ; if ( attributePrefix . trim ( ) . length ( ) > NUM_ ) { attributeValue = attributePrefix + STR_ + qname . getLocalPart ( ) ; } else { attributeValue = qname . getLocalPart ( ) ; } if ( namespace . equals ( STR_ ) ) { xmlWriter . writeAttribute ( attName , attributeValue ) ; } else { registerPrefix ( xmlWriter , namespace ) ; xmlWriter . writeAttribute ( namespace , attName , attributeValue ) ; } }
public Resolution doWithCredential ( String userId , Callable < Resolution > action ) { Credential credential = loadCredential ( userId ) ; if ( credential != null ) { try { return action . call ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } return new RedirectResolution ( computeAuthorizationUrl ( ) ) ; }
public boolean IsOptSet ( int inOptNum ) { if ( this . optionsList == null ) { initialize ( ) ; } return this . optionsList . contains ( ( byte ) inOptNum ) ; }
public Space space ( String expression ) throws ScopeException { UniverseScope scope = new UniverseScope ( this ) ; ExpressionAST expr = scope . parseExpression ( expression ) ; if ( expr instanceof SpaceExpression ) { return ( ( SpaceExpression ) expr ) . getSpace ( ) ; } else { throw new ScopeException ( STR_ ) ; } }
public ImmutableMap < Service , Long > startupTimes ( ) { return state . startupTimes ( ) ; }
void drawImageArea ( Image img , int x , int y , int imageX , int imageY , int imageWidth , int imageHeight ) { img . drawImageArea ( this , nativeGraphics , x , y , imageX , imageY , imageWidth , imageHeight ) ; }
public NodesStatsRequest all ( ) { this . indices . all ( ) ; this . os = BOOL_ ; this . process = BOOL_ ; this . jvm = BOOL_ ; this . threadPool = BOOL_ ; this . fs = BOOL_ ; this . transport = BOOL_ ; this . http = BOOL_ ; this . breaker = BOOL_ ; this . script = BOOL_ ; return this ; }
boolean isCanonical ( ) ;
public static CCAnimation animation ( String name , ArrayList < CCSpriteFrame > frames ) { return new CCAnimation ( name , frames ) ; }
public HttpService ( final HttpProcessor proc , final ConnectionReuseStrategy connStrategy , final HttpResponseFactory responseFactory ) { super ( ) ; setHttpProcessor ( proc ) ; setConnReuseStrategy ( connStrategy ) ; setResponseFactory ( responseFactory ) ; }
public int size ( ) { return num ; }
void removeWarp ( String name ) throws Exception ;
public InfluxDbHttpSender ( final String protocol , final String hostname , final int port , final String database , final String authString , final TimeUnit timePrecision , final int connectTimeout , final int readTimeout , final String measurementPrefix ) throws Exception { super ( database , timePrecision , measurementPrefix ) ; String endpoint = new URL ( protocol , hostname , port , STR_ ) . toString ( ) ; String queryDb = String . format ( STR_ , URLEncoder . encode ( database , STR_ ) ) ; String queryPrecision = String . format ( STR_ , TimeUtils . toTimePrecision ( timePrecision ) ) ; this . url = new URL ( endpoint + STR_ + queryDb + STR_ + queryPrecision ) ; if ( authString != null && ! authString . isEmpty ( ) ) { this . authStringEncoded = Base64 . encodeBase64String ( authString . getBytes ( UTF_8 ) ) ; } else { this . authStringEncoded = STR_ ; } this . connectTimeout = connectTimeout ; this . readTimeout = readTimeout ; }
public BatikTestDocumentBuilderFactory ( DocumentBuilderSetting [ ] settings ) throws DOMTestIncompatibleException { super ( settings ) ; domImpl = null ; SAXParserFactory saxFactory = SAXParserFactory . newInstance ( ) ; try { SAXParser saxParser = saxFactory . newSAXParser ( ) ; xmlReader = saxParser . getXMLReader ( ) ; } catch ( Exception ex ) { throw new DOMTestIncompatibleException ( ex , null ) ; } String xmlReaderClassName = xmlReader . getClass ( ) . getName ( ) ; try { ClassLoader classLoader = ClassLoader . getSystemClassLoader ( ) ; Class domFactoryClass = classLoader . loadClass ( STR_ ) ; Constructor domFactoryConstructor = domFactoryClass . getConstructor ( new Class [ ] { String . class } ) ; domFactory = domFactoryConstructor . newInstance ( new Object [ ] { xmlReaderClassName } ) ; createDocument = domFactoryClass . getMethod ( STR_ , new Class [ ] { String . class , java . io . InputStream . class } ) ; } catch ( InvocationTargetException ex ) { throw new DOMTestIncompatibleException ( ex . getTargetException ( ) , null ) ; } catch ( Exception ex ) { throw new DOMTestIncompatibleException ( ex , null ) ; } }
public UserProjectObject ( int id ) { this . id = id ; }
public MultisigSignatureTransaction ( final DeserializationOptions options , final Deserializer deserializer ) { super ( TransactionTypes . MULTISIG_SIGNATURE , options , deserializer ) ; this . otherTransactionHash = deserializer . readObject ( STR_ , null ) ; this . multisig = Account . readFrom ( deserializer , STR_ ) ; }
public void startNewStream ( Reader reader , boolean isInternalEntity ) { StackedReader oldReader = this . currentReader ; this . readers . push ( this . currentReader ) ; this . currentReader = new StackedReader ( ) ; if ( isInternalEntity ) { this . currentReader . lineReader = null ; this . currentReader . pbReader = new PushbackReader ( reader , NUM_ ) ; } else { this . currentReader . lineReader = new LineNumberReader ( reader ) ; this . currentReader . pbReader = new PushbackReader ( this . currentReader . lineReader , NUM_ ) ; } this . currentReader . systemId = oldReader . systemId ; this . currentReader . publicId = oldReader . publicId ; }
public ProtocolEncoderException ( Throwable cause ) { super ( cause ) ; }
public void refresh ( ) { graph . refresh ( ) ; subHandler . refresh ( ) ; }
public abstract int maxZoomLevel ( ) ;
public void purgeStateTimer ( ) ;
final void cancel ( ) { mIsCancelled . set ( BOOL_ ) ; }
public static void dTraceWhole ( ) { if ( LOGGING_LEVEL_FILTER >= ERRORS_WARNINGS_INFO_DEBUG ) { Throwable t = new Throwable ( ) ; StackTraceElement [ ] elements = t . getStackTrace ( ) ; StringBuilder builder = new StringBuilder ( ) ; for ( StackTraceElement e : elements ) { builder . append ( STR_ ) ; builder . append ( e ) ; } Log . d ( XLog . class . getSimpleName ( ) , getTrace ( ) . trace + builder . toString ( ) ) ; } }
private boolean isSameBinaryType ( MethodType mt1 , MethodType mt2 ) { List < Type > types1 = types . erasure ( mt1 . getParameterTypes ( ) ) . prepend ( types . erasure ( mt1 . getReturnType ( ) ) ) ; List < Type > types2 = mt2 . getParameterTypes ( ) . prepend ( mt2 . getReturnType ( ) ) ; while ( ! types1 . isEmpty ( ) && ! types2 . isEmpty ( ) ) { if ( types1 . head . tsym != types2 . head . tsym ) return BOOL_ ; types1 = types1 . tail ; types2 = types2 . tail ; } return types1 . isEmpty ( ) && types2 . isEmpty ( ) ; }
public List < ParallelSuffixArrayEntry > lookupSource ( String sourceQuery , int numResults ) { return lookupSource ( sourceQuery , numResults , BOOL_ ) ; }
public static double uniform ( Random rng , double min , double max ) { return rng . nextDouble ( ) * ( max - min ) + min ; }
public AcceptEncodingHeader createAcceptEncodingHeader ( String encoding ) throws ParseException { if ( encoding == null ) throw new NullPointerException ( STR_ ) ; AcceptEncoding acceptEncoding = new AcceptEncoding ( ) ; acceptEncoding . setEncoding ( encoding ) ; return acceptEncoding ; }
public boolean checkCrc ( ) throws IOException { if ( computedCrc == - NUM_ ) computeCrc ( ) ; return computedCrc == crc ; }
void onProgressUpdate ( String imageUri , View view , int current , int total ) ;
public static PcMaxLocalRunner serializableInstance ( ) { return new PcMaxLocalRunner ( Dag . serializableInstance ( ) , new Parameters ( ) ) ; }
boolean isHosted ( ) ;
public void removeItemChangedListener ( ItemChangedListener listener ) { itemChangedListeners . remove ( listener ) ; }
protected static Vector < FieldContainer > findFields ( AttributedCharacterIterator iterator ) { Vector < FieldContainer > result = new Vector < FieldContainer > ( ) ; while ( iterator . getIndex ( ) != iterator . getEndIndex ( ) ) { int start = iterator . getRunStart ( ) ; int end = iterator . getRunLimit ( ) ; Iterator < Attribute > it = iterator . getAttributes ( ) . keySet ( ) . iterator ( ) ; while ( it . hasNext ( ) ) { AttributedCharacterIterator . Attribute attribute = it . next ( ) ; Object value = iterator . getAttribute ( attribute ) ; result . add ( new FieldContainer ( start , end , attribute , value ) ) ; } iterator . setIndex ( end ) ; } return result ; }
private static boolean isTwoBytesSequence ( byte b ) { return - NUM_ <= b && b <= - NUM_ ; }
public void insert ( Key x ) { if ( n == pq . length - NUM_ ) resize ( NUM_ * pq . length ) ; pq [ ++ n ] = x ; swim ( n ) ; assert isMinHeap ( ) ; }
static int decodeMin ( byte [ ] b , int dimension ) { int offset = dimension * BYTES ; return NumericUtils . sortableBytesToInt ( b , offset ) ; }
Object executeGremlinScript ( String query , boolean isPath ) throws ScriptException ;
public abstract int readInt ( ) throws IOException ;
private void printModifiers ( List < IExtendedModifier > ext ) { for ( Iterator < IExtendedModifier > it = ext . iterator ( ) ; it . hasNext ( ) ; ) { ASTNode p = ( ASTNode ) it . next ( ) ; p . accept ( this ) ; this . fBuffer . append ( STR_ ) ; } }
protected void onTitleRightIconClick ( View rightIcon ) { }
public GoogleUserCredentialProvider ( OkHttpClient client , Time time ) throws LoginFailedException , RemoteServerException { this . time = time ; this . client = client ; }
public ForwardingDrawable ( Drawable drawable ) { mCurrentDelegate = drawable ; DrawableUtils . setCallbacks ( mCurrentDelegate , this , this ) ; }
protected ASN1Sequence ( ASN1Encodable [ ] array ) { for ( int i = NUM_ ; i != array . length ; i ++ ) { seq . addElement ( array [ i ] ) ; } }
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( elementassociatedattribute . class , args ) ; }
public StringLexerSource ( String string , boolean ppvalid ) throws IOException { super ( new StringReader ( string ) , ppvalid ) ; }
private String next ( ) { String current = matcher . group ( EXPR_TOKEN_GROUP ) ; matched = matcher . find ( ) ; return current ; }
public String ( byte [ ] data , Charset charset ) { this ( data , NUM_ , data . length , charset ) ; }
public File createNewFolder ( File containingDir ) throws IOException { if ( containingDir == null ) { throw new IOException ( STR_ ) ; } File newFolder ; newFolder = createFileObject ( containingDir , newFolderString ) ; int i = NUM_ ; while ( newFolder . exists ( ) && i < NUM_ ) { newFolder = createFileObject ( containingDir , MessageFormat . format ( newFolderNextString , new Integer ( i ) ) ) ; i ++ ; } if ( newFolder . exists ( ) ) { throw new IOException ( STR_ + newFolder . getAbsolutePath ( ) ) ; } else { newFolder . mkdirs ( ) ; } return newFolder ; }
static private void logDetailRows ( final IRunningQuery q , final Map < Integer , QueueStats > queueStats , final StringBuilder sb ) { final Integer [ ] order = BOpUtility . getEvaluationOrder ( q . getQuery ( ) ) ; int orderIndex = NUM_ ; for ( Integer bopId : order ) { sb . append ( getTableRow ( q , orderIndex , bopId , BOOL_ , queueStats ) ) ; orderIndex ++ ; } }
public Key ( Row parent ) { keyboard = parent . parent ; height = parent . defaultHeight ; width = Math . round ( parent . defaultWidth ) ; realWidth = parent . defaultWidth ; gap = Math . round ( parent . defaultHorizontalGap ) ; realGap = parent . defaultHorizontalGap ; }
void onUploadFinished ( SpeedTestReport report ) ;
private static void validatePricedProductRole ( VOPricedRole pricedProductRole ) throws ValidationException { BLValidator . isNonNegativeNumber ( FIELD_NAME_PRICE_PER_USER , pricedProductRole . getPricePerUser ( ) ) ; BLValidator . isValidPriceScale ( FIELD_NAME_PRICE_PER_USER , pricedProductRole . getPricePerUser ( ) ) ; }
public static void load ( Class < ? > restrictionClass ) { if ( MASTER_CACHE == null ) { initialize ( ) ; } if ( MASTER_CACHE . isEmpty ( ) ) { return ; } Iterator < Class < ? > > iter = MASTER_CACHE . iterator ( ) ; while ( iter . hasNext ( ) ) { Class < ? > clazz = iter . next ( ) ; if ( ! restrictionClass . isAssignableFrom ( clazz ) ) { continue ; } if ( Modifier . isInterface ( clazz . getModifiers ( ) ) || Modifier . isAbstract ( clazz . getModifiers ( ) ) || Modifier . isPrivate ( clazz . getModifiers ( ) ) ) { continue ; } boolean instantiable = BOOL_ ; try { instantiable = clazz . getConstructor ( ) != null ; } catch ( Exception | Error e ) { } try { instantiable = instantiable || ClassGenericsUtil . getParameterizer ( clazz ) != null ; } catch ( Exception | Error e ) { } if ( ! instantiable ) { continue ; } ELKIServiceRegistry . register ( restrictionClass , clazz ) ; } }
public UpdateResponse add ( SolrInputDocument doc ) throws SolrServerException , IOException { return add ( null , doc ) ; }
public boolean isDescription ( ) ;
public boolean isDeviceRooted ( ) { return checkRootBySuAccess ( ) || checkRootBySuperUserApk ( ) || checkRootByBuildTags ( ) ; }
public ClusterEditor ( Clusters clusters , List < String > varNames ) { if ( clusters == null ) { throw new NullPointerException ( ) ; } if ( varNames == null ) { throw new NullPointerException ( ) ; } this . clusters = clusters ; this . varNames = varNames ; setLayout ( new BorderLayout ( ) ) ; add ( clusterDisplay ( ) , BorderLayout . CENTER ) ; if ( clusters . getNumClusters ( ) == NUM_ ) { setNumDisplayClusters ( NUM_ ) ; clusters . setNumClusters ( NUM_ ) ; } }
public int count ( ) { return count ; }
protected void testAssertMappedValues ( double [ ] data , Object [ ] [ ] map , Double p , Double tolerance , NaNStrategy nanStrategy ) { for ( Object [ ] o : map ) { Percentile . EstimationType e = ( Percentile . EstimationType ) o [ NUM_ ] ; double expected = ( Double ) o [ NUM_ ] ; try { double result = new Percentile ( p ) . withEstimationType ( e ) . withNaNStrategy ( nanStrategy ) . evaluate ( data ) ; assertEquals ( STR_ + e + STR_ + expected + STR_ + result , expected , result , tolerance ) ; } catch ( Exception ex ) { fail ( STR_ + e + STR_ + ex . getLocalizedMessage ( ) ) ; } } }
public static void registerDownloadFileChangeListener ( OnDownloadFileChangeListener onDownloadFileChangeListener , DownloadFileChangeConfiguration downloadFileChangeConfiguration ) { getFileDownloadManager ( ) . registerDownloadFileChangeListener ( onDownloadFileChangeListener , downloadFileChangeConfiguration ) ; }
public void onClick ( View v ) { if ( v == mPopupView ) { switchViews ( BOOL_ ) ; } }
private void _writeVersion ( byte [ ] buffer ) { buffer [ INDEX_VERSION ] = NTP_MODE | ( NTP_VERSION << NUM_ ) ; }
protected abstract void notifyListener ( IDebugEventListener listener , T reply ) ;
private static Properties configuration ( final String mes , final File homePath ) { ConcurrentLog . config ( mes , STR_ + homePath . toString ( ) ) ; final File dataFolder = new File ( homePath , STR_ ) ; if ( ! ( dataFolder . exists ( ) ) ) { ConcurrentLog . severe ( mes , STR_ ) ; System . exit ( - NUM_ ) ; } final Properties config = new Properties ( ) ; FileInputStream fis = null ; try { fis = new FileInputStream ( new File ( homePath , STR_ ) ) ; config . load ( fis ) ; } catch ( final FileNotFoundException e ) { ConcurrentLog . severe ( mes , STR_ ) ; System . exit ( - NUM_ ) ; } catch ( final IOException e ) { ConcurrentLog . severe ( mes , STR_ ) ; System . exit ( - NUM_ ) ; } finally { if ( fis != null ) { try { fis . close ( ) ; } catch ( final IOException e ) { ConcurrentLog . logException ( e ) ; } } } return config ; }
public boolean isObfuscated ( ) { return ( boolean ) map . getOrDefault ( STR_ , BOOL_ ) ; }
public void addNetMapListener ( NetMapListener nml ) { listenerSupport . addNetMapListener ( nml ) ; }
void onClickGankItemNormal ( Gank gank , View view ) ;
public static Classification private_ ( ) { return create ( PRIVATE ) ; }
final public void assertEquals ( byte [ ] [ ] expected , byte [ ] [ ] actual ) { assertEquals ( null , expected , actual ) ; }
public void onTimedTextUpdate ( byte [ ] pixels , int width , int height ) ;
public static void manageCallStateFocus ( String aCallState ) { switch ( aCallState ) { case IMXCall . CALL_STATE_CONNECTED : requestAudioFocus ( ) ; break ; case IMXCall . CALL_STATE_ENDED : releaseAudioFocus ( ) ; break ; default : break ; } }
private void letPageHandleNavKey ( int keyCode , long time , boolean down , int metaState ) { int keyEventAction ; if ( down ) { keyEventAction = KeyEvent . ACTION_DOWN ; } else { keyEventAction = KeyEvent . ACTION_UP ; } KeyEvent event = new KeyEvent ( time , time , keyEventAction , keyCode , NUM_ , ( metaState & KeyEvent . META_SHIFT_ON ) | ( metaState & KeyEvent . META_ALT_ON ) | ( metaState & KeyEvent . META_SYM_ON ) , KeyCharacterMap . VIRTUAL_KEYBOARD , NUM_ , NUM_ ) ; sendKeyEvent ( event ) ; }
public void optimize ( Environment env ) { do { optimize ( env , first ) ; } while ( eliminate ( ) && env . opt ( ) ) ; }
SubMap ( ConcurrentSkipListMap < K , V > map , K fromKey , boolean fromInclusive , K toKey , boolean toInclusive , boolean isDescending ) { if ( fromKey != null && toKey != null && map . compare ( fromKey , toKey ) > NUM_ ) throw new IllegalArgumentException ( STR_ ) ; this . m = map ; this . lo = fromKey ; this . hi = toKey ; this . loInclusive = fromInclusive ; this . hiInclusive = toInclusive ; this . isDescending = isDescending ; }
SELF value ( String s ) ;
public void clear ( ) { oredCriteria . clear ( ) ; orderByClause = null ; distinct = BOOL_ ; }
public ByteStringBuilder appendLong ( long l ) { ensureAdditionalCapacity ( NUM_ ) ; for ( int i = length + NUM_ ; i >= length ; i -- ) { buffer [ i ] = ( byte ) l ; l >>>= NUM_ ; } length += NUM_ ; return this ; }
public void resetReporting ( boolean enabled ) { if ( mRedBoxHandler == null || ! mRedBoxHandler . isReportEnabled ( ) ) { return ; } isReporting = BOOL_ ; Assertions . assertNotNull ( mReportTextView ) . setVisibility ( View . GONE ) ; Assertions . assertNotNull ( mLoadingIndicator ) . setVisibility ( View . GONE ) ; Assertions . assertNotNull ( mLineSeparator ) . setVisibility ( View . GONE ) ; Assertions . assertNotNull ( mReportButton ) . setVisibility ( enabled ? View . VISIBLE : View . GONE ) ; Assertions . assertNotNull ( mReportButton ) . setEnabled ( BOOL_ ) ; }
public String wrap ( String path ) { return uriPrefix + path ; }
private native void notifyShowIDE ( ) ;
private void positionAndSizeAsIcon ( ) { if ( ! ( getParent ( ) instanceof DragLayer ) ) return ; setScaleX ( NUM_ ) ; setScaleY ( NUM_ ) ; setAlpha ( NUM_ ) ; mState = STATE_SMALL ; }
Set < String > vertexMatchPatternLabels ( ) ;
public static List < Episode > returnNewEpisodes ( Context context , Channel channel , List < Episode > newEpisodeList ) { List < Episode > newEpisodes = new ArrayList < > ( ) ; List < Episode > existingEpisodeList = getEpisodesByChannel ( context , channel ) ; Map < String , Episode > existingEpisodeMap = new ArrayMap < > ( existingEpisodeList . size ( ) ) ; for ( int i = NUM_ ; i < existingEpisodeList . size ( ) ; i ++ ) { Episode episode = existingEpisodeList . get ( i ) ; existingEpisodeMap . put ( episode . getGeneratedId ( ) , episode ) ; } for ( int i = NUM_ ; i < newEpisodeList . size ( ) ; i ++ ) { Episode episode = newEpisodeList . get ( i ) ; if ( ! existingEpisodeMap . containsKey ( episode . getGeneratedId ( ) ) ) { newEpisodes . add ( episode ) ; } } return newEpisodes ; }
public CEventListTable ( final ITraceListProvider traceProvider ) { super ( new CEventListTableModel ( traceProvider ) , new CEventListTableHelp ( ) ) ; m_traceProvider = Preconditions . checkNotNull ( traceProvider , STR_ ) ; getSelectionModel ( ) . setSelectionMode ( ListSelectionModel . MULTIPLE_INTERVAL_SELECTION ) ; final InputMap windowImap = getInputMap ( JComponent . WHEN_FOCUSED ) ; windowImap . put ( HotKeys . SEARCH_HK . getKeyStroke ( ) , STR_ ) ; getActionMap ( ) . put ( STR_ , CActionProxy . proxy ( new SearchAction ( ) ) ) ; windowImap . put ( HotKeys . DELETE_HK . getKeyStroke ( ) , STR_ ) ; getActionMap ( ) . put ( STR_ , CActionProxy . proxy ( new DeleteAction ( ) ) ) ; }
private double sinusProduct ( int start , int end , double [ ] alpha ) { double result = NUM_ ; for ( int j = start ; j < end ; j ++ ) { result *= Math . sin ( alpha [ j ] ) ; } return result ; }
public static TypeKind fromPrimitiveOrVoidTypeChar ( char ch ) { switch ( ch ) { case STR_ : return TypeKind . BOOLEAN ; case STR_ : return TypeKind . CHAR ; case STR_ : return TypeKind . FLOAT ; case STR_ : return TypeKind . DOUBLE ; case STR_ : return TypeKind . BYTE ; case STR_ : return TypeKind . SHORT ; case STR_ : return TypeKind . INT ; case STR_ : return TypeKind . LONG ; case STR_ : return TypeKind . VOID ; } throw new IllegalArgumentException ( STR_ + ch ) ; }
public void logOut ( ) { checkInitialized ( ) ; final SessionManager < TwitterSession > sessionManager = getSessionManager ( ) ; if ( sessionManager != null ) { sessionManager . clearActiveSession ( ) ; } }
public abstract Object toFile ( TimedTextObject tto ) ;
public int size ( ) { return NUM_ ; }
public void addCommandToRightBar ( Command cmd ) { checkIfInitialized ( ) ; cmd . putClientProperty ( STR_ , Boolean . TRUE ) ; sideMenu . addCommand ( cmd , NUM_ ) ; }
private BusinessObjectDefinitionEntity createBusinessObjectDefinitionEntity ( BusinessObjectDefinitionCreateRequest request , NamespaceEntity namespaceEntity , DataProviderEntity dataProviderEntity ) { BusinessObjectDefinitionEntity businessObjectDefinitionEntity = new BusinessObjectDefinitionEntity ( ) ; businessObjectDefinitionEntity . setNamespace ( namespaceEntity ) ; businessObjectDefinitionEntity . setName ( request . getBusinessObjectDefinitionName ( ) ) ; businessObjectDefinitionEntity . setDescription ( request . getDescription ( ) ) ; businessObjectDefinitionEntity . setDataProvider ( dataProviderEntity ) ; businessObjectDefinitionEntity . setDisplayName ( request . getDisplayName ( ) ) ; if ( ! CollectionUtils . isEmpty ( request . getAttributes ( ) ) ) { List < BusinessObjectDefinitionAttributeEntity > attributeEntities = new ArrayList < > ( ) ; businessObjectDefinitionEntity . setAttributes ( attributeEntities ) ; for ( Attribute attribute : request . getAttributes ( ) ) { BusinessObjectDefinitionAttributeEntity attributeEntity = new BusinessObjectDefinitionAttributeEntity ( ) ; attributeEntities . add ( attributeEntity ) ; attributeEntity . setBusinessObjectDefinition ( businessObjectDefinitionEntity ) ; attributeEntity . setName ( attribute . getName ( ) ) ; attributeEntity . setValue ( attribute . getValue ( ) ) ; } } return businessObjectDefinitionDao . saveAndRefresh ( businessObjectDefinitionEntity ) ; }
SolrInputField field ( String name , float boost , Object ... values ) { SolrInputField f = new SolrInputField ( name ) ; for ( Object v : values ) { f . addValue ( v , NUM_ ) ; } f . setBoost ( boost ) ; return f ; }
private void addQuadCurveArea ( QuadCurve2D curve ) { if ( curve . getFlatness ( ) < CURVE_SENSITIVITY ) { appendShapeOutline ( new Line2D . Double ( curve . getP1 ( ) , curve . getP2 ( ) ) ) ; } else { QuadCurve2D leftSubcurve = new QuadCurve2D . Double ( ) ; QuadCurve2D rightSubcurve = new QuadCurve2D . Double ( ) ; curve . subdivide ( leftSubcurve , rightSubcurve ) ; addQuadCurveArea ( leftSubcurve ) ; addQuadCurveArea ( rightSubcurve ) ; } }
public Configurator ( Provider < TunnelRequestService > tunnelRequestServiceProvider ) { this . tunnelRequestServiceProvider = tunnelRequestServiceProvider ; }
public ListenerExecutorPair ( RecordCompleteListener listener , Executor executor ) { this . listener = listener ; this . executor = executor ; }
void execute ( Context context ) ;
public ResponseProviderEditViewBean ( ) { super ( STR_ , DEFAULT_DISPLAY_URL ) ; }
public boolean isAssignableFrom ( EntryClass cls ) { for ( EntryClass sup = cls ; sup != null ; sup = sup . superclass ) { if ( hash == sup . hash ) return BOOL_ ; } return BOOL_ ; }
public EventBean adapterForTypedWrapper ( EventBean theEvent , Map < String , Object > properties , EventType eventType ) ;
Type sigToType ( byte [ ] sig , int offset , int len ) { signature = sig ; sigp = offset ; siglimit = offset + len ; return sigToType ( ) ; }
public MetaSentence ( Session s , String sSentence , SerializerWrite serwrite , SerializerRead serread ) { super ( s ) ; m_sSentence = sSentence ; m_SerWrite = serwrite ; m_SerRead = serread ; }
public ConnectionClosedException ( final String message ) { super ( message ) ; }
public static void sort ( Comparable [ ] objects ) { if ( objects . length > NUM_ ) quickSort ( objects , NUM_ , objects . length - NUM_ ) ; }
public JsonArray ( ) { values = new ArrayList < JsonValue > ( ) ; }
public static void assertNotEqual ( int expected , int actual , String errorMessage ) { if ( verbose ) { log ( STR_ + expected + STR_ + actual + STR_ + errorMessage + STR_ ) ; } assertBool ( expected != actual , errorMessage ) ; }
private void updateProgress ( int progress ) { if ( myHost != null && progress != previousProgress ) { myHost . updateProgress ( progress ) ; } previousProgress = progress ; }
public void placeItem ( ItemStack stack , BlockPos pos , World world , boolean centreItem ) { double offset = ( centreItem ) ? NUM_ : NUM_ ; EntityItem entityitem = new EntityItem ( world , ( double ) pos . getX ( ) + offset , ( double ) pos . getY ( ) + offset , ( double ) pos . getZ ( ) + offset , stack ) ; entityitem . motionX = NUM_ ; entityitem . motionY = NUM_ ; entityitem . motionZ = NUM_ ; entityitem . setDefaultPickupDelay ( ) ; world . spawnEntityInWorld ( entityitem ) ; }
public void pick ( DrawContext dc , java . awt . Point pickPoint ) { if ( dc == null ) { String message = Logging . getMessage ( STR_ ) ; Logging . logger ( ) . severe ( message ) ; throw new IllegalArgumentException ( message ) ; } if ( ! this . getAttributes ( ) . isVisible ( ) ) return ; if ( ! this . isPickEnabled ( ) ) return ; dc . getAnnotationRenderer ( ) . pick ( dc , this , null , pickPoint , null ) ; }
public static int countByUUID_G ( java . lang . String uuid , long groupId ) { return getPersistence ( ) . countByUUID_G ( uuid , groupId ) ; }
public static < U , W > UnsafeReferenceFieldUpdater < U , W > newReferenceFieldUpdater ( Class < ? super U > tClass , String fieldName ) { try { return new UnsafeReferenceFieldUpdater < > ( JUnsafe . getUnsafe ( ) , tClass , fieldName ) ; } catch ( Throwable t ) { JUnsafe . throwException ( t ) ; } return null ; }
public static ConstraintHandle constraintHandle ( ConstraintAnchor anchor ) { if ( anchor == null ) { return null ; } ConstraintWidget widget = anchor . getOwner ( ) ; if ( widget == null ) { return null ; } if ( widget . getCompanionWidget ( ) == null ) { return null ; } WidgetCompanion widgetCompanion = ( WidgetCompanion ) widget . getCompanionWidget ( ) ; WidgetInteractionTargets widgetInteraction = widgetCompanion . getWidgetInteractionTargets ( ) ; return widgetInteraction . getConstraintHandle ( anchor ) ; }
native long openClient ( long fd , String serverName , String offeredProtocols ) ;
public ArrayDrawable ( Drawable [ ] layers ) { Preconditions . checkNotNull ( layers ) ; mLayers = layers ; for ( int i = NUM_ ; i < mLayers . length ; i ++ ) { DrawableUtils . setCallbacks ( mLayers [ i ] , this , this ) ; } mDrawableParents = new DrawableParent [ mLayers . length ] ; }
public static boolean isNumericString ( String str ) { for ( int i = str . length ( ) - NUM_ ; i >= NUM_ ; i -- ) { char ch = str . charAt ( i ) ; if ( ch > NUM_ ) { return BOOL_ ; } if ( ( STR_ <= ch && ch <= STR_ ) || ch == STR_ ) { continue ; } return BOOL_ ; } return BOOL_ ; }
public Srinivas ( ) { super ( NUM_ , NUM_ , NUM_ ) ; }
public void releaseScan ( ) { release ( ) ; }
public GridLongList copyWithout ( GridLongList l ) { assert l != null ; if ( idx == NUM_ ) return new GridLongList ( ) ; if ( l . idx == NUM_ ) return new GridLongList ( Arrays . copyOf ( arr , idx ) ) ; long [ ] newArr = Arrays . copyOf ( arr , idx ) ; int newIdx = idx ; for ( int i = NUM_ ; i < l . size ( ) ; i ++ ) { long rmVal = l . get ( i ) ; for ( int j = NUM_ ; j < newIdx ; j ++ ) { if ( newArr [ j ] == rmVal ) { while ( newIdx > NUM_ && newArr [ newIdx - NUM_ ] == rmVal ) newIdx -- ; if ( newIdx > NUM_ ) { newArr [ j ] = newArr [ newIdx - NUM_ ] ; newIdx -- ; } } } } return new GridLongList ( newArr , newIdx ) ; }
public SVGPath smoothQuadTo ( double x , double y ) { append ( SVGConstants . PATH_SMOOTH_QUAD_TO , x , y ) ; return this ; }
public double [ ] [ ] toDoubleArray ( ) ;
public SynchronizedPool ( int maxPoolSize ) { super ( maxPoolSize ) ; }
protected ExifTag addTag ( ExifTag tag ) { if ( tag != null ) { int ifd = tag . getIfd ( ) ; return addTag ( tag , ifd ) ; } return null ; }
private double binomialCoefficientLn ( final int n , final int k ) { QL . require ( n >= NUM_ , STR_ ) ; QL . require ( k >= NUM_ , STR_ ) ; QL . require ( n >= k , STR_ ) ; return factorial . ln ( n ) - factorial . ln ( k ) - factorial . ln ( n - k ) ; }
public void runTest ( ) throws Throwable { Document doc ; Element element ; Attr attribute ; String attrName ; String attrValue ; doc = ( Document ) load ( STR_ , BOOL_ ) ; element = doc . createElementNS ( STR_ , STR_ ) ; element . setAttributeNS ( STR_ , STR_ , STR_ ) ; attribute = element . getAttributeNodeNS ( STR_ , STR_ ) ; attrName = attribute . getNodeName ( ) ; attrValue = attribute . getNodeValue ( ) ; assertEquals ( STR_ , STR_ , attrName ) ; assertEquals ( STR_ , STR_ , attrValue ) ; }
public void characters ( char ch [ ] , int start , int length ) throws SAXException { if ( DEBUG ) System . out . println ( STR_ + start + STR_ + length ) ; if ( m_contentHandler != null ) { m_contentHandler . characters ( ch , start , length ) ; } }
public static Shape generatePolygon ( int sides , int outsideRadius , boolean normalize ) { return generatePolygon ( sides , outsideRadius , NUM_ , normalize ) ; }
private void calculatePokeSpam ( int candyPlayerHas , int candyEvolutionCost , int bonus ) { totalEvolvable = ( int ) Math . floor ( ( candyPlayerHas - bonus ) / ( candyEvolutionCost - bonus ) ) ; evolveRows = ( int ) Math . floor ( totalEvolvable / HOW_MANY_POKEMON_WE_HAVE_PER_ROW ) ; evolveExtra = ( int ) Math . floor ( totalEvolvable % HOW_MANY_POKEMON_WE_HAVE_PER_ROW ) ; amountXP = NUM_ * totalEvolvable ; amountXPWithLuckyEgg = amountXP * NUM_ ; }
protected abstract boolean validateModel ( ) ;
public boolean isLast ( char c ) { return str . charAt ( str . length ( ) - NUM_ ) == c ; }
private void increaseCapacity ( ) { if ( _capacity < C1 ) { _capacity <<= NUM_ ; char [ ] tmp = new char [ _capacity ] ; System . arraycopy ( _low , NUM_ , tmp , NUM_ , _length ) ; _low = tmp ; _high [ NUM_ ] = tmp ; } else { int j = _capacity > > B1 ; if ( j >= _high . length ) { char [ ] [ ] tmp = new char [ _high . length * NUM_ ] [ ] ; System . arraycopy ( _high , NUM_ , tmp , NUM_ , _high . length ) ; _high = tmp ; } _high [ j ] = new char [ C1 ] ; _capacity += C1 ; } }
public static < T > Predicate < T > memoizePredicate ( Predicate < T > p ) { Function < T , Boolean > memoised = memoizeFunction ( ( Function1 < T , Boolean > ) null ) ; return null ; }
public void bind ( int tcpPort , int udpPort ) throws IOException { bind ( new InetSocketAddress ( tcpPort ) , new InetSocketAddress ( udpPort ) ) ; }
public void mousePressed ( MouseEvent e ) { if ( SwingUtilities . isLeftMouseButton ( e ) || ( SwingUtilities . isRightMouseButton ( e ) && ! model . isPressed ( ) ) ) { buttonOn ( e ) ; } else if ( SwingUtilities . isRightMouseButton ( e ) && model . isPressed ( ) ) { buttonOff ( e ) ; } }
public XRTreeFrag ( Expression expr ) { super ( expr ) ; }
public SFFS ( int solSize , boolean b0 , boolean logSol ) { interceptTerm = b0 ; logSolution = logSol ; solutionSize = solSize ; }
final int computeThreshold ( ) { int n = fence - origin ; int p = ex . getParallelism ( ) ; return threshold = ( p > NUM_ ) ? ( NUM_ + n / ( p << NUM_ ) ) : n ; }
private void removeZone ( WBEMClient client , String fabricId , String fabricWwn , Zone zone ) throws WBEMException { _log . info ( STR_ + zone . getName ( ) + STR_ + fabricId == null ? fabricWwn : fabricId ) ; _smisHelper . removeZone ( client , zone ) ; }
void addPropertyChangeListener ( PropertyChangeListener listener ) ;
public static _Fields findByName ( String name ) { return byName . get ( name ) ; }
public static void updateCommit ( CommitUpdateCommand cmd , SolrParams params ) { if ( params == null ) return ; cmd . openSearcher = params . getBool ( UpdateParams . OPEN_SEARCHER , cmd . openSearcher ) ; cmd . waitSearcher = params . getBool ( UpdateParams . WAIT_SEARCHER , cmd . waitSearcher ) ; cmd . softCommit = params . getBool ( UpdateParams . SOFT_COMMIT , cmd . softCommit ) ; cmd . expungeDeletes = params . getBool ( UpdateParams . EXPUNGE_DELETES , cmd . expungeDeletes ) ; cmd . maxOptimizeSegments = params . getInt ( UpdateParams . MAX_OPTIMIZE_SEGMENTS , cmd . maxOptimizeSegments ) ; cmd . prepareCommit = params . getBool ( UpdateParams . PREPARE_COMMIT , cmd . prepareCommit ) ; }
private void mark ( ) { theLastColumn = theCurrentColumn ; theLastLine = theCurrentLine ; }
public static List < IUser > loadUsers ( final SQLProvider provider ) throws CouldntLoadDataException { Preconditions . checkNotNull ( provider , STR_ ) ; final CConnection connection = provider . getConnection ( ) ; final String query = STR_ + CTableNames . USER_TABLE ; final ArrayList < IUser > users = new ArrayList < > ( ) ; try ( ResultSet resultSet = connection . executeQuery ( query , BOOL_ ) ) { while ( resultSet . next ( ) ) { final int userId = resultSet . getInt ( NUM_ ) ; final String userName = resultSet . getString ( NUM_ ) ; users . add ( new CUser ( userId , userName ) ) ; } } catch ( final SQLException exception ) { throw new CouldntLoadDataException ( exception ) ; } return users ; }
R writeLong ( long offset , long i ) throws BufferOverflowException ;
public boolean isCritical ( ) { return BOOL_ ; }
public ProxyObjectOutputStream ( OutputStream out ) throws IOException { super ( out ) ; }
public void add ( Cycle cycle ) { currentCycle = cycle ; DOLLARS_PER_STEP = getDollarsPerStep ( ) ; STEP_AMOUNT = getStepAmount ( ) ; MAX_AMOUNT = getMaxAmount ( ) ; notifyBinderDataSetChanged ( ) ; }
public BatchedImageRequest ( Request < ? > request , ImageContainer container ) { mRequest = request ; mContainers . add ( container ) ; }
protected abstract F onCreateSectionFooterViewHolder ( ViewGroup parent , int viewType ) ;
private static void displayPropertyHeader ( ConsoleApplication app , PropertyDefinition < ? > pd ) { app . println ( ) ; app . println ( ) ; app . println ( INFO_EDITOR_HEADING_CONFIGURE_PROPERTY . get ( pd . getName ( ) ) ) ; app . println ( ) ; app . println ( pd . getSynopsis ( ) , NUM_ ) ; if ( pd . getDescription ( ) != null ) { app . println ( ) ; app . println ( pd . getDescription ( ) , NUM_ ) ; } }
public static List propertyDescriptors ( int apiLevel ) { return PROPERTY_DESCRIPTORS ; }
public boolean minValue ( double val , double minVal ) { return GenericValidator . minValue ( val , minVal ) ; }
protected static String read ( Reader reader ) throws IOException { StringWriter writer = new StringWriter ( ) ; try { int i ; while ( ( i = reader . read ( ) ) != - NUM_ ) { writer . write ( i ) ; } } finally { try { reader . close ( ) ; writer . close ( ) ; } catch ( Exception ex ) { log . warn ( STR_ + ex , ex ) ; } } return writer . toString ( ) ; }
public ConnectTimeoutException ( final String message ) { super ( message ) ; }
public ProfileOptions build ( ) { return new ProfileOptions ( this ) ; }
public DefaultOrderNumberGeneratorImpl ( final GenericDAO < CustomerOrder , Long > customerOrderDao ) { this . customerOrderDao = customerOrderDao ; orderSequence = - NUM_ ; }
public static State valueOf ( int value ) { State entry = mValueToEnum . get ( value ) ; if ( entry != null ) { return entry ; } throw new IllegalArgumentException ( STR_ + State . class . getName ( ) + STR_ + value + STR_ ) ; }
public void onResponse ( ImageContainer response , boolean isImmediate ) ;
protected abstract String type ( ) ;
protected void searchUpdate ( ) { String query = m_queryF . getText ( ) ; synchronized ( m_lock ) { m_searcher . search ( query ) ; if ( m_searcher . getQuery ( ) . length ( ) == NUM_ ) m_resultL . setText ( null ) ; else { int r = m_searcher . getTupleCount ( ) ; m_resultL . setText ( r + STR_ + ( r == NUM_ ? STR_ : STR_ ) ) ; } } }
public ProtocolVersion ( String version ) { if ( version == null ) { throw new IllegalArgumentException ( STR_ ) ; } Matcher versionMatcher = VERSION_PAT . matcher ( version ) ; if ( versionMatcher . find ( ) ) { majorVersion = Integer . parseInt ( versionMatcher . group ( NUM_ ) ) ; minorVersion = Integer . parseInt ( versionMatcher . group ( NUM_ ) ) ; } else { throw new IllegalArgumentException ( STR_ + version + STR_ ) ; } }
public void startServiceInfoResolver ( ServiceInfoImpl info ) ;
public void sendCallbacks ( ModelService modelService , Map < String , Object > context , int mode ) throws GenericServiceException ;
private void storeFileHashCache ( Properties props ) { File cacheFile = new File ( this . targetDirectory , CACHE_PROPERTIES_FILENAME ) ; try ( OutputStream out = new BufferedOutputStream ( new FileOutputStream ( cacheFile ) ) ) { props . store ( out , null ) ; } catch ( IOException e ) { getLog ( ) . warn ( STR_ , e ) ; } }
public StaticRenderer ( ) { renderingHints = new RenderingHints ( null ) ; renderingHints . add ( defaultRenderingHints ) ; usr2dev = new AffineTransform ( ) ; }
public Matrix rand ( Ret ret ) ;
void state ( ClusterStateRequest request , ActionListener < ClusterStateResponse > listener ) ;
public Heap ( ) { }
public final native JsArray < CMTextMarkerOverlay > findMarksAt ( CMPositionOverlay pos ) ;
protected JvmCompilationMeta createJvmCompilationMetaNode ( String groupName , String groupOid , ObjectName groupObjname , MBeanServer server ) { return new JvmCompilationMeta ( this , objectserver ) ; }
private List < File > combine ( List < File > listA , List < File > listB ) { LinkedHashSet < File > combinedProjects = Sets . newLinkedHashSet ( listA ) ; combinedProjects . addAll ( listB ) ; return new ArrayList < > ( combinedProjects ) ; }
private void examineCompletedOperation ( UnbindOperation unbindOperation ) { assertTrue ( unbindOperation . getProcessingStartTime ( ) > NUM_ ) ; assertTrue ( unbindOperation . getProcessingStopTime ( ) > NUM_ ) ; assertTrue ( unbindOperation . getProcessingTime ( ) >= NUM_ ) ; }
public static void print ( boolean x ) { out . print ( x ) ; out . flush ( ) ; }
public static < S extends HasSelectionUpdatedHandlers & HasHandlers > void fire ( S source , JavaScriptObject jsObj ) { if ( TYPE != null ) { SelectionUpdatedEvent event = new SelectionUpdatedEvent ( jsObj ) ; source . fireEvent ( event ) ; } }
public static SM_SYSTEM_MESSAGE STR_CHAT_ROOM_VOICE_FINISH_NOTIFY ( String value0 ) { return new SM_SYSTEM_MESSAGE ( NUM_ , value0 ) ; }
public static MultiTaskListener instance ( Context context ) { MultiTaskListener instance = context . get ( taskListenerKey ) ; if ( instance == null ) instance = new MultiTaskListener ( context ) ; return instance ; }
void releaseLock ( String lockName ) throws LockException ;
public void fixupVariables ( java . util . Vector vars , int globalsSize ) { super . fixupVariables ( vars , globalsSize ) ; m_expr . fixupVariables ( vars , globalsSize ) ; }
protected void pathWasCollapsed ( TreePath path ) { if ( tree != null ) { tree . fireTreeCollapsed ( path ) ; } }
public void resetViews ( Runnable before ) { this . resetViews ( before , BOOL_ ) ; }
public int addScatterPlot ( String name , Color color , double [ ] [ ] XY ) { return ( ( Plot2DCanvas ) plotCanvas ) . addScatterPlot ( name , color , XY ) ; }
private void publish ( Throwable exception ) { Connection c = Connections . getInstance ( context ) . getConnection ( clientHandle ) ; String action = context . getString ( R . string . toast_pub_failed , ( Object [ ] ) additionalArgs ) ; c . addAction ( action ) ; Notify . toast ( context , action , Toast . LENGTH_SHORT ) ; }
public ResultadoBusquedaBean ( ) { }
public boolean isDirectEmbeddableCollection ( ) { return BOOL_ ; }
public static String string ( int type ) { return protocols . getText ( type ) ; }
final long fn ( long v , long x ) { return v + x ; }
protected void previewStarted ( ) { }
void performClickAfterAnimation ( ) ;
public JdpPacketWriter ( ) throws IOException { baos = new ByteArrayOutputStream ( ) ; pkt = new DataOutputStream ( baos ) ; pkt . writeInt ( JdpGenericPacket . getMagic ( ) ) ; pkt . writeShort ( JdpGenericPacket . getVersion ( ) ) ; }
void cancelPressed ( ActionEvent e ) { if ( inEditMode ) { status1 . setText ( Bundle . getMessage ( STR_ ) ) ; update . setVisible ( BOOL_ ) ; create . setVisible ( BOOL_ ) ; fixedSystemName . setVisible ( BOOL_ ) ; prefixBox . setVisible ( BOOL_ ) ; systemNameLabel . setVisible ( BOOL_ ) ; systemLabel . setVisible ( BOOL_ ) ; panel1a . setVisible ( BOOL_ ) ; curLight . activateLight ( ) ; inEditMode = BOOL_ ; } if ( lightCreatedOrUpdated ) { InstanceManager . getDefault ( jmri . UserPreferencesManager . class ) . showInfoMessage ( Bundle . getMessage ( STR_ ) , Bundle . getMessage ( STR_ , Bundle . getMessage ( STR_ ) ) , getClassName ( ) , STR_ ) ; } lightCreatedOrUpdated = BOOL_ ; clearLightControls ( ) ; status2 . setText ( STR_ ) ; if ( addFrame != null ) { addFrame . setVisible ( BOOL_ ) ; addFrame . dispose ( ) ; addFrame = null ; } }
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( nodegetownerdocumentnull . class , args ) ; }
public void remove ( JarEntry entry ) { jarEntries . remove ( entry . getName ( ) ) ; jarEntriesToAdd . remove ( entry . getName ( ) ) ; }
public UnsupportedCallbackException ( Callback callback , String msg ) { super ( msg ) ; this . callback = callback ; }
public void registerSupportNewProtocol ( String serviceAddress , String serviceName , boolean support ) throws RegistryException { if ( registry != null ) { registry . setSupportNewProtocol ( serviceAddress , serviceName , support ) ; } monitor . logEvent ( STR_ , serviceName , STR_ + support ) ; }
default B unbreakable ( final boolean unbreakable ) { this . meta ( ) . setUnbreakable ( unbreakable ) ; return this . getBuilder ( ) ; }
long applyAsLong ( T t , U u ) ;
protected void associate ( DNSState state ) { synchronized ( this . getDns ( ) ) { this . getDns ( ) . associateWithTask ( this , state ) ; } for ( ServiceInfo serviceInfo : this . getDns ( ) . getServices ( ) . values ( ) ) { ( ( ServiceInfoImpl ) serviceInfo ) . associateWithTask ( this , state ) ; } }
public boolean hasAllIdentificationInformation ( ) { return username != null && password != null ; }
public static int binarySearch ( char [ ] array , char value ) { return binarySearch ( array , NUM_ , array . length , value ) ; }
public void addBusinessFilterToFromChannels ( ViewerFilter filter ) ;
protected void addTestFile ( String fileName , ProtocolSession session ) throws Exception { fileName = scriptDirectory + fileName ; InputStream is = this . getClass ( ) . getResourceAsStream ( fileName ) ; if ( is == null ) { throw new Exception ( STR_ + fileName + STR_ ) ; } try { builder . addProtocolLinesFromStream ( is , session , fileName ) ; } finally { IOUtils . closeQuietly ( is ) ; } }
public void intersection ( Clip c ) { if ( status == INVALID ) return ; if ( status == EMPTY ) { setClip ( c ) ; status = INUSE ; return ; } clip [ NUM_ ] = Math . max ( clip [ NUM_ ] , c . clip [ NUM_ ] ) ; clip [ NUM_ ] = Math . max ( clip [ NUM_ ] , c . clip [ NUM_ ] ) ; clip [ NUM_ ] = Math . min ( clip [ NUM_ ] , c . clip [ NUM_ ] ) ; clip [ NUM_ ] = Math . min ( clip [ NUM_ ] , c . clip [ NUM_ ] ) ; }
void onCustomTabsDisconnected ( ) ;
public void assertSameType ( Type s , Type t , boolean expected ) { if ( types . isSameType ( s , t ) != expected ) { String msg = expected ? STR_ : STR_ ; error ( s + msg + t ) ; } }
public static boolean isEqualsMethod ( Method method ) { if ( method == null || ! method . getName ( ) . equals ( STR_ ) ) { return BOOL_ ; } Class [ ] paramTypes = method . getParameterTypes ( ) ; return ( paramTypes . length == NUM_ && paramTypes [ NUM_ ] == Object . class ) ; }
Vec4 northPointingTangent ( Globe globe , Angle latitude , Angle longitude ) ;
public void close ( ) ;
private Map < AnnotationPair , AnnotationMirror > calculateGlbs ( ) { Map < AnnotationPair , AnnotationMirror > newglbs = new HashMap < AnnotationPair , AnnotationMirror > ( ) ; for ( AnnotationMirror a1 : supertypesGraph . keySet ( ) ) { for ( AnnotationMirror a2 : supertypesGraph . keySet ( ) ) { if ( AnnotationUtils . areSameIgnoringValues ( a1 , a2 ) ) { continue ; } if ( ! AnnotationUtils . areSame ( getTopAnnotation ( a1 ) , getTopAnnotation ( a2 ) ) ) { continue ; } AnnotationPair pair = new AnnotationPair ( a1 , a2 ) ; if ( newglbs . containsKey ( pair ) ) { continue ; } AnnotationMirror glb = findGlb ( a1 , a2 ) ; newglbs . put ( pair , glb ) ; } } return newglbs ; }
public void addAttribute ( String name , boolean value ) ;
protected LogicalNotExpressionImpl ( ) { super ( ) ; }
void notifyStop ( ) ;
private void login ( XMLRPCCallback callback ) { try { XMLRPCClient client = new XMLRPCClient ( new URL ( mApiUrl . replace ( STR_ , STR_ ) ) , mUserAgent ) ; client . callAsync ( callback , STR_ , STR_ , STR_ , STR_ , mUserAgent ) ; } catch ( MalformedURLException e ) { e . printStackTrace ( ) ; } }
private void showFeedback ( String message ) { if ( myHost != null ) { myHost . showFeedback ( message ) ; } else { System . out . println ( message ) ; } }
final public void print ( float v ) { Writer out = this . out ; if ( out == null ) return ; try { String s = String . valueOf ( v ) ; out . write ( s , NUM_ , s . length ( ) ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } }
public void enableRowScaling ( boolean enable ) { mRowScaleEnabled = enable ; }
public void reading ( int tenant ) { starting ( Operation . READ , tenant ) ; }
public static boolean isProxyClass ( Class < ? > cl ) { if ( cl == null ) { throw new NullPointerException ( STR_ ) ; } synchronized ( proxyCache ) { return proxyCache . containsKey ( cl ) ; } }
public boolean isNavBarTintEnabled ( ) { return mNavBarTintEnabled ; }
public void add ( int accessFlags , String name , String descriptor , AttributeWriter aw ) { int nameIndex = constPool . addUtf8Info ( name ) ; int descIndex = constPool . addUtf8Info ( descriptor ) ; add ( accessFlags , nameIndex , descIndex , aw ) ; }
public static Long toLong ( Number self ) { return self . longValue ( ) ; }
public void onFavoriteChanged ( MaterialFavoriteButton buttonView , boolean favorite ) ;
public void remove ( int i ) { individuals . remove ( i ) ; }
public void printStackTrace ( PrintStream s ) { if ( ! isJDK14OrAbove && causeOnJDK13OrBelow != null ) { printStackTrace0 ( new PrintWriter ( s ) ) ; } else { super . printStackTrace ( s ) ; } }
public static void checkArgument ( boolean expression , Object errorMessage ) { if ( ! expression ) { throw new IllegalArgumentException ( String . valueOf ( errorMessage ) ) ; } }
private void checkLogFolder ( ) { File folder = new File ( folderPath ) ; if ( ! folder . exists ( ) ) { folder . mkdirs ( ) ; } }
public abstract AsynchronousChannelGroup openAsynchronousChannelGroup ( ExecutorService executor , int initialSize ) throws IOException ;
public void incUcastRetransmits ( ) ;
public void testOneWriter ( ) throws Exception { File logDir = prepareLogDir ( STR_ ) ; DiskLog log = openLog ( logDir , BOOL_ ) ; LogConnection conn = log . connect ( BOOL_ ) ; LogConnection conn2 = null ; try { conn2 = log . connect ( BOOL_ ) ; throw new Exception ( STR_ ) ; } catch ( THLException e ) { } conn . release ( ) ; conn2 = log . connect ( BOOL_ ) ; assertNotNull ( STR_ , conn2 ) ; assertFalse ( STR_ , conn2 . isReadonly ( ) ) ; conn2 . release ( ) ; log . release ( ) ; }
protected void doChildClosureVisit ( Node node , Set < Node > closure ) { if ( ! closure . contains ( node ) ) { closure . add ( node ) ; for ( Edge edge1 : getEdges ( node ) ) { Node sub = Edges . traverseDirected ( node , edge1 ) ; if ( sub == null ) { continue ; } doChildClosureVisit ( sub , closure ) ; } } }
public final int yystate ( ) { return zzLexicalState ; }
protected DF_LatticeCell findOrCreateCell ( Object key ) { DF_LatticeCell result = cells . get ( key ) ; if ( result == null ) { result = makeCell ( key ) ; cells . put ( key , result ) ; } return result ; }
protected void addParams ( final StringBuilder uri ) { UrlUtils . addParams ( getParams ( ) , uri ) ; }
Values values ( Thread current ) { return current . localValues ; }
public boolean checkChallanValidity ( final Challan challan ) { final Calendar current = Calendar . getInstance ( ) ; current . clear ( Calendar . HOUR_OF_DAY ) ; current . clear ( Calendar . MINUTE ) ; current . clear ( Calendar . SECOND ) ; current . clear ( Calendar . MILLISECOND ) ; final Calendar validityStart = Calendar . getInstance ( ) ; validityStart . setTime ( challan . getChallanDate ( ) ) ; validityStart . clear ( Calendar . HOUR_OF_DAY ) ; validityStart . clear ( Calendar . MINUTE ) ; validityStart . clear ( Calendar . SECOND ) ; validityStart . clear ( Calendar . MILLISECOND ) ; final Calendar validityEnd = Calendar . getInstance ( ) ; validityEnd . setTime ( challan . getValidUpto ( ) ) ; validityEnd . clear ( Calendar . HOUR_OF_DAY ) ; validityEnd . clear ( Calendar . MINUTE ) ; validityEnd . clear ( Calendar . SECOND ) ; validityEnd . clear ( Calendar . MILLISECOND ) ; if ( validityStart . compareTo ( current ) <= NUM_ && validityEnd . compareTo ( current ) >= NUM_ ) return BOOL_ ; return BOOL_ ; }
public static String stringToHexString ( String in ) { byte [ ] ba = in . getBytes ( ) ; return toHexString ( ba ) ; }
public void onSessionRinging ( ContactId contact ) ;
public AnimationBuilder rollIn ( ) { for ( View view : views ) { alpha ( NUM_ , NUM_ ) ; translationX ( - ( view . getWidth ( ) - view . getPaddingLeft ( ) - view . getPaddingRight ( ) ) , NUM_ ) ; rotation ( - NUM_ , NUM_ ) ; } return this ; }
Optional < ChunkColumn > unlockChunk ( int x , int z , Object accessor ) ;
public Iterator < E > descendingIterator ( ) { return m . descendingKeySet ( ) . iterator ( ) ; }
private void doubleTapZoom ( PointF sCenter , PointF vFocus ) { if ( ! panEnabled ) { if ( sRequestedCenter != null ) { sCenter . x = sRequestedCenter . x ; sCenter . y = sRequestedCenter . y ; } else { sCenter . x = sWidth ( ) / NUM_ ; sCenter . y = sHeight ( ) / NUM_ ; } } float doubleTapZoomScale = Math . min ( maxScale , SubsamplingScaleImageView . this . doubleTapZoomScale ) ; boolean zoomIn = scale <= doubleTapZoomScale * NUM_ ; float targetScale = zoomIn ? doubleTapZoomScale : minScale ( ) ; if ( doubleTapZoomStyle == ZOOM_FOCUS_CENTER_IMMEDIATE ) { setScaleAndCenter ( targetScale , sCenter ) ; } else if ( doubleTapZoomStyle == ZOOM_FOCUS_CENTER || ! zoomIn || ! panEnabled ) { new AnimationBuilder ( targetScale , sCenter ) . withInterruptible ( BOOL_ ) . start ( ) ; } else if ( doubleTapZoomStyle == ZOOM_FOCUS_FIXED ) { new AnimationBuilder ( targetScale , sCenter , vFocus ) . withInterruptible ( BOOL_ ) . start ( ) ; } invalidate ( ) ; }
UnitType ( DataInputStream is ) throws IOException { this . name = Utilities . getString ( is ) ; this . start = is . readInt ( ) ; this . count = is . readInt ( ) ; }
public void backupWorkspace ( final String workspaceId , final String srcPath , final String srcAddress ) throws ServerException { ReentrantLock lock = workspacesBackupLocks . get ( workspaceId ) ; if ( lock != null ) { if ( lock . tryLock ( ) ) { try { if ( workspacesBackupLocks . get ( workspaceId ) == null ) { return ; } backupWorkspace ( workspaceId , srcPath , srcAddress , BOOL_ ) ; } finally { lock . unlock ( ) ; } } } else { LOG . warn ( STR_ , workspaceId ) ; } }
Object parameterConstraint ( int n ) { return parameter ( n ) . constraint ; }
public void removeUpdateListener ( AnimatorUpdateListener listener ) { if ( updateListeners == null ) { return ; } updateListeners . remove ( listener ) ; if ( updateListeners . size ( ) == NUM_ ) { updateListeners = null ; } }
public void insertPOJO ( int index , Object value ) { if ( value == null ) { insertNull ( index ) ; } else { _insert ( index , POJONode ( value ) ) ; } }
public static boolean equalOverShorterOfBoth ( byte [ ] a , byte [ ] b ) { int top = Math . min ( a . length , b . length ) ; for ( int i = NUM_ ; i < top ; i ++ ) { if ( a [ i ] != b [ i ] ) return BOOL_ ; } return BOOL_ ; }
public void ifICmp ( final int mode , final Label label ) { ifCmp ( Type . INT_TYPE , mode , label ) ; }
private Packet createEntitiesPacket ( ) { return new Packet ( Packet . COMMAND_SENDING_ENTITIES , game . getEntitiesVector ( ) ) ; }
public long date ( ) { return dateHeader ( HEADER_DATE ) ; }
private void growSpine ( ) { spine = new int [ ( spine . length << NUM_ ) + NUM_ ] ; threshold = ( int ) ( spine . length * loadFactor ) ; Arrays . fill ( spine , - NUM_ ) ; for ( int i = NUM_ ; i < size ; i ++ ) { insert ( objs [ i ] , i ) ; } }
public void spin ( ) { lastTimeAnimated = SystemClock . uptimeMillis ( ) ; isSpinning = BOOL_ ; invalidate ( ) ; }
public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Element testEmployee ; Attr newAttribute ; String name ; Attr setAttr ; doc = ( Document ) load ( STR_ , BOOL_ ) ; elementList = doc . getElementsByTagName ( STR_ ) ; testEmployee = ( Element ) elementList . item ( NUM_ ) ; newAttribute = doc . createAttribute ( STR_ ) ; setAttr = testEmployee . setAttributeNode ( newAttribute ) ; name = testEmployee . getAttribute ( STR_ ) ; assertEquals ( STR_ , STR_ , name ) ; }
static AnimationStyle mapIntToValue ( int modeInt ) { switch ( modeInt ) { case NUM_ : default : return ROTATE ; case NUM_ : return FLIP ; } }
public ShaderVar add ( ShaderVar value ) { ShaderVar v = getReturnTypeForOperation ( mDataType , value . getDataType ( ) ) ; v . setValue ( this . mName + STR_ + value . getName ( ) ) ; v . setName ( v . getValue ( ) ) ; return v ; }
public static < E > ImmutableList < E > of ( E e1 , E e2 , E e3 , E e4 , E e5 , E e6 , E e7 , E e8 , E e9 ) { return construct ( e1 , e2 , e3 , e4 , e5 , e6 , e7 , e8 , e9 ) ; }
ConcurrentSkipListMap . Node < K , V > loNode ( Comparator < ? super K > cmp ) { if ( lo == null ) return m . findFirst ( ) ; else if ( loInclusive ) return m . findNear ( lo , GT | EQ , cmp ) ; else return m . findNear ( lo , GT , cmp ) ; }
public UnsignedShort add ( int increment ) { return valueOf ( getValue ( ) + increment ) ; }
public void handleError ( Throwable t , MultiThreadedBatchProcessor < T , TL > processor , TL batch ) ;
public JaasConfiguration ( AppConfigurationEntry entry ) { this . entry = new AppConfigurationEntry [ ] { entry } ; }
public T image ( String url , boolean memCache , boolean fileCache , int targetWidth , int fallbackId ) { return image ( url , memCache , fileCache , targetWidth , fallbackId , null , NUM_ ) ; }
public abstract void end ( ) ;
protected boolean isDragging ( ) { return this . dragging ; }
public final CharSequenceTranslator with ( final CharSequenceTranslator ... translators ) { final CharSequenceTranslator [ ] newArray = new CharSequenceTranslator [ translators . length + NUM_ ] ; newArray [ NUM_ ] = this ; System . arraycopy ( translators , NUM_ , newArray , NUM_ , translators . length ) ; return new AggregateTranslator ( newArray ) ; }
public void remove ( String key ) ;
public String onNodeSecuritySave ( String password ) ;
public static boolean isLiteral ( String in ) { ELText txt = parse ( in ) ; return txt == null || txt . isLiteral ( ) ; }
private Future < CheckoutResult > sendOrderAwaitResult ( Order order ) { Future < CheckoutResult > future = Future . future ( ) ; vertx . eventBus ( ) . send ( CheckoutService . ORDER_EVENT_ADDRESS , order . toJson ( ) , null ) ; return future ; }
boolean onItemMove ( int fromPosition , int toPosition ) ;
Object convert ( String value , TypeLiteral < ? > toType ) ;
public void flush ( ) throws IOException { flushCache ( ) ; this . out . flush ( ) ; }
public IllegalStateException ( ) { super ( ) ; }
synchronized private Writer finishWorker ( ) throws IOException { try { if ( ! f . isDone ( ) ) q . put ( TERMINATOR ) ; return f . get ( ) ; } catch ( InterruptedException e ) { throw new IOException ( e . getMessage ( ) ) ; } catch ( ExecutionException e ) { throw new IOException ( e . getMessage ( ) ) ; } }
public int backend ( ) { String s = soot . PhaseOptions . getString ( options , STR_ ) ; if ( s . equalsIgnoreCase ( STR_ ) ) return backend_auto ; if ( s . equalsIgnoreCase ( STR_ ) ) return backend_buddy ; if ( s . equalsIgnoreCase ( STR_ ) ) return backend_cudd ; if ( s . equalsIgnoreCase ( STR_ ) ) return backend_sable ; if ( s . equalsIgnoreCase ( STR_ ) ) return backend_javabdd ; if ( s . equalsIgnoreCase ( STR_ ) ) return backend_none ; throw new RuntimeException ( STR_ + s + STR_ ) ; }
public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SkillATKDrain_Instant_INTERVAL_HEAL_MP_TO_ME ( int num0 , String skillname ) { return new SM_SYSTEM_MESSAGE ( NUM_ , num0 , skillname ) ; }
public NullnessAnalysis ( UnitGraph graph ) { super ( graph ) ; doAnalysis ( ) ; }
private void togglePausePlay ( ) { if ( mRootView == null || mPauseButton == null || mMediaPlayerControlListener == null ) { return ; } if ( mMediaPlayerControlListener . isPlaying ( ) ) { mPauseButton . setImageResource ( mPauseIcon ) ; } else { mPauseButton . setImageResource ( mPlayIcon ) ; } }
public UrlValidator ( String [ ] schemes ) { this ( schemes , NUM_ ) ; }
public java . lang . String signXML ( java . lang . String xmlString , java . lang . String certAlias , java . lang . String algorithm ) throws XMLSignatureException { if ( xmlString == null || xmlString . length ( ) == NUM_ ) { SAMLUtilsCommon . debug . error ( STR_ ) ; throw new XMLSignatureException ( SAMLUtilsCommon . bundle . getString ( STR_ ) ) ; } if ( certAlias == null || certAlias . length ( ) == NUM_ ) { SAMLUtilsCommon . debug . error ( STR_ ) ; throw new XMLSignatureException ( SAMLUtilsCommon . bundle . getString ( STR_ ) ) ; } Element el = null ; try { Document doc = XMLUtils . toDOMDocument ( xmlString , SAMLUtilsCommon . debug ) ; el = signXML ( doc , certAlias , algorithm ) ; } catch ( Exception e ) { SAMLUtilsCommon . debug . error ( STR_ , e ) ; throw new XMLSignatureException ( e . getMessage ( ) ) ; } return XMLUtils . print ( el ) ; }
boolean addEntry ( PolicyEntry pe , int index ) { if ( index < NUM_ ) { policyEntries . addElement ( pe ) ; parser . add ( pe . getGrantEntry ( ) ) ; } else { PolicyEntry origPe = policyEntries . elementAt ( index ) ; parser . replace ( origPe . getGrantEntry ( ) , pe . getGrantEntry ( ) ) ; policyEntries . setElementAt ( pe , index ) ; } return BOOL_ ; }
protected void clearCrFerr ( ) { cr = cr & ~ CR_FERR_MASK ; }
File directoryFor ( Parameter parameter ) { File result = _directoryFor ( parameter ) ; uncheck ( ) ; return result ; }
protected Enum_Impl ( ) { super ( ) ; }
protected Color disable ( Color color ) { return SeaGlassGraphicsUtils . disable ( color ) ; }
public boolean isInboundThreading ( ) ;
private void afterImageMove ( ) { final ReferencedEnvelope env = content . getViewport ( ) . getBounds ( ) ; if ( env == null ) return ; final int dx = imageOrigin . x ; final int dy = imageOrigin . y ; final DirectPosition2D newPos = new DirectPosition2D ( dx , dy ) ; screenToWorld . transform ( newPos , newPos ) ; env . translate ( env . getMinimum ( NUM_ ) - newPos . x , env . getMaximum ( NUM_ ) - newPos . y ) ; doSetDisplayArea ( env ) ; imageOrigin . setLocation ( NUM_ , NUM_ ) ; redrawBaseImage = BOOL_ ; }
public static boolean refreshDeviceCache ( BluetoothGatt gatt ) { try { final Method refresh = BluetoothGatt . class . getMethod ( STR_ ) ; if ( refresh != null ) { final boolean success = ( Boolean ) refresh . invoke ( gatt ) ; BleLog . i ( TAG , STR_ + success ) ; return success ; } } catch ( Exception e ) { BleLog . e ( TAG , STR_ ) ; } return BOOL_ ; }
public static byte testPattern ( Object o , byte start ) { int [ ] dims = ArrayFuncs . getDimensions ( o ) ; if ( dims . length > NUM_ ) { for ( int i = NUM_ ; i < ( ( Object [ ] ) o ) . length ; i += NUM_ ) { start = testPattern ( ( ( Object [ ] ) o ) [ i ] , start ) ; } } else if ( dims . length == NUM_ ) { for ( int i = NUM_ ; i < dims [ NUM_ ] ; i += NUM_ ) { java . lang . reflect . Array . setByte ( o , i , start ) ; start += NUM_ ; } } return start ; }
public native long [ ] C_GetSlotList ( boolean tokenPresent ) throws PKCS11Exception ;
public ColumnItem ( final ColumnBrowserWidget widget ) { if ( widget == null ) { SWT . error ( SWT . ERROR_NULL_ARGUMENT ) ; } if ( widget . isDisposed ( ) ) { SWT . error ( SWT . ERROR_WIDGET_DISPOSED ) ; } this . widget = widget ; this . parent = null ; this . children = new ArrayList < ColumnItem > ( ) ; if ( widget . getRootItem ( ) != null ) { widget . getRootItem ( ) . children . add ( this ) ; } widget . updateContent ( ) ; }
public static DiffException createDiffException ( final ErrorKeys errorId , final String message ) { return new DiffException ( errorId . toString ( ) + STR_ + message ) ; }
Expression claim ( final Expression ¢ ) { return wizard . rebase ( duplicate . of ( extract . core ( ¢ ) ) , ast ) ; }
public PluginResult . ImportLDIF invokeLDIFImportPlugins ( LDIFImportConfig importConfig , Entry entry ) { PluginResult . ImportLDIF result = null ; for ( DirectoryServerPlugin p : ldifImportPlugins ) { try { result = p . doLDIFImport ( importConfig , entry ) ; } catch ( Exception e ) { logger . traceException ( e ) ; LocalizableMessage message = ERR_PLUGIN_LDIF_IMPORT_PLUGIN_EXCEPTION . get ( p . getPluginEntryDN ( ) , entry . getName ( ) , stackTraceToSingleLineString ( e ) ) ; logger . error ( message ) ; return PluginResult . ImportLDIF . stopEntryProcessing ( message ) ; } if ( result == null ) { LocalizableMessage message = ERR_PLUGIN_LDIF_IMPORT_PLUGIN_RETURNED_NULL . get ( p . getPluginEntryDN ( ) , entry . getName ( ) ) ; logger . error ( message ) ; return PluginResult . ImportLDIF . stopEntryProcessing ( message ) ; } else if ( ! result . continuePluginProcessing ( ) ) { return result ; } } if ( result == null ) { result = PluginResult . ImportLDIF . continueEntryProcessing ( ) ; } return result ; }
public void convertToNumber ( ) throws IOException { print ( STR_ , null ) ; }
public static void write ( String fileName , Iterable < String > list ) throws IOException { write ( fileName , list , identityTransformer ) ; }
public boolean equals ( Object o ) { return o instanceof NodeList ? ( ( NodeList ) o ) . nodes . equals ( nodes ) : BOOL_ ; }
void onLeftClick ( Dialog dialog ) ;
public void jspError ( Exception e ) throws JasperException { dispatch ( null , null , null , e ) ; }
public FasRunner ( GraphSource graphWrapper , Parameters params , KnowledgeBoxModel knowledgeBoxModel ) { super ( graphWrapper . getGraph ( ) , params , knowledgeBoxModel ) ; }
public double localScore ( int i ) { double sum = NUM_ ; for ( BDeuScore score : scores ) { sum += score . localScore ( i ) ; } return sum / scores . size ( ) ; }
public void add ( double x ) { Cell [ ] as ; long b , v ; int m ; Cell a ; if ( ( as = cells ) != null || ! casBase ( b = base , Double . doubleToRawLongBits ( Double . longBitsToDouble ( b ) + x ) ) ) { boolean uncontended = BOOL_ ; if ( as == null || ( m = as . length - NUM_ ) < NUM_ || ( a = as [ getProbe ( ) & m ] ) == null || ! ( uncontended = a . cas ( v = a . value , Double . doubleToRawLongBits ( Double . longBitsToDouble ( v ) + x ) ) ) ) doubleAccumulate ( x , null , uncontended ) ; } }
public RootSwitch ( String name , int level , NetworkDatacenter dc ) { super ( name , level , dc ) ; downlinkswitchpktlist = new HashMap < Integer , List < NetworkPacket > > ( ) ; downlinkswitches = new ArrayList < Switch > ( ) ; downlinkbandwidth = NetworkConstants . BandWidthAggRoot ; latency = NetworkConstants . SwitchingDelayRoot ; numport = NetworkConstants . RootSwitchPort ; }
public void doAction ( ) ;
public XPathProcessorException ( String message ) { super ( message ) ; }
private void showErrorToast ( String message ) { Toast . makeText ( LoginActivity . this , message , Toast . LENGTH_LONG ) . show ( ) ; }
public ConversationService ( final String versionDate ) { super ( SERVICE_NAME ) ; if ( ( getEndPoint ( ) == null ) || getEndPoint ( ) . isEmpty ( ) ) { setEndPoint ( URL ) ; } Validator . isTrue ( ( versionDate != null ) && ! versionDate . isEmpty ( ) , STR_ + VERSION_DATE_2016_09_20 ) ; this . versionDate = versionDate ; }
public static Scale percentiles ( ) { return scale ( NUM_ ) ; }
private void refreshStationUI ( int station ) { mTextStationValue . setText ( FmRadioUtils . formatStation ( station ) ) ; if ( FmRadioStation . isFavoriteStation ( mContext , station ) ) { mButtonAddToFavorite . setImageResource ( R . drawable . btn_fm_favorite_on_selector ) ; mTextStationName . setText ( FmRadioStation . getStationName ( mContext , station , FmRadioStation . STATION_TYPE_FAVORITE ) ) ; } else { mButtonAddToFavorite . setImageResource ( R . drawable . btn_fm_favorite_off_selector ) ; mTextStationName . setText ( STR_ ) ; } }
private void showFeedback ( String message ) { if ( myHost != null ) { myHost . showFeedback ( message ) ; } else { System . out . println ( message ) ; } }
private int calculateLayoutHeight ( int heightSize , int mode ) { mItemsLayout . setLayoutParams ( new LayoutParams ( LayoutParams . WRAP_CONTENT , LayoutParams . WRAP_CONTENT ) ) ; mItemsLayout . measure ( MeasureSpec . makeMeasureSpec ( NUM_ , MeasureSpec . UNSPECIFIED ) , MeasureSpec . makeMeasureSpec ( heightSize , MeasureSpec . UNSPECIFIED ) ) ; int height = mItemsLayout . getMeasuredHeight ( ) ; if ( mode == MeasureSpec . EXACTLY ) { height = heightSize ; } else { height += NUM_ * mItemsPadding ; height = Math . max ( height , getSuggestedMinimumHeight ( ) ) ; if ( mode == MeasureSpec . AT_MOST && heightSize < height ) { height = heightSize ; } } mItemsLayout . measure ( MeasureSpec . makeMeasureSpec ( NUM_ , MeasureSpec . EXACTLY ) , MeasureSpec . makeMeasureSpec ( height - NUM_ * mItemsPadding , MeasureSpec . EXACTLY ) ) ; return height ; }
private void validatePatch ( State current , State patch ) { ValidationUtils . validatePatch ( current , patch ) ; ValidationUtils . validateTaskStageProgression ( current . taskState , patch . taskState ) ; }
public boolean addNode ( Node node ) { if ( node == null ) { throw new NullPointerException ( ) ; } if ( ! ( getNode ( node . getName ( ) ) == null ) ) { return BOOL_ ; } if ( nodes . contains ( node ) ) { return BOOL_ ; } List < Node > _nodes = new ArrayList < > ( ) ; nodes . add ( node ) ; namesHash . put ( node . getName ( ) , node ) ; reconstituteGraphMatrix ( _nodes , nodes ) ; initHashes ( ) ; return BOOL_ ; }
void paintComponent ( Graphics g ) { RectangularShape rectangle ; int radius = RapidLookAndFeel . CORNER_DEFAULT_RADIUS ; switch ( position ) { case SwingConstants . LEFT : rectangle = new RoundRectangle2D . Double ( NUM_ , NUM_ , button . getWidth ( ) + radius , button . getHeight ( ) , radius , radius ) ; break ; case SwingConstants . CENTER : rectangle = new Rectangle2D . Double ( NUM_ , NUM_ , button . getWidth ( ) , button . getHeight ( ) ) ; break ; default : rectangle = new RoundRectangle2D . Double ( - radius , NUM_ , button . getWidth ( ) + radius , button . getHeight ( ) , radius , radius ) ; break ; } RapidLookTools . drawButton ( button , g , rectangle ) ; }
public static void equals ( Object object1 , Object object2 ) { checkAssertion ( object1 . equals ( object2 ) , null ) ; }
private void endScope ( int adr ) { LocalVar v = lvar [ adr ] ; if ( v != null ) { if ( v . isLastRangeInitialized ( ) ) { char length = ( char ) ( curCP ( ) - v . lastRange ( ) . start_pc ) ; if ( length < Character . MAX_VALUE ) { v . closeRange ( length ) ; putVar ( v ) ; fillLocalVarPosition ( v ) ; } } lvar [ adr ] = null ; } state . defined . excl ( adr ) ; }
public void onMainActivityStart ( ) { try { TraceEvent . begin ( STR_ ) ; boolean accountsChanged = SigninHelper . checkAndClearAccountsChangedPref ( mContext ) ; mSigninHelper . validateAccountSettings ( accountsChanged ) ; } finally { TraceEvent . end ( STR_ ) ; } }
private static String byteArrayToString ( byte [ ] bytes ) { StringBuilder builder = new StringBuilder ( STR_ ) ; for ( int i = NUM_ ; i < bytes . length ; i ++ ) { if ( i > NUM_ ) { builder . append ( STR_ ) ; } builder . append ( byteToString ( bytes [ i ] ) ) ; } return builder . append ( STR_ ) . toString ( ) ; }
public void decUniqueCqQuery ( ) { this . _stats . incInt ( _numUniqueCqQuery , - NUM_ ) ; }
public InstructionGraphEdge ( final InstructionGraphNode source , final InstructionGraphNode target , final EdgeType edgeType ) { super ( source , target ) ; this . edgeType = Preconditions . checkNotNull ( edgeType , STR_ ) ; }
public EntityQuery distinct ( ) { this . distinct = BOOL_ ; return this ; }
public void invalidateBitmap ( ) { ( ( ToolbarViewResourceAdapter ) getToolbarResourceAdapter ( ) ) . forceInvalidate ( ) ; }
public GenerateTangentsVisualPanel1 ( ) { initComponents ( ) ; }
public void print ( ) { Object [ ] iterChargingTimes = chargingTimes . toArray ( ) ; Arrays . sort ( iterChargingTimes ) ; for ( int i = NUM_ ; i < iterChargingTimes . length ; i ++ ) { ChargeLog curItem = ( ChargeLog ) iterChargingTimes [ i ] ; curItem . print ( ) ; } }
default boolean isReference ( ) { return BOOL_ ; }
H onCreateHeaderHolder ( ViewGroup parent ) ;
public static boolean hasValidAppToOpen ( Intent i , Context c ) { return i . resolveActivity ( c . getPackageManager ( ) ) != null ; }
private void openCategorySelection ( ) { CategorySelectionDialogFragment categorySelectionDialogFragment = CategorySelectionDialogFragment . newInstance ( categories ) ; categorySelectionDialogFragment . show ( getChildFragmentManager ( ) , STR_ ) ; }
private boolean isGenerateConnectorCoreConfig ( JsonValue params ) { return ! params . get ( ConnectorUtil . OPENICF_CONNECTOR_REF ) . isNull ( ) && params . get ( ConnectorUtil . OPENICF_CONFIGURATION_PROPERTIES ) . isNull ( ) ; }
public CompilationUnit addSourceFile ( String name ) { return sourceFiles . addSourceFile ( name ) ; }
public void dumpBaselessKeys ( Writer writer ) throws IOException { dumpEntries ( writer , blamer . getBaselessKeys ( ) ) ; }
public static String stringFor ( int n ) { switch ( n ) { case cudaGraphicsRegisterFlagsNone : return STR_ ; case cudaGraphicsRegisterFlagsReadOnly : return STR_ ; case cudaGraphicsRegisterFlagsWriteDiscard : return STR_ ; case cudaGraphicsRegisterFlagsSurfaceLoadStore : return STR_ ; case cudaGraphicsRegisterFlagsTextureGather : return STR_ ; } return STR_ + n ; }
public static UrlTemplate compile ( String template ) { String [ ] urlPieces = new String [ NUM_ ] ; int [ ] identifiers = new int [ NUM_ ] ; String [ ] identifierFormatTags = new String [ NUM_ ] ; int identifierCount = parseTemplate ( template , urlPieces , identifiers , identifierFormatTags ) ; return new UrlTemplate ( urlPieces , identifiers , identifierFormatTags , identifierCount ) ; }
protected void drawSideOutline ( DrawContext dc , ShapeData shapeData ) { this . prepareToDrawOutline ( dc , this . getActiveSideAttributes ( ) , defaultSideAttributes ) ; GL2 gl = dc . getGL ( ) . getGL2 ( ) ; for ( ExtrudedBoundaryInfo boundary : shapeData ) { if ( ! dc . isPickingMode ( ) && this . mustApplyLighting ( dc , this . getActiveSideAttributes ( ) ) ) gl . glNormalPointer ( GL . GL_FLOAT , NUM_ , boundary . sideNormalBuffer . rewind ( ) ) ; IntBuffer indices = boundary . sideEdgeIndices ; indices . rewind ( ) ; if ( this . isEnableCap ( ) && this . getActiveCapAttributes ( ) . isDrawOutline ( ) ) { indices = indices . slice ( ) ; indices . position ( NUM_ * boundary . faceCount ) ; } gl . glVertexPointer ( NUM_ , GL . GL_FLOAT , NUM_ , boundary . sideVertexBuffer . rewind ( ) ) ; gl . glDrawElements ( GL . GL_LINES , indices . remaining ( ) , GL . GL_UNSIGNED_INT , indices ) ; } }
public boolean hasMask ( int mask ) { return ( this . operationMask & mask ) != NUM_ ; }
public boolean isValidating ( ) { return validating ; }
public RegexSpacePredicate ( String expectedValue ) { super ( expectedValue , null ) ; if ( expectedValue == null ) throw new IllegalArgumentException ( STR_ ) ; init ( ) ; }
public void message ( DCCppMessage msg ) ;
public int size ( ) { return values . length ; }
private void resetSelectionStates ( ) { mSelectionType = SelectionType . UNDETERMINED ; mSelectedText = null ; mWasTapGestureDetected = BOOL_ ; }
protected final void addViewInternal ( View child , ViewGroup . LayoutParams params ) { super . addView ( child , - NUM_ , params ) ; }
public void decode ( InputStream stream ) throws KeyException , IOException { }
public void testFollowerOverridesVoteForNewTerm ( ) throws Throwable { runOnServer ( null ) ; }
public void resetPolicy ( ) { mPreferences . putString ( PREF_LAST_RESPONSE , Integer . toString ( Policy . RETRY ) ) ; setRetryUntil ( DEFAULT_RETRY_UNTIL ) ; setMaxRetries ( DEFAULT_MAX_RETRIES ) ; setRetryCount ( Long . parseLong ( DEFAULT_RETRY_COUNT ) ) ; setValidityTimestamp ( DEFAULT_VALIDITY_TIMESTAMP ) ; mPreferences . commit ( ) ; }
private void medianPos ( int i , mxGraphHierarchyModel model ) { boolean downwardSweep = ( i % NUM_ == NUM_ ) ; if ( downwardSweep ) { for ( int j = model . maxRank ; j > NUM_ ; j -- ) { rankMedianPosition ( j - NUM_ , model , j ) ; } } else { for ( int j = NUM_ ; j < model . maxRank - NUM_ ; j ++ ) { rankMedianPosition ( j + NUM_ , model , j ) ; } } }
private void readObject ( ObjectInputStream ois ) throws IOException , ClassNotFoundException { byte [ ] asn1EncPrincipal = ( byte [ ] ) ois . readObject ( ) ; byte [ ] encRealm = ( byte [ ] ) ois . readObject ( ) ; try { Realm realmObject = new Realm ( new DerValue ( encRealm ) ) ; PrincipalName krb5Principal = new PrincipalName ( new DerValue ( asn1EncPrincipal ) , realmObject ) ; realm = realmObject . toString ( ) ; fullName = krb5Principal . toString ( ) ; nameType = krb5Principal . getNameType ( ) ; } catch ( Exception e ) { throw new IOException ( e ) ; } }
public void addListener ( final IGraphSearchSettingsListener listener ) { m_listeners . addListener ( listener ) ; }
public DefaultDnDCatcher ( ) { this ( new DragSource ( ) ) ; }
private static int [ ] alignStrings ( String source , String target ) { int [ ] [ ] grid = forwardPass ( source , target ) ; int [ ] t2sGrid = backwardPass ( grid , source , target ) ; return t2sGrid ; }
default Stream < ? extends Column > columns ( ) { return table ( ) . map ( null ) . orElse ( Stream . empty ( ) ) . filter ( null ) ; }
private void connect ( ) { Connection c = Connections . getInstance ( context ) . getConnection ( clientHandle ) ; c . changeConnectionStatus ( Connection . ConnectionStatus . CONNECTED ) ; c . addAction ( STR_ ) ; }
private Register compile ( AST ast ) { try { return ( Register ) ast . accept ( this ) ; } catch ( CompilerException e ) { throw e ; } catch ( Error e ) { throw new CompilerException ( ast , e ) ; } catch ( RuntimeException e ) { throw new CompilerException ( ast , e ) ; } }
void update ( ) { AffineTransform oldt = t ; double v00 = Double . parseDouble ( m00 . getText ( ) ) ; double v01 = Double . parseDouble ( m01 . getText ( ) ) ; double v02 = Double . parseDouble ( m02 . getText ( ) ) ; double v10 = Double . parseDouble ( m10 . getText ( ) ) ; double v11 = Double . parseDouble ( m11 . getText ( ) ) ; double v12 = Double . parseDouble ( m12 . getText ( ) ) ; t = new AffineTransform ( v00 , v10 , v01 , v11 , v02 , v12 ) ; firePropertyChange ( STR_ , oldt , t ) ; }
public String title ( ) { return getView ( ) != null ? getView ( ) . getTitle ( ) : STR_ ; }
public boolean isFakeDragging ( ) { return mFakeDragging ; }
public synchronized boolean isScanError ( ) { return isError ; }
public static void addToolTipDescription ( JComponent component , String description ) { SettingsTabs . tooltipDescriptions . put ( component , description ) ; }
public boolean isAvoidFirstLastClippingEnabled ( ) { return mAvoidFirstLastClipping ; }
private void appendRestrictedContentType ( ContentType contentType ) { if ( restrictedContentTypesMask == NUM_ ) { restrictedContentTypesMask = contentType . getFlagValue ( ) ; } else { restrictedContentTypesMask |= contentType . getFlagValue ( ) ; } }
public InlineMenuRow rowAt ( int index ) { return rows . get ( index ) ; }
protected void connectionDown ( ) { if ( connectedStatus != null ) { connectedStatus . setText ( STATUS_IDLE ) ; connectedStatus . setBackground ( Color . red ) ; } }
public void addActionListener ( EventListener listener ) { addEventListener ( Events . ON_CHECK , listener ) ; }
private String createChoiceWithFictionalProgressXML ( String choiceId , String choiceDescription , String nextMomentId , boolean depleteWeaponCharge , boolean incrementNumEnemiesDefeated , String progressDescription , String iconResourceName ) { String xml = STR_ ; xml += STR_ ; xml += STR_ + choiceId + STR_ ; xml += STR_ + choiceDescription + STR_ ; xml += createNextMomentXml ( nextMomentId ) ; xml += STR_ ; xml += STR_ + Boolean . toString ( depleteWeaponCharge ) + STR_ ; xml += STR_ + Boolean . toString ( incrementNumEnemiesDefeated ) + STR_ ; xml += createFictionalProgressXml ( progressDescription ) ; if ( iconResourceName != null ) { xml += createIconXML ( iconResourceName ) ; } xml += STR_ ; return xml ; }
public abstract void createWeight ( Map context , IndexSearcher searcher ) throws IOException ;
IfdData ( int ifdId ) { mIfdId = ifdId ; }
public ESRIBoundingBox ( ESRIPoint _min , ESRIPoint _max ) { addPoint ( _min ) ; addPoint ( _max ) ; }
public Set < File > findFiles ( File path ) ;
public ModelParsingException ( String message ) { super ( message ) ; }
abstract void registerDriverAgentWaitingForCar ( final MobsimDriverAgent agent ) ;
private FacetResult drillDown ( ) throws IOException { DirectoryReader indexReader = DirectoryReader . open ( indexDir ) ; IndexSearcher searcher = new IndexSearcher ( indexReader ) ; TaxonomyReader taxoReader = new DirectoryTaxonomyReader ( taxoDir ) ; DrillDownQuery q = new DrillDownQuery ( config ) ; q . add ( STR_ , STR_ ) ; FacetsCollector fc = new FacetsCollector ( ) ; FacetsCollector . search ( searcher , q , NUM_ , fc ) ; Facets facets = new TaxonomyFacetSumFloatAssociations ( STR_ , taxoReader , config , fc ) ; FacetResult result = facets . getTopChildren ( NUM_ , STR_ ) ; indexReader . close ( ) ; taxoReader . close ( ) ; return result ; }
public void printList ( ) { if ( isEmpty ( ) ) { System . out . println ( STR_ ) ; } else { NeighborNode current = m_First ; while ( current != null ) { System . out . println ( STR_ + current . m_Instance + STR_ + current . m_Distance ) ; current = current . m_Next ; } System . out . println ( ) ; } }
public long lastModified ( ) { return dateHeader ( HEADER_LAST_MODIFIED ) ; }
boolean visitNode ( Node node ) ;
public static boolean isOpen ( Properties ctx , Timestamp DateAcct , String DocBaseType , int AD_Org_ID ) { if ( DateAcct == null ) { s_log . warning ( STR_ ) ; return BOOL_ ; } if ( DocBaseType == null ) { s_log . warning ( STR_ ) ; return BOOL_ ; } MPeriod period = MPeriod . get ( ctx , DateAcct , AD_Org_ID ) ; if ( period == null ) { s_log . warning ( STR_ + DateAcct + STR_ + DocBaseType + STR_ ) ; return BOOL_ ; } boolean open = period . isOpen ( DocBaseType , DateAcct ) ; if ( ! open ) s_log . warning ( period . getName ( ) + STR_ + DocBaseType + STR_ + DateAcct + STR_ ) ; return open ; }
public SPA ( int epochs , PassiveAggressive . Mode mode ) { setEpochs ( epochs ) ; setMode ( mode ) ; }
public boolean isFinal ( ) { ASTNode$State state = state ( ) ; try { return BOOL_ ; } finally { } }
public void or ( Criteria criteria ) { oredCriteria . add ( criteria ) ; }
public String toString ( ) { StringBuffer buf = new StringBuffer ( ) ; buf . append ( STR_ ) ; if ( severity == OK ) { buf . append ( STR_ ) ; } else if ( severity == ERROR ) { buf . append ( STR_ ) ; } else if ( severity == WARNING ) { buf . append ( STR_ ) ; } else if ( severity == INFO ) { buf . append ( STR_ ) ; } else if ( severity == CANCEL ) { buf . append ( STR_ ) ; } else { buf . append ( STR_ ) ; buf . append ( severity ) ; } buf . append ( STR_ ) ; buf . append ( pluginId ) ; buf . append ( STR_ ) ; buf . append ( code ) ; buf . append ( STR_ ) ; buf . append ( message ) ; buf . append ( STR_ ) ; buf . append ( exception ) ; return buf . toString ( ) ; }
public boolean hasBatchStatus ( ) { return hasExtension ( BatchStatus . class ) ; }
public void removeAccessibleSelection ( int i ) { }
public Bounds addPlane ( final PlanetModel planetModel , final Plane plane , final Membership ... bounds ) ;
public Cursor query ( SQLiteDatabase db , String [ ] projectionIn , String selection , String [ ] selectionArgs , String groupBy , String having , String sortOrder ) { return query ( db , projectionIn , selection , selectionArgs , groupBy , having , sortOrder , null , null ) ; }
public FoResponse < FoAuthTokenResult > socialLoginByToken ( FoSocialLoginByTokenRequest request ) ;
public abstract boolean check ( final CertificateToken certificateToken ) ;
public void build ( String code ) { try { result . put ( resources . getString ( R . string . intent_extra_status ) , resources . getString ( R . string . shared_pref_default_status ) ) ; result . put ( resources . getString ( R . string . intent_extra_code ) , code ) ; operationListResult . put ( result ) ; } catch ( JSONException e ) { Log . e ( TAG , STR_ + e . toString ( ) ) ; } }
public static Type instance ( ) { return theInstance ; }
public boolean keepStats ( ) { return currentConfig . isKeepStats ( ) ; }
public script addElement ( String hashcode , Element element ) { addElementToRegistry ( hashcode , element ) ; return ( this ) ; }
public void testSerialVersionUID ( ) { if ( SerializationHelper . needsUID ( m_Definition . getClass ( ) ) ) fail ( STR_ ) ; }
public Object computeValidationData ( EvolutionState state , VectorIndividual [ ] parents , int thread ) { return null ; }
public static MultiStateAnimation fromJsonResource ( Context context , int resid ) { return MultiStateAnimation . fromJsonResource ( context , null , resid ) ; }
protected void selectRenderables ( DrawContext dc ) { if ( dc == null ) { String message = Logging . getMessage ( STR_ ) ; Logging . logger ( ) . severe ( message ) ; throw new IllegalArgumentException ( message ) ; } }
public int next ( int context , int current ) { int subtreeRootIdent = getSubtreeRoot ( context ) ; for ( current = makeNodeIdentity ( current ) + NUM_ ; ; current ++ ) { int type = _type ( current ) ; if ( ! isDescendant ( subtreeRootIdent , current ) ) return NULL ; if ( ATTRIBUTE_NODE == type || NAMESPACE_NODE == type ) continue ; return makeNodeHandle ( current ) ; } }
public void initImpl ( ) { _logHandlerConfig . init ( ) ; _loggerConfig . init ( ) ; }
public void println ( java . io . PrintStream ps ) { Printer . print ( this , new java . io . PrintWriter ( ps , BOOL_ ) ) ; }
private void loadProfile ( String userId , String name ) { final Intent userProfileIntent = new Intent ( getActivity ( ) , UserProfileActivity . class ) ; userProfileIntent . putExtra ( AppConstants . Keys . USER_ID , userId ) ; userProfileIntent . putExtra ( AppConstants . Keys . USER_NAME , name ) ; userProfileIntent . putExtra ( AppConstants . Keys . SERVICE_SCREEN_TYPE , AppConstants . ServiceScreenType . PROFILE ) ; startActivity ( userProfileIntent ) ; }
public String nameTipText ( ) { return STR_ ; }
private static void applyOpenSSLFix ( ) throws SecurityException { if ( ( Build . VERSION . SDK_INT < VERSION_CODE_JELLY_BEAN ) || ( Build . VERSION . SDK_INT > VERSION_CODE_JELLY_BEAN_MR2 ) ) { return ; } try { Class . forName ( STR_ ) . getMethod ( STR_ , byte [ ] . class ) . invoke ( null , generateSeed ( ) ) ; int bytesRead = ( Integer ) Class . forName ( STR_ ) . getMethod ( STR_ , String . class , long . class ) . invoke ( null , STR_ , NUM_ ) ; if ( bytesRead != NUM_ ) { throw new IOException ( STR_ + bytesRead ) ; } } catch ( Exception e ) { if ( ALLOW_BROKEN_PRNG ) { Log . w ( PrngFixes . class . getSimpleName ( ) , STR_ , e ) ; } else { throw new SecurityException ( STR_ , e ) ; } } }
LayoutParams ( ) { }
void deleteInstances ( STSType stsType , Set < String > instanceNames ) throws AMConsoleException ;
public boolean removeUsedPrefix ( String prefix ) { prefix = prefix . replace ( STR_ , STR_ ) ; return usedPrefixes . remove ( prefix . intern ( ) ) ; }
public void addHeader ( String key , String ... value ) { this . headers . put ( key , Arrays . asList ( value ) ) ; }
public CSpecialInstructionsModel ( ) { m_descriptions . add ( new CCallsDescription ( ) ) ; m_descriptions . add ( new CReadsDescription ( ) ) ; m_descriptions . add ( new CWritesDescription ( ) ) ; }
public CancelRequest ( boolean notifyOriginalRequestor , LocalizableMessage cancelReason ) { this . notifyOriginalRequestor = notifyOriginalRequestor ; this . cancelReason = cancelReason ; }
static void appendModeInfo ( Mode mode , BitArray bits ) { bits . appendBits ( mode . getBits ( ) , NUM_ ) ; }
public int macStyleAsInt ( ) { return this . data . readUShort ( Offset . macStyle . offset ) ; }
TObjectLongValueHashIterator ( ) { _expectedSize = _hash . size ( ) ; _index = _hash . capacity ( ) ; }
private void showFeedback ( String message ) { if ( myHost != null ) { myHost . showFeedback ( message ) ; } else { System . out . println ( message ) ; } }
public static String toString ( Object object ) throws JSONException { return toString ( object , null ) ; }
private static boolean inputOperandsAreLiteralRegister ( final ReilInstruction instruction ) { final OperandType firstOperandType = instruction . getFirstOperand ( ) . getType ( ) ; final OperandType secondOperandType = instruction . getSecondOperand ( ) . getType ( ) ; return ( firstOperandType == OperandType . INTEGER_LITERAL ) && ( secondOperandType == OperandType . REGISTER ) ; }
public static final int makeTypeDescriptor ( int highNibble , int lowNibble ) { assert highNibble == ( highNibble & NUM_ ) ; assert lowNibble == ( lowNibble & NUM_ ) ; return ( ( highNibble << NUM_ ) | lowNibble ) ; }
public void removeURLVariable ( String name ) { urlVariables . remove ( name ) ; }
EspRegisterResult doCommandUserRegisterPhone ( String phoneNumber , String captchaCode , String userPassword ) ;
public static boolean putMapNotEmptyKeyAndValue ( Map < String , String > map , String key , String value ) { if ( map == null || StringUtils . isEmpty ( key ) || StringUtils . isEmpty ( value ) ) { return BOOL_ ; } map . put ( key , value ) ; return BOOL_ ; }
public boolean areLastThreeNonRight ( ) { if ( ! hasThree ( ) ) return BOOL_ ; double x1 , y1 , x2 , y2 , x3 , y3 ; int pos = points . size ( ) - NUM_ ; x1 = points . get ( pos ) . getX ( ) ; y1 = points . get ( pos ) . getY ( ) ; x2 = points . get ( pos + NUM_ ) . getX ( ) ; y2 = points . get ( pos + NUM_ ) . getY ( ) ; x3 = points . get ( pos + NUM_ ) . getX ( ) ; y3 = points . get ( pos + NUM_ ) . getY ( ) ; double val1 = ( x2 - x1 ) * ( y3 - y1 ) ; double val2 = ( y2 - y1 ) * ( x3 - x1 ) ; double diff = FloatingPoint . value ( val1 - val2 ) ; if ( diff >= NUM_ ) return BOOL_ ; return BOOL_ ; }
public void handleKeepAliveSignal ( long platformIdent ) { AgentStatusData agentStatusData = agentStatusDataMap . get ( platformIdent ) ; if ( null != agentStatusData ) { agentStatusData . setLastKeepAliveTimestamp ( System . currentTimeMillis ( ) ) ; if ( agentStatusData . getAgentConnection ( ) == AgentConnection . NO_KEEP_ALIVE ) { agentStatusData . setAgentConnection ( AgentConnection . CONNECTED ) ; if ( log . isInfoEnabled ( ) ) { log . info ( STR_ + platformIdent + STR_ ) ; } } } }
void next ( Long minPosition , final Callback < TimelineResult < T > > cb ) ;
public static boolean isVerticalWin ( String [ ] [ ] m , String t ) { for ( int i = NUM_ ; i < m . length ; i ++ ) { int count = NUM_ ; for ( int j = NUM_ ; j < m [ i ] . length ; j ++ ) { if ( m [ j ] [ i ] == t ) count ++ ; } if ( count == NUM_ ) return BOOL_ ; } return BOOL_ ; }
private void readObject ( java . io . ObjectInputStream s ) throws java . io . IOException , ClassNotFoundException { try { s . defaultReadObject ( ) ; this . queue = new Object [ q . size ( ) ] ; comparator = q . comparator ( ) ; addAll ( q ) ; } finally { q = null ; } }
public TwitterMoPubAdAdapter ( Activity activity , Adapter originalAdapter , MoPubNativeAdPositioning . MoPubServerPositioning adPositioning ) { super ( activity , originalAdapter , adPositioning ) ; }
void filesRemoved ( ) ;
public byte decodeBuffer ( String inputString ) [ ] throws IOException { byte inputBuffer [ ] = new byte [ inputString . length ( ) ] ; ByteArrayInputStream inStream ; ByteArrayOutputStream outStream ; inputString . getBytes ( NUM_ , inputString . length ( ) , inputBuffer , NUM_ ) ; inStream = new ByteArrayInputStream ( inputBuffer ) ; outStream = new ByteArrayOutputStream ( ) ; decodeBuffer ( inStream , outStream ) ; return ( outStream . toByteArray ( ) ) ; }
public static MVStore open ( String fileName ) { HashMap < String , Object > config = New . hashMap ( ) ; config . put ( STR_ , fileName ) ; return new MVStore ( config ) ; }
protected void init ( List < ? extends DataSet < ? > > dataSets ) { isLegal ( dataSets ) ; calcMinMax ( dataSets ) ; calcYValueSum ( dataSets ) ; calcYValueCount ( dataSets ) ; calcXValAverageLength ( ) ; }
public boolean isUseSessionId ( ) { return sessionIdPattern != null ; }
public void deleteUser ( String username ) { try { logger . info ( STR_ + username ) ; if ( rootToken == null || rootToken . trim ( ) . length ( ) == NUM_ ) { logger . warn ( STR_ ) ; return ; } if ( jenkinsOpen ) { HttpClient httpclient = HttpClientBuilder . create ( ) . build ( ) ; ArrayList < NameValuePair > parameters = new ArrayList < NameValuePair > ( ) ; HttpPost post = new HttpPost ( STR_ + JENKINS_IP + STR_ + username + STR_ ) ; parameters . add ( new BasicNameValuePair ( STR_ , STR_ ) ) ; parameters . add ( new BasicNameValuePair ( STR_ , STR_ ) ) ; post . setEntity ( new UrlEncodedFormEntity ( parameters ) ) ; post . setHeader ( STR_ , rootToken ) ; post . setHeader ( STR_ , STR_ ) ; httpclient . execute ( post ) ; } } catch ( Exception e ) { logger . error ( username , e ) ; } }
public void oneMethod ( ) { anotherMethod ( ) ; }
void remove ( int index ) ;
private void resetTopicAlarmState ( String rootContext ) { try { if ( rootContext != null ) { AtomicBoolean alarmState = m_alarmState . get ( rootContext ) ; if ( alarmState != null ) alarmState . set ( BOOL_ ) ; } } catch ( Exception e ) { } }
public void visitOuterClass ( String owner , String name , String desc ) { if ( cv != null ) { cv . visitOuterClass ( owner , name , desc ) ; } }
public static Text valueOf ( char c , int length ) { if ( length < NUM_ ) throw new IndexOutOfBoundsException ( ) ; if ( length <= BLOCK_SIZE ) { Text text = Text . newPrimitive ( length ) ; for ( int i = NUM_ ; i < length ; ) { text . _data [ i ++ ] = c ; } return text ; } else { final int middle = ( length > > NUM_ ) ; return Text . newComposite ( Text . valueOf ( c , middle ) , Text . valueOf ( c , length - middle ) ) ; } }
void removeRequestInterceptorByClass ( Class clazz ) ;
private void checkDependencies ( ) { if ( basedOnDatabase != null ) { if ( ! input . isComplete ( ) || basedOnDatabase . get ( ) != input . getInputStep ( ) . getDatabase ( ) ) { basedOnDatabase = null ; firePanelUpdated ( ) ; } } }
public void close ( ) { synchronized ( this ) { if ( channel != null ) { try { channel . close ( ) ; } catch ( Exception ex ) { } channel = null ; } if ( m_out != null ) { m_out . shutdown ( ) ; m_out = null ; } if ( m_in != null ) { m_in . shutdown ( ) ; m_in = null ; } } List < TcpRequest > ls = new ArrayList < > ( requestMap . values ( ) ) ; for ( TcpRequest tr : ls ) { tr . weekup ( ) ; } }
public String toString ( ) { return STR_ + x + STR_ + y + STR_ + z + STR_ + w + STR_ ; }
public void updateDatabasePostExecute ( ) { task = new searchTask ( ) ; task . execute ( query ) ; }
public StampedLock ( ) { state = ORIGIN ; }
public AbstractSVGAnimatedLength ( AbstractElement elt , String ns , String ln , short dir , boolean nonneg ) { super ( elt , ns , ln ) ; direction = dir ; nonNegative = nonneg ; }
public static void superposeWithAngle ( ComplexVector vec1 , ComplexVector vec2 ) { int dim = vec1 . getDimension ( ) ; assert ( dim == vec2 . getDimension ( ) ) ; assert ( vec1 . getOpMode ( ) == ComplexVector . Mode . CARTESIAN || vec1 . getOpMode ( ) == ComplexVector . Mode . HERMITIAN ) ; assert ( vec2 . getOpMode ( ) == ComplexVector . Mode . POLAR_DENSE ) ; short c [ ] = vec2 . getPhaseAngles ( ) ; float [ ] coordinates = vec1 . getCoordinates ( ) ; for ( int i = NUM_ , j = NUM_ ; i < dim ; i ++ , j += NUM_ ) { coordinates [ j ] += CircleLookupTable . getRealEntry ( c [ i ] ) ; coordinates [ j + NUM_ ] += CircleLookupTable . getImagEntry ( c [ i ] ) ; } }
public CharBuffer put ( char [ ] src , int srcOffset , int charCount ) { Arrays . checkOffsetAndCount ( src . length , srcOffset , charCount ) ; if ( charCount > remaining ( ) ) { throw new BufferOverflowException ( ) ; } for ( int i = srcOffset ; i < srcOffset + charCount ; ++ i ) { put ( src [ i ] ) ; } return this ; }
void addCandidateUser ( String userId ) ;
public static Config mergeConfiguration ( Config ... configs ) throws ConfigurationException { return mergeConfiguration ( Arrays . asList ( configs ) ) ; }
private String normilize ( String path ) { if ( ! U . isWindows ( ) ) return path ; return path . replace ( STR_ , File . separatorChar ) ; }
void initialize ( InitializationContext context ) throws IOException ;
public String crossValTipText ( ) { return STR_ ; }
boolean isLockedPeriod ( DataSet dataSet , Period period , OrganisationUnit organisationUnit , Date now ) ;
static void acceptAndReset ( ServerSocketChannel ssc ) throws IOException { SocketChannel peer = ssc . accept ( ) ; try { peer . setOption ( StandardSocketOptions . SO_LINGER , NUM_ ) ; peer . configureBlocking ( BOOL_ ) ; peer . write ( ByteBuffer . wrap ( new byte [ NUM_ * NUM_ ] ) ) ; } finally { peer . close ( ) ; } }
public static < K , V > LinkedHashMap < K , V > linkedHashMap ( int initialCapacity ) { return new LinkedHashMap < K , V > ( initialCapacity ) ; }
public MandatoryUdaMissingException ( String message , Object [ ] params ) { super ( message , params ) ; }
public boolean isVideo ( ) ;
double height ( final int markerIndex ) ;
protected BindingPropertyImpl ( ) { super ( ) ; }
private boolean isOpen ( ) { return buf != null ; }
private static void printMessage ( String [ ] msg ) { for ( String s : msg ) { System . out . println ( s ) ; } }
public void onNavigateUp ( ) { File parentDir = null ; if ( mDirectory != null ) { parentDir = mDirectory . getParentFile ( ) ; } listDirectory ( parentDir ) ; }
public GeoRssPoint ( ) { super ( Namespaces . GEO_RSS_NAMESPACE , NAME ) ; }
public int encodeTilePixels ( int [ ] pixels , Rectangle rect , byte [ ] bpixels ) { return NUM_ ; }
protected boolean [ ] runBasicTest ( boolean nominalPredictor , boolean numericPredictor , boolean stringPredictor , boolean datePredictor , boolean relationalPredictor , boolean multiInstance , int classType , int missingLevel , boolean predictorMissing , boolean classMissing , int numTrain , int numClasses , ArrayList < String > accepts ) { return runBasicTest ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType , TestInstances . CLASS_IS_LAST , missingLevel , predictorMissing , classMissing , numTrain , numClasses , accepts ) ; }
public void addActionFactory ( final IPlayerActionFactory actionFactory ) { actionFactories . add ( actionFactory ) ; }
public boolean isMatch ( ) { return ! ( refName == null || refName . equals ( STR_ ) ) ; }
public void removeAllChilds ( ) { List < Node > removedNodes = childNodes ; childNodes = null ; childElementNodes = null ; childElementNodesCount = NUM_ ; if ( removedNodes != null ) { for ( int i = NUM_ , removedNodesSize = removedNodes . size ( ) ; i < removedNodesSize ; i ++ ) { Node removedNode = removedNodes . get ( i ) ; removedNode . detachFromParent ( ) ; } } }
public boolean sendQuestEndDialog ( QuestEnv env ) { return sendQuestEndDialog ( env , NUM_ ) ; }
private String trimPrefix ( String val ) { if ( ( val != null ) && ( val . startsWith ( WSSEConstants . NS_X509 ) || val . startsWith ( WSSEConstants . NS_SMS ) ) ) { return val ; } int pos = val . indexOf ( STR_ ) ; if ( pos == - NUM_ ) { return val ; } else if ( pos == val . length ( ) ) { return STR_ ; } else { return val . substring ( pos + NUM_ ) ; } }
public boolean hasActiveECCM ( ) { if ( game . getBoard ( ) . inSpace ( ) && ! game . getOptions ( ) . booleanOption ( STR_ ) ) { return BOOL_ ; } if ( ( game . getOptions ( ) . booleanOption ( STR_ ) || game . getOptions ( ) . booleanOption ( STR_ ) ) && ! isShutDown ( ) ) { for ( Mounted m : getMisc ( ) ) { EquipmentType type = m . getType ( ) ; if ( ( type instanceof MiscType ) && ( ( type . hasFlag ( MiscType . F_ECM ) && ( m . curMode ( ) . equals ( STR_ ) || m . curMode ( ) . equals ( STR_ ) || m . curMode ( ) . equals ( STR_ ) ) ) || ( type . hasFlag ( MiscType . F_COMMUNICATIONS ) && m . curMode ( ) . equals ( STR_ ) ) ) ) { return ! m . isInoperable ( ) ; } } } return BOOL_ ; }
protected AbstractResourceUndoState ( IResource resource ) { parent = resource . getParent ( ) ; if ( resource . isAccessible ( ) ) { modificationStamp = resource . getModificationStamp ( ) ; localTimeStamp = resource . getLocalTimeStamp ( ) ; resourceAttributes = resource . getResourceAttributes ( ) ; try { IMarker [ ] markers = resource . findMarkers ( null , BOOL_ , IResource . DEPTH_INFINITE ) ; markerDescriptions = new MarkerUndoState [ markers . length ] ; for ( int i = NUM_ ; i < markers . length ; i ++ ) { markerDescriptions [ i ] = new MarkerUndoState ( markers [ i ] ) ; } } catch ( CoreException e ) { } } }
public char current ( ) { if ( pos >= NUM_ && pos < chars . length ) { return chars [ pos ] ; } else { return DONE ; } }
public int size ( ) { return this . tickUnits . size ( ) ; }
public void configureCluster ( T config , Environment environment ) throws ClusterConfigurationException ;
public int canDisplayUpTo ( char [ ] text , int start , int limit ) { StringCharacterIterator sci = new StringCharacterIterator ( new String ( text ) ) ; return canDisplayUpTo ( sci , start , limit ) ; }
public boolean allowsExpansion ( ) { return ( expandable != null && expandable ) ; }
void updateRow ( String tableName , Map < String , Object > values ) ;
void dispatch ( ) ;
private void stopCompactor ( ) { synchronized ( this ) { if ( LocalRegion . ISSUE_CALLBACKS_TO_CACHE_OBSERVER ) { CacheObserverHolder . getInstance ( ) . beforeStoppingCompactor ( ) ; } this . compactorEnabled = BOOL_ ; if ( LocalRegion . ISSUE_CALLBACKS_TO_CACHE_OBSERVER ) { CacheObserverHolder . getInstance ( ) . afterSignallingCompactor ( ) ; } } if ( LocalRegion . ISSUE_CALLBACKS_TO_CACHE_OBSERVER ) { CacheObserverHolder . getInstance ( ) . afterStoppingCompactor ( ) ; } }
public HttpRequest ( final String url , final String method ) throws HttpRequestException { try { this . url = new URL ( url . toString ( ) ) ; } catch ( MalformedURLException e ) { throw new HttpRequestException ( e ) ; } this . requestMethod = method ; this . cookies = new LinkedHashMap < String , String > ( ) ; }
private void syntheticError ( DiagnosticPosition pos , Symbol sym ) { if ( ! sym . type . isErroneous ( ) ) { if ( warnOnSyntheticConflicts ) { log . warning ( pos , STR_ , sym , sym . location ( ) ) ; } else { log . error ( pos , STR_ , sym , sym . location ( ) ) ; } } }
public void runTest ( ) throws Throwable { Document doc ; DocumentType ownerDocument ; doc = ( Document ) load ( STR_ , BOOL_ ) ; ownerDocument = ( DocumentType ) doc . getOwnerDocument ( ) ; assertNull ( STR_ , ownerDocument ) ; }
public static Graph scan ( Object o , boolean trace ) { if ( o == null ) { return null ; } if ( Graph . class . equals ( o . getClass ( ) ) ) { return ( Graph ) o ; } Graph graph = new Graph ( BOOL_ , trace ) ; Node origin = graph . expandReactiveSate ( o , null ) ; graph . addUpstream ( origin , null ) ; graph . addDownstream ( origin , null ) ; return graph ; }
public WETriangleMesh transform ( Matrix4x4 mat , boolean updateNormals ) { for ( Vertex v : vertices . values ( ) ) { mat . applyToSelf ( v ) ; } rebuildIndex ( ) ; if ( updateNormals ) { computeFaceNormals ( ) ; } return this ; }
public Model validateNode ( Dataset dataset , URI shapesGraphURI , Node focusNode , Resource minSeverity , Predicate < SHConstraint > constraintFilter , Function < RDFNode , String > labelFunction , ProgressMonitor monitor ) throws InterruptedException { Model results = JenaUtil . createMemoryModel ( ) ; Model shapesModel = dataset . getNamedModel ( shapesGraphURI . toString ( ) ) ; List < Property > properties = SHACLUtil . getAllConstraintProperties ( BOOL_ ) ; Resource resource = ( Resource ) dataset . getDefaultModel ( ) . asRDFNode ( focusNode ) ; Set < Resource > shapes = getShapesForResource ( resource , dataset , shapesModel ) ; for ( Resource shape : shapes ) { if ( monitor != null && monitor . isCanceled ( ) ) { throw new InterruptedException ( ) ; } addResourceViolations ( dataset , shapesGraphURI , focusNode , shape . asNode ( ) , properties , minSeverity , constraintFilter , results , labelFunction , monitor ) ; } return results ; }
public static boolean matchesElement ( ExecutableElement method , String methodName , Class < ? > ... parameters ) { if ( ! method . getSimpleName ( ) . toString ( ) . equals ( methodName ) ) { return BOOL_ ; } if ( method . getParameters ( ) . size ( ) != parameters . length ) { return BOOL_ ; } else { for ( int i = NUM_ ; i < method . getParameters ( ) . size ( ) ; i ++ ) { if ( ! method . getParameters ( ) . get ( i ) . asType ( ) . toString ( ) . equals ( parameters [ i ] . getName ( ) ) ) { return BOOL_ ; } } } return BOOL_ ; }
public static byte [ ] readFullyNoClose ( InputStream in ) throws IOException { ByteArrayOutputStream bytes = new ByteArrayOutputStream ( ) ; byte [ ] buffer = new byte [ NUM_ ] ; int count ; while ( ( count = in . read ( buffer ) ) != - NUM_ ) { bytes . write ( buffer , NUM_ , count ) ; } return bytes . toByteArray ( ) ; }
public GenericEntry updateEmailAddress ( String oldEmailAddress , String newEmailAddress ) throws AppsForYourDomainException , MalformedURLException , IOException , ServiceException { GenericEntry entry = new GenericEntry ( ) ; entry . addProperty ( STR_ , oldEmailAddress ) ; entry . addProperty ( STR_ , newEmailAddress ) ; return service . update ( new URL ( STR_ + domain + STR_ + oldEmailAddress ) , entry ) ; }
public Datastore createVmfsDatastore ( HostSystem host , ClusterComputeResource cluster , URI hostOrClusterId , BlockObjectRestRep volume , String datastoreName ) { HostScsiDisk disk = findScsiDisk ( host , cluster , volume ) ; Datastore datastore = execute ( new CreateVmfsDatastore ( host , disk , datastoreName ) ) ; addAffectedResource ( volume ) ; addVmfsDatastoreTag ( volume , hostOrClusterId , datastoreName ) ; ExecutionUtils . clearRollback ( ) ; return datastore ; }
public EntityVisitor ( final Iterator < ? extends Entity > iterator , final EntityFunction function ) { checkNotNull ( iterator ) ; checkNotNull ( function ) ; this . function = function ; this . iterator = iterator ; }
public static final Region createRegion ( ) { return new Region ( ) ; }
public boolean isKerberosToken ( ) { return kerberosToken ; }
public void actionPerformed ( ActionEvent e ) { JTextComponent target = getTextComponent ( e ) ; if ( target != null ) { Document doc = target . getDocument ( ) ; int dot = doc . getLength ( ) ; if ( select ) { target . moveCaretPosition ( dot ) ; } else { target . setCaretPosition ( dot ) ; } } }
void onSuccess ( T data ) ;
public static Date parseDate ( String dateValue , Collection dateFormats ) throws DateParseException { if ( dateValue == null ) { throw new IllegalArgumentException ( STR_ ) ; } if ( dateFormats == null ) { dateFormats = DEFAULT_PATTERNS ; } if ( dateValue . length ( ) > NUM_ && dateValue . startsWith ( STR_ ) && dateValue . endsWith ( STR_ ) ) { dateValue = dateValue . substring ( NUM_ , dateValue . length ( ) - NUM_ ) ; } SimpleDateFormat dateParser = null ; final Iterator formatIter = dateFormats . iterator ( ) ; while ( formatIter . hasNext ( ) ) { final String format = ( String ) formatIter . next ( ) ; if ( dateParser == null ) { dateParser = new SimpleDateFormat ( format , Locale . US ) ; dateParser . setTimeZone ( TimeZone . getTimeZone ( STR_ ) ) ; } else { dateParser . applyPattern ( format ) ; } try { return dateParser . parse ( dateValue ) ; } catch ( final ParseException pe ) { } } throw new DateParseException ( STR_ + dateValue ) ; }
private void createRecordHolderQueue ( File [ ] listFiles ) { this . recordHolderHeap = new PriorityQueue < SortTempFileChunkHolder > ( listFiles . length ) ; }
public SignalServiceEnvelope ( String message , String signalingKey ) throws IOException , InvalidVersionException { this ( Base64 . decode ( message ) , signalingKey ) ; }
public AbstractCpeBuilder ( String name , String yamlString ) throws BaleenException { this . name = name ; this . yamlString = yamlString ; }
public JSONArray toJSONArray ( JSONArray names ) throws JSONException { if ( names == null || names . length ( ) == NUM_ ) { return null ; } JSONArray ja = new JSONArray ( ) ; for ( int i = NUM_ ; i < names . length ( ) ; i += NUM_ ) { ja . put ( this . opt ( names . getString ( i ) ) ) ; } return ja ; }
public int totalSize ( ) { int total = NUM_ ; for ( Map . Entry < K , Counter < V > > entry : counterMap . entrySet ( ) ) { Counter < V > counter = entry . getValue ( ) ; total += counter . size ( ) ; } return total ; }
private void runAfterDismiss ( Runnable task ) { mDialog . dismiss ( ) ; if ( DeviceFormFactor . isTablet ( mContext ) ) { task . run ( ) ; } else { mContainer . postDelayed ( task , FADE_DURATION + CLOSE_CLEANUP_DELAY ) ; } }
private static int readInt ( ) throws IOException { String input = readLine ( ) ; try { return Integer . parseInt ( input ) ; } catch ( NumberFormatException nfe ) { return NUM_ ; } }
< T extends GraphObject > T cast ( Class < T > graphObjectClass ) ;
protected abstract void initViews ( Bundle savedInstanceState ) ;
public boolean isBiggerThan ( Version v ) { int len = Math . min ( numbers . length , v . numbers . length ) ; for ( int i = NUM_ ; i < len ; i ++ ) { if ( numbers [ i ] > v . numbers [ i ] ) return BOOL_ ; } return numbers . length > v . numbers . length ; }
private void returnData ( Object ret ) { if ( myHost != null ) { myHost . returnData ( ret ) ; } }
protected abstract void handleSendResponse ( QueryParams queryParams , JSONObject response ) ;
public static final int ENOTSOCK ( ) { return getPlatformErrorCodes ( ) . ENOTSOCK ( ) ; }
public void removeAt ( int index ) ;
public Object clone ( ) { AuthRoleCondition theClone = null ; try { theClone = ( AuthRoleCondition ) super . clone ( ) ; } catch ( CloneNotSupportedException e ) { throw new InternalError ( ) ; } if ( properties != null ) { theClone . properties = new HashMap ( ) ; Iterator it = properties . keySet ( ) . iterator ( ) ; while ( it . hasNext ( ) ) { Object o = it . next ( ) ; Set values = new HashSet ( ) ; values . addAll ( ( Set ) properties . get ( o ) ) ; theClone . properties . put ( o , values ) ; } } return theClone ; }
public static SQLiteDatabase openOrCreateDatabase ( String path , CursorFactory factory , DatabaseErrorHandler errorHandler ) { return openDatabase ( path , factory , CREATE_IF_NECESSARY , errorHandler ) ; }
public static String convertDateToStartTimeString ( final Date date ) { final String startTimeString = START_TIME_FORMATTER . format ( date ) ; return startTimeString ; }
public native CharPointer put ( char [ ] array , int offset , int length ) ;
public CheckboxMenuItem ( ) throws HeadlessException { this ( STR_ , BOOL_ ) ; }
protected AbstractUpdate ( ) { super ( ) ; }
public POA _default_POA ( ) { return _get_delegate ( ) . default_POA ( this ) ; }
public static int predictedDefaultWidth ( Context context ) { if ( isTablet ( context ) ) { return context . getResources ( ) . getDimensionPixelSize ( R . dimen . bottomsheet_default_sheet_width ) ; } else { return context . getResources ( ) . getDisplayMetrics ( ) . widthPixels ; } }
public boolean isValid ( ) ;
static private String BYTE_Max_Plus ( ) { long tempValue = Byte . MAX_VALUE + NUM_ ; return String . valueOf ( tempValue ) ; }
private TagEditRow ensureEmptyRow ( ) { LinearLayout rowLayout = ( LinearLayout ) getOurView ( ) ; return ensureEmptyRow ( rowLayout ) ; }
private Geometry computeLinear ( LinearLocation start , LinearLocation end ) { LinearGeometryBuilder builder = new LinearGeometryBuilder ( line . getFactory ( ) ) ; builder . setFixInvalidLines ( BOOL_ ) ; if ( ! start . isVertex ( ) ) builder . add ( start . getCoordinate ( line ) ) ; for ( LinearIterator it = new LinearIterator ( line , start ) ; it . hasNext ( ) ; it . next ( ) ) { if ( end . compareLocationValues ( it . getComponentIndex ( ) , it . getVertexIndex ( ) , NUM_ ) < NUM_ ) break ; Coordinate pt = it . getSegmentStart ( ) ; builder . add ( pt ) ; if ( it . isEndOfLine ( ) ) builder . endLine ( ) ; } if ( ! end . isVertex ( ) ) builder . add ( end . getCoordinate ( line ) ) ; return builder . getGeometry ( ) ; }
protected void resetMatchIndex ( MemberState member , AppendResponse response ) { member . setMatchIndex ( response . logIndex ( ) ) ; LOGGER . debug ( STR_ , context . getCluster ( ) . member ( ) . address ( ) , member , member . getMatchIndex ( ) ) ; }
public static boolean isSystemApplication ( Context context ) { if ( context == null ) { return BOOL_ ; } return isSystemApplication ( context , context . getPackageName ( ) ) ; }
private void assertInDebug ( QueryResponse response , String key ) { assertNotNull ( STR_ , response . getDebugMap ( ) ) ; assertNotNull ( STR_ + key , response . getDebugMap ( ) . get ( key ) ) ; }
public static String serializeExpression ( Node s ) { if ( s instanceof ASTTerm ) { ASTTerm a = ( ASTTerm ) s ; return ( a . isNotFlag ( ) ? STR_ : STR_ ) + STR_ + a . getTerm ( ) ; } String prefix = STR_ ; String suffix = STR_ ; String join = STR_ ; if ( s instanceof ASTExpression ) { ASTExpression a = ( ASTExpression ) s ; prefix = ( a . isNotFlag ( ) ? STR_ : STR_ ) + STR_ ; suffix = STR_ ; join = STR_ + a . getType ( ) + STR_ ; } List < String > children = new ArrayList < String > ( ) ; for ( int i = NUM_ ; i < s . jjtGetNumChildren ( ) ; i ++ ) { children . add ( serializeExpression ( s . jjtGetChild ( i ) ) ) ; } return prefix + StringUtils . join ( children , join ) + suffix ; }
public boolean areAncestorDescendent ( String ancestor , String descendent ) throws GitClientException { try ( RevWalk revWalk = new RevWalk ( repo ) ) { RevCommit ancestorHead = revWalk . parseCommit ( repo . resolve ( ancestor ) ) ; RevCommit descendentHead = revWalk . parseCommit ( repo . resolve ( descendent ) ) ; return revWalk . isMergedInto ( ancestorHead , descendentHead ) ; } catch ( Exception e ) { throw new GitClientException ( STR_ + ancestor + STR_ + descendent , e ) ; } }
public ChangeAttribute asChangeAttribute ( ReviewDb db , Change change ) { ChangeAttribute a = new ChangeAttribute ( ) ; a . project = change . getProject ( ) . get ( ) ; a . branch = change . getDest ( ) . getShortName ( ) ; a . topic = change . getTopic ( ) ; a . id = change . getKey ( ) . get ( ) ; a . number = change . getId ( ) . toString ( ) ; a . subject = change . getSubject ( ) ; try { a . commitMessage = changeDataFactory . create ( db , change ) . commitMessage ( ) ; } catch ( Exception e ) { log . error ( STR_ + STR_ + a . number ) ; } a . url = getChangeUrl ( change ) ; a . owner = asAccountAttribute ( change . getOwner ( ) ) ; a . assignee = asAccountAttribute ( change . getAssignee ( ) ) ; a . status = change . getStatus ( ) ; return a ; }
private void key ( byte key [ ] ) { int i ; int koffp [ ] = { NUM_ } ; int lr [ ] = { NUM_ , NUM_ } ; int plen = P . length , slen = S . length ; for ( i = NUM_ ; i < plen ; i ++ ) { P [ i ] = P [ i ] ^ streamtoword ( key , koffp ) ; } for ( i = NUM_ ; i < plen ; i += NUM_ ) { encipher ( lr , NUM_ ) ; P [ i ] = lr [ NUM_ ] ; P [ i + NUM_ ] = lr [ NUM_ ] ; } for ( i = NUM_ ; i < slen ; i += NUM_ ) { encipher ( lr , NUM_ ) ; S [ i ] = lr [ NUM_ ] ; S [ i + NUM_ ] = lr [ NUM_ ] ; } }
public static boolean validateTypesAndMethods ( Collection < IType > types , Collection < IMethod > methods ) { List < IJavaElement > allElements = ImmutableList . < IJavaElement > builder ( ) . addAll ( types ) . addAll ( methods ) . build ( ) ; return validateJavaElements ( allElements ) && validateTypes ( types ) && validateMethods ( methods ) ; }
public AdsUpdateClientsQuery ( VkApiClient client , UserActor actor , int accountId , String data ) { super ( client , STR_ , Integer . class ) ; accessToken ( actor . getAccessToken ( ) ) ; accountId ( accountId ) ; data ( data ) ; }
Document generateXML ( Document doc ) throws SynthesisException ;
static AnimationStyle mapIntToValue ( int modeInt ) { switch ( modeInt ) { case NUM_ : default : return ROTATE ; case NUM_ : return FLIP ; } }
public void reset ( ) { mLabelCache . clear ( ) ; }
public void addDependencies ( HashSet < DbObject > dependencies ) { if ( dependencies . contains ( this ) ) { return ; } if ( sequences != null ) { for ( Sequence s : sequences ) { dependencies . add ( s ) ; } } ExpressionVisitor visitor = ExpressionVisitor . getDependenciesVisitor ( dependencies ) ; for ( Column col : columns ) { col . isEverything ( visitor ) ; } dependencies . add ( this ) ; }
void writeEmptyElement ( CharSequence localName ) throws XMLStreamException ;
private static byte [ ] createInt ( int value ) { return datatypeCoder . encodeInt ( value ) ; }
public boolean isFillPoints ( ) { return mFillPoints ; }
protected void recordEventState ( InternalDistributedMember provider , Map state ) { if ( this . eventTracker != null ) { this . eventTracker . recordState ( provider , state ) ; } }
Request request ( ) ;
public FastByteArrayOutputStream ( ) { buf = new byte [ NUM_ ] ; }
public SocketException ( Throwable cause ) { super ( cause ) ; }
public static _Fields findByThriftIdOrThrow ( int fieldId ) { _Fields fields = findByThriftId ( fieldId ) ; if ( fields == null ) throw new IllegalArgumentException ( STR_ + fieldId + STR_ ) ; return fields ; }
void close ( ) throws IOException ;
public synchronized boolean initThematicIndex ( String path ) { try { if ( thematicIndex == null ) { String thematicIndexName = getTileThematicFileName ( ) ; if ( thematicIndexName != null ) { thematicIndex = new DcwThematicIndex ( path + thematicIndexName , byteorder ) ; } } } catch ( FormatException fe ) { if ( Debug . debugging ( STR_ ) ) { Debug . output ( STR_ + fe . getClass ( ) + STR_ + fe . getMessage ( ) ) ; } return BOOL_ ; } return ( thematicIndex != null ) ; }
public void writeUI16 ( int value ) throws IOException { flushBits ( ) ; out . write ( value & NUM_ ) ; out . write ( value > > NUM_ ) ; bytesWritten += NUM_ ; }
private void fineLocationPermissionGranted ( ) { UtilityService . addGeofences ( this ) ; UtilityService . requestLocation ( this ) ; }
public boolean hasName ( ) { return super . hasAttribute ( NAME ) ; }
public StateSwitchItemProvider ( AdapterFactory adapterFactory ) { super ( adapterFactory ) ; }
public void readFromFileSystem ( final File propertyFileLocation ) throws ConfigurationException { properties = readPropertyFileFromFileSystem ( propertyFileLocation ) ; }
public void endStartLocator ( InternalDistributedSystem distributedSystem ) throws UnknownHostException { env = null ; if ( distributedSystem == null ) { distributedSystem = InternalDistributedSystem . getConnectedInstance ( ) ; } if ( distributedSystem != null ) { onConnect ( distributedSystem ) ; } else { InternalDistributedSystem . addConnectListener ( this ) ; } this . locatorDiscoverer = WANServiceProvider . createLocatorDiscoverer ( ) ; if ( this . locatorDiscoverer != null ) { this . locatorDiscoverer . discover ( getPort ( ) , config , locatorListener , hostnameForClients ) ; } }
public static Map < String , String > splitUrlParams ( String query ) { if ( query == null || query . isEmpty ( ) ) { return new HashMap < > ( ) ; } Map < String , String > paramMap = new HashMap < > ( ) ; String [ ] params = query . split ( STR_ ) ; for ( int i = NUM_ ; i < params . length ; i ++ ) { } for ( String currentParam : params ) { String [ ] paramSplit = currentParam . split ( STR_ ) ; if ( paramSplit . length > NUM_ ) { paramMap . put ( paramSplit [ NUM_ ] , URL . decode ( paramSplit [ NUM_ ] ) ) ; } } return paramMap ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null ) { myHost . updateProgress ( progressLabel , progress ) ; } else { System . out . println ( progressLabel + STR_ + progress + STR_ ) ; } }
private boolean isVowel ( char ch ) { return VOWELS . indexOf ( ch ) != - NUM_ ; }
public ContextedRuntimeException ( final String message , final Throwable cause , ExceptionContext context ) { super ( message , cause ) ; if ( context == null ) { context = new DefaultExceptionContext ( ) ; } exceptionContext = context ; }
public static byte [ ] decodeWebSafe ( byte [ ] source ) throws Base64DecoderException { return decodeWebSafe ( source , source . length ) ; }
public ISC_STATUS ( long value ) { super ( SIZE , value ) ; }
public static StringArgument proxyAuthIdArgument ( ) throws ArgumentException { return StringArgument . builder ( OPTION_LONG_PROXYAUTHID ) . shortIdentifier ( OPTION_SHORT_PROXYAUTHID ) . description ( INFO_DESCRIPTION_PROXYAUTHZID . get ( ) ) . valuePlaceholder ( INFO_PROXYAUTHID_PLACEHOLDER . get ( ) ) . buildArgument ( ) ; }
public FBSimpleDataSource ( GDSType type ) { mcf = new FBManagedConnectionFactory ( type ) ; }
private void writeQName ( javax . xml . namespace . QName qname , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { java . lang . String namespaceURI = qname . getNamespaceURI ( ) ; if ( namespaceURI != null ) { java . lang . String prefix = xmlWriter . getPrefix ( namespaceURI ) ; if ( prefix == null ) { prefix = generatePrefix ( namespaceURI ) ; xmlWriter . writeNamespace ( prefix , namespaceURI ) ; xmlWriter . setPrefix ( prefix , namespaceURI ) ; } if ( prefix . trim ( ) . length ( ) > NUM_ ) { xmlWriter . writeCharacters ( prefix + STR_ + org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } }
public void centerOnScreen ( ) { UIUtilities . centerOnScreen ( this ) ; }
private void createCredentials ( String number ) { given ( ) . body ( STR_ + number + STR_ ) . header ( STR_ , STR_ ) . put ( STR_ + number + STR_ ) ; }
public ActionProvider ( Context context ) { mContext = context ; }
public TableRendererBasic ( Formats [ ] aFormats ) { m_aFormats = aFormats ; }
public void receiveResendFileTransferInvitation ( FileSharingSession session , ContactId remoteContact , String displayName ) { if ( sLogger . isActivated ( ) ) { sLogger . info ( STR_ + remoteContact + STR_ + displayName ) ; } OneToOneFileTransferImpl oneToOneFileTransfer = getOrCreateOneToOneFileTransfer ( session . getFileTransferId ( ) ) ; session . addListener ( oneToOneFileTransfer ) ; }
private boolean showAppsOrWidgets ( State toState , boolean animated , boolean focusSearchBar ) { if ( mState != State . WORKSPACE && mState != State . APPS_SPRING_LOADED && mState != State . WIDGETS_SPRING_LOADED ) { return BOOL_ ; } if ( toState != State . APPS && toState != State . WIDGETS ) { return BOOL_ ; } if ( toState == State . APPS ) { mStateTransitionAnimation . startAnimationToAllApps ( mWorkspace . getState ( ) , animated , focusSearchBar ) ; } else { mStateTransitionAnimation . startAnimationToWidgets ( mWorkspace . getState ( ) , animated ) ; } mState = toState ; mUserPresent = BOOL_ ; updateAutoAdvanceState ( ) ; closeFolder ( ) ; getWindow ( ) . getDecorView ( ) . sendAccessibilityEvent ( AccessibilityEvent . TYPE_WINDOW_STATE_CHANGED ) ; return BOOL_ ; }
public Polynomial minus ( double c ) { return plus ( - c ) ; }
public SSHPrompt sendWaitFor ( String send , Integer timeout , SSHPrompt [ ] prompts , StringBuilder buf ) throws NetworkDeviceControllerException { _log . debug ( MessageFormat . format ( STR_ , new Object [ ] { getSession ( ) . getSession ( ) . getHost ( ) , getSession ( ) . getSession ( ) . getPort ( ) , send } ) ) ; SSHPrompt prompt = null ; try { oswr . append ( send ) ; oswr . flush ( ) ; prompt = waitFor ( prompts , timeout , buf , BOOL_ ) ; } catch ( Exception ex ) { _log . error ( STR_ , send , buf ) ; throw new NetworkDeviceControllerException ( ex ) ; } _log . debug ( MessageFormat . format ( STR_ , new Object [ ] { getSession ( ) . getSession ( ) . getHost ( ) , getSession ( ) . getSession ( ) . getPort ( ) , send , buf } ) ) ; return prompt ; }
static AnimationStyle mapIntToValue ( int modeInt ) { switch ( modeInt ) { case NUM_ : default : return ROTATE ; case NUM_ : return FLIP ; } }
public void unfollow ( int followerId , int followeeId ) { if ( followerId != followeeId && followMap . get ( followerId ) != null && followMap . get ( followerId ) . get ( followeeId ) != null ) { followMap . get ( followerId ) . remove ( followeeId ) ; } }
public void removeCalendarSelectionListener ( CalendarSelectionListener listener ) { calendarSelectionListeners . remove ( listener ) ; }
private void validateState ( State current ) { ValidationUtils . validateState ( current ) ; }
private static void queryPortfolioFeed ( FinanceService service , String feedUrl ) throws IOException , MalformedURLException , ServiceException { System . out . println ( STR_ + feedUrl ) ; PortfolioFeed portfolioFeed = service . getFeed ( new URL ( feedUrl ) , PortfolioFeed . class ) ; System . out . println ( STR_ ) ; printBasicFeedDetails ( portfolioFeed ) ; for ( int i = NUM_ ; i < portfolioFeed . getEntries ( ) . size ( ) ; i ++ ) { PortfolioEntry portfolioEntry = portfolioFeed . getEntries ( ) . get ( i ) ; printPortfolioEntry ( portfolioEntry ) ; } }
public RVMMethod findMainMethod ( ) { Atom mainName = Atom . findOrCreateAsciiAtom ( ( STR_ ) ) ; Atom mainDescriptor = Atom . findOrCreateAsciiAtom ( ( STR_ ) ) ; RVMMethod mainMethod = this . findDeclaredMethod ( mainName , mainDescriptor ) ; if ( mainMethod == null || ! mainMethod . isPublic ( ) || ! mainMethod . isStatic ( ) ) { return null ; } return mainMethod ; }
public boolean verbose ( ) { return soot . PhaseOptions . getBoolean ( options , STR_ ) ; }
protected static void succeed ( ) { System . exit ( NUM_ ) ; }
public RangeTable ( Schema schema , Expression min , Expression max , boolean noColumns ) { super ( schema , NAME ) ; Column [ ] cols = noColumns ? new Column [ NUM_ ] : new Column [ ] { new Column ( STR_ , Value . LONG ) } ; this . min = min ; this . max = max ; setColumns ( cols ) ; }
void destroyContainer ( EnvironmentContainerHost containerHost , boolean async ) throws EnvironmentNotFoundException , EnvironmentModificationException ;
public void addValue ( IFitsHeader key , long val ) throws HeaderCardException { addValue ( key . key ( ) , val , key . comment ( ) ) ; }
public boolean isError ( ) { return error != null ; }
LdapReferralException appendUnprocessedReferrals ( LdapReferralException back ) { if ( debug ) { System . out . println ( STR_ ) ; dump ( ) ; if ( back != null ) { back . dump ( ) ; } } LdapReferralException front = this ; if ( ! front . hasMoreReferrals ( ) ) { front = nextReferralEx ; if ( ( errorEx != null ) && ( front != null ) ) { front . setNamingException ( errorEx ) ; } } if ( this == back ) { return front ; } if ( ( back != null ) && ( ! back . hasMoreReferrals ( ) ) ) { back = back . nextReferralEx ; } if ( back == null ) { return front ; } LdapReferralException ptr = front ; while ( ptr . nextReferralEx != null ) { ptr = ptr . nextReferralEx ; } ptr . nextReferralEx = back ; return front ; }
public static void main ( final String [ ] args ) throws Exception { final Properties properties = new Properties ( ) ; properties . setProperty ( TestOptions . NTASKS , STR_ ) ; properties . setProperty ( TestOptions . NINSERT , STR_ ) ; properties . setProperty ( TestOptions . TIMEOUT , STR_ ) ; properties . setProperty ( Options . WRITE_SERVICE_CORE_POOL_SIZE , STR_ ) ; properties . setProperty ( Options . WRITE_SERVICE_MAXIMUM_POOL_SIZE , STR_ ) ; properties . setProperty ( Options . WRITE_SERVICE_PRESTART_ALL_CORE_THREADS , STR_ ) ; properties . setProperty ( Options . WRITE_SERVICE_QUEUE_CAPACITY , STR_ ) ; properties . setProperty ( Options . CREATE_TEMP_FILE , STR_ ) ; properties . setProperty ( Options . BUFFER_MODE , BufferMode . Disk . toString ( ) ) ; IComparisonTest test = new StressTestGroupCommit ( ) ; test . setUpComparisonTest ( properties ) ; try { test . doComparisonTest ( properties ) ; } finally { try { test . tearDownComparisonTest ( ) ; } catch ( Throwable t ) { log . warn ( STR_ + t , t ) ; } } }
private boolean pruned ( Type type ) { return pruned ( TypeToken . of ( type ) . getRawType ( ) ) ; }
JMSConfiguration parseConfiguration ( final InputStream stream ) throws Exception ;
public long bytes ( final long size ) { if ( size < NUM_ ) { throw new IllegalArgumentException ( STR_ + size ) ; } return size * mUnitSize ; }
public final boolean containsKey ( String name ) { return mMap . containsKey ( name ) ; }
public void readData ( DataInput din ) throws IOException { byteCount = din . readByte ( ) ; status = din . readUnsignedShort ( ) ; eventCount = din . readUnsignedShort ( ) ; messageCount = din . readUnsignedShort ( ) ; events = new byte [ byteCount - NUM_ ] ; if ( events . length > NUM_ ) { din . readFully ( events , NUM_ , events . length ) ; } }
public void checkAndHandleLastVisibleCellChange ( ) { final int currentLastVisibleItem = mCurrentFirstVisibleItem + mCurrentVisibleItemCount ; final int previousLastVisibleItem = mPreviousFirstVisibleItem + mPreviousVisibleItemCount ; if ( currentLastVisibleItem != previousLastVisibleItem ) { if ( mCellIsMobile && mMobileItemId != INVALID_ID ) { updateNeighborViewsForID ( mMobileItemId ) ; handleCellSwitch ( ) ; } } }
public int session ( ) { return Integer . parseInt ( fields [ NUM_ ] ) ; }
private static void addEntriesForInfrequentBlocks ( IR ir , LiveAnalysis live , HashMap < BasicBlockPair , HashSet < Register > > result ) { for ( Enumeration < BasicBlock > e = ir . getBasicBlocks ( ) ; e . hasMoreElements ( ) ; ) { BasicBlock bb = e . nextElement ( ) ; boolean bbInfrequent = bb . getInfrequent ( ) ; for ( Enumeration < BasicBlock > out = bb . getNormalOut ( ) ; out . hasMoreElements ( ) ; ) { BasicBlock dest = out . nextElement ( ) ; boolean destInfrequent = dest . getInfrequent ( ) ; if ( bbInfrequent ^ destInfrequent ) { HashSet < Register > liveRegisters = live . getLiveRegistersOnEdge ( bb , dest ) ; for ( Register r : liveRegisters ) { if ( r . isSymbolic ( ) ) { HashSet < Register > s = findOrCreateSplitSet ( result , bb , dest ) ; s . add ( r ) ; } } } } } }
public void addBoxPointingToThis ( UnitBox b ) ;
public RxJava1ClientWebRequestBuilder body ( Object content ) { this . delegate . body ( Mono . just ( content ) , ResolvableType . forInstance ( content ) ) ; return this ; }
public int size ( ) { return key . size ( ) ; }
void start ( ) ;
void onLogAdded ( Test test , Log log ) ;
public boolean checkToolPanelToggleMenuItem ( ToolPanelToggleMenuItem mi ) { return ( mi != null && mi . getToolPanel ( ) . equals ( this ) ) ; }
public void spacing ( float spacing ) { this . spacing = spacing ; invalidate ( ) ; }
public abstract boolean has ( String name ) ;
public static boolean constantTimeAreEqual ( byte [ ] a , byte [ ] b ) { if ( a == b ) { return BOOL_ ; } if ( a == null || b == null ) { return BOOL_ ; } if ( a . length != b . length ) { return BOOL_ ; } int nonEqual = NUM_ ; for ( int i = NUM_ ; i != a . length ; i ++ ) { nonEqual |= ( a [ i ] ^ b [ i ] ) ; } return nonEqual == NUM_ ; }
private void onFinishedMovement ( ) { checkSelectionChanged ( ) ; invalidate ( ) ; }
public MutableInterval copy ( ) { return ( MutableInterval ) clone ( ) ; }
public void focusLost ( FocusEvent e ) { setVisible ( BOOL_ ) ; setSelectionVisible ( ownsSelection || e . isTemporary ( ) ) ; }
void onEndOfSpeech ( ) ;
private boolean hasDependencyTo ( IResourceDescription candidate , IResourceDescription . Delta delta ) { return hasDependencyTo ( candidate . getURI ( ) , delta . getUri ( ) ) ; }
protected void calculatePartialsPartialsPruning ( double [ ] partials1 , double [ ] matrices1 , double [ ] partials2 , double [ ] matrices2 , double [ ] partials3 , int [ ] matrixMap ) { throw new RuntimeException ( STR_ ) ; }
void put ( final Object item ) { lbd . add ( item ) ; }
public ChartPanel ( JFreeChart chart , boolean properties , boolean save , boolean print , boolean zoom , boolean tooltips ) { this ( chart , DEFAULT_WIDTH , DEFAULT_HEIGHT , DEFAULT_MINIMUM_DRAW_WIDTH , DEFAULT_MINIMUM_DRAW_HEIGHT , DEFAULT_MAXIMUM_DRAW_WIDTH , DEFAULT_MAXIMUM_DRAW_HEIGHT , DEFAULT_BUFFER_USED , properties , save , print , zoom , tooltips ) ; }
private static boolean isURIString ( String p_uric ) { if ( p_uric == null ) { return BOOL_ ; } int end = p_uric . length ( ) ; char testChar = STR_ ; for ( int i = NUM_ ; i < end ; i ++ ) { testChar = p_uric . charAt ( i ) ; if ( testChar == STR_ ) { if ( i + NUM_ >= end || ! isHex ( p_uric . charAt ( i + NUM_ ) ) || ! isHex ( p_uric . charAt ( i + NUM_ ) ) ) { return BOOL_ ; } else { i += NUM_ ; continue ; } } if ( isReservedCharacter ( testChar ) || isUnreservedCharacter ( testChar ) ) { continue ; } else { return BOOL_ ; } } return BOOL_ ; }
protected CCBitmapFontAtlas ( CharSequence theString , String fntFile ) { super ( ( parsed = FNTConfigLoadFile ( fntFile ) ) . atlasName , theString . length ( ) ) ; configuration_ = parsed ; opacity_ = NUM_ ; color_ = new ccColor3B ( ccColor3B . ccWHITE ) ; contentSize_ = CGSize . zero ( ) ; opacityModifyRGB_ = textureAtlas_ . getTexture ( ) . hasPremultipliedAlpha ( ) ; anchorPoint_ = CGPoint . ccp ( NUM_ , NUM_ ) ; string_ = new TextBuilder ( ) ; setString ( theString ) ; }
public T rotationY ( float ... vals ) { transitFloat ( ROTATION_Y , vals ) ; return self ( ) ; }
public final void yyclose ( ) throws java . io . IOException { zzAtEOF = BOOL_ ; zzEndRead = zzStartRead ; if ( zzReader != null ) zzReader . close ( ) ; }
private static int stringToHash ( String s ) { int len = s . length ( ) ; int hash = len ; hash <<= NUM_ ; hash += s . charAt ( NUM_ ) - NUM_ ; int j = len ; for ( int i = NUM_ ; i < NUM_ && j > NUM_ ; i ++ ) { j -- ; hash <<= NUM_ ; hash += s . charAt ( j ) - NUM_ ; } return hash ; }
public OutOfRangeException ( Localizable specific , Number wrong , Number lo , Number hi ) { super ( specific , wrong , lo , hi ) ; this . lo = lo ; this . hi = hi ; }
public boolean sendEMailAttachments ( int AD_User_ID , String subject , String message , Collection < File > attachments , boolean html ) { MUser to = MUser . get ( getCtx ( ) , AD_User_ID ) ; String toEMail = to . getEMail ( ) ; if ( toEMail == null || toEMail . length ( ) == NUM_ ) { log . warning ( STR_ + to ) ; return BOOL_ ; } EMail email = createEMail ( null , to , subject , message , html ) ; if ( email == null ) return BOOL_ ; email . addAttachments ( attachments ) ; try { return sendEmailNow ( null , to , email ) ; } catch ( Exception ex ) { log . severe ( getName ( ) + STR_ + ex . getLocalizedMessage ( ) ) ; return BOOL_ ; } }
public void clear ( ) { clear ( NUM_ , size ) ; }
private Snapshot createSnapshot ( SnapshotDescriptor descriptor ) { if ( storage . level ( ) == StorageLevel . MEMORY ) { return createMemorySnapshot ( descriptor ) ; } else { return createDiskSnapshot ( descriptor ) ; } }
public static int systemIndexOf ( String o ) { return systemIndex . indexOf ( o ) ; }
public T showTextAligned ( String text , float x , float y , TextAlignment textAlign , VerticalAlignment vertAlign , float angle ) { Paragraph p = new Paragraph ( text ) ; return showTextAligned ( p , x , y , pdfDocument . getNumberOfPages ( ) , textAlign , vertAlign , angle ) ; }
protected synchronized static void installShutdownMethods ( ) { installShutdownHook ( ) ; installShutdownSocketHandler ( ) ; }
public void addTrainSkipsLocation ( String locationId ) { if ( _skipLocationsList . contains ( locationId ) ) { return ; } _skipLocationsList . add ( NUM_ , locationId ) ; log . debug ( STR_ + locationId ) ; setDirtyAndFirePropertyChange ( STOPS_CHANGED_PROPERTY , _skipLocationsList . size ( ) - NUM_ , _skipLocationsList . size ( ) ) ; }
public void writeExif ( Bitmap bmap , OutputStream exifOutStream ) throws IOException { if ( bmap == null || exifOutStream == null ) { throw new IllegalArgumentException ( NULL_ARGUMENT_STRING ) ; } OutputStream s = getExifWriterStream ( exifOutStream ) ; bmap . compress ( Bitmap . CompressFormat . JPEG , NUM_ , s ) ; s . flush ( ) ; }
public ElkanKMeans ( DistanceMetric dm , Random rand ) { this ( dm , rand , DEFAULT_SEED_SELECTION ) ; }
T timerOnce ( long period ) ;
private boolean onlyDetectedBySensors ( ) { boolean sensors = bv . game . getOptions ( ) . booleanOption ( STR_ ) ; boolean sensorsDetectAll = bv . game . getOptions ( ) . booleanOption ( STR_ ) ; boolean doubleBlind = bv . game . getOptions ( ) . booleanOption ( STR_ ) ; boolean hasVisual = entity . hasSeenEntity ( bv . getLocalPlayer ( ) ) ; boolean hasDetected = entity . hasDetectedEntity ( bv . getLocalPlayer ( ) ) ; if ( sensors && doubleBlind && ! sensorsDetectAll && ! trackThisEntitiesVisibilityInfo ( entity ) && hasDetected && ! hasVisual ) { return BOOL_ ; } else { return BOOL_ ; } }
public boolean isLongerThan ( ReadableDuration duration ) { if ( duration == null ) { duration = Duration . ZERO ; } return compareTo ( duration ) > NUM_ ; }
protected void finalize ( ) throws Throwable { synchronized ( globalSync ) { nativeDestroyPoller ( handle ) ; super . finalize ( ) ; } }
private int measureShort ( int measureSpec ) { int result ; int specMode = MeasureSpec . getMode ( measureSpec ) ; int specSize = MeasureSpec . getSize ( measureSpec ) ; if ( specMode == MeasureSpec . EXACTLY ) { result = specSize ; } else { result = ( int ) ( NUM_ * mRadius + getPaddingTop ( ) + getPaddingBottom ( ) + NUM_ ) ; if ( specMode == MeasureSpec . AT_MOST ) { result = Math . min ( result , specSize ) ; } } return result ; }
private void importPublicDependencies ( final FileDescriptor file ) { for ( FileDescriptor dependency : file . getPublicDependencies ( ) ) { if ( dependencies . add ( dependency ) ) { importPublicDependencies ( dependency ) ; } } }
private void logSlowRequests ( long requestLifetime , Request < ? > request , byte [ ] responseContents , StatusLine statusLine ) { if ( DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS ) { VolleyLog . d ( STR_ + STR_ , request , requestLifetime , responseContents != null ? responseContents . length : STR_ , statusLine . getStatusCode ( ) , request . getRetryPolicy ( ) . getCurrentRetryCount ( ) ) ; } }
boolean isReverted ( ) ;
public abstract void close ( ) throws IOException ;
protected Anonymous_program_1_Impl ( ) { super ( ) ; }
public void childrenRemoved ( BeanContextMembershipEvent bcme ) { Iterator it = bcme . iterator ( ) ; while ( it . hasNext ( ) ) { findAndUndo ( it . next ( ) ) ; } }
public JSONObject toJSONObject ( JSONArray names ) throws JSONException { if ( names == null || names . length ( ) == NUM_ || this . length ( ) == NUM_ ) { return null ; } JSONObject jo = new JSONObject ( ) ; for ( int i = NUM_ ; i < names . length ( ) ; i += NUM_ ) { jo . put ( names . getString ( i ) , this . opt ( i ) ) ; } return jo ; }
JavaFileObject genCode ( Env < AttrContext > env , JCClassDecl cdef ) throws IOException { try { if ( gen . genClass ( env , cdef ) && ( errorCount ( ) == NUM_ ) ) return writer . writeClass ( cdef . sym ) ; } catch ( ClassWriter . PoolOverflow ex ) { log . error ( cdef . pos ( ) , STR_ ) ; } catch ( ClassWriter . StringOverflow ex ) { log . error ( cdef . pos ( ) , STR_ , ex . value . substring ( NUM_ , NUM_ ) ) ; } catch ( CompletionFailure ex ) { chk . completionError ( cdef . pos ( ) , ex ) ; } return null ; }
public RotationMatrixBuilder ( int dimension ) { super ( ) ; this . dimension = dimension ; planes = new ArrayList < Plane > ( ) ; }
public static String valueOf ( char value ) { String s ; if ( value < NUM_ ) { s = new String ( value , NUM_ , ASCII ) ; } else { s = new String ( NUM_ , NUM_ , new char [ ] { value } ) ; } s . hashCode = value ; return s ; }
public boolean containsValue ( String value ) { return mCapabilities . containsValue ( value ) ; }
public void addBusinessFilterToToChannels ( ViewerFilter filter ) ;
protected AbstractTripleStore reopenStore ( AbstractTripleStore store ) { return getOurDelegate ( ) . reopenStore ( store ) ; }
public static final Criterion address ( AddressType type , String address ) { return new HeaderCriterion ( type . name ( ) , new AddressOperator ( address ) ) ; }
public void addExternal ( Dispatchable dispatchable ) ;
public HandlerRegistration addKeyPressHandler ( com . smartgwt . client . widgets . form . fields . events . KeyPressHandler handler ) { if ( getHandlerCount ( com . smartgwt . client . widgets . form . fields . events . KeyPressEvent . getType ( ) ) == NUM_ ) setupKeyPressEvent ( ) ; return doAddHandler ( handler , com . smartgwt . client . widgets . form . fields . events . KeyPressEvent . getType ( ) ) ; }
ModelQuery deploymentId ( String deploymentId ) ;
public String toString ( ) { StringBuffer text = new StringBuffer ( ) ; text . append ( STR_ ) ; return text . toString ( ) ; }
public double cost ( Unit u1 , Unit u2 , boolean consecutive ) { if ( u1 . duration == NUM_ || u2 . duration == NUM_ ) return Double . POSITIVE_INFINITY ; if ( u1 instanceof DiphoneUnit ) { u1 = ( ( DiphoneUnit ) u1 ) . right ; } if ( u2 instanceof DiphoneUnit ) { u2 = ( ( DiphoneUnit ) u2 ) . left ; } if ( consecutive && ( u1 . index + NUM_ == u2 . index ) ) return NUM_ ; double sCost1 = sCostReader . getSCost ( u1 . index ) ; double sCost2 = sCostReader . getSCost ( u2 . index ) ; return ( ( sCost1 + sCost2 ) / NUM_ ) ; }
public void score ( IGameScore score ) { this . score = score ; }
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( hc_namednodemapnotfounderr . class , args ) ; }
protected void addColumn ( String name , Column col ) { int idx = getColumnNumber ( name ) ; if ( idx >= NUM_ && idx < m_columns . size ( ) ) { throw new IllegalArgumentException ( STR_ + name + STR_ ) ; } m_columns . add ( col ) ; m_names . add ( name ) ; m_lastCol = m_columns . size ( ) - NUM_ ; ColumnEntry entry = new ColumnEntry ( m_lastCol , col , new ColumnMetadata ( this , name ) ) ; ColumnEntry oldEntry = ( ColumnEntry ) m_entries . put ( name , entry ) ; if ( oldEntry != null ) oldEntry . dispose ( ) ; invalidateSchema ( ) ; col . addColumnListener ( this ) ; fireTableEvent ( m_rows . getMinimumRow ( ) , m_rows . getMaximumRow ( ) , m_lastCol , TableModelEvent . INSERT ) ; }
public GeoRssBox ( Double lowerLat , Double lowerLon , Double upperLat , Double upperLon ) { this ( new GeoRssPoint ( lowerLat , lowerLon ) , new GeoRssPoint ( upperLat , upperLon ) ) ; }
public static Map < String , Node > extractXFANodes ( Document domDocument ) { Map < String , Node > xfaNodes = new HashMap < > ( ) ; Node n = domDocument . getFirstChild ( ) ; while ( n . getChildNodes ( ) . getLength ( ) == NUM_ ) { n = n . getNextSibling ( ) ; } n = n . getFirstChild ( ) ; while ( n != null ) { if ( n . getNodeType ( ) == Node . ELEMENT_NODE ) { String s = n . getLocalName ( ) ; xfaNodes . put ( s , n ) ; } n = n . getNextSibling ( ) ; } return xfaNodes ; }
public ApprovalDialog ( Dialog owner , ModalityType modality ) { super ( owner , modality ) ; }
public void createPlatformSession ( String sessionId ) throws ValidationException ;
public AbstractCircularGraphic ( String sidc ) { super ( sidc ) ; this . circle = this . createShape ( ) ; }
protected void addURL ( URL url ) { try { originalUrls . add ( url ) ; searchList . add ( createSearchURL ( url ) ) ; } catch ( MalformedURLException e ) { } }
public synchronized void add ( String name , long threadId ) { if ( mFinished ) { throw new IllegalStateException ( STR_ ) ; } mMarkers . add ( new Marker ( name , threadId , SystemClock . elapsedRealtime ( ) ) ) ; }
public static < T > List < T > toList ( T [ ] array ) { return new ArrayList < T > ( Arrays . asList ( array ) ) ; }
static CompletableFuture < Object > orTree ( CompletableFuture < ? > [ ] cfs , int lo , int hi ) { CompletableFuture < Object > d = new CompletableFuture < Object > ( ) ; if ( lo <= hi ) { CompletableFuture < ? > a , b ; int mid = ( lo + hi ) > > > NUM_ ; if ( ( a = ( lo == mid ? cfs [ lo ] : orTree ( cfs , lo , mid ) ) ) == null || ( b = ( lo == hi ? a : ( hi == mid + NUM_ ) ? cfs [ hi ] : orTree ( cfs , mid + NUM_ , hi ) ) ) == null ) throw new NullPointerException ( ) ; if ( ! d . orRelay ( a , b ) ) { OrRelay < ? , ? > c = new OrRelay < > ( d , a , b ) ; a . orpush ( b , c ) ; c . tryFire ( SYNC ) ; } } return d ; }
void addDictionaryChunk ( List < byte [ ] > dictionaryChunk ) ;
public SamFilterParamsBuilder requireSetFlags ( final int flags ) { mRequireSetFlags = flags ; return this ; }
private static void SetLongArrayRegion ( JNIEnvironment env , int arrayJREF , int startIndex , int length , Address bufAddress ) { if ( traceJNI ) VM . sysWrite ( STR_ ) ; RuntimeEntrypoints . checkJNICountDownToGC ( ) ; try { long [ ] destinationArray = ( long [ ] ) env . getJNIRef ( arrayJREF ) ; if ( ( startIndex < NUM_ ) || ( startIndex + length > destinationArray . length ) ) { env . recordException ( new ArrayIndexOutOfBoundsException ( ) ) ; return ; } Memory . memcopy ( Magic . objectAsAddress ( destinationArray ) . plus ( startIndex << LOG_BYTES_IN_LONG ) , bufAddress , length << LOG_BYTES_IN_LONG ) ; } catch ( Throwable unexpected ) { if ( traceJNI ) unexpected . printStackTrace ( System . err ) ; env . recordException ( unexpected ) ; } }
public ConversationListAdapter ( ConversationCallback conversationCallback , Context context ) { this . conversationCallback = conversationCallback ; sortingAnimationDuration = context . getResources ( ) . getInteger ( R . integer . list_sorting_duration ) ; translationDelay = context . getResources ( ) . getInteger ( R . integer . framework_animation_delay_short ) ; listViewPaddingTop = context . getResources ( ) . getDimensionPixelSize ( R . dimen . list_padding_top ) ; listViewPaddingBottom = context . getResources ( ) . getDimensionPixelSize ( R . dimen . list_padding_bottom ) ; sharingListViewPaddingTop = context . getResources ( ) . getDimensionPixelSize ( R . dimen . list_padding_top ) + context . getResources ( ) . getDimensionPixelSize ( R . dimen . sharing_indicator__expanded_height ) ; }
public View onContentViewCreated ( View contentView ) { ViewGroup mainView = ( ViewGroup ) activity . getLayoutInflater ( ) . inflate ( layoutId , null ) ; mainView . addView ( contentView , NUM_ ) ; return mainView ; }
public String encode ( String pString ) { return soundex ( pString ) ; }
public int executeUpdate ( String sql , int autoGeneratedKeys ) throws SQLException ;
public ViaHeader createViaHeader ( String host , int port , String transport , String branch ) throws ParseException , InvalidArgumentException { if ( host == null || transport == null ) throw new NullPointerException ( STR_ ) ; Via via = new Via ( ) ; if ( branch != null ) via . setBranch ( branch ) ; if ( host . indexOf ( STR_ ) >= NUM_ && host . indexOf ( STR_ ) < NUM_ ) { if ( stripAddressScopeZones ) { int zoneStart = host . indexOf ( STR_ ) ; if ( zoneStart != - NUM_ ) host = host . substring ( NUM_ , zoneStart ) ; } host = STR_ + host + STR_ ; } via . setHost ( host ) ; via . setPort ( port ) ; via . setTransport ( transport ) ; return via ; }
protected UnManagedFileSystem checkUnManagedFileSystemExistsInDB ( String nativeGuid ) throws IOException { UnManagedFileSystem filesystemInfo = null ; URIQueryResultList result = new URIQueryResultList ( ) ; _dbClient . queryByConstraint ( AlternateIdConstraint . Factory . getFileSystemInfoNativeGUIdConstraint ( nativeGuid ) , result ) ; List < URI > filesystemUris = new ArrayList < URI > ( ) ; Iterator < URI > iter = result . iterator ( ) ; while ( iter . hasNext ( ) ) { URI unFileSystemtURI = iter . next ( ) ; filesystemUris . add ( unFileSystemtURI ) ; } for ( URI fileSystemURI : filesystemUris ) { filesystemInfo = _dbClient . queryObject ( UnManagedFileSystem . class , fileSystemURI ) ; if ( filesystemInfo != null && ! filesystemInfo . getInactive ( ) ) { return filesystemInfo ; } } return null ; }
private boolean isSubcommand ( String name ) { SubCommand subCommand = getSubCommand ( ) ; return subCommand != null && subCommand . getName ( ) . equalsIgnoreCase ( name ) ; }
public boolean enableMixins ( ) { return BOOL_ ; }
public static void move ( File sourceLocation , File targetLocation ) throws IOException { copyOrMove ( sourceLocation , targetLocation , BOOL_ ) ; }
public void addSelectionRow ( int row ) { int [ ] rows = { row } ; addSelectionRows ( rows ) ; }
public void onDestroy ( ) { closeDialog ( ) ; }
public static boolean isEnabled ( ) { if ( sIsEnabled == null ) { Context context = ApplicationStatus . getApplicationContext ( ) ; sIsEnabled = ShortcutHelper . isAddToHomeIntentSupported ( context ) ; } return sIsEnabled ; }
void addFirst ( String name , IoFilter filter ) ;
public boolean commitCorrection ( CorrectionInfo correctionInfo ) { return BOOL_ ; }
public void failoverCopyCancel ( RPCopyRequestParams copyToFailoverTo ) throws RecoverPointException { RecoverPointImageManagementUtils imageManager = new RecoverPointImageManagementUtils ( ) ; imageManager . disableCopyImage ( functionalAPI , copyToFailoverTo ) ; }
public void mouseAction ( int x , int y , int mtype , int modifiers ) { if ( game . getBoard ( ) . contains ( x , y ) ) { Coords c = new Coords ( x , y ) ; switch ( mtype ) { case BOARD_HEX_CLICK : if ( ( modifiers & java . awt . event . InputEvent . CTRL_MASK ) != NUM_ ) { checkLOS ( c ) ; } else { processBoardViewEvent ( new BoardViewEvent ( this , c , null , BoardViewEvent . BOARD_HEX_CLICKED , modifiers ) ) ; } break ; case BOARD_HEX_DOUBLECLICK : processBoardViewEvent ( new BoardViewEvent ( this , c , null , BoardViewEvent . BOARD_HEX_DOUBLECLICKED , modifiers ) ) ; break ; case BOARD_HEX_DRAG : processBoardViewEvent ( new BoardViewEvent ( this , c , null , BoardViewEvent . BOARD_HEX_DRAGGED , modifiers ) ) ; break ; case BOARD_HEX_POPUP : processBoardViewEvent ( new BoardViewEvent ( this , c , null , BoardViewEvent . BOARD_HEX_POPUP , modifiers ) ) ; break ; } } }
private void updateParameterPeriodFactor ( TimeSlice timeSlice , LinkedList < XParameterPeriodValue > valuesPerSlice ) { if ( timeSlice . isLastButNotFirst ( ) ) { updatePeriodFactorLastSliceLastValue ( timeSlice , valuesPerSlice ) ; } if ( timeSlice . isFirstButNotLast ( ) ) { updatePeriodFactorFirstSliceFirstValue ( timeSlice , valuesPerSlice ) ; } if ( timeSlice . isFirstAndLast ( ) ) { updatePeriodFactorOneSliceLastValues ( timeSlice , valuesPerSlice ) ; } for ( XParameterPeriodValue parameterPeriodValue : valuesPerSlice ) { Calendar endTimeForCalculation = parameterEndTimeForPeriodCalculation ( timeSlice , parameterPeriodValue ) ; Calendar startTimeForCalculation = parameterStartTimeForPeriodCalculation ( timeSlice , parameterPeriodValue ) ; updateParameterPeriodFactor ( timeSlice , parameterPeriodValue , startTimeForCalculation , endTimeForCalculation ) ; } }
XmlElement renderSubpageLinks ( List < BasePageEntry < ? > > subpages ) ;
public static HttpURLConnection toHttpConnection ( Request ... requests ) { return toHttpConnection ( Arrays . asList ( requests ) ) ; }
public boolean isEnablePhoneBookImport ( ) { return enablePhoneBookImport ; }
protected < T > T deserializeObjectFromJson ( HttpEntity entity , TypeReference < T > typeReference ) throws IOException { return objectMapper . readValue ( entity . getContent ( ) , typeReference ) ; }
public static < T > Patch < T > diff ( List < T > original , List < T > revised , DiffAlgorithm < T > algorithm ) { if ( original == null ) { throw new IllegalArgumentException ( STR_ ) ; } if ( revised == null ) { throw new IllegalArgumentException ( STR_ ) ; } if ( algorithm == null ) { throw new IllegalArgumentException ( STR_ ) ; } return algorithm . diff ( original , revised ) ; }
public double [ ] raw ( ) { double copy [ ] = new double [ dimensionality ] ; System . arraycopy ( values , NUM_ , copy , NUM_ , dimensionality ) ; return copy ; }
public static String formatPrice ( Double price ) { if ( price == null ) return STR_ ; return formatPrice ( price . doubleValue ( ) ) ; }
void decrement ( ) { -- _index ; }
public void addCloseHook ( CloseHook hook ) { if ( closeHooks == null ) { closeHooks = new ArrayList < > ( ) ; } closeHooks . add ( hook ) ; }
private void createTheUserForSingleUserMode ( ) { if ( ! isInSingleUserMode ( ) ) { return ; } try { final User user = dbLogic . getOrCreateUser ( singleUserName ) ; if ( user == null ) { logger . log ( Level . SEVERE , STR_ ) ; return ; } if ( ! user . getIsSingleUser ( ) ) { user . setIsSingleUser ( BOOL_ ) ; } if ( ! user . getIsAdmin ( ) ) { user . setIsAdmin ( BOOL_ ) ; } dbLogic . commit ( ) ; } catch ( final PersistenceException e ) { logger . log ( Level . SEVERE , STR_ , e ) ; } }
public SaaSApplicationException ( Object [ ] params ) { super ( ) ; init ( params ) ; }
public boolean shutdown ( ) ;
Vertex lastRelationship ( Vertex type , int fromLast ) ;
public boolean isErrorLoggable ( Level level ) { return errorLogger . isLoggable ( level ) ; }
public static String [ ] WinRegGetValues ( int hKey , String subKey , int maxValueLength ) { byte [ ] lpSubKey = stringToByteArray ( subKey ) ; int [ ] openResult = RegOpenKey ( hKey , lpSubKey , KEY_READ ) ; if ( openResult == null ) { return null ; } if ( openResult [ ERROR_CODE ] != ERROR_SUCCESS ) { return null ; } else { int [ ] queryResult = RegQueryInfoKey ( openResult [ OPENED_KEY_HANDLE ] ) ; int valuesNum = queryResult [ VALUES_NUMBER ] ; if ( valuesNum == NUM_ ) { RegCloseKey ( openResult [ OPENED_KEY_HANDLE ] ) ; return null ; } else { String [ ] valueStrings = new String [ valuesNum ] ; byte [ ] valueBytes ; for ( int valueIndex = NUM_ ; valueIndex < valuesNum ; valueIndex ++ ) { valueBytes = RegEnumValue ( openResult [ OPENED_KEY_HANDLE ] , valueIndex , maxValueLength ) ; valueStrings [ valueIndex ] = byteArrayToString ( valueBytes ) ; } RegCloseKey ( openResult [ OPENED_KEY_HANDLE ] ) ; return valueStrings ; } } }
public static boolean checkStatement ( Element element , String statementname ) { String tag = element . getLocalName ( ) ; if ( tag == null ) { return BOOL_ ; } else if ( tag . equals ( STR_ ) || tag . equals ( STR_ ) ) { NamedNodeMap nm = element . getAttributes ( ) ; int len = nm . getLength ( ) ; String attrName = null ; Attr attr = null ; for ( int j = NUM_ ; j < len ; j ++ ) { attr = ( Attr ) nm . item ( j ) ; attrName = attr . getLocalName ( ) ; if ( ( attrName != null ) && ( attrName . equals ( STR_ ) ) && ( attr . getNodeValue ( ) . equals ( statementname + STR_ ) ) ) { return BOOL_ ; } } } else if ( tag . equals ( statementname ) ) { return BOOL_ ; } return BOOL_ ; }
public boolean removeKeyChainEventListener ( KeyChainEventListener listener ) { return keyChainGroup . removeEventListener ( listener ) ; }
public abstract SequencesReader reader ( ) ;
public byte [ ] byteArrayValue ( ) { bb . position ( NUM_ ) ; byte [ ] b = new byte [ bb . limit ( ) ] ; bb . get ( b ) ; return b ; }
public SummaryAndConfigPanel ( String summaryTitleText , String configButtonText , ActionListener configButtonActionListener ) { super ( new GridBagLayout ( ) ) ; this . summaryTitleText = summaryTitleText ; configButton = new JButton ( configButtonText ) ; configButton . setIcon ( new ImageIcon ( SummaryAndConfigPanel . class . getResource ( STR_ ) ) ) ; configButton . addActionListener ( configButtonActionListener ) ; this . add ( configButton , LayoutHelper . getGBC ( NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ ) ) ; summaryArea = new JEditorPane ( ) ; summaryArea . setContentType ( STR_ ) ; summaryArea . setEnabled ( BOOL_ ) ; setSummaryContent ( STR_ ) ; this . add ( summaryArea , LayoutHelper . getGBC ( NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , new Insets ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ) ; }
public GSSContextImpl ( GSSManagerImpl gssManager , GSSName peer , Oid mech , GSSCredential myCred , int lifetime ) throws GSSException { if ( ( peer == null ) || ! ( peer instanceof GSSNameImpl ) ) { throw new GSSException ( GSSException . BAD_NAME ) ; } if ( mech == null ) mech = ProviderList . DEFAULT_MECH_OID ; this . gssManager = gssManager ; this . myCred = ( GSSCredentialImpl ) myCred ; reqLifetime = lifetime ; targName = ( GSSNameImpl ) peer ; this . mechOid = mech ; initiator = BOOL_ ; }
private void status ( ) { ps . println ( STR_ ) ; ps . println ( STR_ ) ; ps . println ( STR_ ) ; ps . println ( STR_ ) ; writeKeysWithPrefix ( STR_ , STR_ ) ; }
private static void parseImageryFile ( Resources r , InputStream is , final boolean async ) throws IOException { JsonReader reader = new JsonReader ( new InputStreamReader ( is , STR_ ) ) ; try { try { reader . beginArray ( ) ; while ( reader . hasNext ( ) ) { TileLayerServer osmts = readServer ( reader , r , async ) ; if ( osmts != null ) { if ( osmts . overlay && ! overlayServerList . containsKey ( osmts . id ) ) { overlayServerList . put ( osmts . id , osmts ) ; } else if ( ! backgroundServerList . containsKey ( osmts . id ) ) { backgroundServerList . put ( osmts . id , osmts ) ; } } } reader . endArray ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } finally { reader . close ( ) ; } }
public void calculateChainWaveBuffer ( float maxAngle , int bufferTime , float angleDecrement , EntityLivingBase entity ) { this . calculateChainWaveBuffer ( maxAngle , bufferTime , angleDecrement , NUM_ , entity ) ; }
public FindInSourceControlQuery ( ) { this ( ServerPath . ROOT , null , BOOL_ , BOOL_ , BOOL_ , null ) ; }
void addUngroupedAsset ( String title ) ;
private static char [ ] zzUnpackCMap ( String packed ) { char [ ] map = new char [ NUM_ ] ; int i = NUM_ ; int j = NUM_ ; while ( i < NUM_ ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > NUM_ ) ; } return map ; }
private List < FieldInfo > createFieldInfoMap ( String str ) { fieldInfos = new ArrayList < FieldInfo > ( ) ; StringTokenizer strtok = new StringTokenizer ( str , RECORD_SEPARATOR ) ; while ( strtok . hasMoreTokens ( ) ) { String [ ] token = strtok . nextToken ( ) . split ( FIELD_SEPARATOR ) ; try { fieldInfos . add ( new FieldInfo ( token [ NUM_ ] , token [ NUM_ ] , SupportType . valueOf ( token [ NUM_ ] ) ) ) ; } catch ( Exception e ) { LOG . error ( STR_ , e ) ; } } return fieldInfos ; }
public java . lang . String toString ( ) { String xml = this . toString ( BOOL_ , BOOL_ ) ; return xml ; }
public void onResponse ( T response ) ;
private void execute_filter ( FilterHolder filterHolder , int operationCode , SpaceContext sc , Object subject ) { if ( ! filterHolder . isInitialized ( ) ) return ; if ( subject instanceof Object [ ] ) { ISpaceFilterEntry [ ] entries = null ; if ( filterHolder . isPassFilterEntry ( ) ) { Object [ ] packets = ( Object [ ] ) subject ; entries = new ISpaceFilterEntry [ packets . length ] ; for ( int i = NUM_ ; i < packets . length ; ++ i ) entries [ i ] = createFilterEntry ( packets [ i ] ) ; } filterHolder . getFilter ( ) . process ( sc , entries , operationCode ) ; } else { ISpaceFilterEntry filterEntry = filterHolder . isPassFilterEntry ( ) ? createFilterEntry ( subject ) : null ; filterHolder . getFilter ( ) . process ( sc , filterEntry , operationCode ) ; } }
OverrideUrlLoadingResult clobberCurrentTab ( String url , String referrerUrl , Tab tab ) ;
public boolean do_tlo ( ) { return soot . PhaseOptions . getBoolean ( options , STR_ ) ; }
public boolean isChromeLocationSettingEnabled ( ) { return PrefServiceBridge . getInstance ( ) . isAllowLocationEnabled ( ) ; }
public boolean hasAlbumIdExt ( ) { return hasExtension ( GphotoAlbumId . class ) ; }
public void test_something ( ) { log . error ( STR_ ) ; }
public void removeAllPhiInsns ( ) { insns . subList ( NUM_ , getCountPhiInsns ( ) ) . clear ( ) ; }
public static ASN1Primitive fromByteArray ( byte [ ] data ) throws IOException { ASN1InputStream aIn = new ASN1InputStream ( data ) ; try { return aIn . readObject ( ) ; } catch ( ClassCastException e ) { throw new IOException ( STR_ ) ; } }
protected int removeHeapNode ( int i ) { int val = heap [ i ] ; int rightMost = -- size ; heap [ i ] = heap [ rightMost ] ; heap [ rightMost ] = NUM_ ; if ( fastValueRemove == Mode . HASH ) { valueIndexMap . remove ( val ) ; if ( size != NUM_ ) valueIndexMap . put ( heap [ i ] , i ) ; } else if ( fastValueRemove == Mode . BOUNDED ) { valueIndexStore [ val ] = - NUM_ ; } heapDown ( i ) ; return val ; }
public CarouselOptions selectedItem ( int selectedItem ) { mSelectedItem = selectedItem ; return this ; }
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( createDocumentType03 . class , args ) ; }
public boolean isSet ( _Fields field ) { if ( field == null ) { throw new IllegalArgumentException ( ) ; } switch ( field ) { case START : return isSetStart ( ) ; case SIZE : return isSetSize ( ) ; } throw new IllegalStateException ( ) ; }
public static boolean isSubInterface ( String line ) { String word = SubParser . getFirstWord ( line ) ; return word . matches ( STR_ ) ; }
private static IZyNodeRealizer createRealizer ( final INaviViewNode node , final ZyLabelContent content ) { if ( node instanceof INaviGroupNode ) { final ZyGroupNodeRealizer < NaviNode > realizer = new ZyGroupNodeRealizer < NaviNode > ( content , ( ( INaviGroupNode ) node ) . isCollapsed ( ) ) ; if ( ( node . getWidth ( ) != NUM_ ) && ( node . getHeight ( ) != NUM_ ) ) { realizer . setSize ( node . getWidth ( ) , node . getHeight ( ) ) ; } return realizer ; } else { final ZyNormalNodeRealizer < NaviNode > realizer = new ZyNormalNodeRealizer < NaviNode > ( content ) ; if ( ( node . getWidth ( ) != NUM_ ) && ( node . getHeight ( ) != NUM_ ) ) { realizer . setSize ( node . getWidth ( ) , node . getHeight ( ) ) ; } return realizer ; } }
public synchronized int maxDoc ( ) { ensureOpen ( ) ; return docWriter . getNumDocs ( ) + segmentInfos . totalMaxDoc ( ) ; }
void onBeforePreProcess ( ) ;
Map < String , Boolean > evictCache ( String name ) throws UnmappedInterfaceException , UnableToCreateInstanceException ;
void complete ( ) ;
public String [ ] checkIpsecConnection ( ) throws LocalRepositoryException { final String prefix = STR_ ; _log . debug ( prefix ) ; final String [ ] cmd = { _IPSECTOOL_CMD , IPSEC_CHECK_CONNECTION } ; String [ ] ips = exec ( prefix , cmd ) ; _log . debug ( prefix + STR_ , Strings . repr ( ips ) ) ; return ips ; }
public HttpClientCreationException ( String message , Throwable cause ) { super ( message , cause ) ; }
public boolean isConstant ( ) { return constant ; }
public static String readTextFile ( String fileName ) throws IOException { byte [ ] buff = readFile ( fileName ) ; String s = new String ( buff ) ; return s ; }
private static void sqlFieldsQuery ( ) { IgniteCache < AffinityKey < Long > , Person > cache = Ignition . ignite ( ) . cache ( PERSON_CACHE ) ; QueryCursor < List < ? > > cursor = cache . query ( new SqlFieldsQuery ( STR_ ) ) ; List < List < ? > > res = cursor . getAll ( ) ; print ( STR_ , res ) ; }
public String namespace ( ) { return theNamespace ; }
public Path dataDirectory ( ) { return _dataDirectory ; }
protected void onPostExecute ( String address ) { if ( ! TextUtils . isEmpty ( address ) ) mContactAddressMapper . startMapperActivity ( address ) ; else Toast . makeText ( MapFromContactsAsyncActivity . this , STR_ , Toast . LENGTH_SHORT ) . show ( ) ; }
Header parseHeader ( CharArrayBuffer buffer ) throws ParseException ;
private static int checkTypeArguments ( final String signature , int pos ) { pos = checkChar ( STR_ , signature , pos ) ; pos = checkTypeArgument ( signature , pos ) ; while ( getChar ( signature , pos ) != STR_ ) { pos = checkTypeArgument ( signature , pos ) ; } return pos + NUM_ ; }
String name ( ) ;
void btBondStatusChange ( Intent intent ) ;
public void cancel ( ) ;
public Escaper toEscaper ( ) { return new CharArrayDecorator ( toArray ( ) ) ; }
protected float adjustDrawPointAngle ( float sweep ) { return ( mAngleStart + ( sweep - getMinSweepAngle ( ) ) ) % NUM_ ; }
public XORShift64Random ( long seed ) { x = seed == NUM_ ? NUM_ : seed ; }
public void postEvent ( final AWTEvent event ) { LWToolkit . postEvent ( event ) ; }
private static String shorten ( String path ) { int idx1 = path . lastIndexOf ( STR_ ) ; int idx2 = path . lastIndexOf ( STR_ ) ; int idx = Math . max ( idx1 , idx2 ) ; return idx == - NUM_ ? path : path . substring ( idx + NUM_ ) ; }
private void addToUses ( SsaInsn insn ) { RegisterSpecList rl = insn . getSources ( ) ; int sz = rl . size ( ) ; for ( int i = NUM_ ; i < sz ; i ++ ) { useList [ rl . get ( i ) . getReg ( ) ] . add ( insn ) ; } }
public final JavaType resolveParameterType ( int index , TypeBindings bindings ) { return bindings . resolveType ( getParameterType ( index ) ) ; }
void delItem ( int index ) ;
public SmartItem ( int type , String text , String path , int depth , List < SmartItem > children ) { super ( type , text , path , UUID . randomUUID ( ) . toString ( ) , depth , children ) ; }
public final double min ( ) { double min = Double . POSITIVE_INFINITY ; double [ ] [ ] fieldx = null ; double [ ] fieldxy = null ; final int width = this . width ; final int height = this . height ; final int length = this . length ; for ( int x = NUM_ ; x < width ; x ++ ) { fieldx = field [ x ] ; for ( int y = NUM_ ; y < height ; y ++ ) { fieldxy = fieldx [ y ] ; for ( int z = NUM_ ; z < length ; z ++ ) if ( min > fieldxy [ z ] ) min = fieldxy [ z ] ; } } return min ; }
private void runSelectTask ( ) { if ( _lifecycle . isActive ( ) || _lifecycle . isAfterStopping ( ) ) { log . warning ( this + STR_ ) ; return ; } initNative ( _fd ) ; synchronized ( _thread ) { _thread . notify ( ) ; } if ( ! _lifecycle . toActive ( ) ) { log . warning ( this + STR_ ) ; return ; } runImpl ( ) ; }
void start ( ScheduledExecutorService backgroundProcessor ) ;
public boolean guaranteesOldValue ( ) { return ( this . opDetails & OP_DETAILS_GUARANTEES_OLD_VALUE ) != NUM_ ; }
private static ListeningExecutorService createExecutorService ( ) { return MoreExecutors . listeningDecorator ( Executors . newCachedThreadPool ( new ThreadFactoryBuilder ( ) . setDaemon ( BOOL_ ) . build ( ) ) ) ; }
public VacuumEnvironment ( LocationState locAState , LocationState locBState ) { envState = new VacuumEnvironmentState ( locAState , locBState ) ; }
IStateAction < CNodeHoverState < NodeType , EdgeType > > createNodeHoverAction ( ) ;
public void purgeAllMethodAnalysis ( ) ;
public static boolean checkForHUSSeries ( StorageSystem storageSystem ) { return ( storageSystem . getModel ( ) != null && storageSystem . getModel ( ) . startsWith ( HDSConstants . HUS_SERIES_MODEL ) && ! storageSystem . getModel ( ) . equalsIgnoreCase ( HDSConstants . HUSVM_MODEL ) ) ; }
public int size ( ) { return size ; }
public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Element addrNode ; Attr addrAttr ; doc = ( Document ) load ( STR_ , BOOL_ ) ; elementList = doc . getElementsByTagName ( STR_ ) ; addrNode = ( Element ) elementList . item ( NUM_ ) ; addrAttr = addrNode . getAttributeNode ( STR_ ) ; { boolean success = BOOL_ ; try { addrAttr . setPrefix ( STR_ ) ; } catch ( DOMException ex ) { success = ( ex . code == DOMException . NAMESPACE_ERR ) ; } assertTrue ( STR_ , success ) ; } }
public static void checkOldData ( SupportBaseView testChildView , EventBean [ ] expectedValues ) { EventBean [ ] oldData = testChildView . getLastOldData ( ) ; EPAssertionUtil . assertEqualsExactOrder ( expectedValues , oldData ) ; testChildView . clearLastOldData ( ) ; }
public Control createControl ( final Composite parent , final CoordinateReferenceSystem crs ) { final Control control = createControl ( parent ) ; selectedCRS = crs ; gotoCRS ( selectedCRS ) ; return control ; }
public void removeActionListener ( EventListener listener ) { removeEventListener ( Events . ON_SELECT , listener ) ; }
void saveState ( File activityDirectory ) { File tabFile = getTabFile ( activityDirectory , getId ( ) ) ; FileOutputStream foutput = null ; try { foutput = new FileOutputStream ( tabFile ) ; TabState . saveState ( foutput , getState ( ) , BOOL_ ) ; } catch ( FileNotFoundException exception ) { Log . e ( TAG , STR_ , exception ) ; } catch ( IOException exception ) { Log . e ( TAG , STR_ , exception ) ; } finally { StreamUtil . closeQuietly ( foutput ) ; } }
private static void add2Fmt ( Collection < String > src , String fmt , Object ... args ) { add2 ( src , String . format ( fmt , args ) ) ; }
public void endObject ( ) { int p = peeked ; if ( p == PEEKED_NONE ) { p = doPeek ( ) ; } if ( p == PEEKED_END_OBJECT ) { stackSize -- ; peeked = PEEKED_NONE ; } else { throw new IllegalStateException ( STR_ + peek ( ) ) ; } }
public boolean isServiceActive ( ) { return getVO ( ) . getStatus ( ) . equals ( ServiceStatus . ACTIVE ) ; }
public static boolean checkIsMiuiRom ( ) { return ! TextUtils . isEmpty ( getSystemProperty ( STR_ ) ) ; }
boolean isDefect ( ) ;
static boolean isInterfaceAllowed ( NetworkInterface iface ) { if ( iface == null ) throw new IllegalArgumentException ( STR_ ) ; String ifName = ( System . getProperty ( STR_ ) == null || System . getProperty ( STR_ ) . startsWith ( STR_ ) ) ? iface . getDisplayName ( ) : iface . getName ( ) ; String [ ] allowedInterfaces = getAllowedInterfaces ( ) ; if ( allowedInterfaces != null ) { return Arrays . asList ( allowedInterfaces ) . contains ( ifName ) ; } else { String [ ] blockedInterfaces = getBlockedInterfaces ( ) ; if ( blockedInterfaces != null ) { return ! Arrays . asList ( blockedInterfaces ) . contains ( ifName ) ; } } return BOOL_ ; }
public static final float mixRestitution ( float restitution1 , float restitution2 ) { return restitution1 > restitution2 ? restitution1 : restitution2 ; }
public WorkOrderEstimate calculateCumulativeDetailsForRE ( WorkOrderEstimate workOrderEstimate ) ;
public static boolean isSystemApplication ( Context context ) { if ( context == null ) { return BOOL_ ; } return isSystemApplication ( context , context . getPackageName ( ) ) ; }
private static boolean isAccented ( Item item ) { return ( item . getFeatures ( ) . isPresent ( STR_ ) || item . getFeatures ( ) . isPresent ( STR_ ) ) ; }
public String encodeBody ( ) { return entityTag ; }
public native byte bDevCapabilityType ( ) ;
void requeueRequest ( Request request ) ;
public Criteria or ( ) { Criteria criteria = createCriteriaInternal ( ) ; oredCriteria . add ( criteria ) ; return criteria ; }
public BlobOutputStream ( RowCursor cursor , ColumnBlob column ) { _table = cursor . table ( ) ; _cursor = cursor ; _column = column ; init ( ) ; }
public Subscription registerDolphinContext ( DolphinSession session , GarbageCollector garbageCollector ) { Assert . requireNonNull ( session , STR_ ) ; Assert . requireNonNull ( garbageCollector , STR_ ) ; DolphinSessionInfoMBean mBean = new DolphinSessionInfo ( session , garbageCollector ) ; return MBeanRegistry . getInstance ( ) . register ( mBean , new MBeanDescription ( STR_ , STR_ , STR_ ) ) ; }
public XBLOMDefinitionElement ( String prefix , AbstractDocument owner ) { super ( prefix , owner ) ; }
public double dotProduct ( final double x , final double y , final double z ) { return this . x * x + this . y * y + this . z * z ; }
public DatabaseBuilder putDatabaseProperty ( String name , DataType type , Object value ) { _dbProps = putProperty ( _dbProps , name , type , value ) ; return this ; }
SQLBuilder where ( Clause whereClause ) { this . whereClause = whereClause ; return this ; }
public void myMethod ( ) { return STR_ ; }
public static void main ( String [ ] args ) { doLoop ( Gridlock . class , args ) ; System . exit ( NUM_ ) ; }
private boolean readMetaData ( ) throws IOException { SegmentExtent metaExtentInit = new SegmentExtent ( NUM_ , NUM_ , META_SEGMENT_SIZE ) ; try ( InSegment reader = openRead ( metaExtentInit ) ) { ReadStream is = reader . in ( ) ; if ( ! readMetaDataHeader ( is ) ) { return BOOL_ ; } _segmentId = NUM_ ; } int metaLength = _segmentMeta [ NUM_ ] . size ( ) ; SegmentExtent metaExtent = new SegmentExtent ( NUM_ , NUM_ , metaLength ) ; _metaExtents . clear ( ) ; _metaExtents . add ( metaExtent ) ; _metaAddress = NUM_ ; _metaOffset = META_OFFSET ; _metaTail = _metaOffset + metaLength ; while ( BOOL_ ) { try ( InSegment reader = openRead ( metaExtent ) ) { ReadStream is = reader . in ( ) ; if ( metaExtent . address ( ) == NUM_ ) { is . position ( META_OFFSET ) ; } long metaAddress = _metaAddress ; while ( readMetaDataEntry ( is ) ) { } if ( _metaAddress == metaAddress ) { return BOOL_ ; } metaExtent = new SegmentExtent ( NUM_ , _metaAddress , metaLength ) ; } } }
public NodeListImpl ( ArrayList < Node > nodes ) { mStaticNodes = nodes ; }
public BreakpointableNodeCounter ( final BreakpointManager manager ) { breakpointManager = manager ; }
private int transition ( int state , int symbol ) { for ( int i = state ; i < transitions . length ; i ++ ) { if ( ( transitions [ i ] % vocabularySize ) == symbol ) { return ( transitions [ i ] / vocabularySize ) ; } } return - NUM_ ; }
public Graph createGraph ( final String name ) { if ( name == null ) { throw new IllegalArgumentException ( STR_ ) ; } final Graph graph = new Graph ( name ) ; graphs . add ( graph ) ; return graph ; }
public static GeneralizedSemImWrapper serializableInstance ( ) { return new GeneralizedSemImWrapper ( GeneralizedSemPmWrapper . serializableInstance ( ) ) ; }
private Rect calcBounds ( int index , Paint paint ) { Rect bounds = new Rect ( ) ; CharSequence title = getTitle ( index ) ; bounds . right = ( int ) paint . measureText ( title , NUM_ , title . length ( ) ) ; bounds . bottom = ( int ) ( paint . descent ( ) - paint . ascent ( ) ) ; return bounds ; }
public static void cutSchedule ( TransitSchedule schedule , Coord center , double radius ) { Set < Id < TransitStopFacility > > stopsInArea = new HashSet < > ( ) ; for ( TransitStopFacility stopFacility : schedule . getFacilities ( ) . values ( ) ) { if ( CoordUtils . calcEuclideanDistance ( center , stopFacility . getCoord ( ) ) <= radius ) { stopsInArea . add ( stopFacility . getId ( ) ) ; } } cutSchedule ( schedule , stopsInArea ) ; }
protected void removeTrailingCommentFromExpressionEndingWithAParen ( ASTNode node ) { int start = node . getStartPosition ( ) ; this . scanner . resetTo ( start , start + node . getLength ( ) ) ; int token ; int parenCounter = NUM_ ; try { while ( ( token = this . scanner . getNextToken ( ) ) != TerminalTokens . TokenNameEOF ) { switch ( token ) { case TerminalTokens . TokenNameLPAREN : parenCounter ++ ; break ; case TerminalTokens . TokenNameRPAREN : parenCounter -- ; if ( parenCounter == NUM_ ) { int end = this . scanner . currentPosition - NUM_ ; node . setSourceRange ( start , end - start + NUM_ ) ; } } } } catch ( InvalidInputException e ) { } }
int ldap_create_page_control ( Pointer ld , int pageSize , Pointer cookie , char isCritical , PointerByReference ppControl ) ;
public static < DTO > List < DTO > createListDtoFromJson ( String json , Class < DTO > dtoInterface ) { return JsonUtils . createListDtoFromJson ( json , dtoInterface ) ; }
static Throwable loadLibrary ( ) { try { File nativeLibFile = findNativeLibrary ( ) ; if ( nativeLibFile != null ) { System . load ( nativeLibFile . getAbsolutePath ( ) ) ; } else { System . loadLibrary ( STR_ ) ; } return null ; } catch ( Exception t ) { return t ; } catch ( UnsatisfiedLinkError t ) { return t ; } }
public void validateHttpPostOnly ( ) { }
public void exec ( String description , String [ ] baseCommand ) throws BackupException { exec ( description , baseCommand , null , null , null , BOOL_ , BOOL_ ) ; }
public void onRangeChanged ( ) { mAdapter . setRange ( mMinDate , mMaxDate ) ; goTo ( mSelectedDay . getTimeInMillis ( ) , BOOL_ , BOOL_ , BOOL_ ) ; }
protected void reverseAuthorizations ( final String orderNum ) { if ( getPaymentGateway ( ) . getPaymentGatewayFeatures ( ) . isSupportReverseAuthorization ( ) ) { final List < CustomerOrderPayment > paymentsToRevAuth = determineOpenAuthorisations ( orderNum , null ) ; for ( CustomerOrderPayment customerOrderPayment : paymentsToRevAuth ) { Payment payment = new PaymentImpl ( ) ; BeanUtils . copyProperties ( customerOrderPayment , payment ) ; String paymentResult = null ; try { payment = getPaymentGateway ( ) . reverseAuthorization ( payment ) ; paymentResult = payment . getPaymentProcessorResult ( ) ; } catch ( Throwable th ) { paymentResult = Payment . PAYMENT_STATUS_FAILED ; payment . setPaymentProcessorResult ( Payment . PAYMENT_STATUS_FAILED ) ; payment . setPaymentProcessorBatchSettlement ( BOOL_ ) ; payment . setTransactionOperationResultMessage ( th . getMessage ( ) ) ; } finally { final CustomerOrderPayment authReversedOrderPayment = new CustomerOrderPaymentEntity ( ) ; BeanUtils . copyProperties ( payment , authReversedOrderPayment ) ; authReversedOrderPayment . setPaymentProcessorResult ( paymentResult ) ; authReversedOrderPayment . setShopCode ( customerOrderPayment . getShopCode ( ) ) ; customerOrderPaymentService . create ( authReversedOrderPayment ) ; } } } }
public SparseGradient compose ( final double f0 , final double f1 ) { return new SparseGradient ( f0 , f1 , derivatives ) ; }
public void removeSamples ( HashSet < String > names ) { final ArrayList < String > samplesclone = new ArrayList < > ( mSampleNames ) ; for ( final String sampleName : samplesclone ) { if ( names . contains ( sampleName ) ) { mSampleNames . remove ( sampleName ) ; } } mNameToColumn . clear ( ) ; for ( int i = NUM_ ; i < mSampleNames . size ( ) ; i ++ ) { mNameToColumn . put ( mSampleNames . get ( i ) , i ) ; } final Iterator < SampleField > iterator = mSampleLines . iterator ( ) ; while ( iterator . hasNext ( ) ) { final SampleField sample = iterator . next ( ) ; if ( names . contains ( sample . getId ( ) ) ) { iterator . remove ( ) ; } } }
public SiteAdminGridRow selectPageByTitle ( String title ) { final SiteAdminGridRow row = getRowByTitle ( title ) ; if ( row != null ) { selectRow ( row ) ; } else { String msg = String . format ( STR_ , title ) ; throw new IllegalArgumentException ( msg ) ; } return row ; }
V visit ( StaticInjectionRequest request ) ;
public static List < Foo > findByUuid ( java . lang . String uuid ) { return getPersistence ( ) . findByUuid ( uuid ) ; }
public void match ( int open , int close ) throws IOException { int depth = NUM_ ; while ( BOOL_ ) { scan ( ) ; if ( token == open ) { depth ++ ; } else if ( token == close ) { if ( -- depth == NUM_ ) { return ; } } else if ( token == EOF ) { env . error ( pos , STR_ ) ; return ; } } }
static < T > T maskNull ( T key ) { return key == null ? ( T ) NULL_KEY : key ; }
public void processScrollEvent ( ActionEvent event ) { int currentRow = NUM_ ; FacesContext context = FacesContext . getCurrentInstance ( ) ; UIComponent component = event . getComponent ( ) ; Integer curRow = ( Integer ) component . getAttributes ( ) . get ( STR_ ) ; if ( curRow != null ) { currentRow = curRow . intValue ( ) ; } scroll ( currentRow ) ; }
public AppsSendRequestQuery sendRequest ( UserActor actor , int userId ) { return new AppsSendRequestQuery ( getClient ( ) , actor , userId ) ; }
private Collator createFromLocale ( String language , String country , String variant ) { Locale locale ; if ( language != null && country == null && variant != null ) throw new SolrException ( ErrorCode . SERVER_ERROR , STR_ ) ; else if ( language != null && country != null && variant != null ) locale = new Locale ( language , country , variant ) ; else if ( language != null && country != null ) locale = new Locale ( language , country ) ; else locale = new Locale ( language ) ; return Collator . getInstance ( locale ) ; }
public static long readVarLong ( ByteBuffer buff ) { long x = buff . get ( ) ; if ( x >= NUM_ ) { return x ; } x &= NUM_ ; for ( int s = NUM_ ; s < NUM_ ; s += NUM_ ) { long b = buff . get ( ) ; x |= ( b & NUM_ ) << s ; if ( b >= NUM_ ) { break ; } } return x ; }
protected void handleIOException ( IOException e ) throws IOException { throw e ; }
public final void addNotify ( ) { super . addNotify ( ) ; myUISettings . addUISettingsListener ( this ) ; }
public static Word max ( ) { return new Word ( NUM_ ) ; }
public void addNotification ( int notificationId , String messageTitle , String messageText , Notification . Status status ) { Notification notification = new Notification ( ) ; notification . setId ( notificationId ) ; notification . setMessageTitle ( messageTitle ) ; notification . setMessageText ( messageText ) ; notification . setStatus ( status ) ; notification . setReceivedTime ( Calendar . getInstance ( ) . getTime ( ) . toString ( ) ) ; try { notificationDAO . open ( ) ; if ( notificationDAO . getNotification ( notificationId ) == null ) { notificationDAO . addNotification ( notification ) ; } } finally { notificationDAO . close ( ) ; } }
public boolean isVisible ( ) { return debugGui . isVisible ( ) ; }
public Media createMediaRecorder ( String path , String mimeType ) throws IOException { return null ; }
private void readObject ( ObjectInputStream s ) throws IOException , ClassNotFoundException { s . defaultReadObject ( ) ; if ( perms == null ) { throw new InvalidObjectException ( STR_ ) ; } if ( ! perms . getClass ( ) . equals ( ArrayList . class ) ) { perms = new ArrayList ( perms ) ; } if ( perms . contains ( null ) ) { throw new InvalidObjectException ( STR_ ) ; } GrantPermission [ ] pa ; try { pa = ( GrantPermission [ ] ) perms . toArray ( new GrantPermission [ perms . size ( ) ] ) ; } catch ( ArrayStoreException e ) { throw new InvalidObjectException ( STR_ ) ; } implier = new Implier ( ) ; for ( int i = NUM_ ; i < pa . length ; i ++ ) { implier . add ( pa [ i ] ) ; } }
public long readBits ( ) { return readBits ; }
public boolean isSpecified ( String uri , String localName ) { int index = getIndex ( uri , localName ) ; if ( index < NUM_ ) throw new IllegalArgumentException ( STR_ + localName + STR_ + uri ) ; return specified [ index ] ; }
public CompositeListener ( ) { this ( STR_ ) ; }
private void updateButtonForOcean ( JButton button ) { if ( MetalLookAndFeel . usingOcean ( ) ) { button . setFocusPainted ( comboBox . isEditable ( ) ) ; } }
public boolean isEdgeTouched ( int edges ) { final int count = mInitialEdgesTouched . length ; for ( int i = NUM_ ; i < count ; i ++ ) { if ( isEdgeTouched ( edges , i ) ) { return BOOL_ ; } } return BOOL_ ; }
public ResourceLazyLoadingScript script ( String resourceLocation ) { this . resourceLocation = resourceLocation ; return this ; }
public int next ( ) { int node ; for ( node = _currentNode ; node != END ; node = getNextNamespaceNode ( _startNode , node , BOOL_ ) ) { if ( getExpandedTypeID ( node ) == _nodeType || getNodeType ( node ) == _nodeType || getNamespaceType ( node ) == _nodeType ) { _currentNode = node ; return returnNode ( node ) ; } } return ( _currentNode = END ) ; }
public PowerVmAllocationPolicyMigrationLocalRegression ( List < ? extends Host > hostList , PowerVmSelectionPolicy vmSelectionPolicy , double safetyParameter , double schedulingInterval , PowerVmAllocationPolicyMigrationAbstract fallbackVmAllocationPolicy , double utilizationThreshold ) { super ( hostList , vmSelectionPolicy ) ; setSafetyParameter ( safetyParameter ) ; setSchedulingInterval ( schedulingInterval ) ; setFallbackVmAllocationPolicy ( fallbackVmAllocationPolicy ) ; }
private static String replacePSFont ( String font ) { String result ; result = font ; if ( m_PSFontReplacement . containsKey ( font ) ) { result = m_PSFontReplacement . get ( font ) . toString ( ) ; if ( DEBUG ) { System . out . println ( STR_ + font + STR_ + result + STR_ ) ; } } return result ; }
boolean isFinished ( ) ;
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( documentgetdoctypenodtd . class , args ) ; }
public static BNode parseBNode ( String nTriplesBNode , ValueFactory valueFactory ) throws IllegalArgumentException { if ( nTriplesBNode . startsWith ( STR_ ) ) { return valueFactory . createBNode ( nTriplesBNode . substring ( NUM_ ) ) ; } else { throw new IllegalArgumentException ( STR_ + nTriplesBNode ) ; } }
public WithinExtended ( Expression expression1 , Expression expression2 ) { super ( expression1 , expression2 ) ; }
public boolean offer ( E e ) { if ( e == null ) throw new NullPointerException ( ) ; return transferer . transfer ( e , BOOL_ , NUM_ ) != null ; }
private boolean isMainActivity ( Node activityNode ) { if ( TAG_ACTIVITY . equals ( activityNode . getNodeName ( ) ) ) { for ( Element activityChild : LintUtils . getChildren ( activityNode ) ) { if ( TAG_INTENT_FILTER . equals ( activityChild . getNodeName ( ) ) ) { boolean hasLauncherCategory = BOOL_ ; boolean hasMainAction = BOOL_ ; for ( Element intentFilterChild : LintUtils . getChildren ( activityChild ) ) { if ( NODE_CATEGORY . equals ( intentFilterChild . getNodeName ( ) ) && CATEGORY_NAME_LAUNCHER . equals ( intentFilterChild . getAttributeNS ( ANDROID_URI , ATTR_NAME ) ) ) { hasLauncherCategory = BOOL_ ; } if ( NODE_ACTION . equals ( intentFilterChild . getNodeName ( ) ) && ACTION_NAME_MAIN . equals ( intentFilterChild . getAttributeNS ( ANDROID_URI , ATTR_NAME ) ) ) { hasMainAction = BOOL_ ; } } if ( hasLauncherCategory && hasMainAction ) { return BOOL_ ; } } } } return BOOL_ ; }
public static boolean isEmptyString ( String text ) { return ( text == null || text . trim ( ) . length ( ) == NUM_ ) ; }
public PitchFrameProvider ( DoubleDataSource signal , DoubleDataSource pitchmarks , InlineDataProcessor processor , int samplingRate ) { this ( signal , pitchmarks , processor , samplingRate , NUM_ , NUM_ ) ; }
public Matrix3d m02 ( double m02 ) { this . m02 = m02 ; return this ; }
static InputValidator inRange ( final int min , final int max ) { return new InputValidator ( null , STR_ + min + STR_ + max ) ; }
private static long remainingNanos ( long startTime , long timeoutNanos ) { return ( timeoutNanos <= NUM_ ) ? NUM_ : timeoutNanos - ( System . nanoTime ( ) - startTime ) ; }
public static boolean isDefined ( char c ) { return isDefinedImpl ( c ) ; }
String urlEncode ( String data ) ;
public Artist retrieveArtist ( final String ref , final ProviderIdentifier provider ) { if ( ref == null ) { try { throw new RuntimeException ( ) ; } catch ( RuntimeException e ) { Log . e ( TAG , STR_ , e ) ; } return null ; } Artist output = mCache . getArtist ( ref ) ; if ( output == null && provider != null ) { ProviderConnection pc = PluginsLookup . getDefault ( ) . getProvider ( provider ) ; if ( pc != null ) { IMusicProvider binder = pc . getBinder ( ) ; if ( binder != null ) { try { output = binder . getArtist ( ref ) ; onArtistUpdate ( provider , output ) ; } catch ( DeadObjectException e ) { Log . e ( TAG , STR_ ) ; return null ; } catch ( RemoteException e ) { Log . e ( TAG , STR_ , e ) ; return null ; } } } } return output ; }
public void add ( List < Node > nodes ) { if ( nodes . size ( ) == NUM_ ) { insert ( roots , roots . getChildren ( ) . size ( ) , nodes . get ( NUM_ ) ) ; } else { insert ( roots , roots . getChildren ( ) . size ( ) , nodes ) ; } }
public void init ( ) throws ServletException { }
public String toString ( ObjectMatrix2D matrix ) { return super . toString ( matrix ) ; }
public native byte bLength ( ) ;
void programmerSelected ( ) { DefaultComboBoxModel < ProgrammingMode > model = new DefaultComboBoxModel < ProgrammingMode > ( ) ; Programmer p = getProgrammer ( ) ; if ( p != null ) { for ( ProgrammingMode mode : getProgrammer ( ) . getSupportedModes ( ) ) { model . addElement ( mode ) ; } } log . trace ( STR_ ) ; modeBox . setModel ( model ) ; ProgrammingMode mode = ( getProgrammer ( ) != null ) ? getProgrammer ( ) . getMode ( ) : null ; log . trace ( STR_ , mode ) ; modeBox . setSelectedItem ( mode ) ; }
public boolean onScaleBegin ( IBCScaleGestureDetector detector ) ;
public String [ ] upload_file ( String group_name , byte [ ] file_buff , int offset , int length , String file_ext_name , NameValuePair [ ] meta_list ) throws IOException , MyException { return this . do_upload_file ( ProtoCommon . STORAGE_PROTO_CMD_UPLOAD_FILE , group_name , null , null , file_ext_name , length , new UploadBuff ( file_buff , offset , length ) , meta_list ) ; }
public BoolLiteral createBoolLiteral ( ) { BoolLiteralImpl boolLiteral = new BoolLiteralImpl ( ) ; return boolLiteral ; }
protected void escapeString ( String str ) { if ( str == null ) { m_out . print ( STR_ ) ; return ; } int len = str . length ( ) ; for ( int i = NUM_ ; i < len ; ++ i ) { char c = str . charAt ( i ) ; if ( ( c < LOWER_RANGE && c != VALID_CHARS [ NUM_ ] && c != VALID_CHARS [ NUM_ ] && c != VALID_CHARS [ NUM_ ] ) || ( c > UPPER_RANGE ) ) { m_out . print ( STR_ ) ; m_out . print ( Integer . toString ( c ) ) ; m_out . print ( STR_ ) ; } else { boolean valid = BOOL_ ; for ( int j = INVALID . length - NUM_ ; j >= NUM_ ; -- j ) { if ( INVALID [ j ] == c ) { valid = BOOL_ ; m_out . print ( VALID [ j ] ) ; break ; } } if ( valid ) { m_out . print ( c ) ; } } } }
public Statement copyInline ( Context ctx , boolean valNeeded ) { ForStatement s = ( ForStatement ) clone ( ) ; if ( init != null ) { s . init = init . copyInline ( ctx , valNeeded ) ; } if ( cond != null ) { s . cond = cond . copyInline ( ctx ) ; } if ( body != null ) { s . body = body . copyInline ( ctx , valNeeded ) ; } if ( inc != null ) { s . inc = inc . copyInline ( ctx ) ; } return s ; }
void requestUpdateStackViewsClip ( ) { if ( ! mStackViewsClipDirty ) { invalidate ( ) ; mStackViewsClipDirty = BOOL_ ; } }
public boolean isFull ( ) { return flags == OFMatch . OFPFW_ALL || flags == OFMatch . OFPFW_ALL_SANITIZED ; }
static WebServer start ( String ... args ) { return builder ( ) . start ( args ) ; }
static Delivery derivedFrom ( RouteSpecification routeSpecification , Itinerary itinerary , HandlingHistory handlingHistory ) { Validate . notNull ( routeSpecification , STR_ ) ; Validate . notNull ( handlingHistory , STR_ ) ; final HandlingEvent lastEvent = handlingHistory . mostRecentlyCompletedEvent ( ) ; return new Delivery ( lastEvent , itinerary , routeSpecification ) ; }
protected DBMSEvent extractEventRowLevel ( String firstData ) throws InterruptedException , ExtractorException { DBMSEvent dbmsEvent = null ; RowChangeData rowChangeData = new RowChangeData ( ) ; OneRowChange oneRowChange = null ; boolean first = BOOL_ ; if ( ! initialized ) throw new ExtractorException ( STR_ ) ; ArrayList < DBMSData > trx = new ArrayList < DBMSData > ( NUM_ ) ; while ( BOOL_ ) { String data ; if ( first ) data = firstData ; else data = getNextOp ( ) ; first = BOOL_ ; oneRowChange = parser . parse ( data , lastSCN ) ; if ( oneRowChange == null ) { trx . add ( rowChangeData ) ; dbmsEvent = new DBMSEvent ( lastEventID , trx , new Timestamp ( System . currentTimeMillis ( ) ) ) ; break ; } else { rowChangeData . appendOneRowChange ( oneRowChange ) ; } } return dbmsEvent ; }
List < StateDTO > findByCountry ( String countryCode ) throws UnmappedInterfaceException , UnableToCreateInstanceException ;
public void disAllowTeleport ( int x , int y , int width , int height ) { disallowIn ( x , y , width , height ) ; disallowOut ( x , y , width , height ) ; }
public static ModelLocation fromResAndNameOrAddress ( String resource , String name ) { return new ModelLocation ( resource , name , BOOL_ ) ; }
public boolean isIncludeInSenderChannel ( ) { return includeInSenderChannel ; }
public static void syncImmediately ( Context context ) { Bundle bundle = new Bundle ( ) ; bundle . putBoolean ( ContentResolver . SYNC_EXTRAS_EXPEDITED , BOOL_ ) ; bundle . putBoolean ( ContentResolver . SYNC_EXTRAS_MANUAL , BOOL_ ) ; ContentResolver . requestSync ( getSyncAccount ( context ) , MoviesContract . CONTENT_AUTHORITY , bundle ) ; }
public static SM_SYSTEM_MESSAGE STR_FORCE_CHANGE_LEADER_TIMEOUT ( String value0 ) { return new SM_SYSTEM_MESSAGE ( NUM_ , value0 ) ; }
public void reset ( ) { localStores = new HashMap < String , ListenerStorageEngine > ( ) ; }
public PolicyLimit ( PrincipalUser creator , PrincipalUser user , PolicyCounter counter , double limit ) { super ( creator ) ; setUser ( user ) ; setCounter ( counter ) ; setLimit ( limit ) ; }
public abstract long remainingCapacity ( ) ;
public JSONObject run ( ) { try { URL url = new URL ( JsonRequest . this . url ) ; HttpURLConnection connection = ( HttpURLConnection ) url . openConnection ( ) ; connection . setUseCaches ( BOOL_ ) ; connection . connect ( ) ; InputStream responseStream = connection . getInputStream ( ) ; String response = Utils . readStream ( responseStream ) ; return new JSONObject ( response ) ; } catch ( java . io . IOException | JSONException e ) { FreshAirLog . e ( STR_ , e ) ; return null ; } }
public String name ( ) { return this . name ; }
private String translateTriggerActionOrientation ( String sourceVendorName , String targetVendorName , String actionOrientation ) { if ( actionOrientation == null ) actionOrientation = new String ( ) ; return m_interfaces . get ( getDBVendorID ( targetVendorName ) ) . translateTriggerActionOrientation ( sourceVendorName . toUpperCase ( ) , actionOrientation . toUpperCase ( ) ) ; }
public CartPaymentInfo addPayment ( String id ) { return this . addPaymentAmount ( id , null , BOOL_ ) ; }
public static RelationalOpExpression le ( Expression left , Expression right ) { return new RelationalOpExpression ( left , STR_ , right ) ; }
public abstract Instant currentProcessingTime ( ) ;
public static SourceLineAnnotation fromVisitedInstructionRange ( ClassContext classContext , MethodGen methodGen , String sourceFile , InstructionHandle start , InstructionHandle end ) { LineNumberTable lineNumberTable = methodGen . getLineNumberTable ( methodGen . getConstantPool ( ) ) ; String className = methodGen . getClassName ( ) ; if ( lineNumberTable == null ) { return createUnknown ( className , sourceFile , start . getPosition ( ) , end . getPosition ( ) ) ; } int startLine = lineNumberTable . getSourceLine ( start . getPosition ( ) ) ; int endLine = lineNumberTable . getSourceLine ( end . getPosition ( ) ) ; return new SourceLineAnnotation ( className , sourceFile , startLine , endLine , start . getPosition ( ) , end . getPosition ( ) ) ; }
boolean isConnected ( ) ;
public static void main ( String [ ] args ) { if ( args . length != NUM_ ) { System . err . println ( STR_ ) ; System . exit ( NUM_ ) ; } VertxExample example = new VertxExample ( ) ; example . parseFile ( args [ NUM_ ] , null ) ; }
void skipFirstLevelChanged ( boolean isSkipFirstLevel ) ;
public void addToken ( View v ) { if ( selectedToken != null ) { cth . addToken ( selectedToken ) ; updateEditField ( ) ; updateClipPreview ( ) ; } else { Toast . makeText ( this , R . string . clipboard_no_token_selected , Toast . LENGTH_LONG ) . show ( ) ; } }
public void addDecorator ( final ProcessDrawDecorator decorator , final RenderPhase phase ) { if ( decorator == null ) { throw new IllegalArgumentException ( STR_ ) ; } if ( phase == null ) { throw new IllegalArgumentException ( STR_ ) ; } decorators . get ( phase ) . add ( decorator ) ; }
public static strictfp double toRadians ( double angdeg ) { return angdeg / NUM_ * PI ; }
public abstract AbstractSMISValidator createExportMaskVolumesValidator ( ExportMaskValidationContext ctx ) ;
public void initSqlQueries ( Connection conn , Document sqlConfiguration ) throws Exception { try { if ( conn . getAutoCommit ( ) ) { conn . setAutoCommit ( BOOL_ ) ; } sqlQueries . init ( sqlConfiguration , JDBCBayesianAnalyzer . class . getName ( ) , conn , getSqlParameters ( ) ) ; checkTables ( conn ) ; } finally { theJDBCUtil . closeJDBCConnection ( conn ) ; } }
public static String algString ( int alg ) throws UnsupportedAlgorithmException { switch ( alg ) { case Algorithm . RSAMD5 : return STR_ ; case Algorithm . DSA : case Algorithm . DSA_NSEC3_SHA1 : return STR_ ; case Algorithm . RSASHA1 : case Algorithm . RSA_NSEC3_SHA1 : return STR_ ; case Algorithm . RSASHA256 : return STR_ ; case Algorithm . RSASHA512 : return STR_ ; case Algorithm . ECDSAP256SHA256 : return STR_ ; case Algorithm . ECDSAP384SHA384 : return STR_ ; default : throw new UnsupportedAlgorithmException ( alg ) ; } }
public void resetSynapseDiameters ( ) { for ( SynapseNode synapse : getSynapseNodes ( ) ) { synapse . updateDiameter ( ) ; } repaint ( ) ; }
boolean isEmpty ( ) ;
public FastAdapterDialog < Item > move ( int fromPosition , int toPosition ) { mFastItemAdapter . move ( fromPosition , toPosition ) ; return this ; }
private Bitmap scaleBitmap ( Bitmap originalBitmap ) { return Bitmap . createScaledBitmap ( originalBitmap , ( int ) ( originalBitmap . getWidth ( ) * k ) , ( int ) ( originalBitmap . getHeight ( ) * k ) , BOOL_ ) ; }
public void removeParam ( Class modelClass ) { Object param = paramMap . get ( modelClass ) ; if ( param != null && param instanceof SessionListener ) { SessionListener listener = ( SessionListener ) param ; getSessionSupport ( ) . removeSessionListener ( listener ) ; } paramMap . remove ( modelClass ) ; }
public int size ( ) ;
IIntruderPayloadGenerator createNewInstance ( IIntruderAttack attack ) ;
public boolean shouldBob ( ) { return BOOL_ ; }
public NetworkEvent ( ConnectionRequest request , Object metaData ) { super ( request , ActionEvent . Type . Data ) ; if ( request != null ) { this . progressType = request . getResponseCode ( ) ; } this . metaData = metaData ; }
public static String explode ( Collection < String > collection , String delimiter ) { StringBuilder sb = new StringBuilder ( ) ; if ( ! collection . isEmpty ( ) ) { Iterator < String > i = collection . iterator ( ) ; sb . append ( i . next ( ) ) ; while ( i . hasNext ( ) ) { sb . append ( delimiter ) ; sb . append ( i . next ( ) ) ; } } return sb . toString ( ) ; }
public BitVector and ( BitVector v ) ;
public void addMinuteChangeListener ( PropertyChangeListener l ) { if ( ! Arrays . asList ( this . getMinuteChangeListeners ( ) ) . contains ( l ) ) { pcMinutes . addPropertyChangeListener ( l ) ; startAlarm ( ) ; } }
public Namespace pop ( String prefix ) { if ( prefix == null ) { prefix = STR_ ; } Namespace namespace = null ; for ( int i = namespaceStack . size ( ) - NUM_ ; i >= NUM_ ; i -- ) { Namespace ns = namespaceStack . get ( i ) ; if ( prefix . equals ( ns . getPrefix ( ) ) ) { remove ( i ) ; namespace = ns ; break ; } } if ( namespace == null ) { System . out . println ( STR_ + prefix ) ; } return namespace ; }
public static void save ( ) { OperationsSetupXml . instance ( ) . writeFileIfDirty ( ) ; LocationManagerXml . instance ( ) . writeFileIfDirty ( ) ; RouteManagerXml . instance ( ) . writeFileIfDirty ( ) ; CarManagerXml . instance ( ) . writeFileIfDirty ( ) ; EngineManagerXml . instance ( ) . writeFileIfDirty ( ) ; TrainManagerXml . instance ( ) . writeFileIfDirty ( ) ; }
public int addItemToEnd ( String productId , BigDecimal amount , BigDecimal quantity , BigDecimal unitPrice , HashMap < String , GenericValue > features , HashMap < String , Object > attributes , String prodCatalogId , String itemType , LocalDispatcher dispatcher , Boolean triggerExternalOps , Boolean triggerPriceRules , Boolean skipInventoryChecks , Boolean skipProductChecks ) throws CartItemModifyException , ItemNotFoundException { return addItemToEnd ( ShoppingCartItem . makeItem ( null , productId , amount , quantity , unitPrice , null , null , null , null , null , features , attributes , prodCatalogId , null , itemType , null , dispatcher , this , triggerExternalOps , triggerPriceRules , null , skipInventoryChecks , skipProductChecks ) ) ; }
void changedDescription ( CRawModule rawModule , String description ) ;
public int delete ( ) { return DELETE ( ) . deleteByExample ( this . example ) ; }
public SuperMatchBucket ( final SimpleSuperMatch superMatch ) { if ( superMatch == null ) { throw new IllegalArgumentException ( STR_ ) ; } supermatches . add ( superMatch ) ; this . type = superMatch . getType ( ) ; if ( LOGGER . isDebugEnabled ( ) ) { LOGGER . debug ( STR_ + superMatch . getFirstEntry ( ) . getAc ( ) + STR_ + superMatch . getLocation ( ) . getStart ( ) + STR_ + superMatch . getLocation ( ) . getEnd ( ) + STR_ + this . toString ( ) ) ; } }
void reset ( ) ;
private void distributedUnlockForClear ( ) { if ( ! this . scope . isGlobal ( ) ) { try { getLockService ( ) . unlock ( STR_ ) ; } catch ( IllegalStateException e ) { lockCheckReadiness ( ) ; throw e ; } } }
private void closeConnection ( ) { try { try { this . writer . close ( ) ; this . input . close ( ) ; } finally { this . closeSocket ( ) ; } } catch ( IOException e ) { log . info ( e . toString ( ) ) ; } }
protected VideoAddQuery ownerId ( int value ) { return unsafeParam ( STR_ , value ) ; }
public static IntsRef toUTF32 ( char [ ] s , int offset , int length , IntsRefBuilder scratch ) { int charIdx = offset ; int intIdx = NUM_ ; final int charLimit = offset + length ; while ( charIdx < charLimit ) { scratch . grow ( intIdx + NUM_ ) ; final int utf32 = Character . codePointAt ( s , charIdx , charLimit ) ; scratch . setIntAt ( intIdx , utf32 ) ; charIdx += Character . charCount ( utf32 ) ; intIdx ++ ; } scratch . setLength ( intIdx ) ; return scratch . get ( ) ; }
public String toString ( ) { if ( this . xmlDocument != null ) { XMLOutputter outputter = new XMLOutputter ( ) ; String output = outputter . outputString ( this . xmlDocument ) ; output = output . replaceAll ( STR_ , STR_ ) ; output = output . replaceAll ( STR_ , STR_ ) ; output = output . replaceAll ( STR_ , STR_ ) ; return output ; } return STR_ ; }
protected void playBughouseSounds ( ChatEvent event ) { if ( getPreferences ( ) . getBoolean ( PreferenceKeys . APP_SOUND_ENABLED ) ) { String ptell = event . getMessage ( ) ; int colonIndex = ptell . indexOf ( STR_ ) ; if ( colonIndex != - NUM_ ) { String message = ptell . substring ( colonIndex + NUM_ , ptell . length ( ) ) . trim ( ) ; RaptorStringTokenizer tok = new RaptorStringTokenizer ( message , STR_ , BOOL_ ) ; message = tok . nextToken ( ) . trim ( ) ; for ( String bugSound : bughouseSounds ) { if ( bugSound . equalsIgnoreCase ( message ) ) { event . setHasSoundBeenHandled ( BOOL_ ) ; SoundService . getInstance ( ) . playBughouseSound ( bugSound ) ; break ; } } } else { onError ( STR_ , new Exception ( ) ) ; } } }
private void reNice ( ) { try { java . lang . reflect . Field f = engineProc . getClass ( ) . getDeclaredField ( STR_ ) ; f . setAccessible ( BOOL_ ) ; int pid = f . getInt ( engineProc ) ; EngineUtil . reNice ( pid , NUM_ ) ; } catch ( Throwable t ) { } }
public void addObserver ( final FileAlterationObserver observer ) { if ( observer != null ) { observers . add ( observer ) ; } }
boolean isSucceed ( ) ;
public List < T > range ( final double [ ] lowk , final double [ ] uppk ) throws KeySizeException { if ( lowk . length != uppk . length ) { throw new KeySizeException ( ) ; } else if ( lowk . length != m_K ) { throw new KeySizeException ( ) ; } else { final List < KDNode < T > > found = new LinkedList < KDNode < T > > ( ) ; KDNode . rsearch ( new HPoint ( lowk ) , new HPoint ( uppk ) , m_root , NUM_ , m_K , found ) ; final List < T > o = new LinkedList < T > ( ) ; for ( final KDNode < T > node : found ) { o . add ( node . v ) ; } return o ; } }
public static String strReplace ( final String aOldPattern , final String aNewPattern , final String aInput ) { if ( aOldPattern == null || aOldPattern . equals ( STR_ ) ) { throw new IllegalArgumentException ( STR_ ) ; } if ( aInput == null || aInput . equals ( STR_ ) ) { return aInput ; } if ( aNewPattern == null ) { throw new IllegalArgumentException ( STR_ ) ; } if ( aNewPattern . equals ( aOldPattern ) ) return aInput ; final StringBuffer result = new StringBuffer ( ) ; int startIdx = NUM_ ; int idxOld = NUM_ ; while ( ( idxOld = aInput . indexOf ( aOldPattern , startIdx ) ) >= NUM_ ) { result . append ( aInput . substring ( startIdx , idxOld ) ) ; result . append ( aNewPattern ) ; startIdx = idxOld + aOldPattern . length ( ) ; } result . append ( aInput . substring ( startIdx ) ) ; return result . toString ( ) ; }
private void showAtCalculatedPosition ( ) { if ( mAnchorBelow ) { showAtLocation ( mAnchorView . getRootView ( ) , Gravity . TOP | Gravity . START , mXPosition , mYPosition ) ; } else { showAtLocation ( mAnchorView . getRootView ( ) , Gravity . BOTTOM | Gravity . START , mXPosition , mYPosition ) ; } }
public BlockChainScore ( final BigInteger score ) { super ( score , BlockChainScore . class ) ; if ( this . getRaw ( ) . compareTo ( BigInteger . ZERO ) < NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } }
public static < DTO > DTO createDtoFromJson ( String json , Class < DTO > dtoInterface ) { return DtoFactory . getInstance ( ) . createDtoFromJson ( json , dtoInterface ) ; }
public static boolean createForOrg ( MOrg org ) { int counter = NUM_ ; MRole [ ] roles = MRole . getOfClient ( org . getCtx ( ) ) ; for ( int i = NUM_ ; i < roles . length ; i ++ ) { if ( ! roles [ i ] . isManual ( ) ) { MRoleOrgAccess orgAccess = new MRoleOrgAccess ( org , roles [ i ] . getAD_Role_ID ( ) ) ; if ( orgAccess . save ( ) ) counter ++ ; } } s_log . info ( org + STR_ + counter ) ; return counter != NUM_ ; }
public abstract void addBoardViewListener ( BoardViewListener listener ) ;
boolean removeSubtree ( O entry ) ;
private boolean isValidPackingPlan ( PackingPlan plan ) { for ( PackingPlan . ContainerPlan containerPlan : plan . getContainers ( ) ) { for ( PackingPlan . InstancePlan instancePlan : containerPlan . getInstances ( ) ) { if ( instancePlan . getResource ( ) . getRam ( ) < MIN_RAM_PER_INSTANCE ) { LOG . severe ( String . format ( STR_ , MIN_RAM_PER_INSTANCE / Constants . MB , instancePlan . getResource ( ) . getRam ( ) / Constants . MB ) ) ; return BOOL_ ; } } } return BOOL_ ; }
private void updateProgress ( int progress ) { if ( myHost != null && progress != previousProgress ) { myHost . updateProgress ( progress ) ; } previousProgress = progress ; }
public Arguments newArgumentList ( Value arg1 , Value arg2 ) { throw new RuntimeException ( STR_ ) ; }
public void addAll ( Collection < BugInstance > collection , boolean updateActiveTime ) { for ( BugInstance warning : collection ) { add ( warning , updateActiveTime ) ; } }
protected WallGetByIdQueryWithExtended posts ( List < String > value ) { return unsafeParam ( STR_ , value ) ; }
protected int _parent ( int identity ) { if ( identity < m_size ) return m_parent . elementAt ( identity ) ; while ( BOOL_ ) { boolean isMore = nextNode ( ) ; if ( identity >= m_size && ! isMore ) return NULL ; else if ( identity < m_size ) return m_parent . elementAt ( identity ) ; } }
public boolean isSelected ( ) { return ( dataStatus == DEFAULT_ON || dataStatus == PERSONAL_ON ) ; }
public boolean userCanDeleteDept ( int connectedUserId , int DeptId , String entidad ) throws Exception ;
public HttpClient ( String url ) { this . url = url ; }
public static String addTrackerToZip ( ZipOutputStream zip , AbstractTracker tracker , Bitmap icon , int pos , Context context ) throws Exception { addImage ( zip , icon , pos + STR_ ) ; if ( tracker == null ) { return STR_ ; } if ( tracker instanceof SimpleShortcut ) { SimpleShortcut shrt = ( SimpleShortcut ) tracker ; Intent intent = shrt . getIntent ( ) ; if ( FolderUtils . ACTION . equals ( intent . getAction ( ) ) ) { addDbToZip ( intent . getData ( ) . getQuery ( ) , zip , context , pos ) ; } return STR_ + intent . toUri ( Intent . URI_INTENT_SCHEME ) + STR_ + shrt . getLabel ( null ) ; } else if ( tracker instanceof PluginTracker ) { PluginTracker plugin = ( PluginTracker ) tracker ; return STR_ + plugin . getIntent ( ) . toUri ( Intent . URI_INTENT_SCHEME ) + STR_ + plugin . getLabel ( null ) ; } return STR_ ; }
public DoubleIteratorSpliterator ( PrimitiveIterator . OfDouble iterator , int characteristics ) { this . it = iterator ; this . est = Long . MAX_VALUE ; this . characteristics = characteristics & ~ ( Spliterator . SIZED | Spliterator . SUBSIZED ) ; }
public ItemBuilder meta ( final IMetaBuilder < ? , ? > builder ) { this . itemStack . setItemMeta ( builder . build ( ) ) ; return this ; }
public static IntList squareListRecursive ( IntList L ) { if ( L == null ) { return null ; } return new IntList ( L . head * L . head , squareListRecursive ( L . tail ) ) ; }
private void doRotation ( float dx , float dy ) { mRenderer . setSceneAngleX ( dx * TOUCH_SCALE_FACTOR_ROTATION ) ; mRenderer . setSceneAngleY ( dy * TOUCH_SCALE_FACTOR_ROTATION ) ; }
private String [ ] convertReturningAttributes ( final LdapAttributeContainer retAttrs ) { String [ ] returningAttrs = null ; if ( ( retAttrs != null ) && ( ! retAttrs . isEmpty ( ) ) ) { returningAttrs = new String [ retAttrs . size ( ) ] ; Iterator itAttrs = retAttrs . keySet ( ) . iterator ( ) ; int count = NUM_ ; while ( itAttrs . hasNext ( ) ) { Object key = ( String ) itAttrs . next ( ) ; String value = ( String ) retAttrs . get ( key ) ; if ( value != null ) { returningAttrs [ count ] = value ; } count ++ ; } } return returningAttrs ; }
public int compareTo ( Transaction that ) { return Double . compare ( this . amount , that . amount ) ; }
void animate ( View v , float offset , float offsetInPixel , int page ) { if ( mInterpolator != null ) { offset = mInterpolator . getInterpolation ( offset ) ; } if ( pageStart != Page . ALL_PAGES && pageEnd != Page . ALL_PAGES ) { if ( offset > pageStart ) { offset -= pageStart ; } int pageOfAnimation = page > pageStart && page <= pageEnd ? page - pageStart : NUM_ ; if ( offset != NUM_ ) offset = ( offset + pageOfAnimation ) / mFractionAdjustment ; } if ( offset < - NUM_ ) { onAnimateOffScreenLeft ( v , offset , offsetInPixel ) ; } else if ( offset <= NUM_ ) { onAnimate ( v , offset , offsetInPixel ) ; } else { onAnimateOffScreenRight ( v , offset , offsetInPixel ) ; } if ( mAnimationListener != null ) { mAnimationListener . onAnimationRunning ( v , offset ) ; } }
public double toNumber ( Node n ) ;
public static void assignToCatalogEntry ( DataService mgr , Category category , CatalogEntry ce ) throws ObjectNotFoundException , NonUniqueBusinessKeyException { CategoryToCatalogEntry cc = new CategoryToCatalogEntry ( ) ; cc . setCatalogEntry ( ce ) ; cc . setCategory ( mgr . getReference ( Category . class , category . getKey ( ) ) ) ; mgr . persist ( cc ) ; }
private void updateSVGArrContent ( String [ ] SVGData ) { for ( int i = NUM_ ; i < SVGData . length ; i ++ ) super . getSpriteBoundsArray ( ) [ i ] . setContent ( SVGData [ i ] ) ; }
public void endTransition ( LayoutTransition transition , ViewGroup container , View view , int transitionType ) ;
public IconicsDrawable icon ( IIcon icon ) { mIcon = icon ; ITypeface typeface = icon . getTypeface ( ) ; mIconPaint . setTypeface ( typeface . getTypeface ( mContext ) ) ; invalidateSelf ( ) ; return this ; }
public void removeAnnotation ( int index ) { mAnnotations . remove ( index ) ; mStringXY . removeByIndex ( index ) ; }
public void addReferral ( String name , Referral referral ) throws NameAlreadyExistsException , InvalidNameException { referrals . addReferral ( name , referral ) ; }
public boolean isEmpty ( ) ;
public To ( From from ) { super ( TO ) ; setAddress ( from . address ) ; setParameters ( from . parameters ) ; }
public String toString ( ) { return STR_ ; }
public void removeVetoableChangeListener ( String propertyName , VetoableChangeListener in_vcl ) { beanContextChildSupport . removeVetoableChangeListener ( propertyName , in_vcl ) ; }
protected synchronized Class loadClass ( String name , boolean resolve ) throws ClassNotFoundException { Class c = findLoadedClass ( name ) ; if ( c == null ) c = findClass ( name ) ; if ( c == null ) throw new ClassNotFoundException ( name ) ; if ( resolve ) resolveClass ( c ) ; return c ; }
public void execute ( ) { mPlayer . setLoopMode ( mDoLoop ) ; mThread = new Thread ( this , STR_ ) ; mThread . start ( ) ; }
public void jmp ( Register dest ) { super . br ( dest ) ; }
public static boolean isFluttering ( ) { return Arrays . stream ( ProjectManager . getInstance ( ) . getOpenProjects ( ) ) . anyMatch ( null ) ; }
private int safeCenter ( int center ) { if ( center < mMinSelectableIndex ) { center = mMinSelectableIndex ; } else if ( center > mMaxSelectableIndex ) { center = mMaxSelectableIndex ; } return center ; }
private Channel retrieveChannelByName ( String name , EList < Channel > channels ) { for ( Channel channel : channels ) { if ( channel . getName ( ) . equals ( name ) ) { return channel ; } } return null ; }
MimeEmailMessageWrapper ( ) { multipartRoot = new MimeMultipart ( STR_ ) ; final MimeBodyPart contentRelated = new MimeBodyPart ( ) ; multipartRelated = new MimeMultipart ( STR_ ) ; final MimeBodyPart contentAlternativeMessages = new MimeBodyPart ( ) ; multipartAlternativeMessages = new MimeMultipart ( STR_ ) ; try { multipartRoot . addBodyPart ( contentRelated ) ; contentRelated . setContent ( multipartRelated ) ; multipartRelated . addBodyPart ( contentAlternativeMessages ) ; contentAlternativeMessages . setContent ( multipartAlternativeMessages ) ; } catch ( final MessagingException e ) { throw new MailSenderException ( e . getMessage ( ) , e ) ; } }
public boolean isEmbeddedId ( ) { return BOOL_ ; }
private InternalSelectionListener ( final JTable table , final ZyGraph graph ) { m_table = table ; m_graph = graph ; }
public void recompose ( StylesheetRoot root ) { root . recomposeTemplates ( this ) ; }
public void onError ( Exception e ) { e . printStackTrace ( ) ; }
public abstract void close ( ) throws IOException ;
public Result ( double gSquare , double pValue , int df , boolean isIndep ) { this . gSquare = gSquare ; this . pValue = pValue ; this . df = df ; this . isIndep = isIndep ; }
void clear ( ) ;
public void addEventListener ( WalletEventListener listener ) { addChangeEventListener ( Threading . USER_THREAD , listener ) ; addCoinsReceivedEventListener ( Threading . USER_THREAD , listener ) ; addCoinsSentEventListener ( Threading . USER_THREAD , listener ) ; addKeyChainEventListener ( Threading . USER_THREAD , listener ) ; addReorganizeEventListener ( Threading . USER_THREAD , listener ) ; addScriptChangeEventListener ( Threading . USER_THREAD , listener ) ; addTransactionConfidenceEventListener ( Threading . USER_THREAD , listener ) ; }
private boolean hasDividerBeforeChildAtAlongMainAxis ( int childAbsoluteIndex , int childRelativeIndexInFlexLine ) { if ( allViewsAreGoneBefore ( childAbsoluteIndex , childRelativeIndexInFlexLine ) ) { if ( isMainAxisDirectionHorizontal ( mFlexDirection ) ) { return ( mShowDividerVertical & SHOW_DIVIDER_BEGINNING ) != NUM_ ; } else { return ( mShowDividerHorizontal & SHOW_DIVIDER_BEGINNING ) != NUM_ ; } } else { if ( isMainAxisDirectionHorizontal ( mFlexDirection ) ) { return ( mShowDividerVertical & SHOW_DIVIDER_MIDDLE ) != NUM_ ; } else { return ( mShowDividerHorizontal & SHOW_DIVIDER_MIDDLE ) != NUM_ ; } } }
protected void validateAccessBeforeUpdate ( final Object object , final Class objectType ) throws AccessDeniedException { if ( ! federationFacade . isManageable ( object , objectType ) ) { throw new AccessDeniedException ( STR_ ) ; } }
boolean onItemLongClick ( RecyclerView parent , View view , int position , long id ) ;
public void shuffle ( Random rand ) { for ( int i = _pos ; i -- > NUM_ ; ) { swap ( i , rand . nextInt ( i ) ) ; } }
protected final boolean removeInternal ( Tuple t ) { return ( m_tuples . remove ( t ) ) ; }
protected void deleteShell ( String shellId ) throws WinRMException { newDeleteShell ( shellId ) . execute ( ) ; }
public static void afterUnshelve ( final Shelveset shelveset ) { Check . notNull ( shelveset , STR_ ) ; final PendingChangesViewModel model = TFSCommonUIClientPlugin . getDefault ( ) . getPendingChangesViewModel ( ) ; final WorkItemClient workItemClient = model . getWorkspace ( ) . getClient ( ) . getConnection ( ) . getWorkItemClient ( ) ; model . setComment ( shelveset . getComment ( ) ) ; model . associateWorkItems ( shelveset . getWorkItemInfo ( workItemClient ) ) ; model . setCheckinNoteFieldValues ( shelveset . getCheckinNote ( ) . getValues ( ) ) ; }
void processRunRandom ( ) throws SQLException { connect ( ) ; try { traceOperation ( STR_ + operations + STR_ + flags + STR_ + value ) ; processAppStart ( ) ; System . out . println ( STR_ ) ; System . out . println ( STR_ ) ; System . out . println ( STR_ ) ; processAppRun ( ) ; traceOperation ( STR_ ) ; } catch ( Exception e ) { traceOperation ( STR_ , e ) ; } disconnect ( ) ; }
public Element simulate ( final List < Instruction > instructions ) { lock . lock ( ) ; try { returnElement = null ; return simulateInternal ( instructions ) ; } finally { lock . unlock ( ) ; } }
String updateConnectedNode ( String clientId , String node , int seconds ) ;
public VegetableGrower ( final RPObject object , final String name , final int maxRipeness , final int growthRate ) { super ( object , STR_ + name + STR_ , STR_ + name + STR_ , STR_ , maxRipeness , growthRate ) ; vegetableName = name ; setDescription ( STR_ + Grammar . a_noun ( name ) + STR_ ) ; update ( ) ; }
public boolean isReportingProcess ( ) { return m_reportingProcess ; }
public JavaRNG ( final RandomUtils seedGenerator ) { this ( seedGenerator . generateSeed ( SEED_SIZE_BYTES ) ) ; }
public void startWith ( ) throws IOException { printer . println ( ) ; print ( STR_ , null ) ; print ( STR_ , null ) ; indent += STR_ ; }
public void fail ( ) { screenshot ( ) ; this . testResult = new Fail ( ) ; }
public boolean match ( Element e , String pseudoE ) { return ( e instanceof CSSStylableElement ) ? ( ( CSSStylableElement ) e ) . getXMLId ( ) . equals ( getValue ( ) ) : BOOL_ ; }
private void updateProgress ( int progress ) { if ( myHost != null ) { myHost . updateProgress ( progress ) ; } else { System . out . println ( STR_ + progress + STR_ ) ; } }
private void returnData ( Object ret ) { if ( myHost != null ) { myHost . returnData ( ret ) ; } }
public boolean isAlive ( ) { return mouseHook != null && mouseHook . isAlive ( ) ; }
public void testIntbyInt1 ( ) { byte aBytes [ ] = { NUM_ , NUM_ , NUM_ , NUM_ } ; byte bBytes [ ] = { NUM_ , NUM_ , NUM_ , NUM_ } ; int aSign = NUM_ ; int bSign = - NUM_ ; byte rBytes [ ] = { - NUM_ , - NUM_ , - NUM_ , NUM_ , NUM_ , NUM_ , NUM_ } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . multiply ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = NUM_ ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( STR_ , - NUM_ , result . signum ( ) ) ; }
private static String wildcardToRegex ( String pattern ) { return STR_ + StringUtils . replaceEach ( escapeRegexp ( pattern ) , new String [ ] { STR_ , STR_ } , new String [ ] { STR_ , STR_ } ) + STR_ ; }
public boolean isDirectory ( ) { if ( file != null ) { return file . isDirectory ( ) ; } if ( linkFlag == LF_DIR ) { return BOOL_ ; } if ( getName ( ) . endsWith ( STR_ ) ) { return BOOL_ ; } return BOOL_ ; }
public DoubleArrayListParameter ( OptionID optionID , ParameterConstraint < List < double [ ] > > constraint , boolean optional ) { super ( optionID , optional ) ; addConstraint ( constraint ) ; }
protected T resolveSdkFromContainerPath ( IPath containerPath , IJavaProject project ) { if ( containerPath . segmentCount ( ) == NUM_ ) { return null ; } SdkManager < T > sdkManager = getSdkManager ( ) ; assert ( sdkManager != null ) ; T sdk = sdkManager . findSdkForPath ( containerPath ) ; if ( sdk != null && ! sdk . validate ( ) . isOK ( ) ) { return null ; } return sdk ; }
boolean isDefNoncollider ( Node node1 , Node node2 , Node node3 ) ;
public List < Object > parse ( Insert insert , QueryState state ) throws SQLException { if ( ! insert . getColumns ( ) . isPresent ( ) ) throw new SQLException ( STR_ ) ; if ( insert . getQuery ( ) . getQueryBody ( ) == null ) throw new SQLException ( STR_ ) ; if ( ! ( insert . getQuery ( ) . getQueryBody ( ) instanceof Values ) ) throw new SQLException ( STR_ ) ; List < String > fields = insert . getColumns ( ) . get ( ) ; List < Object > values = insert . getQuery ( ) . getQueryBody ( ) . accept ( this , state ) ; if ( state . hasException ( ) ) throw state . getException ( ) ; for ( String field : fields ) state . getHeading ( ) . add ( new Column ( field ) ) ; return values ; }
public static void deleteSAML2Token ( String primaryKey ) throws SAML2TokenRepositoryException { SAML2TokenRepositoryHolder . getRepo ( ) . deleteSAML2Token ( primaryKey ) ; }
public static final JIPClause create ( final JIPFunctor head , final JIPCons body ) { if ( body == null ) return new JIPClause ( ( Functor ) head . getTerm ( ) ) ; else return new JIPClause ( ( Functor ) head . getTerm ( ) , ( ConsCell ) body . getTerm ( ) ) ; }
T findElementClickable ( By by ) ;
private static ContactGroupEntry buildGroup ( ContactsExampleParameters parameters ) { ContactGroupEntry groupEntry = new ContactGroupEntry ( ) ; ElementHelper . buildGroup ( groupEntry , parameters . getElementDesc ( ) ) ; return groupEntry ; }
protected void populateBlob ( int id , byte [ ] baseContent , int requiredSize ) throws SQLException { Connection con = getConnectionViaDriverManager ( ) ; CallableStatement cstmt = null ; try { cstmt = con . prepareCall ( EXECUTE_FILL_BINARY_BLOB ) ; cstmt . setInt ( NUM_ , id ) ; cstmt . setBytes ( NUM_ , baseContent ) ; cstmt . setInt ( NUM_ , requiredSize ) ; cstmt . execute ( ) ; } finally { closeQuietly ( cstmt ) ; closeQuietly ( con ) ; } }
public int consume ( ) { int consumedAmount ; if ( Math . abs ( left ) < Math . abs ( getRegen ( ) ) ) { consumedAmount = left ; left = NUM_ ; } else { consumedAmount = getRegen ( ) ; left -= getRegen ( ) ; } return consumedAmount ; }
protected EntityMappingRuleImpl ( ) { super ( ) ; }
protected void addValuePropertyDescriptor ( Object object ) { itemPropertyDescriptors . add ( createItemPropertyDescriptor ( ( ( ComposeableAdapterFactory ) adapterFactory ) . getRootAdapterFactory ( ) , getResourceLocator ( ) , getString ( STR_ ) , getString ( STR_ , STR_ , STR_ ) , SGenPackage . Literals . REAL_LITERAL__VALUE , BOOL_ , BOOL_ , BOOL_ , ItemPropertyDescriptor . REAL_VALUE_IMAGE , null , null ) ) ; }
public void testDisconnect_NonBlockWithServerChannelClosed ( ) throws IOException { this . channel1 . configureBlocking ( BOOL_ ) ; connectLocalServer ( ) ; this . channel1 . close ( ) ; disconnectAfterClosed ( ) ; }
void resetMasterPassword ( String password , boolean encrypt ) { myKey . get ( ) . set ( EncryptionUtil . genPasswordKey ( password ) ) ; myDatabase . clear ( ) ; try { storePassword ( null , MasterKeyPasswordSafe . class , testKey ( password ) , TEST_PASSWORD_VALUE ) ; if ( encrypt ) { myDatabase . setPasswordInfo ( encryptPassword ( password ) ) ; } else { myDatabase . setPasswordInfo ( ArrayUtil . EMPTY_BYTE_ARRAY ) ; } } catch ( PasswordSafeException e ) { throw new IllegalStateException ( STR_ , e ) ; } }
public void testExceptionsOnSubMapSetValue ( ) { TreeMap < String , String > map = new TreeMap < String , String > ( ) ; map . put ( STR_ , STR_ ) ; map . put ( STR_ , STR_ ) ; map . put ( STR_ , STR_ ) ; map . put ( STR_ , STR_ ) ; assertAllEntryMethodsReturnImmutableEntries ( map . subMap ( STR_ , BOOL_ , STR_ , BOOL_ ) ) ; }
public boolean isSecure ( ) { return request != null ? this . request . isSecure ( ) : isSecure ; }
public JsonObjectHttpRequest ( String url , JSONObject jsonObject , RequestCallback callback ) throws MalformedURLException { super ( url , callback ) ; mJsonObject = jsonObject ; }
public static int unpackInt ( final byte [ ] array , final JBBPIntCounter position ) { final int code = array [ position . getAndIncrement ( ) ] & NUM_ ; if ( code < NUM_ ) { return code ; } final int result ; switch ( code ) { case NUM_ : { result = ( ( array [ position . getAndIncrement ( ) ] & NUM_ ) << NUM_ ) | ( array [ position . getAndIncrement ( ) ] & NUM_ ) ; } break ; case NUM_ : { result = ( ( array [ position . getAndIncrement ( ) ] & NUM_ ) << NUM_ ) | ( ( array [ position . getAndIncrement ( ) ] & NUM_ ) << NUM_ ) | ( ( array [ position . getAndIncrement ( ) ] & NUM_ ) << NUM_ ) | ( array [ position . getAndIncrement ( ) ] & NUM_ ) ; } break ; default : throw new IllegalArgumentException ( STR_ + Integer . toHexString ( code ) . toUpperCase ( Locale . ENGLISH ) + STR_ ) ; } return result ; }
public static CharSequence [ ] split ( CharSequence line , int delimiter , int n ) { int [ ] l = limits ( line , delimiter , n ) ; CharSequence [ ] tokens = new CharSequence [ l . length - NUM_ ] ; for ( int i = NUM_ ; i < tokens . length ; i ++ ) { tokens [ i ] = new StringSegment ( line , l [ i ] + NUM_ , l [ i + NUM_ ] ) ; } return tokens ; }
static < T , E extends Throwable > ToIntFunctionWithThrowable < T , E > asToIntFunctionWithThrowable ( final ToIntFunction < T > tointfunction ) { return null ; }
ActionFuture < MultiSearchResponse > multiSearch ( MultiSearchRequest request ) ;
public static String encode ( byte [ ] source , int off , int len , byte [ ] alphabet , boolean doPadding ) { byte [ ] outBuff = encode ( source , off , len , alphabet , Integer . MAX_VALUE ) ; int outLen = outBuff . length ; while ( doPadding == BOOL_ && outLen > NUM_ ) { if ( outBuff [ outLen - NUM_ ] != STR_ ) { break ; } outLen -= NUM_ ; } return new String ( outBuff , NUM_ , outLen ) ; }
public boolean isHidden ( ) { return m_hidden ; }
boolean shouldBreak ( BreakAction a , int fileId , int line , int isolateId ) { boolean should = a . isEnabled ( ) ; ValueExp exp = a . getCondition ( ) ; if ( should && exp != null && ! getRequestHalt ( isolateId ) ) { try { EvaluationResult result = evalExpression ( exp , BOOL_ , isolateId ) ; if ( result != null ) should = ECMA . toBoolean ( result . context . toValue ( result . value ) ) ; } catch ( NullPointerException npe ) { } catch ( NumberFormatException nfe ) { } } return should ; }
void nextBytes ( byte [ ] bytes ) ;
private void interruptWorkers ( ) { final ReentrantLock mainLock = this . mainLock ; mainLock . lock ( ) ; try { for ( Worker w : workers ) w . interruptIfStarted ( ) ; } finally { mainLock . unlock ( ) ; } }
public static Map < String , Integer > extractWwnToHluMap ( UnManagedExportMask unManagedExportMask , DbClient dbClient ) { Map < String , Integer > wwnToHluMap = new HashMap < String , Integer > ( ) ; Iterator < UnManagedVolume > unManagedVolumes = dbClient . queryIterativeObjects ( UnManagedVolume . class , Collections2 . transform ( unManagedExportMask . getUnmanagedVolumeUris ( ) , CommonTransformerFunctions . FCTN_STRING_TO_URI ) ) ; while ( unManagedVolumes . hasNext ( ) ) { UnManagedVolume vol = unManagedVolumes . next ( ) ; String wwn = vol . getWwn ( ) ; if ( wwn != null ) { wwnToHluMap . put ( wwn , findHlu ( vol , unManagedExportMask . getMaskName ( ) ) ) ; } } _logger . info ( STR_ + wwnToHluMap , unManagedExportMask . getMaskName ( ) ) ; return wwnToHluMap ; }
public void emitInvokestatic ( int meth , Type mtype ) { int argsize = width ( mtype . getParameterTypes ( ) ) ; emitop ( invokestatic ) ; if ( ! alive ) return ; emit2 ( meth ) ; state . pop ( argsize ) ; state . push ( mtype . getReturnType ( ) ) ; }
public static CipherTextIvMac encrypt ( byte [ ] plaintext , SecretKeys secretKeys ) throws GeneralSecurityException { byte [ ] iv = generateIv ( ) ; Cipher aesCipherForEncryption = Cipher . getInstance ( CIPHER_TRANSFORMATION ) ; aesCipherForEncryption . init ( Cipher . ENCRYPT_MODE , secretKeys . getConfidentialityKey ( ) , new IvParameterSpec ( iv ) ) ; iv = aesCipherForEncryption . getIV ( ) ; byte [ ] byteCipherText = aesCipherForEncryption . doFinal ( plaintext ) ; byte [ ] ivCipherConcat = CipherTextIvMac . ivCipherConcat ( iv , byteCipherText ) ; byte [ ] integrityMac = generateMac ( ivCipherConcat , secretKeys . getIntegrityKey ( ) ) ; return new CipherTextIvMac ( byteCipherText , iv , integrityMac ) ; }
public synchronized boolean registerFrame ( JFrame frame ) { frameList . add ( frame ) ; frameListDisplay . setListData ( frameList ) ; return BOOL_ ; }
public Uri move ( Uri from , Uri to ) throws MmsException { long msgId = ContentUris . parseId ( from ) ; if ( msgId == - NUM_ ) { throw new MmsException ( STR_ ) ; } Integer msgBox = MESSAGE_BOX_MAP . get ( to ) ; if ( msgBox == null ) { throw new MmsException ( STR_ + STR_ + STR_ + STR_ ) ; } ContentValues values = new ContentValues ( NUM_ ) ; values . put ( STR_ , msgBox ) ; SqliteWrapper . update ( mContext , mContentResolver , from , values , null , null ) ; return ContentUris . withAppendedId ( to , msgId ) ; }
void populateFilterInfoBasedOnColumnType ( ResolvedFilterInfoVisitorIntf visitor , FilterResolverMetadata metadata ) throws FilterUnsupportedException ;
private static String slashify ( String path ) { return File . separatorChar != STR_ ? Objects . requireNonNull ( path ) . replace ( File . separatorChar , STR_ ) : path ; }
public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Sprint_ME_TO_SELF ( String skillname ) { return new SM_SYSTEM_MESSAGE ( NUM_ , skillname ) ; }
private void reset ( ) { invalidationRequired = BOOL_ ; invalidationDelayedRequired = BOOL_ ; setInvalidationDelay ( NUM_ ) ; LOGGER . trace ( STR_ ) ; }
private void loadFinishScreen ( ) { CoordinatorLayout . LayoutParams lp = new CoordinatorLayout . LayoutParams ( CoordinatorLayout . LayoutParams . WRAP_CONTENT , CoordinatorLayout . LayoutParams . WRAP_CONTENT ) ; mFloatingActionButton . setLayoutParams ( lp ) ; mFloatingActionButton . setVisibility ( View . INVISIBLE ) ; NestedScrollView contentLayout = ( NestedScrollView ) findViewById ( R . id . challenge_rootcontainer ) ; if ( contentLayout != null ) { contentLayout . removeAllViews ( ) ; View view = getLayoutInflater ( ) . inflate ( R . layout . fragment_finish_challenge , contentLayout , BOOL_ ) ; contentLayout . addView ( view ) ; } }
public boolean isCompacted ( ) { return compacted ; }
public void execute ( ) { geometry = previous ; previous = ( ( mxGraphModel ) model ) . geometryForCellChanged ( cell , previous ) ; }
public void __setDaoSession ( DaoSession daoSession ) { this . daoSession = daoSession ; myDao = daoSession != null ? daoSession . getAlloperatorsDao ( ) : null ; }
public boolean isLegal ( MovePath path ) { return ( ( movementType != EntityMovementType . MOVE_ILLEGAL ) && ( isLegalEndPos ( ) || ! isEndPos ( path ) ) ) ; }
public void close ( ) { this . closed = BOOL_ ; }
public void close ( ) { try { mContext . unregisterReceiver ( mBluetoothStateBroadcastReceiver ) ; mContext . unregisterReceiver ( mBondingBroadcastReceiver ) ; } catch ( Exception e ) { } synchronized ( mLock ) { if ( mBluetoothGatt != null ) { mBluetoothGatt . close ( ) ; mBluetoothGatt = null ; } mConnected = BOOL_ ; mConnectionState = BluetoothGatt . STATE_DISCONNECTED ; mGattCallback = null ; mBluetoothDevice = null ; } }
public void addColumn ( Column column ) { getColumns ( ) . add ( column ) ; }
public AsyncHttpClient ( int httpPort ) { this ( BOOL_ , httpPort , NUM_ ) ; }
public void poke ( ) { if ( mIsDozing ) { forcePoke ( ) ; } }
public LDIFException ( LocalizableMessage message , Number lineNumber , boolean canContinueReading ) { super ( message ) ; this . lineNumber = lineNumber . longValue ( ) ; this . canContinueReading = canContinueReading ; }
public int next ( ) { int node = _currentNode ; if ( DTM . NULL != node ) _currentNode = getNextNamespaceNode ( _startNode , node , BOOL_ ) ; return returnNode ( node ) ; }
protected SVGOMSolidColorElement ( ) { }
public static String separate ( String separator , String ... blocks ) { requireNonNullElements ( blocks ) ; return Stream . of ( blocks ) . collect ( joining ( separator ) ) ; }
public void mouseDrag ( MouseEvent e ) { }
protected void increaseTimeCount ( double time ) { int index = ( int ) ( time / this . granularity ) ; if ( index >= this . nrofContacts . size ( ) ) { this . nrofContacts . setSize ( index + NUM_ ) ; } Integer curValue = this . nrofContacts . get ( index ) ; if ( curValue == null ) { this . nrofContacts . set ( index , NUM_ ) ; } else { this . nrofContacts . set ( index , curValue + NUM_ ) ; } }
public void releaseLocks ( ) { if ( ! didRun ) { return ; } if ( access != null ) { access . release ( ) ; } }
public void addToHistory ( CAS cas , HistoryEvent event ) { try { getDocumentHistory ( cas . getJCas ( ) ) . add ( event ) ; } catch ( CASException e ) { monitor . error ( STR_ , e ) ; } }
public com . sun . identity . wsfederation . jaxb . wsfederation . PsuedonymServiceEndpointElement createPsuedonymServiceEndpointElement ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . wsfederation . jaxb . wsfederation . impl . PsuedonymServiceEndpointElementImpl ( ) ; }
private boolean fileNameMatches ( String name ) { boolean result = BOOL_ ; if ( regExPattern != null ) result = regExPattern . matcher ( name ) . matches ( ) ; if ( result && notregExPattern != null ) result = ! notregExPattern . matcher ( name ) . matches ( ) ; String log = STR_ + name + STR_ ; if ( ! result ) log += STR_ ; else log += STR_ ; log ( log ) ; return result ; }
private void verifyExceptionThrown ( Exception thrown , Class expected ) { boolean exceptionFound = BOOL_ ; Throwable cause = thrown ; while ( cause != null ) { if ( expected . isInstance ( cause ) ) { exceptionFound = BOOL_ ; break ; } else { cause = cause . getCause ( ) ; } } if ( ! exceptionFound ) { Assert . fail ( expected . getSimpleName ( ) + STR_ , thrown ) ; } }
private static boolean hasChangesOfChildren ( long last , Class clazz ) { return hasChangesOfChildren ( last , ThreadLocalPageContext . get ( ) , clazz ) ; }
private static void sendRegistrationMessageToServers ( Instantiator instantiator ) { PoolManagerImpl . allPoolsRegisterInstantiator ( instantiator ) ; }
public void checkWarehouse ( boolean sbf ) { if ( warehouse == null ) { logger . fine ( STR_ ) ; if ( lst != null && lst . getDatabaseName ( ) != null && lst . getDatabaseName ( ) . equals ( STR_ ) ) { warehouse = new VPFLayerDCWWarehouse ( ) ; } else if ( sbf ) { warehouse = new VPFFeatureGraphicWarehouse ( ) ; } else { warehouse = new VPFLayerGraphicWarehouse ( ) ; } } else if ( ( sbf && ! ( warehouse instanceof VPFFeatureGraphicWarehouse ) ) || ( ! sbf && warehouse instanceof VPFFeatureGraphicWarehouse ) ) { warehouse = null ; checkWarehouse ( sbf ) ; } }
public void dispatchEvent ( AWTEvent e ) { }
public static SM_SYSTEM_MESSAGE STR_MSG_SPLIT_B_TO_ME ( String value0 , int num1 , int num2 , int num3 ) { return new SM_SYSTEM_MESSAGE ( NUM_ , value0 , num1 , num2 , num3 ) ; }
public String constructSpecName ( String proposition , boolean firstRun ) { Spec existingSpec = getSpecByName ( proposition ) ; if ( existingSpec != null ) { if ( firstRun ) { return constructSpecName ( proposition . concat ( STR_ ) , BOOL_ ) ; } else { String oldNumber = proposition . substring ( proposition . lastIndexOf ( STR_ ) ) ; int number = Integer . parseInt ( oldNumber ) + NUM_ ; proposition = proposition . substring ( NUM_ , proposition . lastIndexOf ( STR_ ) ) ; return constructSpecName ( proposition + number , BOOL_ ) ; } } return proposition ; }
void addWhitelistPattern ( String urlPattern ) ;
public Type < ? > findAncestor ( final Class < ? > ancestor ) { if ( ancestor . isInterface ( ) ) { return findInterface ( ancestor ) ; } else { if ( this . getRawType ( ) . equals ( ancestor ) ) { return this ; } else if ( ! TypeFactory . TYPE_OF_OBJECT . equals ( this ) ) { return getSuperType ( ) . findAncestor ( ancestor ) ; } else { return null ; } } }
public XmlParser ( StreamProperties props , Reader r , Charset cs ) { this ( props , new SaxEventSource ( r ) ) ; Preconditions . checkNotNull ( cs , STR_ ) ; }
public String [ ] remove ( String name ) { return vals . remove ( name ) ; }
public NotificationChain basicSetExpression ( Expression newExpression , NotificationChain msgs ) { Expression oldExpression = expression ; expression = newExpression ; if ( eNotificationRequired ( ) ) { ENotificationImpl notification = new ENotificationImpl ( this , Notification . SET , N4JSPackage . CASE_CLAUSE__EXPRESSION , oldExpression , newExpression ) ; if ( msgs == null ) msgs = notification ; else msgs . add ( notification ) ; } return msgs ; }
public static boolean isNullOrEmpty ( String s , boolean trim ) { return s == null || ( trim ? s . trim ( ) . length ( ) == NUM_ : s . length ( ) == NUM_ ) ; }
public boolean isEmpty ( ) { synchronized ( contexts ) { return contexts . isEmpty ( ) ; } }
public DefaultStyledDocument ( StyleContext styles ) { this ( new GapContent ( BUFFER_SIZE_DEFAULT ) , styles ) ; }
public void onAvatarUpdate ( IAvatarTile tile , ItemStack stack ) ;
public void hide ( ) ;
public DcwVariableLengthIndexFile ( BinaryFile inputstream , boolean msbfirst ) throws FormatException { try { inputstream . byteOrder ( msbfirst ) ; recordCount = inputstream . readInteger ( ) ; inputstream . readInteger ( ) ; offsettable = new int [ recordCount * NUM_ ] ; inputstream . readIntegerArray ( offsettable , NUM_ , recordCount * NUM_ ) ; endOfFileOffset = offsettable [ offsettable . length - NUM_ ] + offsettable [ offsettable . length - NUM_ ] ; inputstream . close ( ) ; } catch ( IOException i ) { throw new FormatException ( STR_ + inputstream . getName ( ) + STR_ + i . getMessage ( ) ) ; } }
static void processQueue ( ReferenceQueue < Class < ? > > queue , ConcurrentMap < ? extends WeakReference < Class < ? > > , ? > map ) { Reference < ? extends Class < ? > > ref ; while ( ( ref = queue . poll ( ) ) != null ) { map . remove ( ref ) ; } }
public boolean onStarted ( IgniteInternalTx tx ) { assert tx . state ( ) == ACTIVE || tx . isRollbackOnly ( ) : STR_ + cctx . localNodeId ( ) + STR_ + tx + STR_ ; if ( isCompleted ( tx ) ) { ConcurrentMap < GridCacheVersion , IgniteInternalTx > txIdMap = transactionMap ( tx ) ; txIdMap . remove ( tx . xidVersion ( ) , tx ) ; if ( log . isDebugEnabled ( ) ) log . debug ( STR_ + tx ) ; return BOOL_ ; } if ( log . isDebugEnabled ( ) ) log . debug ( STR_ + tx ) ; return BOOL_ ; }
public Action ( ActionType at , int x , int y ) { if ( ! isMoveAction ( at ) ) { throw new IllegalArgumentException ( STR_ + STR_ + at + STR_ ) ; } type = at ; dir = null ; this . x = x ; this . y = y ; }
abstract public void shake ( Collection < PointMatch > matches , float scale , float [ ] center ) ;
public static void print ( double [ ] a ) { int n = a . length ; StdOut . println ( n ) ; for ( int i = NUM_ ; i < n ; i ++ ) { StdOut . printf ( STR_ , a [ i ] ) ; } StdOut . println ( ) ; }
public static double norm_1 ( float [ ] a ) { double sum = NUM_ ; for ( int i = NUM_ ; i < a . length ; i ++ ) { sum += ( a [ i ] < NUM_ ? - a [ i ] : a [ i ] ) ; } return sum ; }
protected boolean accept ( XSLTVisitor visitor ) { return visitor . visitVariableOrParamDecl ( this ) ; }
private float easeInOutQuad ( long time , float from , float change , long duration ) { float timeF = time / ( duration / NUM_ ) ; if ( timeF < NUM_ ) { return ( change / NUM_ * timeF * timeF ) + from ; } else { timeF -- ; return ( - change / NUM_ ) * ( timeF * ( timeF - NUM_ ) - NUM_ ) + from ; } }
public InfoHandler ( final CoreContainer coreContainer ) { this . coreContainer = coreContainer ; systemInfoHandler = new SystemInfoHandler ( coreContainer ) ; loggingHandler = new LoggingHandler ( coreContainer ) ; }
public static < T , X extends Throwable > void forEachWithError ( final Stream < T > stream , final Consumer < ? super T > consumerElement , final Consumer < ? super Throwable > consumerError ) { val t2 = FutureStreamUtils . forEachWithError ( stream , consumerElement , consumerError ) ; t2 . v2 . run ( ) ; }
public int createString ( String s ) { byte [ ] utf8 = s . getBytes ( utf8charset ) ; addByte ( ( byte ) NUM_ ) ; startVector ( NUM_ , utf8 . length , NUM_ ) ; bb . position ( space -= utf8 . length ) ; bb . put ( utf8 , NUM_ , utf8 . length ) ; return endVector ( ) ; }
private void writeDataToDestination ( State state , byte [ ] data , int bytesRead ) throws StopRequest { for ( ; ; ) { try { if ( state . mStream == null ) { state . mStream = new FileOutputStream ( state . mFilename , BOOL_ ) ; } state . mStream . write ( data , NUM_ , bytesRead ) ; closeDestination ( state ) ; return ; } catch ( IOException ex ) { if ( ! Helpers . isExternalMediaMounted ( ) ) { throw new StopRequest ( DownloaderService . STATUS_DEVICE_NOT_FOUND_ERROR , STR_ ) ; } long availableBytes = Helpers . getAvailableBytes ( Helpers . getFilesystemRoot ( state . mFilename ) ) ; if ( availableBytes < bytesRead ) { throw new StopRequest ( DownloaderService . STATUS_INSUFFICIENT_SPACE_ERROR , STR_ , ex ) ; } throw new StopRequest ( DownloaderService . STATUS_FILE_ERROR , STR_ + ex . toString ( ) , ex ) ; } } }
public Object runSafely ( Catbert . FastStack stack ) throws Exception { return stack . getUIMgrSafe ( ) . get ( STR_ , STR_ ) ; }
T_ARR newArray ( int count ) ;
void initialize ( Config config ) ;
public static void printSyntax ( ) { System . out . println ( STR_ + HLDATextGenerator . class . getName ( ) + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ ) ; }
private void gameLoop ( ) { Graphics2D g = ( Graphics2D ) this . canvas . getBufferStrategy ( ) . getDrawGraphics ( ) ; this . transform ( g ) ; this . clear ( g ) ; long time = System . nanoTime ( ) ; long diff = time - this . last ; this . last = time ; double elapsedTime = ( double ) diff / NANO_TO_BASE ; this . render ( g , elapsedTime ) ; if ( ! paused ) { this . update ( g , elapsedTime ) ; } g . dispose ( ) ; BufferStrategy strategy = this . canvas . getBufferStrategy ( ) ; if ( ! strategy . contentsLost ( ) ) { strategy . show ( ) ; } Toolkit . getDefaultToolkit ( ) . sync ( ) ; }
public void configureIndicator ( int indicatorWidth , int indicatorHeight , int indicatorMargin ) { configureIndicator ( indicatorWidth , indicatorHeight , indicatorMargin , R . animator . scale_with_alpha , NUM_ , R . drawable . white_radius , R . drawable . white_radius ) ; }
public static EWMA oneMinuteEWMA ( ) { return new EWMA ( M1_ALPHA , INTERVAL , TimeUnit . SECONDS ) ; }
public void afterIndexLookup ( Collection results ) { }
public Measurement convert ( Reading r , Measurement last ) { if ( last != null ) { this . Xt = last . getX ( ) ; this . Yt = last . getY ( ) ; this . Zt = last . getZ ( ) ; } if ( this . Xt > NUM_ ) { this . Xt = NUM_ ; } if ( this . Yt > NUM_ ) { this . Yt = NUM_ ; } if ( this . Zt > NUM_ ) { this . Zt = NUM_ ; } return convert ( r ) ; }
private void showContextMenu ( final PInputEvent event ) { JPopupMenu contextMenu = getContextMenu ( ) ; Point2D canvasPosition = event . getCanvasPosition ( ) ; contextMenu . show ( ( PCanvas ) event . getComponent ( ) , ( int ) canvasPosition . getX ( ) , ( int ) canvasPosition . getY ( ) ) ; }
public static String toJson ( Object obj ) { return toJson ( obj , BOOL_ ) ; }
public void onCombine ( ) throws IOException { }
public static void highlightAndBoldText ( TextView textView , int highlightColor ) { final String string = textView . getText ( ) . toString ( ) ; textView . setText ( getHighlightText ( textView . getContext ( ) , string , highlightColor , BOOL_ ) ) ; }
void checkForWashedInfernos ( Entity entity , Coords coords ) { IHex hex = game . getBoard ( ) . getHex ( coords ) ; int waterLevel = hex . terrainLevel ( Terrains . WATER ) ; if ( ! ( entity instanceof Mech ) || ! entity . infernos . isStillBurning ( ) ) { return ; } if ( ( waterLevel > NUM_ ) && ( entity . relHeight ( ) < NUM_ ) ) { washInferno ( entity , coords ) ; } }
public void offlinePageModelChanged ( ) { }
public FrameBodyCHAP ( ByteBuffer byteBuffer , int frameSize ) throws InvalidTagException { super ( byteBuffer , frameSize ) ; }
private void updateProgress ( int progress ) { if ( myHost != null && progress != previousProgress ) { myHost . updateProgress ( progress ) ; } previousProgress = progress ; }
public boolean isMassExplicit ( ) { return this . massExplicit ; }
public void saveFocusedNode ( ) { mSavedNode . recycle ( ) ; AccessibilityNodeInfoCompat node = mCursorController . getCursor ( ) ; if ( node != null ) { mSavedNode . saveNodeState ( node , mCursorController . getGranularityAt ( node ) ) ; node . recycle ( ) ; } }
public void addPlot ( PlotData2D newPlot ) throws Exception { if ( newPlot . m_plotInstances == null ) { throw new Exception ( STR_ ) ; } if ( m_masterPlot != null ) { if ( m_masterPlot . m_plotInstances . equalHeaders ( newPlot . m_plotInstances ) == BOOL_ ) { throw new Exception ( STR_ + STR_ ) ; } } else { m_masterPlot = newPlot ; m_plotInstances = m_masterPlot . m_plotInstances ; } m_plots . add ( newPlot ) ; setXindex ( m_xIndex ) ; setYindex ( m_yIndex ) ; setCindex ( m_cIndex ) ; }
public CCParticleSystem ( HashMap < ? , ? > dictionary ) { }
public static ExtensionRegistry createRegistryFrom ( ExtensionRegistry parentRegistry , List < Class < ? extends Extension > > extensionTypes ) { Preconditions . notNull ( parentRegistry , STR_ ) ; ExtensionRegistry registry = new ExtensionRegistry ( parentRegistry ) ; extensionTypes . forEach ( null ) ; return registry ; }
public CircularRedirectException ( String message ) { super ( message ) ; }
protected CCBezierBy ( float t , CCBezierConfig c ) { super ( t ) ; config = c ; startPosition = CGPoint . make ( NUM_ , NUM_ ) ; }
protected void startIntentService ( Location mLocation ) { Intent intent = new Intent ( this , FetchAddressIntentService . class ) ; intent . putExtra ( AppUtils . LocationConstants . RECEIVER , mResultReceiver ) ; intent . putExtra ( AppUtils . LocationConstants . LOCATION_DATA_EXTRA , mLocation ) ; startService ( intent ) ; }
public LongSparseArrayDataRow ( int size ) { super ( size ) ; values = new long [ size ] ; }
private boolean isASCIIDigit ( char c ) { return ( c >= STR_ && c <= STR_ ) ; }
public static boolean isWritable ( final String file ) { if ( TextUtils . isEmpty ( file ) ) { Log . e ( FileUtils . class , STR_ ) ; return BOOL_ ; } return isWritable ( new File ( file ) ) ; }
private void updateProgress ( int progress ) { if ( myHost != null && progress != previousProgress ) { myHost . updateProgress ( progress ) ; } previousProgress = progress ; }
public void subscribe ( String [ ] topicFilters , IMqttMessageListener [ ] messageListeners ) throws MqttException ;
public void updateQuantitiesInQuestStatus ( final Player player ) { StringBuilder sb = new StringBuilder ( NUM_ ) ; sb . append ( STR_ ) ; for ( ItemCollectorData id : itemCollector . requiredItems ( ) ) { sb . append ( STR_ ) ; sb . append ( id . getAlreadyBrought ( ) ) ; } player . setQuest ( quest . getSlotName ( ) , sb . toString ( ) ) ; }
public void assertion ( AssertionError e ) { currentTest . get ( ) . assertion ( e ) ; }
public void addWeekyears ( final int weekyears ) { setMillis ( getChronology ( ) . weekyears ( ) . add ( getMillis ( ) , weekyears ) ) ; }
public String toString ( ) { return toXML ( BOOL_ ) ; }
private void updateMenuIcon ( ) { Icon frameIcon = frame . getFrameIcon ( ) ; SeaGlassContext context = getContext ( this ) ; if ( frameIcon != null ) { Dimension maxSize = ( Dimension ) context . getStyle ( ) . get ( context , STR_ ) ; int maxWidth = NUM_ ; int maxHeight = NUM_ ; if ( maxSize != null ) { maxWidth = maxSize . width ; maxHeight = maxSize . height ; } if ( ( frameIcon . getIconWidth ( ) > maxWidth || frameIcon . getIconHeight ( ) > maxHeight ) && ( frameIcon instanceof ImageIcon ) ) { frameIcon = new ImageIcon ( ( ( ImageIcon ) frameIcon ) . getImage ( ) . getScaledInstance ( maxWidth , maxHeight , Image . SCALE_SMOOTH ) ) ; } } context . dispose ( ) ; menuButton . setIcon ( frameIcon ) ; }
public static Message create ( SyntaxException error , SourceUnit owner ) { return new SyntaxErrorMessage ( error , owner ) ; }
public void addConstraint ( SecurityConstraint constraint ) ;
public static boolean isBookSearchUrl ( String url ) { return url . startsWith ( STR_ ) || url . startsWith ( STR_ ) ; }
public boolean isCritical ( ) { return BOOL_ ; }
public IMatrix _opAppendVertically ( final IScope scope , final IMatrix b ) { final GamaFloatMatrix a = this ; final double [ ] ma = a . getMatrix ( ) ; final double [ ] mb = ( ( GamaFloatMatrix ) b ) . getMatrix ( ) ; final double [ ] mab = ArrayUtils . addAll ( ma , mb ) ; final GamaFloatMatrix fl = new GamaFloatMatrix ( a . getCols ( scope ) , a . getRows ( scope ) + b . getRows ( scope ) , mab ) ; return fl ; }
public List < String > deleteNFSShare ( String mountPath , boolean deleteAll ) { FlexFileShare share = new FlexFileShare ( server . getNaServer ( ) , mountPath ) ; return share . deleteNFSShare ( deleteAll ) ; }
String realMember ( Class < ? > type , String serialized ) ;
private final long calculateSize ( LegacyFile file ) { if ( file . isLink ( ) ) return NUM_ ; if ( file . isFile ( ) ) { long size = ( file . length ( ) + ( blockSize - NUM_ ) ) / blockSize ; if ( size == NUM_ ) size = NUM_ ; return size ; } LegacyFile [ ] list = null ; try { list = file . listFiles ( ) ; } catch ( SecurityException io ) { Log . e ( STR_ , STR_ , io ) ; } if ( list == null ) return NUM_ ; long size = NUM_ ; for ( int i = NUM_ ; i < list . length ; i ++ ) size += calculateSize ( list [ i ] ) ; return size ; }
protected void threadStop ( ) { if ( thread == null ) { return ; } threadDone = BOOL_ ; thread . interrupt ( ) ; try { thread . join ( ) ; } catch ( InterruptedException e ) { ; } thread = null ; }
private void commitChanges ( ) { networkPropertiesPanel . commitChanges ( ) ; quickConnectPanel . commitChanges ( ) ; }
private static DataRefType dataRef ( String fileName , byte [ ] digest ) { DataRefType dataRef = new DataRefType ( ) ; dataRef . setURI ( fileName ) ; dataRef . setDigestValue ( digest ) ; return dataRef ; }
public void addEventListener ( SIPTransactionEventListener newListener ) ;
public Digest ( ) { this ( BOOL_ ) ; }
static < K , V > K keyOrNull ( TreeMap . Entry < K , V > e ) { return ( e == null ) ? null : e . key ; }
MultiplexInputStream ( ConnectionMultiplexer manager , MultiplexConnectionInfo info , int bufferLength ) { this . manager = manager ; this . info = info ; buffer = new byte [ bufferLength ] ; waterMark = bufferLength / NUM_ ; }
protected static void dispose ( ) { }
boolean hasBody ( ) ;
public RxGalleryFinal cropWithAspectRatio ( float x , float y ) { configuration . setAspectRatioX ( x ) ; configuration . setAspectRatioY ( y ) ; return this ; }
public RaptorCursorRegistry ( Display display ) { this . display = display ; }
public final void negate ( Matrix4f m1 ) { this . m00 = - m1 . m00 ; this . m01 = - m1 . m01 ; this . m02 = - m1 . m02 ; this . m03 = - m1 . m03 ; this . m10 = - m1 . m10 ; this . m11 = - m1 . m11 ; this . m12 = - m1 . m12 ; this . m13 = - m1 . m13 ; this . m20 = - m1 . m20 ; this . m21 = - m1 . m21 ; this . m22 = - m1 . m22 ; this . m23 = - m1 . m23 ; this . m30 = - m1 . m30 ; this . m31 = - m1 . m31 ; this . m32 = - m1 . m32 ; this . m33 = - m1 . m33 ; }
public void shutdown ( ) { connectionFactory . getConnectionPool ( ) . close ( ) ; ldapServer . stop ( ) ; PORT_SERVICE . release ( port ) ; deleteRecursive ( workingDir ) ; }
public String eval ( String expr ) { String result = STR_ ; if ( expr == null ) { return result ; } ContextData contextData = currentContextData ( ) ; if ( contextData == null || frameIndex >= contextData . frameCount ( ) ) { return result ; } StackFrame frame = contextData . getFrame ( frameIndex ) ; if ( contextData . eventThreadFlag ) { Context cx = Context . getCurrentContext ( ) ; result = do_eval ( cx , frame , expr ) ; } else { synchronized ( monitor ) { if ( insideInterruptLoop ) { evalRequest = expr ; evalFrame = frame ; monitor . notify ( ) ; do { try { monitor . wait ( ) ; } catch ( InterruptedException exc ) { Thread . currentThread ( ) . interrupt ( ) ; break ; } } while ( evalRequest != null ) ; result = evalResult ; } } } return result ; }
private static View buildActivityView ( Activity activity , ResolveInfo resolveInfo , PackageManager pm , LayoutInflater inflater , ViewGroup parent , OnClickListener listener , Intent intent , String defaultText ) { ActivityInfo activityInfo = resolveInfo . activityInfo ; intent . setAction ( resolveInfo . filter . getAction ( NUM_ ) ) ; intent . setComponent ( new ComponentName ( activityInfo . packageName , activityInfo . name ) ) ; View item = inflater . inflate ( R . layout . nfc_tag_uri , parent , BOOL_ ) ; item . setOnClickListener ( listener ) ; item . setTag ( new ClickInfo ( activity , intent ) ) ; ImageView icon = ( ImageView ) item . findViewById ( R . id . icon ) ; icon . setImageDrawable ( resolveInfo . loadIcon ( pm ) ) ; TextView text = ( TextView ) item . findViewById ( R . id . secondary ) ; text . setText ( resolveInfo . loadLabel ( pm ) ) ; text = ( TextView ) item . findViewById ( R . id . primary ) ; text . setText ( defaultText ) ; return item ; }
public Dimension preferredLayoutSize ( Container target ) { Dimension size ; synchronized ( this ) { checkContainer ( target ) ; checkRequests ( ) ; size = new Dimension ( xTotal . preferred , yTotal . preferred ) ; } Insets insets = target . getInsets ( ) ; size . width = ( int ) Math . min ( ( long ) size . width + ( long ) insets . left + ( long ) insets . right , Integer . MAX_VALUE ) ; size . height = ( int ) Math . min ( ( long ) size . height + ( long ) insets . top + ( long ) insets . bottom , Integer . MAX_VALUE ) ; return size ; }
public boolean isSetGetResponse ( ) { return this . getResponse != null ; }
public void init$Children ( ) { }
private Class < ? > defineClass ( String className , byte [ ] definition ) throws ClassFormatError { if ( _logger . isLoggable ( Level . FINE ) ) _logger . fine ( this . toString ( ) + STR_ + className ) ; try { Class < ? > defineClass = defineClass ( className , definition , NUM_ , definition . length ) ; LRMIClassLoader previousClassLoader = _serviceClassLoaderContext . putClassBytesAndLoader ( className , this , definition ) ; if ( previousClassLoader != null ) throw new IllegalStateException ( STR_ + className + STR_ + previousClassLoader ) ; return defineClass ; } catch ( ClassFormatError e ) { if ( _logger . isLoggable ( Level . SEVERE ) ) _logger . log ( Level . SEVERE , this . toString ( ) + STR_ + className , e ) ; throw e ; } }
public void onNewIntent ( Intent intent ) { for ( CordovaPlugin plugin : this . pluginMap . values ( ) ) { if ( plugin != null ) { plugin . onNewIntent ( intent ) ; } } }
public synchronized boolean canBeDeallocate ( ) { if ( shareCounter > NUM_ || isBeingDeallocate ) { return BOOL_ ; } if ( ! inCache . get ( ) ) { isBeingDeallocate = BOOL_ ; return BOOL_ ; } return BOOL_ ; }
public void onEdgeDragStarted ( int edgeFlags , int pointerId ) { }
protected void startActivity ( Class < ? > clazz ) { startActivity ( clazz , null ) ; }
protected CCPropertyAction ( float aDuration , String key , float from , float to ) { super ( aDuration ) ; key_ = key ; setMethod_ = null ; to_ = to ; from_ = from ; }
public void addMouseListener ( GlobalMouseListener listener ) { listeners . add ( listener ) ; }
public void testDeadlocksDeleteMkdirsRename ( ) throws Exception { checkDeadlocksRepeat ( NUM_ , NUM_ , NUM_ , NUM_ , RENAME_CNT , DELETE_CNT , NUM_ , MKDIRS_CNT , NUM_ ) ; }
public void reset ( ) { fromIndex = NUM_ ; }
public GeoHashGridBuilder shardSize ( int shardSize ) { this . shardSize = shardSize ; return this ; }
public final Vec2D snapToAxis ( ) { if ( MathUtils . abs ( x ) < NUM_ ) { x = NUM_ ; } else { x = x < NUM_ ? - NUM_ : NUM_ ; y = NUM_ ; } if ( MathUtils . abs ( y ) < NUM_ ) { y = NUM_ ; } else { y = y < NUM_ ? - NUM_ : NUM_ ; x = NUM_ ; } return this ; }
public int addMana ( int mana , boolean tell ) { int old_mana = getMana ( ) ; int new_mana = old_mana + mana ; int given = NUM_ ; new_mana = Math . max ( new_mana , NUM_ ) ; new_mana = Math . min ( new_mana , getBaseMana ( ) ) ; given = new_mana - old_mana ; if ( tell ) { } setMana ( new_mana ) ; return given ; }
public Atanh ( ) { super ( Number . class , Number . class ) ; }
public final void yyclose ( ) throws java . io . IOException { zzAtEOF = BOOL_ ; zzEndRead = zzStartRead ; if ( zzReader != null ) zzReader . close ( ) ; }
private boolean isParentMaximum ( ) { if ( rootParent instanceof JFrame ) { return ( ( ( JFrame ) rootParent ) . getExtendedState ( ) & Frame . MAXIMIZED_BOTH ) != NUM_ ; } else { return BOOL_ ; } }
public Greeting ( String book , String content , String id , String email ) { this ( book , content ) ; authorEmail = email ; authorId = id ; }
public boolean select ( Viewer viewer , Object parent , Object element ) { if ( element instanceof IPackageFragment || element instanceof IPackageFragmentRoot || element instanceof IFile ) { return BOOL_ ; } else if ( element instanceof IFolder ) { return BOOL_ ; } else if ( element instanceof IProject ) { return BOOL_ ; } else if ( element instanceof IJavaProject ) { return BOOL_ ; } return BOOL_ ; }
public Object runSafely ( Catbert . FastStack stack ) throws Exception { int idx1 = - NUM_ , idx2 = - NUM_ ; idx2 = getInt ( stack ) ; idx1 = getInt ( stack ) ; Object obj = stack . pop ( ) ; String s = ( obj == null ) ? STR_ : obj . toString ( ) ; if ( idx2 == - NUM_ ) return ( s . substring ( idx1 ) ) ; else return ( s . substring ( idx1 , idx2 ) ) ; }
private static void generateRegisterPush ( final ITranslationEnvironment environment , final long baseOffset , final String register , final OperandSize size , final List < ReilInstruction > instructions ) { long offset = baseOffset ; final String pValue ; if ( size == OperandSize . DWORD ) { pValue = register ; } else { pValue = environment . getNextVariableString ( ) ; instructions . add ( ReilHelpers . createAnd ( offset , OperandSize . DWORD , register , size , STR_ , size , pValue ) ) ; offset ++ ; } generatePush ( environment , offset , pValue , size , instructions ) ; }
R visitNull ( NullType t , P p ) ;
public boolean isConfigValid ( ) throws RcsGenericException { try { return mIConfig . isConfigValid ( ) ; } catch ( Exception e ) { throw new RcsGenericException ( e ) ; } }
public Map < String , Object > processInputs ( Map < String , Object > inputs , Draft3PortProcessorCallback portProcessor ) throws Draft3PortProcessorException { return processValues ( inputs , job . getApp ( ) . getInputs ( ) , Draft3InputPort . class , portProcessor ) ; }
public void clear ( ) { sharedPreferences . edit ( ) . clear ( ) . apply ( ) ; }
public static Supply fromValue ( final long value ) { return new Supply ( value ) ; }
protected AbstractMatrix ( ) { }
public base32 ( String alphabet , boolean padding , boolean lowercase ) { this . alphabet = alphabet ; this . padding = padding ; this . lowercase = lowercase ; }
public DefaultIoFilterChain ( AbstractIoSession session ) { if ( session == null ) { throw new IllegalArgumentException ( STR_ ) ; } this . session = session ; head = new EntryImpl ( null , null , STR_ , new HeadFilter ( ) ) ; tail = new EntryImpl ( head , null , STR_ , new TailFilter ( ) ) ; head . nextEntry = tail ; }
public void updateAllowImplicidQueryCall ( Boolean allow ) throws SecurityException { checkWriteAccess ( ) ; boolean hasAccess = ConfigWebUtil . hasAccess ( config , SecurityManager . TYPE_SETTING ) ; if ( ! hasAccess ) throw new SecurityException ( STR_ ) ; Element scope = _getRootElement ( STR_ ) ; scope . setAttribute ( STR_ , Caster . toString ( allow , STR_ ) ) ; }
private int measureWidth ( int measureSpec ) { float result ; int specMode = MeasureSpec . getMode ( measureSpec ) ; int specSize = MeasureSpec . getSize ( measureSpec ) ; if ( ( specMode == MeasureSpec . EXACTLY ) || ( mViewPager == null ) ) { result = specSize ; } else { final int count = mViewPager . getAdapter ( ) . getCount ( ) ; result = getPaddingLeft ( ) + getPaddingRight ( ) + ( count * mLineWidth ) + ( ( count - NUM_ ) * mGapWidth ) ; if ( specMode == MeasureSpec . AT_MOST ) { result = Math . min ( result , specSize ) ; } } return ( int ) FloatMath . ceil ( result ) ; }
public static void sort ( short [ ] array , int start , int end ) { if ( array == null ) { throw new NullPointerException ( ) ; } checkBounds ( array . length , start , end ) ; sort ( start , end , array ) ; }
public void doScrollStateChange ( AbsListView view , int scrollState ) { mView = view ; mNewState = scrollState ; removeCallbacks ( this ) ; postDelayed ( this , SCROLL_CHANGE_DELAY ) ; }
public void delete ( ) throws IOException { if ( ResponseCache . getDefault ( ) == this ) { ResponseCache . setDefault ( null ) ; } delegate . getCache ( ) . delete ( ) ; }
public void deleteTrainInfoFile ( String name ) { File f = new File ( fileLocation + name ) ; if ( ! f . delete ( ) ) { log . error ( STR_ + name ) ; } }
public Vertex evaluateExpression ( String code , Vertex speaker , Vertex target , boolean debug , Network network ) { Vertex expression = parseExpressionForEvaluation ( code , speaker , target , debug , network ) ; Map < Vertex , Vertex > variables = new HashMap < Vertex , Vertex > ( ) ; return SelfInterpreter . getInterpreter ( ) . evaluateExpression ( expression , variables , network , System . currentTimeMillis ( ) , Language . MAX_STATE_PROCESS , NUM_ ) ; }
public String toString ( ) { return super . toString ( ) + STR_ + hasBeenDone + STR_ + alive ; }
public SimpleEntry ( Map . Entry < ? extends K , ? extends V > entry ) { key = entry . getKey ( ) ; value = entry . getValue ( ) ; }
public ExponentialPower ( double tau , MersenneTwisterFast randomGenerator ) { setRandomGenerator ( randomGenerator ) ; setState ( tau ) ; }
public Object clone ( ) { UnknownDoubleQuantileEstimator copy = ( UnknownDoubleQuantileEstimator ) super . clone ( ) ; if ( this . sampler != null ) copy . sampler = ( WeightedRandomSampler ) copy . sampler . clone ( ) ; return copy ; }
protected AbstractSimplex ( int n ) { this ( n , NUM_ ) ; }
public static MappedMember findMethodOverride ( MappedMember mm ) { if ( mm . doesOverride ( ) ) { for ( MappedMember mm2 : mm . getOverrides ( ) ) { return findMethodOverride ( mm2 ) ; } } return mm ; }
protected boolean canChildScrollDown ( ) { if ( android . os . Build . VERSION . SDK_INT < NUM_ ) { if ( mTargetView instanceof AbsListView ) { final AbsListView absListView = ( AbsListView ) mTargetView ; return absListView . getChildCount ( ) > NUM_ && ( absListView . getLastVisiblePosition ( ) < absListView . getChildCount ( ) - NUM_ || absListView . getChildAt ( absListView . getChildCount ( ) - NUM_ ) . getBottom ( ) > absListView . getPaddingBottom ( ) ) ; } else { return ViewCompat . canScrollVertically ( mTargetView , NUM_ ) || mTargetView . getScrollY ( ) < NUM_ ; } } else { return ViewCompat . canScrollVertically ( mTargetView , NUM_ ) ; } }
public static boolean isSmallmem ( ) { return _isSmallmem ; }
public void chainCheck ( ConditionStack conditionStack ) throws LoadableConditionException { Stack < LoadableComponentContext > stack = conditionStack . getLoadableContextStack ( ) ; ConditionProgressTracker progressTracker = new ConditionProgressTracker ( stack ) ; while ( ! stack . isEmpty ( ) ) { LoadableComponentContext loadableContext = stack . pop ( ) ; if ( loadableContext . getConditionContext ( ) != null ) { progressTracker . stepStart ( loadableContext ) ; LoadableComponentCondition componentCondition = produceInitializedCondition ( loadableContext ) ; Object subject = acquireSubjectInstance ( loadableContext ) ; evaluateCondition ( componentCondition , subject , loadableContext , progressTracker ) ; } } }
public void insert_double ( double value ) throws org . omg . DynamicAny . DynAnyPackage . TypeMismatch , org . omg . DynamicAny . DynAnyPackage . InvalidValue { org . omg . CORBA . portable . ServantObject $so = _servant_preinvoke ( STR_ , _opsClass ) ; DynValueOperations $self = ( DynValueOperations ) $so . servant ; try { $self . insert_double ( value ) ; } finally { _servant_postinvoke ( $so ) ; } }
public static JSONObject toJSONObject ( final ShareOpenGraphAction action , final PhotoJSONProcessor photoJSONProcessor ) throws JSONException { final JSONObject result = new JSONObject ( ) ; final Set < String > keys = action . keySet ( ) ; for ( String key : keys ) { result . put ( key , toJSONValue ( action . get ( key ) , photoJSONProcessor ) ) ; } return result ; }
public boolean contains ( Key key ) { if ( key == null ) throw new NullPointerException ( STR_ ) ; return get ( key ) != null ; }
public void addToState ( ProbDistribution distrib ) { String variable = distrib . getVariable ( ) + STR_ ; setAsCommitted ( variable ) ; distrib . modifyVariableId ( distrib . getVariable ( ) , variable ) ; ChanceNode newNode = new ChanceNode ( variable , distrib ) ; if ( hasNode ( variable ) ) { BNode toRemove = getNode ( variable ) ; removeNodes ( toRemove . getDescendantIds ( ) ) ; removeNode ( toRemove . getId ( ) ) ; } for ( String inputVar : distrib . getInputVariables ( ) ) { if ( hasChanceNode ( inputVar ) ) { newNode . addInputNode ( getChanceNode ( inputVar ) ) ; } } addNode ( newNode ) ; connectToPredictions ( newNode ) ; incrementalVars . remove ( variable ) ; }
public static BooleanArgument noPropertiesFileArgument ( ) throws ArgumentException { return BooleanArgument . builder ( OPTION_LONG_NO_PROP_FILE ) . description ( INFO_DESCRIPTION_NO_PROP_FILE . get ( ) ) . buildArgument ( ) ; }
public static boolean isNetworkAvailable ( Context context ) { boolean available = BOOL_ ; if ( context . checkCallingOrSelfPermission ( Manifest . permission . INTERNET ) == PackageManager . PERMISSION_GRANTED ) { ConnectivityManager connMgr = ( ConnectivityManager ) context . getSystemService ( Context . CONNECTIVITY_SERVICE ) ; NetworkInfo netInfo = connMgr . getActiveNetworkInfo ( ) ; available = netInfo != null && netInfo . isConnected ( ) ; } return available ; }
public static List < String > findFileListWithCache ( List < String > sourceDirectoryList , Properties cacheProperties , String fileSuffix , String somethingAppendToRear , boolean isFile , CacheProcessor cacheProcessor ) { return findFileListWithCache ( sourceDirectoryList , cacheProperties , fileSuffix , somethingAppendToRear , isFile , BOOL_ , cacheProcessor ) ; }
public int costInline ( int thresh , Environment env , Context ctx ) { return NUM_ + cond . costInline ( thresh , env , ctx ) + left . costInline ( thresh , env , ctx ) + ( ( right == null ) ? NUM_ : right . costInline ( thresh , env , ctx ) ) ; }
public R addParams ( String key , Object value ) { if ( key != null && value != null ) { mUrlParams . put ( key , value . toString ( ) ) ; } return ( R ) this ; }
public static void redirectToWebSite ( Context from , String url ) { Intent i = new Intent ( Intent . ACTION_VIEW ) ; i . setData ( Uri . parse ( url ) ) ; from . startActivity ( i ) ; }
public void paintPopupMenuBackground ( SynthContext context , Graphics g , int x , int y , int w , int h ) { }
public static int computeIndentUnits ( String line , int tabWidth , int indentWidth ) { return IndentManipulation . measureIndentUnits ( line , tabWidth , indentWidth ) ; }
private static boolean hasSource ( ITypeRoot je ) { if ( je == null || ! je . exists ( ) ) return BOOL_ ; try { return je . getBuffer ( ) != null ; } catch ( JavaModelException ex ) { LOG . error ( ex . getMessage ( ) , ex ) ; } return BOOL_ ; }
private void focusLast ( ) { if ( this . listElement . hasChildNodes ( ) ) { this . listElement . getLastElementChild ( ) . focus ( ) ; } }
public NSSet ( ) { set = new LinkedHashSet < NSObject > ( ) ; }
Total add ( Total summand ) ;
public boolean onMessage ( final StreamingDataMessage message ) ;
protected TypeFakeDefinitionImpl ( ) { super ( ) ; }
public abstract void select ( ) ;
public PlacesGetCheckinsQuery needPlaces ( Boolean value ) { return unsafeParam ( STR_ , value ) ; }
public Element next ( ) { return theNext ; }
ActionFuture < BulkResponse > bulk ( BulkRequest request ) ;
public WallDeleteCommentQuery deleteComment ( UserActor actor , int commentId ) { return new WallDeleteCommentQuery ( getClient ( ) , actor , commentId ) ; }
public static void registerMetadata ( MetadataRegistry registry ) { if ( registry . isRegistered ( KEY ) ) { return ; } ElementCreator builder = registry . build ( KEY ) ; }
protected RuleStats runTasks ( final IJoinNexus joinNexus , final List < Callable < RuleStats > > tasks ) throws InterruptedException , ExecutionException { assert tasks != null ; assert ! tasks . isEmpty ( ) ; final RuleStats totals ; if ( tasks . size ( ) == NUM_ ) { totals = runOne ( joinNexus , step , tasks . get ( NUM_ ) ) ; } else if ( ! joinNexus . forceSerialExecution ( ) && ! step . isRule ( ) && ( ( IProgram ) step ) . isParallel ( ) ) { totals = runParallel ( joinNexus , step , tasks ) ; } else { totals = runSequential ( joinNexus , step , tasks ) ; } return totals ; }
public abstract String read_wstring ( ) ;
public Builder withQuery ( Query query ) { request . query = Assert . notNull ( query , STR_ ) ; return this ; }
public Builder withLeader ( int leader ) { request . leader = leader ; return this ; }
public abstract boolean doCompare ( Object lValue , Object rValue , Class < ? > type , Locale locale , TimeZone timeZone , String format ) throws Exception ;
void onSharedObjectUpdate ( ISharedObjectBase so , IAttributeStore values ) ;
public void sendDownloadRequest ( Update update , Activity activity ) { Updater . getInstance ( ) . downUpdate ( activity , update , builder ) ; Recycler . release ( this ) ; }
static private String readFromStdin ( ) throws IOException { final LineNumberReader r = new LineNumberReader ( new InputStreamReader ( System . in ) ) ; try { final StringBuilder sb = new StringBuilder ( ) ; String s ; while ( ( s = r . readLine ( ) ) != null ) { if ( r . getLineNumber ( ) > NUM_ ) sb . append ( STR_ ) ; sb . append ( s ) ; } return sb . toString ( ) ; } finally { r . close ( ) ; } }
void deselect ( ) ;
public abstract void removeOnStateChangedListener ( OnStateChangedListener listener ) ;
protected byte [ ] engineGetIV ( ) { return ( iv == null ) ? null : iv . clone ( ) ; }
public final Mat22 mulTrans ( final Mat22 B ) { final Mat22 C = new Mat22 ( ) ; C . ex . x = Vec2 . dot ( this . ex , B . ex ) ; C . ex . y = Vec2 . dot ( this . ey , B . ex ) ; C . ey . x = Vec2 . dot ( this . ex , B . ey ) ; C . ey . y = Vec2 . dot ( this . ey , B . ey ) ; return C ; }
public static LT lt ( final BackendKey key ) { return new LT ( key ) ; }
public boolean isLockAlreadyAcquired ( ) { boolean result = BOOL_ ; try { boolean success = lock . acquire ( NUM_ ) ; if ( success ) { result = lock . getDepth ( ) > NUM_ ; lock . release ( ) ; } } catch ( InterruptedException e ) { } return result ; }
public abstract double calculateValue ( double value ) ;
private int generateNonce ( ) { return RANDOM . nextInt ( ) ; }
Object removeAttachment ( String name ) ;
public boolean isInternal ( ) { return isInternal ; }
public void addEventListener ( String eventName , EventListener listener ) throws SQLException ;
public LogisticGrowth ( Type units ) { super ( units ) ; }
public static < K , V > ImmutableMap < K , V > of ( K k1 , V v1 , K k2 , V v2 , K k3 , V v3 , K k4 , V v4 ) { return RegularImmutableMap . fromEntries ( entryOf ( k1 , v1 ) , entryOf ( k2 , v2 ) , entryOf ( k3 , v3 ) , entryOf ( k4 , v4 ) ) ; }
boolean insertSeparatorAt ( int index ) ;
private void createPartitionRegion ( List vmList , int startIndexForRegion , int endIndexForRegion , int localMaxMemory , int redundancy , String prPrefix ) throws Exception { int AsyncInvocationArrSize = NUM_ ; AsyncInvocation [ ] async = new AsyncInvocation [ AsyncInvocationArrSize ] ; int numNodes = NUM_ ; Iterator nodeIterator = vmList . iterator ( ) ; while ( nodeIterator . hasNext ( ) ) { VM vm = ( VM ) nodeIterator . next ( ) ; async [ numNodes ] = vm . invokeAsync ( createMultiplePartitionRegion ( prPrefix , startIndexForRegion , endIndexForRegion , redundancy , localMaxMemory ) ) ; numNodes ++ ; } for ( int i = NUM_ ; i < numNodes ; i ++ ) { ThreadUtils . join ( async [ i ] , NUM_ * NUM_ ) ; } for ( int i = NUM_ ; i < numNodes ; i ++ ) { if ( async [ i ] . exceptionOccurred ( ) ) { Assert . fail ( STR_ + i + STR_ , async [ i ] . getException ( ) ) ; } } }
protected void flcontext_free ( FloodlightContext flcontext ) { flcontext . getStorage ( ) . clear ( ) ; flcontext_cache . get ( ) . push ( flcontext ) ; }
public void windowOpened ( WindowEvent e ) { }
public long findLeafAddr ( final byte [ ] key ) { if ( key == null ) throw new IllegalArgumentException ( ) ; assert rangeCheck ( key , BOOL_ ) ; final int height = getStore ( ) . getCheckpoint ( ) . height ; if ( height == NUM_ ) { return getStore ( ) . getCheckpoint ( ) . addrRoot ; } final IndexSegmentAddressManager am = getStore ( ) . getAddressManager ( ) ; AbstractNode < ? > node = getRootOrFinger ( key ) ; int i = NUM_ ; while ( BOOL_ ) { final int childIndex = ( ( Node ) node ) . findChild ( key ) ; final long childAddr = ( ( Node ) node ) . getChildAddr ( childIndex ) ; if ( am . isLeafAddr ( childAddr ) ) { return childAddr ; } node = ( Node ) ( ( Node ) node ) . getChild ( childIndex ) ; i ++ ; assert i <= height : STR_ ; } }
public final JMenuItem addCheckboxItem ( JMenu menu , String key , String label ) { JCheckBoxMenuItem item = new JCheckBoxMenuItem ( label ) ; menuItems . put ( key , item ) ; item . setActionCommand ( key ) ; menu . add ( item ) ; item . addItemListener ( itemListener ) ; return item ; }
private void writeQNameAttribute ( java . lang . String namespace , java . lang . String attName , javax . xml . namespace . QName qname , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { java . lang . String attributeNamespace = qname . getNamespaceURI ( ) ; java . lang . String attributePrefix = xmlWriter . getPrefix ( attributeNamespace ) ; if ( attributePrefix == null ) { attributePrefix = registerPrefix ( xmlWriter , attributeNamespace ) ; } java . lang . String attributeValue ; if ( attributePrefix . trim ( ) . length ( ) > NUM_ ) { attributeValue = attributePrefix + STR_ + qname . getLocalPart ( ) ; } else { attributeValue = qname . getLocalPart ( ) ; } if ( namespace . equals ( STR_ ) ) { xmlWriter . writeAttribute ( attName , attributeValue ) ; } else { registerPrefix ( xmlWriter , namespace ) ; xmlWriter . writeAttribute ( namespace , attName , attributeValue ) ; } }
public boolean isStatusBarTintEnabled ( ) { return mStatusBarTintEnabled ; }
protected boolean canNaviBack ( ) { return BOOL_ ; }
private void readLDIF ( ) throws InitializationException { File ldifFile = getFileForPath ( ldifFilePath ) ; if ( ! ldifFile . exists ( ) ) { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STR_ + ldifFilePath + STR_ ) ; } entryMap . clear ( ) ; childDNs . clear ( ) ; return ; } try { importLDIF ( new LDIFImportConfig ( ldifFile . getAbsolutePath ( ) ) , BOOL_ ) ; } catch ( DirectoryException de ) { throw new InitializationException ( de . getMessageObject ( ) , de ) ; } }
public ProtocolException ( String message ) { super ( message ) ; }
public static byte [ ] fetchClass ( String host , int port , String directory , String classname ) throws IOException { byte [ ] b ; URLConnection con = fetchClass0 ( host , port , directory + classname . replace ( STR_ , STR_ ) + STR_ ) ; int size = con . getContentLength ( ) ; InputStream s = con . getInputStream ( ) ; try { if ( size <= NUM_ ) b = ClassPoolTail . readStream ( s ) ; else { b = new byte [ size ] ; int len = NUM_ ; do { int n = s . read ( b , len , size - len ) ; if ( n < NUM_ ) throw new IOException ( STR_ + classname ) ; len += n ; } while ( len < size ) ; } } finally { s . close ( ) ; } return b ; }
protected void clearError ( ) { synchronized ( lock ) { ioError = BOOL_ ; } }
String toPresentableString ( ) ;
TacticalPoint createPoint ( String symbolIdentifier , Position position , AVList modifiers ) ;
public static PrimitiveType checkIsPrimitiveType ( Type type ) { if ( ! isPrimitiveType ( type ) ) { throw new ODataSystemException ( STR_ + type . getFullyQualifiedName ( ) + STR_ + type . getMetaType ( ) ) ; } return ( PrimitiveType ) type ; }
private void handleExportToJPEG ( ) { FileChooser chooser = new FileChooser ( ) ; chooser . setTitle ( STR_ ) ; ExtensionFilter filter = new FileChooser . ExtensionFilter ( STR_ , STR_ ) ; chooser . getExtensionFilters ( ) . add ( filter ) ; File file = chooser . showSaveDialog ( getScene ( ) . getWindow ( ) ) ; if ( file != null ) { try { ExportUtils . writeAsJPEG ( this . chart , ( int ) getWidth ( ) , ( int ) getHeight ( ) , file ) ; } catch ( IOException ex ) { } } }
public void runTest ( ) throws Throwable { Document doc ; Attr newAttribute ; NodeList elementList ; Element testEmployee ; Attr domesticAttr ; String attrValue ; doc = ( Document ) load ( STR_ , BOOL_ ) ; newAttribute = doc . createAttribute ( STR_ ) ; elementList = doc . getElementsByTagName ( STR_ ) ; testEmployee = ( Element ) elementList . item ( NUM_ ) ; domesticAttr = testEmployee . setAttributeNode ( newAttribute ) ; attrValue = testEmployee . getAttribute ( STR_ ) ; assertEquals ( STR_ , STR_ , attrValue ) ; }
public abstract DatagramChannel openDatagramChannel ( ) throws IOException ;
public AttributeFilter includeAllOperationalAttributes ( final boolean include ) { this . includeAllOperationalAttributes = include ; return this ; }
public String usePruningTipText ( ) { return STR_ ; }
private ReadOnlyPropertyViewer ( ManagedObject < ? > mo , PropertyDefinition < ? > pd ) { this . mo = mo ; this . pd = pd ; }
public void start ( ) throws Exception { if ( dbsvc != null ) { return ; } DataObjectScanner dataObjectScanner = new DataObjectScanner ( ) ; dataObjectScanner . setPackages ( modelPackages . toArray ( new String [ NUM_ ] ) ) ; dataObjectScanner . init ( ) ; ServiceImpl dummyDBService = new ServiceImpl ( ) ; dummyDBService . setName ( STR_ ) ; dummyDBService . setVersion ( STR_ ) ; dummyDBService . setEndpoint ( URI . create ( STR_ ) ) ; dummyDBService . setId ( STR_ ) ; SchemaUtil schemaUtil = new SchemaUtil ( ) ; schemaUtil . setKeyspaceName ( STR_ ) ; schemaUtil . setService ( dummyDBService ) ; schemaUtil . setCoordinator ( coordinatorClient ) ; schemaUtil . setDataObjectScanner ( dataObjectScanner ) ; String config = createConfig ( dataDir . getAbsolutePath ( ) ) ; dbsvc = new DbServiceImpl ( ) ; dbsvc . setConfig ( config ) ; dbsvc . setSchemaUtil ( schemaUtil ) ; dbsvc . setCoordinator ( coordinatorClient ) ; dbsvc . setService ( dummyDBService ) ; dbsvc . start ( ) ; }
public abstract Query createQuery ( Collection . Key [ ] columns , int rows , String name ) throws PageException ;
public void renderVelocity ( GL2 gl ) { gl . glColor4fv ( Preferences . getBodyVelocityColor ( ) , NUM_ ) ; Vector2 c = this . getWorldCenter ( ) ; Vector2 v = this . getLinearVelocity ( ) ; double av = this . getAngularVelocity ( ) ; gl . glBegin ( GL . GL_LINES ) ; gl . glVertex2d ( c . x , c . y ) ; gl . glVertex2d ( c . x + v . x , c . y + v . y ) ; gl . glEnd ( ) ; RenderUtilities . drawArc ( gl , c . x , c . y , NUM_ , NUM_ , av ) ; }
private char peekChar ( boolean skipComments ) { skipWhitespace ( skipComments ) ; if ( pos == data . length ) { throw unexpected ( STR_ ) ; } return data [ pos ] ; }
public byte [ ] asn1Encode ( ) throws Asn1Exception , IOException { DerOutputStream bytes = new DerOutputStream ( ) ; DerOutputStream temp = new DerOutputStream ( ) ; bytes . write ( DerValue . createTag ( DerValue . TAG_CONTEXT , BOOL_ , ( byte ) NUM_ ) , pATimeStamp . asn1Encode ( ) ) ; if ( pAUSec != null ) { temp = new DerOutputStream ( ) ; temp . putInteger ( BigInteger . valueOf ( pAUSec . intValue ( ) ) ) ; bytes . write ( DerValue . createTag ( DerValue . TAG_CONTEXT , BOOL_ , ( byte ) NUM_ ) , temp ) ; } temp = new DerOutputStream ( ) ; temp . write ( DerValue . tag_Sequence , bytes ) ; return temp . toByteArray ( ) ; }
void rememberFactory ( String host , RMISocketFactory factory ) { synchronized ( successTable ) { while ( hostList . size ( ) >= MaxRememberedHosts ) { successTable . remove ( hostList . elementAt ( NUM_ ) ) ; hostList . removeElementAt ( NUM_ ) ; } hostList . addElement ( host ) ; successTable . put ( host , factory ) ; } }
private static int compareUlpDifference ( double expected , double computed , double threshold ) { if ( ! Double . isFinite ( expected ) ) { if ( Double . compare ( expected , computed ) == NUM_ ) return NUM_ ; else { System . err . printf ( STR_ , computed , expected ) ; return NUM_ ; } } double ulpDifference = Math . abs ( expected - computed ) / Math . ulp ( expected ) ; if ( ulpDifference > threshold ) { System . err . printf ( STR_ , ulpDifference , threshold ) ; return NUM_ ; } else return NUM_ ; }
private E dequeue ( ) { Node < E > h = head ; Node < E > first = h . next ; h . next = h ; head = first ; E x = first . item ; first . item = null ; return x ; }
protected void removeThumbnailData ( ) { clearThumbnailAndStrips ( ) ; mIfdDatas [ IfdId . TYPE_IFD_1 ] = null ; }
public void put ( Key key , Value val ) { if ( key == null ) throw new NullPointerException ( STR_ ) ; if ( val == null ) { delete ( key ) ; return ; } int i = rank ( key ) ; if ( i < n && keys [ i ] . compareTo ( key ) == NUM_ ) { vals [ i ] = val ; return ; } if ( n == keys . length ) resize ( NUM_ * keys . length ) ; for ( int j = n ; j > i ; j -- ) { keys [ j ] = keys [ j - NUM_ ] ; vals [ j ] = vals [ j - NUM_ ] ; } keys [ i ] = key ; vals [ i ] = val ; n ++ ; assert check ( ) ; }
public TestEnvDlg ( ) { initComponents ( ) ; getRootPane ( ) . setDefaultButton ( btMatch ) ; updateWordCount ( ) ; lbUnknownWarning . setVisible ( BOOL_ ) ; }
public void close ( ) throws IOException ;
public JSONObject putOpt ( String key , Object value ) throws JSONException { if ( key != null && value != null ) { put ( key , value ) ; } return this ; }
void invokeInSwing ( Runnable runnable ) { if ( SwingUtilities . isEventDispatchThread ( ) ) runnable . run ( ) ; else try { SwingUtilities . invokeAndWait ( runnable ) ; } catch ( InterruptedException e ) { } catch ( InvocationTargetException e ) { } }
public void runAsync ( String localName , ModelService modelService , Map < String , Object > context , boolean persist ) throws GenericServiceException ;
private java . lang . String registerPrefix ( javax . xml . stream . XMLStreamWriter xmlWriter , java . lang . String namespace ) throws javax . xml . stream . XMLStreamException { java . lang . String prefix = xmlWriter . getPrefix ( namespace ) ; if ( prefix == null ) { prefix = generatePrefix ( namespace ) ; while ( xmlWriter . getNamespaceContext ( ) . getNamespaceURI ( prefix ) != null ) { prefix = org . apache . axis2 . databinding . utils . BeanUtil . getUniquePrefix ( ) ; } xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } return prefix ; }
private void sendUpdate ( JSONObject obj , boolean keepCallback , PluginResult . Status status ) { if ( callbackContext != null ) { PluginResult result = new PluginResult ( status , obj ) ; result . setKeepCallback ( keepCallback ) ; callbackContext . sendPluginResult ( result ) ; if ( ! keepCallback ) { callbackContext = null ; } } }
public Vector3f ( Vector4f vector ) { if ( vector . w ( ) != NUM_ ) { this . points [ NUM_ ] = vector . x ( ) / vector . w ( ) ; this . points [ NUM_ ] = vector . y ( ) / vector . w ( ) ; this . points [ NUM_ ] = vector . z ( ) / vector . w ( ) ; } else { this . points [ NUM_ ] = vector . x ( ) ; this . points [ NUM_ ] = vector . y ( ) ; this . points [ NUM_ ] = vector . z ( ) ; } }
ByteSequence wrapKey ( ByteSequence unwrappedKey ) throws LocalizedKeyStoreException ;
final int rllong ( DataInputStream dis ) throws IOException { int b1 , b2 , b3 , b4 ; int i = NUM_ ; i = dis . readInt ( ) ; b1 = ( i & NUM_ ) << NUM_ ; b2 = ( i & NUM_ ) << NUM_ ; b3 = ( i & NUM_ ) > > NUM_ ; b4 = ( i & NUM_ ) > > > NUM_ ; i = ( b1 | b2 | b3 | b4 ) ; return i ; }
public static void reverseComplementInPlace ( final byte [ ] codes , final int offset , final int length ) { for ( int i = offset , j = offset + length - NUM_ ; i <= j ; i ++ , j -- ) { final byte tmp = codes [ j ] ; codes [ j ] = COMPLEMENT [ codes [ i ] ] ; codes [ i ] = COMPLEMENT [ tmp ] ; } }
public abstract DurationField months ( ) ;
public boolean add ( E e ) { return offer ( e ) ; }
public void updateMaxTextWidths ( float requiredWidth , float matchContentsWidth ) { mMaxRequiredWidth = Math . max ( mMaxRequiredWidth , requiredWidth ) ; mMaxMatchContentsWidth = Math . max ( mMaxMatchContentsWidth , matchContentsWidth ) ; }
public Tan ( ) { super ( Number . class , Number . class ) ; }
public CpcRunner ( GraphSource graphWrapper , Parameters params , KnowledgeBoxModel knowledgeBoxModel ) { super ( graphWrapper . getGraph ( ) , params , knowledgeBoxModel ) ; }
public FadingButton ( String label ) { super ( label ) ; setOpaque ( BOOL_ ) ; timer = new Timer ( NUM_ , this ) ; addActionListener ( this ) ; }
public int size ( ) { return values . size ( ) ; }
public abstract void addNestedGroup ( DN nestedGroupDN ) throws UnsupportedOperationException , DirectoryException ;
protected void pageEntered ( ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( STR_ ) ; } try { loadAndShowMapping ( ) ; } catch ( Exception e ) { LOG . error ( STR_ , e ) ; showError ( Messages . UnifyPageMapping_3 ) ; } }
public void startSecondaryEventLoop ( ) { }
public boolean isScrollable ( ) { return IMPL . isScrollable ( mInfo ) ; }
public void deleteShare ( String id , String zoneName ) throws IsilonException { String uriWithZoneName = getURIWithZoneName ( id , zoneName ) ; delete ( _baseUrl . resolve ( URI_SMB_SHARES ) , uriWithZoneName , STR_ ) ; }
public boolean hasDepth ( ) { return this . depth ; }
public Builder < VType > putAll ( Map < Integer , VType > map ) { for ( Map . Entry < Integer , VType > entry : map . entrySet ( ) ) { this . map . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
void snapshotAdded ( CSelectionSnapshot snapshot ) ;
public static SM_SYSTEM_MESSAGE STR_FORCE_REJECT_HIM ( String value0 ) { return new SM_SYSTEM_MESSAGE ( NUM_ , value0 ) ; }
public boolean isDirectBranch ( ) { return operator . isDirectBranch ( ) ; }
public Set ( Class < ? > type , String name ) { super ( type , type ) ; this . name = name ; }
public Executor env ( Map < String , String > env ) { this . env = env ; return this ; }
private static void processSymbols ( Stack < Character > stack , Character ch ) { if ( ( stack . peek ( ) == STR_ && ch == STR_ ) || ( stack . peek ( ) == STR_ && ch == STR_ ) || ( stack . peek ( ) == STR_ && ch == STR_ ) ) { stack . pop ( ) ; } else if ( ( stack . peek ( ) != STR_ && ch == STR_ ) || ( stack . peek ( ) != STR_ && ch == STR_ ) || ( stack . peek ( ) != STR_ && ch == STR_ ) ) { System . out . println ( STR_ + STR_ ) ; System . exit ( NUM_ ) ; } }
public static boolean propertyValueEquals ( URL url , String name , String compareString ) { String value = getPropertyValue ( url , name ) ; if ( value == null ) return BOOL_ ; return value . trim ( ) . equals ( compareString ) ; }
public static Name shortName ( Name classname ) { return classname . subName ( classname . lastIndexOf ( ( byte ) STR_ ) + NUM_ , classname . getByteLength ( ) ) ; }
public boolean isNaN ( ) { return Double . isNaN ( value ) ; }
public com . sun . identity . saml2 . jaxb . metadata . OrganizationDisplayNameElement createOrganizationDisplayNameElement ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . saml2 . jaxb . metadata . impl . OrganizationDisplayNameElementImpl ( ) ; }
void onBloodPressureMeasurementRead ( final BluetoothDevice device , final float systolic , final float diastolic , final float meanArterialPressure , final int unit ) ;
public NameFileFilter ( String name , IOCase caseSensitivity ) { if ( name == null ) { throw new IllegalArgumentException ( STR_ ) ; } this . names = new String [ ] { name } ; this . caseSensitivity = caseSensitivity == null ? IOCase . SENSITIVE : caseSensitivity ; }
public int loadLayout ( SQLiteDatabase db , ArrayList < Long > screenIds ) { mDb = db ; try { return parseLayout ( mLayoutId , screenIds ) ; } catch ( Exception e ) { Log . w ( TAG , STR_ , e ) ; return - NUM_ ; } }
public void updateWindow ( boolean repaint ) { boolean done = BOOL_ ; Image bb = getBackBuffer ( repaint ) ; while ( ! done ) { if ( repaint ) { Graphics2D g = ( Graphics2D ) bb . getGraphics ( ) ; try { window . paintAll ( g ) ; } finally { g . dispose ( ) ; } } done = update ( bb ) ; if ( ! done ) { repaint = BOOL_ ; bb = getBackBuffer ( BOOL_ ) ; } } }
public static byte [ ] genSpecBytes ( byte len ) { char u8 = convertByte2Uint8 ( len ) ; return genSpecBytes ( u8 ) ; }
private void returnData ( Object ret ) { if ( myHost != null ) { myHost . returnData ( ret ) ; } }
void onParentListItemCollapsed ( int position ) ;
boolean hasAssists ( IInvocationContext context ) throws CoreException ;
protected synchronized PreparedStatement roles ( Connection dbConnection , String username ) throws SQLException { if ( preparedRoles == null ) { StringBuilder sb = new StringBuilder ( STR_ ) ; sb . append ( roleNameCol ) ; sb . append ( STR_ ) ; sb . append ( userRoleTable ) ; sb . append ( STR_ ) ; sb . append ( userNameCol ) ; sb . append ( STR_ ) ; preparedRoles = dbConnection . prepareStatement ( sb . toString ( ) ) ; } preparedRoles . setString ( NUM_ , username ) ; return ( preparedRoles ) ; }
void onMouseOver ( com . smartgwt . client . widgets . events . MouseOverEvent event ) ;
public void cleanupTask ( ) throws SyncException ;
public static void addTrack ( List < String > inputFileList , List < String > newFileNames ) { List < String > dropMe = new ArrayList < String > ( ) ; for ( String x : newFileNames ) { x = x . trim ( ) ; if ( ! new File ( x ) . exists ( ) && ! Utils . urlFileExists ( x ) ) { dropMe . add ( x ) ; } } for ( String x : dropMe ) { System . err . println ( STR_ + x + STR_ ) ; newFileNames . remove ( x ) ; } inputFileList . addAll ( newFileNames ) ; }
private void worldToNodeTransform ( CGAffineTransform ret ) { nodeToWorldTransform ( ret ) ; CGAffineTransformUtil . inverse ( ret ) ; }
protected void parseGeometryString ( ) { int i = NUM_ ; byte [ ] bytes = geometryString . getBytes ( ) ; xgrav = new String ( bytes , NUM_ , NUM_ ) ; for ( i = NUM_ ; i < bytes . length ; i ++ ) { if ( ( bytes [ i ] == STR_ ) || ( bytes [ i ] == STR_ ) ) break ; } if ( i == bytes . length ) return ; ygrav = ( bytes [ i ] == STR_ ) ? STR_ : STR_ ; xpos = Integer . parseInt ( new String ( bytes , NUM_ , i - NUM_ ) ) ; ++ i ; ypos = Integer . parseInt ( new String ( bytes , i , bytes . length - i ) ) ; }
public void stop ( ) { engine . stop ( ) ; }
private String receive ( ) throws IOException { try { String line = mBufferedReader . readLine ( ) ; mLastReceiveTime = SystemClock . elapsedRealtime ( ) ; return line ; } catch ( IOException e ) { log . error ( STR_ ) ; throw e ; } }
History updateHistory ( History history ) ;
boolean hasRight ( String requestUser , GroupMembershipResolver groupMembershipResolver , MailboxACLRight right , MailboxACL resourceACL , String resourceOwner , boolean resourceOwnerIsGroup ) throws UnsupportedRightException ;
public JoddArrayList ( E ... array ) { buffer = array . clone ( ) ; size = buffer . length ; start = NUM_ ; end = size ; pivotIndex = pivotType . calculate ( size ) ; }
private boolean isMessageSend ( TriggerType type ) { for ( TriggerType usedType : usedTriggersTypes ) { if ( type == usedType ) { return BOOL_ ; } } return BOOL_ ; }
public SourceModel sourceForLocation ( Location loc ) { return sourceForClass ( loc . declaringType ( ) ) ; }
static int makeTag ( final int fieldNumber , final int wireType ) { return ( fieldNumber << TAG_TYPE_BITS ) | wireType ; }
public void registerLoadListener ( LoadListener listener ) { ThreadUtils . assertOnUiThread ( ) ; boolean added = mLoadListeners . addObserver ( listener ) ; assert added ; }
public Hex ( String csName ) { charsetName = csName ; }
private void pause ( ) { try { Thread . sleep ( INTERVAL ) ; } catch ( InterruptedException e ) { } }
public abstract boolean hasVibrator ( ) ;
public String toString ( ) { return this ; }
public MovAvgBuilder minimize ( boolean minimize ) { this . minimize = minimize ; return this ; }
public void addStaticResourceToServe ( IStaticResource < ? > staticResource ) ;
public void initialize ( Body bodyA , Body bodyB , Vector2 anchorA , Vector2 anchorB ) { this . bodyA = bodyA ; this . bodyB = bodyB ; this . localAnchorA . set ( bodyA . getLocalPoint ( anchorA ) ) ; this . localAnchorB . set ( bodyB . getLocalPoint ( anchorB ) ) ; this . length = anchorA . dst ( anchorB ) ; }
protected void createShapes ( DrawContext dc ) { this . paths = new Path [ NUM_ ] ; this . paths [ NUM_ ] = this . createPath ( Arrays . asList ( this . startPosition , this . endPosition ) ) ; Globe globe = dc . getGlobe ( ) ; Vec4 pA = globe . computePointFromPosition ( this . startPosition ) ; Vec4 pB = globe . computePointFromPosition ( this . endPosition ) ; Vec4 vBA = pA . subtract3 ( pB ) ; double verticalRatio = this . getVerticalLength ( ) ; double verticalLength = vBA . getLength3 ( ) * verticalRatio ; List < Position > positions = this . computeVerticalSegmentPositions ( globe , pA , vBA , verticalLength ) ; this . paths [ NUM_ ] = createPath ( positions ) ; positions = this . computeVerticalSegmentPositions ( globe , pB , vBA , verticalLength ) ; this . paths [ NUM_ ] = createPath ( positions ) ; }
void pauseAcceptors ( ) ;
public static String formatTime ( Context context , long timestamp ) { if ( sCalendar == null ) { sCalendar = ( GregorianCalendar ) GregorianCalendar . getInstance ( ) ; } if ( sOffset == null ) { sOffset = new SantaPreferences ( context ) . getOffset ( ) ; } sCalendar . setTimeInMillis ( timestamp - sOffset ) ; return String . format ( TIME_FORMAT , sCalendar . get ( GregorianCalendar . HOUR ) , sCalendar . get ( GregorianCalendar . MINUTE ) ) ; }
public < T > CompletableFuture < T > submit ( Command < T > command ) { CompletableFuture < T > future = new CompletableFuture < > ( ) ; context . executor ( ) . execute ( null ) ; return future ; }
private void updateColorPanelPosition ( ) { if ( editPanel != null && colorOverlay != null ) { int colorPanelX = ( int ) editPanel . getLocationOnScreen ( ) . getX ( ) + colorButton . getX ( ) ; int colorPanelY = ( int ) ( editPanel . getLocationOnScreen ( ) . getY ( ) + editPanel . getBounds ( ) . getHeight ( ) ) ; colorOverlay . setBounds ( colorPanelX , colorPanelY , EDIT_COLOR_PANEL_WIDTH , EDIT_COLOR_PANEL_HEIGHT ) ; } }
public void testRecognizeSymmetricNat ( ) throws Exception { Response testIResponse1 = MessageFactory . create3489BindingResponse ( mappedClientAddress , responseServerAddress , responseServerAddress ) ; Response testIResponse2 = null ; Response testIResponse3 = MessageFactory . create3489BindingResponse ( mappedClientAddressPort2 , responseServerAddress , responseServerAddress ) ; responseServer . addMessage ( testIResponse1 ) ; responseServer . addMessage ( testIResponse2 ) ; responseServer . addMessage ( testIResponse3 ) ; StunDiscoveryReport expectedReturn = new StunDiscoveryReport ( ) ; expectedReturn . setNatType ( StunDiscoveryReport . SYMMETRIC_NAT ) ; expectedReturn . setPublicAddress ( mappedClientAddress ) ; StunDiscoveryReport actualReturn = stunAddressDiscoverer . determineAddress ( ) ; assertEquals ( STR_ , expectedReturn , actualReturn ) ; }
protected void init ( ) { if ( isInEditMode ( ) ) return ; this . shouldAutoplay = BOOL_ ; this . currentState = State . IDLE ; this . fullscreen = BOOL_ ; this . initialConfigOrientation = - NUM_ ; this . setBackgroundColor ( Color . BLACK ) ; initObjects ( ) ; }
public Skeleton ( PrintWriter out ) { this . out = out ; }
public void requestImageRef ( Message msg ) { checkThread ( ) ; mProvider . requestImageRef ( msg ) ; }
public static String applySuccessfulBackgroundToHtml ( String html ) { return DIV_OPEN_SUCCESSFUL_BACKGROUND + html + DIV_CLOSE ; }
public ObjectVector parseVectorLine ( String line ) throws IOException { int firstSplitPoint = line . indexOf ( STR_ ) ; String objectName = new String ( line . substring ( NUM_ , firstSplitPoint ) ) ; Vector tmpVector = VectorFactory . createZeroVector ( vectorType , dimension ) ; tmpVector . readFromString ( line . substring ( firstSplitPoint + NUM_ , line . length ( ) ) ) ; return new ObjectVector ( objectName , tmpVector ) ; }
protected javax . net . ssl . SSLParameters engineGetSupportedSSLParameters ( ) { return createSSLParameters ( BOOL_ ) ; }
public String toString ( ) { String eventClassName = ( eventClass == null ? STR_ : eventClass . getName ( ) ) ; String eventIDVal = ( eventID == null ? STR_ : eventID . toString ( ) ) ; return ( STR_ + eventClassName + STR_ + eventIDVal ) ; }
public boolean isLastPointGood ( ) { return this . lastPointGood ; }
private void testAdjustIntegerValue ( Integer testValue , Integer expectedValue ) { DataBridgeController dataBridgeController = new BasicDataBridgeController ( ) ; assertEquals ( expectedValue , dataBridgeController . adjustIntegerValue ( testValue , DataBridgeController . MIN_THREADS , DataBridgeController . MAX_THREADS ) ) ; }
void keyboardCombination ( KeyCombination keyCombination , KeyEvent keyEvent ) ;
public Type appliedType ( Type receiver , Declaration member , List < Type > typeArguments , List < SiteVariance > variances ) { Type receivingType ; if ( receiver == null ) { receivingType = null ; } else { TypeDeclaration type = ( TypeDeclaration ) member . getContainer ( ) ; receivingType = receiver . getSupertype ( type ) ; } Map < TypeParameter , Type > typeArgMap = getTypeArgumentMap ( member , receivingType , typeArguments ) ; Map < TypeParameter , SiteVariance > varianceMap = getVarianceMap ( member , receivingType , variances ) ; return new Substitution ( typeArgMap , varianceMap ) . substitute ( this , BOOL_ , BOOL_ ) ; }
void keepScreenOn ( ) ;
private DeposeGrantorProcessor ( DM dm , InternalDistributedMember oldGrantor ) { super ( dm , oldGrantor ) ; }
public boolean addToHistory ( Object obj ) { if ( ( m_Editor instanceof GenericObjectEditor ) && ( obj != null ) ) { ( ( GenericObjectEditor ) m_Editor ) . getHistory ( ) . add ( obj ) ; return BOOL_ ; } return BOOL_ ; }
public int itemAt ( int k ) { return m_items [ k ] ; }
public static boolean isUnlimitedStrengthPolicyAvailable ( ) { try { return Cipher . getMaxAllowedKeyLength ( STR_ ) >= NUM_ ; } catch ( final NoSuchAlgorithmException e ) { e . printStackTrace ( ) ; } return BOOL_ ; }
public void testCompareLessScale1 ( ) { String a = STR_ ; int aScale = NUM_ ; String b = STR_ ; int bScale = NUM_ ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) , aScale ) ; BigDecimal bNumber = new BigDecimal ( new BigInteger ( b ) , bScale ) ; int result = NUM_ ; assertEquals ( STR_ , result , aNumber . compareTo ( bNumber ) ) ; }
public static String prependParameter ( String md , String parameterFd ) { return STR_ + parameterFd + md . substring ( NUM_ ) ; }
public void runTest ( ) throws Throwable { Document doc ; NamedNodeMap attributes ; Node element ; Attr attribute ; NodeList elementList ; String attrName ; doc = ( Document ) load ( STR_ , BOOL_ ) ; elementList = doc . getElementsByTagNameNS ( STR_ , STR_ ) ; element = elementList . item ( NUM_ ) ; attributes = element . getAttributes ( ) ; attribute = ( Attr ) attributes . getNamedItemNS ( STR_ , STR_ ) ; attrName = attribute . getNodeName ( ) ; assertEquals ( STR_ , STR_ , attrName ) ; }
RemoteConnectionImpl ( ) throws RemoteException { super ( ) ; }
private int findHeaderEnd ( final byte [ ] buf , int rlen ) { int splitbyte = NUM_ ; while ( splitbyte + NUM_ < rlen ) { if ( buf [ splitbyte ] == STR_ && buf [ splitbyte + NUM_ ] == STR_ && buf [ splitbyte + NUM_ ] == STR_ && buf [ splitbyte + NUM_ ] == STR_ ) return splitbyte + NUM_ ; splitbyte ++ ; } return NUM_ ; }
public boolean removeByObject ( T obj ) { return removeByObject_impl ( obj ) ; }
private SootMethod cloneMethod ( SootMethod ancestorM , String cloneName ) { if ( clonedToOriginal . containsValue ( ancestorM ) ) { logger . error ( STR_ , ancestorM ) ; droidsafe . main . Main . exit ( NUM_ ) ; } SootMethod newMeth = new SootMethod ( cloneName , ancestorM . getParameterTypes ( ) , ancestorM . getReturnType ( ) , ancestorM . getModifiers ( ) , ancestorM . getExceptions ( ) ) ; methods . addMethod ( newMeth ) ; clazz . addMethod ( newMeth ) ; clonedToOriginal . put ( newMeth , ancestorM ) ; if ( copyClassifications ) API . v ( ) . cloneMethodClassifications ( ancestorM , newMeth ) ; Body newBody = ( Body ) ancestorM . retrieveActiveBody ( ) . clone ( ) ; newMeth . setActiveBody ( newBody ) ; try { if ( ! ancestorM . isStatic ( ) ) newBody . getThisLocal ( ) . setType ( clazz . getType ( ) ) ; } catch ( Exception e ) { } JSAStrings . v ( ) . updateJSAResults ( ancestorM . retrieveActiveBody ( ) , newBody ) ; return newMeth ; }
public void testRandomHugeStrings ( ) throws Exception { Analyzer analyzer = new ThaiAnalyzer ( ) ; checkRandomData ( random ( ) , analyzer , NUM_ * RANDOM_MULTIPLIER , NUM_ ) ; analyzer . close ( ) ; }
public static void processMouseDragged ( MouseEvent e ) { sharedInstance . _processMouseDragged ( e ) ; }
public static void init ( Context context ) { if ( cameraManager == null ) { cameraManager = new CameraManager ( context ) ; } }
public RegularEventSpec createRegularEventSpec ( ) { RegularEventSpecImpl regularEventSpec = new RegularEventSpecImpl ( ) ; return regularEventSpec ; }
public boolean continueIterating ( ) { return continueIterating ; }
default String genericsSuffix ( ) { return STR_ ; }
protected Size2DSyntax ( int x , int y , int units ) { if ( x < NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } if ( y < NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } if ( units < NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } this . x = x * units ; this . y = y * units ; }
public Matrix4 rotate ( float axisX , float axisY , float axisZ , float angle ) { if ( angle == NUM_ ) return this ; quat . set ( tmpV . set ( axisX , axisY , axisZ ) , angle ) ; return rotate ( quat ) ; }
public synchronized void run ( ) { running = BOOL_ ; while ( running ) { if ( s == null ) { try { log ( this + STR_ ) ; wait ( ) ; } catch ( InterruptedException e ) { continue ; } if ( ! running ) break ; } try { handleClient ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } s = null ; Vector pool = threads ; synchronized ( pool ) { if ( pool . size ( ) >= workers ) { activeThreads . remove ( this ) ; return ; } else { pool . addElement ( this ) ; } } } log ( this + STR_ ) ; }
boolean hasOrganizationAttributes ( ) ;
public static boolean isLayerConfigDocument ( Element domElement ) { if ( domElement == null ) { String message = Logging . getMessage ( STR_ ) ; Logging . logger ( ) . severe ( message ) ; throw new IllegalArgumentException ( message ) ; } XPath xpath = WWXML . makeXPath ( ) ; Element [ ] elements = WWXML . getElements ( domElement , STR_ , xpath ) ; return elements != null && elements . length > NUM_ ; }
public boolean ungroupElements ( ) { try { int numSelectedElements = howManyElementsAreSelected ( ) ; if ( numSelectedElements > NUM_ ) { List < CartographicElementGroup > selectedCEGs = new ArrayList < > ( ) ; List < CartographicElement > otherElements = new ArrayList < > ( ) ; for ( CartographicElement ce : listOfCartographicElements ) { if ( ce . isSelected ( ) ) { if ( ce instanceof CartographicElementGroup ) { selectedCEGs . add ( ( CartographicElementGroup ) ce ) ; } else { otherElements . add ( ce ) ; } } else { otherElements . add ( ce ) ; } } removeAllCartographicElements ( ) ; for ( CartographicElement ce : otherElements ) { addNewCartographicElement ( ce ) ; } for ( CartographicElementGroup ceg : selectedCEGs ) { List < CartographicElement > myCEs = ceg . getElementList ( ) ; for ( CartographicElement ce2 : myCEs ) { addNewCartographicElement ( ce2 ) ; } } } return BOOL_ ; } catch ( Exception e ) { return BOOL_ ; } }
private Object readResolve ( ) { if ( DateTimeZone . UTC . equals ( getChronology ( ) . getZone ( ) ) == BOOL_ ) { return new YearMonth ( this , getChronology ( ) . withUTC ( ) ) ; } return this ; }
public abstract boolean isOpen ( ) ;
private boolean forceSettleCapturedViewAt ( int finalLeft , int finalTop , int xvel , int yvel ) { final int startLeft = mCapturedView . getLeft ( ) ; final int startTop = mCapturedView . getTop ( ) ; final int dx = finalLeft - startLeft ; final int dy = finalTop - startTop ; if ( dx == NUM_ && dy == NUM_ ) { mScroller . abortAnimation ( ) ; setDragState ( STATE_IDLE ) ; return BOOL_ ; } final int duration = computeSettleDuration ( mCapturedView , dx , dy , xvel , yvel ) ; mScroller . startScroll ( startLeft , startTop , dx , dy , duration ) ; setDragState ( STATE_SETTLING ) ; return BOOL_ ; }
protected void notifyListenersResourceFound ( HttpMessage message , int depth , String uri ) { for ( SpiderParserListener l : listeners ) { l . resourceURIFound ( message , depth , uri ) ; } }
void addSuiteTab ( ITab tab ) ;
protected String generateNonce ( ) { byte random [ ] = new byte [ NUM_ ] ; StringBuilder buffer = new StringBuilder ( ) ; randomSource . nextBytes ( random ) ; for ( int j = NUM_ ; j < random . length ; j ++ ) { byte b1 = ( byte ) ( ( random [ j ] & NUM_ ) > > NUM_ ) ; byte b2 = ( byte ) ( random [ j ] & NUM_ ) ; if ( b1 < NUM_ ) { buffer . append ( ( char ) ( STR_ + b1 ) ) ; } else { buffer . append ( ( char ) ( STR_ + ( b1 - NUM_ ) ) ) ; } if ( b2 < NUM_ ) { buffer . append ( ( char ) ( STR_ + b2 ) ) ; } else { buffer . append ( ( char ) ( STR_ + ( b2 - NUM_ ) ) ) ; } } return buffer . toString ( ) ; }
public void stopTerminal ( ) { if ( connected ) { Jso jso = Jso . create ( ) ; jso . addField ( STR_ , STR_ ) ; jso . addField ( STR_ , STR_ ) ; socket . send ( jso . serialize ( ) ) ; } }
public SampleVcpcRunner ( GraphSource graphWrapper , Parameters params , KnowledgeBoxModel knowledgeBoxModel ) { super ( graphWrapper . getGraph ( ) , params , knowledgeBoxModel ) ; }
public SubstringReader ( final String s ) { Reject . ifNull ( s ) ; source = s ; length = s . length ( ) ; pos = NUM_ ; mark = NUM_ ; }
public Object clone ( ) { IPv6Condition theClone = null ; try { theClone = ( IPv6Condition ) super . clone ( ) ; } catch ( CloneNotSupportedException e ) { throw new InternalError ( ) ; } theClone . dnsList = ( ArrayList ) dnsList . clone ( ) ; theClone . ipList = ( ArrayList ) ipList . clone ( ) ; if ( properties != null ) { theClone . properties = new HashMap ( ) ; Iterator it = properties . keySet ( ) . iterator ( ) ; while ( it . hasNext ( ) ) { Object o = it . next ( ) ; Set values = new HashSet ( ) ; values . addAll ( ( Set ) properties . get ( o ) ) ; theClone . properties . put ( o , values ) ; } } return theClone ; }
public void testBasics ( ) throws IOException { Analyzer a = new BasqueAnalyzer ( ) ; checkOneTerm ( a , STR_ , STR_ ) ; checkOneTerm ( a , STR_ , STR_ ) ; assertAnalyzesTo ( a , STR_ , new String [ ] { } ) ; a . close ( ) ; }
public boolean isPartialReturn ( ) { return partialReturn ; }
public void disableWhenHorizontalMove ( boolean disable ) { mDisableWhenHorizontalMove = disable ; }
public static int clamp ( int value , int minValue , int maxValue ) { return Math . max ( minValue , Math . min ( value , maxValue ) ) ; }
public boolean isDragInProgress ( ) { return dragStarted ; }
public void addInfoProvider ( String type , IInfoProvider provider ) ;
public static List < String > run ( String [ ] commands ) { return Shell . run ( STR_ , commands , null , BOOL_ ) ; }
public static String decompressForGzip ( byte [ ] compressed ) { final int BUFFER_SIZE = compressed . length ; GZIPInputStream gis = null ; ByteArrayInputStream is = null ; try { is = new ByteArrayInputStream ( compressed ) ; gis = new GZIPInputStream ( is , BUFFER_SIZE ) ; StringBuilder string = new StringBuilder ( ) ; byte [ ] data = new byte [ BUFFER_SIZE ] ; int bytesRead ; while ( ( bytesRead = gis . read ( data ) ) != - NUM_ ) { string . append ( new String ( data , NUM_ , bytesRead , STR_ ) ) ; } return string . toString ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } finally { okhttp3 . internal . Util . closeQuietly ( gis ) ; okhttp3 . internal . Util . closeQuietly ( is ) ; } return null ; }
public Type type ( ) { return type ; }
public Wine runForeground ( String executableToRun ) throws CancelException { runForeground ( executableToRun , null , null ) ; return this ; }
public Builder from ( Context context ) { this . context = context ; return this ; }
public IdaException ( final String msg , final Throwable cause ) { super ( msg , cause ) ; }
public static void bincellOp ( MatrixBlock m1 , MatrixBlock m2 , MatrixBlock ret , BinaryOperator op ) throws DMLRuntimeException { if ( op . sparseSafe || isSparseSafeDivide ( op , m2 ) ) safeBinary ( m1 , m2 , ret , op ) ; else unsafeBinary ( m1 , m2 , ret , op ) ; if ( ret . isEmptyBlock ( BOOL_ ) ) ret . examSparsity ( ) ; }
public final InterestRate equivalentRate ( final Date d1 , final Date d2 , final DayCounter resultDC , final Compounding comp , final Frequency freq ) { QL . require ( d1 . lt ( d2 ) , STR_ ) ; final double t1 = this . dc . yearFraction ( d1 , d2 ) ; final double t2 = resultDC . yearFraction ( d1 , d2 ) ; return impliedRate ( compoundFactor ( t1 ) , t2 , resultDC , comp , freq ) ; }
private void initStaticResourcesProductionFilter ( ServletContext servletContext , EnumSet < DispatcherType > disps ) { log . debug ( STR_ ) ; FilterRegistration . Dynamic staticResourcesProductionFilter = servletContext . addFilter ( STR_ , new StaticResourcesProductionFilter ( ) ) ; staticResourcesProductionFilter . addMappingForUrlPatterns ( disps , BOOL_ , STR_ ) ; staticResourcesProductionFilter . addMappingForUrlPatterns ( disps , BOOL_ , STR_ ) ; staticResourcesProductionFilter . addMappingForUrlPatterns ( disps , BOOL_ , STR_ ) ; staticResourcesProductionFilter . addMappingForUrlPatterns ( disps , BOOL_ , STR_ ) ; staticResourcesProductionFilter . setAsyncSupported ( BOOL_ ) ; }
public static < A , S > List < A > unfold_ ( S z , Function < S , Result < Tuple < A , S > > > f ) { return f . apply ( z ) . map ( null ) . getOrElse ( list ( ) ) ; }
public boolean speak ( FreeTTSSpeakable speakable ) { log ( STR_ ) ; boolean ok = BOOL_ ; boolean posted = BOOL_ ; getAudioPlayer ( ) . startFirstSampleTimer ( ) ; for ( Iterator i = tokenize ( speakable ) ; ! speakable . isCompleted ( ) && i . hasNext ( ) ; ) { try { Utterance utterance = ( Utterance ) i . next ( ) ; if ( utterance != null ) { processUtterance ( utterance ) ; posted = BOOL_ ; } } catch ( ProcessException pe ) { ok = BOOL_ ; } } if ( ok && posted ) { runTimer . start ( STR_ ) ; ok = speakable . waitCompleted ( ) ; runTimer . stop ( STR_ ) ; } log ( STR_ ) ; return ok ; }
boolean isEmpty ( ) ;
protected void paintLineHighlights ( Graphics g ) { LineHighlightManager lhm = textArea . getLineHighlightManager ( ) ; if ( lhm != null ) { lhm . paintLineHighlights ( g ) ; } }
public T addStyle ( Style style ) { if ( styles == null ) { styles = new LinkedHashSet < > ( ) ; } styles . add ( style ) ; return ( T ) ( Object ) this ; }
public static void gluPerspective ( GL10 gl , double fovy , double aspect , double zNear , double zFar ) { double top = zNear * Math . tan ( fovy * ( Math . PI / NUM_ ) ) ; double bottom = - top ; double left = bottom * aspect ; double right = top * aspect ; gl . glFrustumf ( ( float ) left , ( float ) right , ( float ) bottom , ( float ) top , ( float ) zNear , ( float ) zFar ) ; }
boolean isDimming ( ) { return mTargetAlpha != NUM_ ; }
public SwitchPreference ( Context context , AttributeSet attrs , int defStyleAttr ) { this ( context , attrs , defStyleAttr , R . style . Preference_Material_SwitchPreferenceCompat ) ; }
public ImageIcon loadImage ( String imageName ) { try { ClassLoader classloader = getClass ( ) . getClassLoader ( ) ; java . net . URL url = classloader . getResource ( imageName ) ; if ( url != null ) { ImageIcon icon = new ImageIcon ( url ) ; return icon ; } } catch ( Exception e ) { e . printStackTrace ( ) ; } throw new IllegalArgumentException ( STR_ + imageName ) ; }
protected Handshaker ( boolean isClient , int initialMessageSeq , DTLSSession session , RecordLayer recordLayer , SessionListener sessionListener , Certificate [ ] rootCertificates , int maxTransmissionUnit ) { if ( session == null ) { throw new NullPointerException ( STR_ ) ; } else if ( recordLayer == null ) { throw new NullPointerException ( STR_ ) ; } else if ( initialMessageSeq < NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } this . isClient = isClient ; this . sequenceNumber = initialMessageSeq ; this . nextReceiveSeq = initialMessageSeq ; this . session = session ; this . recordLayer = recordLayer ; addSessionListener ( sessionListener ) ; this . rootCertificates = rootCertificates == null ? new Certificate [ NUM_ ] : rootCertificates ; this . session . setMaxTransmissionUnit ( maxTransmissionUnit ) ; this . inboundMessageBuffer = new InboundMessageBuffer ( ) ; try { this . md = MessageDigest . getInstance ( MESSAGE_DIGEST_ALGORITHM_NAME ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( String . format ( STR_ , MESSAGE_DIGEST_ALGORITHM_NAME ) ) ; } }
public abstract void put ( int msgLevel , String msg , Throwable exception ) ;
public LineChart ( XYMultipleSeriesDataset dataset , XYMultipleSeriesRenderer renderer ) { super ( dataset , renderer ) ; pointsChart = new ScatterChart ( dataset , renderer ) ; }
AttributeMetadataImpl ( Schema schema , AttributeTransform transform , ElementKey < ? , ? > parent , AttributeKey < D > key , MetadataContext context ) { super ( schema , transform , parent , key , context ) ; this . attKey = key ; }
PreferenceChangeListener [ ] prefListeners ( ) { synchronized ( lock ) { return prefListeners ; } }
protected boolean joinsWith ( final BS bs , final IKeyBuilder keyBuilder , final HTree rightSolutions , final HTree rightSolutionsWithoutSubqueryResult ) { return joinsWith ( bs , keyBuilder , rightSolutions ) || joinsWith ( bs , keyBuilder , rightSolutionsWithoutSubqueryResult ) ; }
public Enumeration < Option > listOptions ( ) { Vector < Option > result = new Vector < Option > ( ) ; result . addElement ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ; result . addElement ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ; result . addElement ( new Option ( STR_ , STR_ , NUM_ , STR_ ) ) ; result . addElement ( new Option ( STR_ + STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ; return result . elements ( ) ; }
void deleteSites ( Set sites ) throws AMConsoleException ;
protected AbstractRefactoringHistoryResourceMapping ( final RefactoringHistory history ) { Assert . isNotNull ( history ) ; fRefactoringHistory = history ; }
public boolean hasSetting ( Object parser ) { return fixedValue ; }
void initialize ( IncognitoNewTabPageManager manager ) { mManager = manager ; }
public Leaves ( final Material type ) { this ( type , DEFAULT_SPECIES , DEFAULT_DECAYABLE ) ; }
public void adjustmentValueChanged ( AdjustmentEvent e ) ;
public void sendTo ( AbstractPacket message , EntityPlayerMP player ) { this . channels . get ( Side . SERVER ) . attr ( FMLOutboundHandler . FML_MESSAGETARGET ) . set ( FMLOutboundHandler . OutboundTarget . PLAYER ) ; this . channels . get ( Side . SERVER ) . attr ( FMLOutboundHandler . FML_MESSAGETARGETARGS ) . set ( player ) ; this . channels . get ( Side . SERVER ) . writeAndFlush ( message ) ; }
public native static int enableInterface ( String interfaceName ) ;
public int pointToPosition ( int x , int y ) { Rect frame = mTouchFrame ; if ( frame == null ) { mTouchFrame = new Rect ( ) ; frame = mTouchFrame ; } final int count = getChildCount ( ) ; for ( int i = count - NUM_ ; i >= NUM_ ; i -- ) { View child = getChildAt ( i ) ; if ( child . getVisibility ( ) == View . VISIBLE ) { child . getHitRect ( frame ) ; if ( frame . contains ( x , y ) ) { return mFirstPosition + i ; } } } return INVALID_POSITION ; }
public void removeFromTags ( String removeTag ) { tags . remove ( removeTag ) ; firePropertyChange ( TAG , null , removeTag ) ; firePropertyChange ( TAGS_AS_STRING , null , removeTag ) ; }
public void incReserve ( int extraPtCount ) { native_incReserve ( mNativePath , extraPtCount ) ; }
public JavaProjectElementInfo ( ) { this . nonJavaResources = null ; }
public boolean isRunning ( ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . KITKAT && valueAnimator . isPaused ( ) ) { return BOOL_ ; } return valueAnimator . isRunning ( ) ; }
public boolean addCentrifugeRecipe ( ItemStack aInput1 , ItemStack aInput2 , FluidStack aFluidInput , FluidStack aFluidOutput , ItemStack aOutput1 , ItemStack aOutput2 , ItemStack aOutput3 , ItemStack aOutput4 , ItemStack aOutput5 , ItemStack aOutput6 , int [ ] aChances , int aDuration , int aEUt ) ;
public BasicPermission ( String name , String actions ) { super ( name ) ; init ( name ) ; }
public String locked ( ) { addActionError ( getText ( STR_ ) ) ; return execute ( ) ; }
static char readChar ( IXMLReader reader , char entityChar ) throws IOException , XMLParseException { String str = XMLUtil . read ( reader , entityChar ) ; char ch = str . charAt ( NUM_ ) ; if ( ch == entityChar ) { XMLUtil . errorUnexpectedEntity ( reader . getSystemID ( ) , reader . getLineNr ( ) , str ) ; } return ch ; }
public VNXeCommandJob deleteNfsShareForSnapshot ( String shareId ) throws VNXeException { NfsShareRequests req = new NfsShareRequests ( _khClient ) ; return req . deleteShareForSnapshot ( shareId ) ; }
public ResourceSet ( int initialCapacity ) { super ( initialCapacity ) ; }
private static synchronized String makeDateString ( Date date ) { return sdfDefault . format ( date ) ; }
public void handleNgramOrderFinished ( int order ) ;
public Object runSafely ( Catbert . FastStack stack ) throws Exception { Widget cw = getWidget ( stack ) ; Widget pw = getWidget ( stack ) ; if ( cw != null && pw != null ) return pw . contains ( cw ) ? Boolean . TRUE : Boolean . FALSE ; return Boolean . FALSE ; }
static String [ ] nonGcmCiphers ( ) { final SSLContext sslContext ; try { sslContext = SSLContext . getDefault ( ) ; } catch ( NoSuchAlgorithmException e ) { throw Throwables . propagate ( e ) ; } final String [ ] defaultCiphers = sslContext . getDefaultSSLParameters ( ) . getCipherSuites ( ) ; return Stream . of ( defaultCiphers ) . filter ( null ) . toArray ( null ) ; }
void update ( String tagName , SourceDataTagQuality quality ) ;
public static net . aimeizi . person . QueryParameter . Builder newBuilder ( net . aimeizi . person . QueryParameter . Builder other ) { return new net . aimeizi . person . QueryParameter . Builder ( other ) ; }
Item newFieldItem ( final String owner , final String name , final String desc ) { key3 . set ( FIELD , owner , name , desc ) ; Item result = get ( key3 ) ; if ( result == null ) { put122 ( FIELD , newClass ( owner ) , newNameType ( name , desc ) ) ; result = new Item ( index ++ , key3 ) ; put ( result ) ; } return result ; }
public boolean empty ( ) { return size == NUM_ ; }
public static final Slice scale ( Slice slice , double scale ) { if ( slice == null ) throw new NullPointerException ( Messages . getString ( STR_ ) ) ; if ( scale <= NUM_ ) throw new IllegalArgumentException ( Messages . getString ( STR_ ) ) ; return new Slice ( slice . getSliceRadius ( ) * scale , slice . getTheta ( ) ) ; }
public static byte [ ] decode ( String data ) { int len = data . length ( ) / NUM_ * NUM_ ; ByteArrayOutputStream bOut = new ByteArrayOutputStream ( len ) ; try { encoder . decode ( data , bOut ) ; } catch ( Exception e ) { throw new DecoderException ( STR_ + e . getMessage ( ) , e ) ; } return bOut . toByteArray ( ) ; }
protected AbstractCombinatorCondition ( Condition c1 , Condition c2 ) { firstCondition = c1 ; secondCondition = c2 ; }
public boolean isDefaultEndsWith3Points ( ) { return defaultEndsWith3Points ; }
public boolean isViewUnder ( View view , int x , int y ) { if ( view == null ) { return BOOL_ ; } return x >= view . getLeft ( ) && x < view . getRight ( ) && y >= view . getTop ( ) && y < view . getBottom ( ) ; }
public static boolean continueCondition ( final long thetaLong , final long hash ) { return ( ( ( hash - NUM_ ) | ( thetaLong - hash - NUM_ ) ) < NUM_ ) ; }
public static _Fields findByThriftIdOrThrow ( int fieldId ) { _Fields fields = findByThriftId ( fieldId ) ; if ( fields == null ) throw new IllegalArgumentException ( STR_ + fieldId + STR_ ) ; return fields ; }
public CircuitBreakerBuilder counterUpdateIntervalMillis ( long counterUpdateIntervalMillis ) { counterUpdateInterval ( Duration . ofMillis ( counterUpdateIntervalMillis ) ) ; return this ; }
public void layoutContainer ( Container parent ) { prepare ( SPECIFIC_SIZE ) ; Insets insets = parent . getInsets ( ) ; int width = parent . getWidth ( ) - insets . left - insets . right ; int height = parent . getHeight ( ) - insets . top - insets . bottom ; boolean ltr = isLeftToRight ( ) ; if ( getAutoCreateGaps ( ) || getAutoCreateContainerGaps ( ) || hasPreferredPaddingSprings ) { calculateAutopadding ( horizontalGroup , HORIZONTAL , SPECIFIC_SIZE , NUM_ , width ) ; calculateAutopadding ( verticalGroup , VERTICAL , SPECIFIC_SIZE , NUM_ , height ) ; } horizontalGroup . setSize ( HORIZONTAL , NUM_ , width ) ; verticalGroup . setSize ( VERTICAL , NUM_ , height ) ; for ( ComponentInfo info : componentInfos . values ( ) ) { info . setBounds ( insets , width , ltr ) ; } }
public RenameTypeProcessor ( IType type ) { fType = type ; if ( type != null ) setNewElementName ( type . getElementName ( ) ) ; fUpdateReferences = BOOL_ ; fUpdateTextualMatches = BOOL_ ; fUpdateSimilarElements = BOOL_ ; fRenamingStrategy = RenamingNameSuggestor . STRATEGY_EXACT ; }
public void endGetDurableCQsSend ( long startTime , boolean failed ) { long duration = getStatTime ( ) - startTime ; endClientOpSend ( duration , failed ) ; this . sendStats . incInt ( getDurableCQsSendsInProgressId , - NUM_ ) ; int endGetDurableCQsSendId ; if ( failed ) { endGetDurableCQsSendId = getDurableCQsSendFailedId ; } else { endGetDurableCQsSendId = getDurableCQsSendId ; } this . sendStats . incInt ( endGetDurableCQsSendId , NUM_ ) ; this . stats . incLong ( getDurableCQsSendDurationId , duration ) ; }
public static boolean isPubid ( int c ) { return c < NUM_ && ( CHARS [ c ] & MASK_PUBID ) != NUM_ ; }
public StackedAreaChart ( String group , String field , String [ ] columns , double threshold ) { super ( group ) ; this . columns = columns ; baseline = new double [ columns . length ] ; peaks = new double [ columns . length ] ; poly = new float [ NUM_ * columns . length ] ; m_field = field ; m_start = PrefuseLib . getStartField ( field ) ; m_end = PrefuseLib . getEndField ( field ) ; setThreshold ( threshold ) ; m_model = new NumberRangeModel ( NUM_ , NUM_ , NUM_ , NUM_ ) ; }
public void registerNativeFree ( int bytes ) { }
public PlaylistGrouperMediaNode ( BasicMediaSource inSource , BasicMediaNode inParent , sage . Playlist inGroupObject , boolean showKids ) { super ( inSource , inParent , inGroupObject . getName ( ) , DATATYPE_PLAYLIST , inGroupObject ) ; myPlaylist = inGroupObject ; this . showKids = showKids ; }
void resume ( ) { vmdata . resume ( ) ; }
public Sobol ( ) { super ( ) ; }
public UF12 ( int numberOfVariables , int numberOfObjectives ) { super ( numberOfVariables , numberOfObjectives ) ; if ( ( numberOfVariables != NUM_ ) && ( numberOfVariables != NUM_ ) ) { throw new IllegalArgumentException ( STR_ ) ; } problem = new DTLZ3 ( numberOfVariables , numberOfObjectives ) ; }
void handleAlarm ( Alarm alarm ) ;
protected void paintOrigin ( Point2D llp , Graphics graphics , MapBean theMap ) { paintOriginPoint ( llp , graphics , theMap ) ; paintOriginLabel ( llp , graphics , theMap ) ; }
public boolean isKeyword ( String s ) { return m_Keywords . contains ( s . toUpperCase ( ) ) ; }
public void onMouseReleased ( MapMouseEvent ev ) { }
public boolean isLockSnapshotsSupported ( ) { return lockSnapshotsSupported ; }
public QueueBuilder < T > withUnit ( Unit unit ) { if ( memoryManager != null ) { throw new IllegalStateException ( STR_ ) ; } this . unit = unit ; return this ; }
public boolean isSelected ( ) { ClusterViewer viewer = getViewer ( ) ; return viewer . getPcoaTab ( ) != null && viewer . getPcoaTab ( ) . getFirstPC ( ) == NUM_ && viewer . getPcoaTab ( ) . getSecondPC ( ) == NUM_ && ! viewer . getPcoaTab ( ) . isIs3dMode ( ) ; }
public void clear ( ) ;
public Location ( final World world , final double x , final double y , final double z , final float yaw , final float pitch ) { this . world = world ; this . x = x ; this . y = y ; this . z = z ; this . pitch = pitch ; this . yaw = yaw ; }
public boolean isModified ( ) { return _isDigestModified || _jarDepend . isModified ( ) ; }
public DelegationSelectionTool ( Collection < Action > drawingActions , Collection < Action > selectionActions ) { this . drawingActions = drawingActions ; this . selectionActions = selectionActions ; }
public CallSiteTreeNode find ( InlineSequence seq ) { if ( seq . caller == null ) { return ( CallSiteTreeNode ) getRoot ( ) ; } else { CallSiteTreeNode parent = find ( seq . caller ) ; CallSiteTreeNode x = ( CallSiteTreeNode ) parent . getLeftChild ( ) ; while ( x != null ) { if ( x . callSite == seq ) { return x ; } x = ( CallSiteTreeNode ) x . getRightSibling ( ) ; } return null ; } }
public void onRoleChangeOverwrittenPermissions ( DiscordAPI api , Role role , Channel channel , Permissions oldPermissions ) ;
public boolean leftAllowed ( ) { return ( myFlags & LEFT_EDGE ) != NUM_ ; }
double m22 ( ) ;
public static float calculateAspectRatio ( Rect rect ) { final float aspectRatio = ( float ) rect . width ( ) / ( float ) rect . height ( ) ; return aspectRatio ; }
private static int excludeNomediaFiles ( String [ ] fullPathNames ) { int itemsLeft = NUM_ ; if ( fullPathNames != null ) { for ( int i = NUM_ ; i < fullPathNames . length ; i ++ ) { String fullPathName = fullPathNames [ i ] ; if ( fullPathName != null ) { if ( ! isImage ( fullPathName , BOOL_ ) || isNoMedia ( fullPathName , NUM_ ) ) { fullPathNames [ i ] = null ; } else { itemsLeft ++ ; } } } } return itemsLeft ; }
protected void writeFactoriesAddition ( final StringBuilder sb , final Map < String , String > factoryMap ) { if ( factoryMap == null || factoryMap . isEmpty ( ) ) { return ; } sb . append ( in ) ; sb . append ( STR_ ) ; for ( final String key : factoryMap . keySet ( ) ) { final String [ ] segments = key . split ( STR_ ) ; final String clazz = segments [ NUM_ ] ; final String handles = STR_ + segments [ NUM_ ] + STR_ ; sb . append ( STR_ ) . append ( clazz ) ; sb . append ( STR_ ) . append ( handles ) . append ( STR_ ) ; } sb . setLength ( sb . length ( ) - NUM_ ) ; sb . append ( STR_ ) ; }
private void showFeedback ( String feedback ) { if ( myHost != null ) { myHost . showFeedback ( feedback ) ; } else { System . out . println ( feedback ) ; } }
public AnnotationVisitor visitAnnotationDefault ( ) { if ( mv != null ) { return mv . visitAnnotationDefault ( ) ; } return null ; }
public boolean hasStructuredPostalAddress ( ) { return hasExtension ( StructuredPostalAddress . class ) ; }
public TodolistExample ( ) { oredCriteria = new ArrayList < Criteria > ( ) ; }
public void runTest ( ) throws Throwable { String localName = STR_ ; String namespaceURI = STR_ ; Document doc ; NodeList elementList ; Element testNode ; boolean state ; doc = ( Document ) load ( STR_ , BOOL_ ) ; elementList = doc . getElementsByTagName ( STR_ ) ; testNode = ( Element ) elementList . item ( NUM_ ) ; state = testNode . hasAttributeNS ( namespaceURI , localName ) ; assertTrue ( STR_ , state ) ; }
public void onFailure ( int statusCode , Header [ ] headers , Throwable throwable , JSONArray errorResponse ) { AsyncHttpClient . log . w ( LOG_TAG , STR_ , throwable ) ; }
public String displayStructureAsPlainText ( ) { return STR_ ; }
public void preSerialize ( BaggageImpl baggage ) ;
public DragHandle ( Figure owner ) { super ( owner ) ; }
boolean isTimedOut ( long sesTimeout ) { long time0 = lastTouchTime . get ( ) ; if ( time0 == TIMEDOUT_FLAG ) return BOOL_ ; return U . currentTimeMillis ( ) - time0 > sesTimeout && lastTouchTime . compareAndSet ( time0 , TIMEDOUT_FLAG ) ; }
public final boolean isBracketMatchingEnabled ( ) { return bracketMatchingEnabled ; }
public abstract double calculate_K ( int [ ] x_index , double [ ] x_att , int [ ] y_index , double [ ] y_att ) ;
public PathExtractorImpl ( String pathAndFeature , boolean wantFeature ) { this . pathAndFeature = pathAndFeature ; if ( INTERPRET_PATHS ) { path = pathAndFeature ; return ; } if ( wantFeature ) { int lastDot = pathAndFeature . lastIndexOf ( STR_ ) ; if ( lastDot == - NUM_ ) { feature = pathAndFeature ; path = null ; } else { feature = pathAndFeature . substring ( lastDot + NUM_ ) ; path = pathAndFeature . substring ( NUM_ , lastDot ) ; } this . wantFeature = wantFeature ; } else { this . path = pathAndFeature ; } if ( ! LAZY_COMPILE ) { compiledPath = compile ( path ) ; } }
private void showFeedback ( String message ) { if ( myHost != null ) { myHost . showFeedback ( message ) ; } else { System . out . println ( message ) ; } }
public b addElement ( String element ) { addElementToRegistry ( element ) ; return ( this ) ; }
public static < K > byte [ ] generate ( Set < K > set , UniversalHash < K > hash ) { ArrayList < K > list = new ArrayList < K > ( ) ; list . addAll ( set ) ; ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; int seed = RANDOM . nextInt ( ) ; out . write ( seed > > > NUM_ ) ; out . write ( seed > > > NUM_ ) ; out . write ( seed > > > NUM_ ) ; out . write ( seed ) ; generate ( list , hash , NUM_ , seed , out ) ; return compress ( out . toByteArray ( ) ) ; }
private boolean isAlphaUsedForScale ( ) { return android . os . Build . VERSION . SDK_INT < NUM_ ; }
public final void activateOrganizer ( ) { if ( organizer != null ) { organizer . activate ( ) ; } }
protected abstract Object array ( Collection < Object > entries , Type arrayElementType ) ;
public long addWrapField ( long instant , int amount ) { return set ( instant , FieldUtils . getWrappedValue ( get ( instant ) , amount , iMin , iMax ) ) ; }
public static String convertDateToString ( Date aDate ) { return getDateTime ( getDatePattern ( ) , aDate ) ; }
public void draw ( Drawable drawable ) { draw ( drawable , null , BOOL_ , BOOL_ ) ; }
public boolean isWhitespace ( int nodeHandle ) { int type = getNodeType ( nodeHandle ) ; Node node = getNode ( nodeHandle ) ; if ( TEXT_NODE == type || CDATA_SECTION_NODE == type ) { FastStringBuffer buf = StringBufferPool . get ( ) ; while ( node != null ) { buf . append ( node . getNodeValue ( ) ) ; node = logicalNextDOMTextNode ( node ) ; } boolean b = buf . isWhitespace ( NUM_ , buf . length ( ) ) ; StringBufferPool . free ( buf ) ; return b ; } return BOOL_ ; }
void initializeGlobalComment ( final ArrayList < IComment > comment ) ;
public ConnectException ( ) { }
protected DefaultPointsHandler ( ) { }
public String readString ( ) throws IOException { int size = readInt ( ) ; if ( Math . abs ( size ) > NUM_ ) throw new IOException ( STR_ + Math . abs ( size ) ) ; byte [ ] bytes = new byte [ Math . abs ( size ) ] ; int got = in . read ( bytes , NUM_ , Math . abs ( size ) ) ; if ( got != Math . abs ( size ) ) throw new IOException ( STR_ + got + STR_ + Math . abs ( size ) ) ; if ( size < NUM_ ) { try { return compressor . inflateByteArray2String ( - size , bytes ) ; } catch ( DataFormatException e ) { throw new IOException ( e . getMessage ( ) ) ; } } else { return Compressor . convertUncompressedByteArray2String ( size , bytes ) ; } }
protected final void error ( Throwable ex ) { if ( done ) { UnsignalledExceptions . onErrorDropped ( ex ) ; return ; } done = BOOL_ ; actual . onError ( ex ) ; }
void destroyContainer ( ContainerId containerId ) throws PeerException ;
public ArrayMemberValue ( MemberValue t , ConstPool cp ) { super ( STR_ , cp ) ; type = t ; values = null ; }
private Queue < MethodWrapper > formConversationQueue ( Queue < MethodWrapper > queue , String methodName ) { MethodWrapper methodWrapper = methodNameMap . get ( methodName ) ; queue . add ( methodWrapper ) ; if ( StringUtils . isEmpty ( methodName ) ) { return queue ; } else { return formConversationQueue ( queue , methodWrapper . getNext ( ) ) ; } }
protected void merge ( JCTree tree ) { inits . assign ( initsWhenFalse . andSet ( initsWhenTrue ) ) ; uninits . assign ( uninitsWhenFalse . andSet ( uninitsWhenTrue ) ) ; }
public Account findAccountByAddress ( final Address id ) { return this . accountLookup . findByAddress ( id ) ; }
public void putViewModel ( int key , MvvmViewModel cacheViewModel , Context context ) { getFragment ( context ) . put ( key , cacheViewModel ) ; }
public boolean isInitialized ( ) { return isInitialized ; }
public static FieldDataTermsQueryBuilder fieldDataTermsQuery ( String name , long [ ] values , int cacheKey ) throws IOException { return new FieldDataTermsQueryBuilder ( name , values , cacheKey ) ; }
public void clear ( ) { this . attributes . clear ( ) ; }
protected Scanner createScanner ( InputSource source ) { documentURI = source . getURI ( ) ; if ( documentURI == null ) { documentURI = STR_ ; } Reader r = source . getCharacterStream ( ) ; if ( r != null ) { return new Scanner ( r ) ; } InputStream is = source . getByteStream ( ) ; if ( is != null ) { return new Scanner ( is , source . getEncoding ( ) ) ; } String uri = source . getURI ( ) ; if ( uri == null ) { throw new CSSException ( formatMessage ( STR_ , null ) ) ; } try { ParsedURL purl = new ParsedURL ( uri ) ; is = purl . openStreamRaw ( CSSConstants . CSS_MIME_TYPE ) ; return new Scanner ( is , source . getEncoding ( ) ) ; } catch ( IOException e ) { throw new CSSException ( e ) ; } }
public final void testValidateCaseInsensitiveNotAllowingSpacesFails ( ) { char [ ] allowedCharacters = new char [ ] { STR_ } ; LetterOrNumberValidator characterOrNumberValidator = new LetterOrNumberValidator ( STR_ , Case . CASE_INSENSITIVE , BOOL_ , allowedCharacters ) ; assertFalse ( characterOrNumberValidator . validate ( STR_ ) ) ; }
public abstract boolean includeFetch ( ) ;
public static native void convertARGB8888ToYUV420SP ( int [ ] input , byte [ ] output , int width , int height ) ;
private void calculateSunlightRatio ( Time time ) { float value = time . hour + ( map ( time . minute , NUM_ , NUM_ , NUM_ , NUM_ ) / NUM_ ) ; sunlightRatio = ( float ) Gaussian . getPhi ( value , NUM_ , NUM_ ) ; if ( sunlightRatio < NUM_ ) sunlightRatio = NUM_ - sunlightRatio ; }
public TargetActivityHeaderView ( Context context ) { this ( context , null ) ; }
public boolean generate ( ReportDescription description , Date date ) { try { Integer targetDateInt = Integer . parseInt ( format . format ( date ) ) ; AnalysisResultSet logAggregation = makeLogAnal ( description , targetDateInt ) ; Report report = new Report ( ) ; report . setSendTime ( new Date ( ) ) ; report . setTargetDate ( date ) ; report . setLogReport ( logAggregation ) ; report . setTargets ( description . getTargets ( ) ) ; logger . debug ( STR_ + report ) ; reportRepository . save ( report ) ; return BOOL_ ; } catch ( Exception e ) { logger . error ( e . getMessage ( ) , e ) ; return BOOL_ ; } }
protected static void addWords ( FullTextSettings setting , HashSet < String > set , Reader reader ) { StreamTokenizer tokenizer = new StreamTokenizer ( reader ) ; tokenizer . resetSyntax ( ) ; tokenizer . wordChars ( STR_ + NUM_ , NUM_ ) ; char [ ] whitespaceChars = setting . getWhitespaceChars ( ) . toCharArray ( ) ; for ( char ch : whitespaceChars ) { tokenizer . whitespaceChars ( ch , ch ) ; } try { while ( BOOL_ ) { int token = tokenizer . nextToken ( ) ; if ( token == StreamTokenizer . TT_EOF ) { break ; } else if ( token == StreamTokenizer . TT_WORD ) { String word = tokenizer . sval ; word = setting . convertWord ( word ) ; if ( word != null ) { set . add ( word ) ; } } } } catch ( IOException e ) { throw DbException . convertIOException ( e , STR_ ) ; } }
public void rejectDocument ( NGramDocument dDoc ) { DocumentNGramGraph gGraph = dDoc . getDocumentGraph ( ) . intersectGraph ( getDocumentGraph ( ) ) ; DocumentNGramHistogram hHistogram = dDoc . getDocumentHistogram ( ) . intersectHistogram ( getDocumentHistogram ( ) ) ; getDocumentGraph ( ) . degrade ( gGraph ) ; }
public void train ( Map CategoryValues , String sSuggestedCategory , String sFinalCategory ) { if ( CategoryValues == null ) CategoryValues = new HashMap ( ) ; if ( CategoryValues . size ( ) > NUM_ ) vPreviousDecisions . add ( new DecisionSupport ( CategoryValues , sSuggestedCategory , sFinalCategory ) ) ; }
public CipherParameters generateDerivedParameters ( int keySize ) { keySize = keySize / NUM_ ; if ( keySize > digest . getDigestSize ( ) ) { throw new IllegalArgumentException ( STR_ + keySize + STR_ ) ; } byte [ ] dKey = generateDerivedKey ( ) ; return new KeyParameter ( dKey , NUM_ , keySize ) ; }
public boolean isSslEncryption ( ) { return sslEncryption ; }
public static String toString ( long [ ] array ) { if ( array == null ) { return NULL ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = NUM_ ; i < array . length ; i ++ ) { if ( i != NUM_ ) { sb . append ( STR_ ) ; } sb . append ( array [ i ] ) ; } return sb . toString ( ) ; }
void update ( Session session ) ;
public void testCase13 ( ) { byte aBytes [ ] = { NUM_ , NUM_ , - NUM_ , NUM_ , NUM_ , - NUM_ , NUM_ , - NUM_ } ; int aSign = NUM_ ; byte rBytes [ ] = { NUM_ , NUM_ , - NUM_ , NUM_ , NUM_ , - NUM_ , NUM_ , - NUM_ } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = BigInteger . ONE ; BigInteger result = aNumber . divide ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = NUM_ ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( STR_ , NUM_ , result . signum ( ) ) ; }
protected byte encodeNormValue ( float boost , float length ) { return SmallFloat . floatToByte315 ( ( boost / ( float ) Math . sqrt ( length ) ) ) ; }
public void loadIfNecessary ( ) { if ( getWebContents ( ) != null ) getWebContents ( ) . getNavigationController ( ) . loadIfNecessary ( ) ; }
public void parse ( ) { try { start ( ) ; } catch ( ParseException e ) { throw new CustomDrawingParserRuntimeException ( e ) ; } catch ( TokenMgrException e ) { throw new CustomDrawingParserRuntimeException ( e ) ; } }
public GreaterOp_ createGreaterOp_ ( ) { GreaterOp_Impl greaterOp_ = new GreaterOp_Impl ( ) ; return greaterOp_ ; }
public ScenarioBuilder ( ) { try { this . scenario = new Scenario ( new File ( Files . createTempDir ( ) , STR_ ) ) ; this . repository = FileRepositoryBuilder . create ( scenario . getRepositoryLocation ( ) ) ; repository . create ( ) ; this . git = new Git ( repository ) ; } catch ( Exception ex ) { throw new IllegalStateException ( STR_ , ex ) ; } }
public AArch64FrameMap ( CodeCacheProvider codeCache , RegisterConfig registerConfig , ReferenceMapBuilderFactory referenceMapFactory ) { super ( codeCache , registerConfig , referenceMapFactory ) ; initialSpillSize = frameSetupSize ( ) ; spillSize = initialSpillSize ; }
private KeyPair generateVapidKeys ( ) throws NoSuchProviderException , NoSuchAlgorithmException , InvalidAlgorithmParameterException { KeyPairGenerator keyPairGenerator = KeyPairGenerator . getInstance ( STR_ , STR_ ) ; keyPairGenerator . initialize ( ECNamedCurveTable . getParameterSpec ( STR_ ) , new SecureRandom ( ) ) ; return keyPairGenerator . generateKeyPair ( ) ; }
TimeOfDay ( TimeOfDay partial , Chronology chrono ) { super ( partial , chrono ) ; }
private static boolean compareArray ( Object constraint , JSONArray values , Decider decider ) { for ( int i = NUM_ ; i < values . length ( ) ; ++ i ) { try { if ( decider . decide ( constraint , values . get ( i ) ) ) { return BOOL_ ; } } catch ( JSONException e ) { throw new RuntimeException ( e ) ; } } return BOOL_ ; }
public int next ( int context , int current ) { int subtreeRootIdent = makeNodeIdentity ( context ) ; for ( current = makeNodeIdentity ( current ) - NUM_ ; current >= NUM_ ; current -- ) { short type = _type ( current ) ; if ( ATTRIBUTE_NODE == type || NAMESPACE_NODE == type ) continue ; return makeNodeHandle ( current ) ; } return NULL ; }
void draw ( Canvas canvas , float x , float y , int alpha , float scaleX , float scaleY , float rotation ) ;
private void addMethod ( MethodNode methodNode ) { String [ ] exceptions = new String [ methodNode . exceptions . size ( ) ] ; methodNode . exceptions . toArray ( exceptions ) ; MethodVisitor mv = cv . visitMethod ( methodNode . access , methodNode . name , methodNode . desc , methodNode . signature , exceptions ) ; methodNode . instructions . resetLabels ( ) ; methodNode . accept ( new RemappingMethodAdapter ( methodNode . access , methodNode . desc , mv , new SimpleRemapper ( classToMerge . name , baseClassName ) ) ) ; }
private void returnData ( Object ret ) { if ( myHost != null ) { myHost . returnData ( ret ) ; } }
public void init$Children ( ) { children = new ASTNode [ NUM_ ] ; }
public void removeMessageDestinationRef ( String name ) { namingResources . removeMessageDestinationRef ( name ) ; fireContainerEvent ( STR_ , name ) ; }
public static String convertByte2HexString ( byte b ) { char u8 = convertByte2Uint8 ( b ) ; return Integer . toHexString ( u8 ) ; }
private void strategyNominateHighestPrio ( PropertyChangeEvent ev ) { String pname = ev . getPropertyName ( ) ; if ( IceMediaStream . PROPERTY_PAIR_VALIDATED . equals ( pname ) || ( IceMediaStream . PROPERTY_PAIR_STATE_CHANGED . equals ( pname ) && ( ev . getNewValue ( ) == CandidatePairState . FAILED ) ) ) { CandidatePair validPair = ( CandidatePair ) ev . getSource ( ) ; Component parentComponent = validPair . getParentComponent ( ) ; IceMediaStream parentStream = parentComponent . getParentStream ( ) ; CheckList parentCheckList = parentStream . getCheckList ( ) ; if ( ! parentCheckList . allChecksCompleted ( ) ) return ; for ( Component component : parentStream . getComponents ( ) ) { CandidatePair pair = parentStream . getValidPair ( component ) ; if ( pair != null ) { logger . info ( STR_ + validPair . toShortString ( ) ) ; parentAgent . nominate ( pair ) ; } } } }
public boolean hasCache ( ) ;
private boolean doAcquireNanos ( long arg , long nanosTimeout ) throws InterruptedException { if ( nanosTimeout <= NUM_ ) return BOOL_ ; final long deadline = System . nanoTime ( ) + nanosTimeout ; final Node node = addWaiter ( Node . EXCLUSIVE ) ; boolean failed = BOOL_ ; try { for ( ; ; ) { final Node p = node . predecessor ( ) ; if ( p == head && tryAcquire ( arg ) ) { setHead ( node ) ; p . next = null ; failed = BOOL_ ; return BOOL_ ; } nanosTimeout = deadline - System . nanoTime ( ) ; if ( nanosTimeout <= NUM_ ) return BOOL_ ; if ( shouldParkAfterFailedAcquire ( p , node ) && nanosTimeout > spinForTimeoutThreshold ) LockSupport . parkNanos ( this , nanosTimeout ) ; if ( Thread . interrupted ( ) ) throw new InterruptedException ( ) ; } } finally { if ( failed ) cancelAcquire ( node ) ; } }
public boolean isEmpty ( ) { return ( hix <= lox || hiy <= loy ) ; }
public void testCodeSigner_00 ( ) { try { new CodeSigner ( null , ts ) ; fail ( STR_ ) ; } catch ( NullPointerException ex ) { } }
public static < T extends Enum < T > > EnumProperty < T > literal ( T literal , String selectAs ) { return new EnumProperty < > ( null , literal == null ? STR_ : SqlUtils . sanitizeStringAsLiteral ( literal . name ( ) ) , selectAs , null ) ; }
void shardStores ( IndicesShardStoresRequest request , ActionListener < IndicesShardStoresResponse > listener ) ;
public boolean isALeaf ( ) { return num_children == NUM_ ; }
private UpstreamQueueState monitorUpstreamQueueAndPauseTraffic ( ) { if ( getUpstreamQueueStatus ( ) == UpstreamQueueState . FULL ) { if ( m_paused . compareAndSet ( BOOL_ , BOOL_ ) ) { pauseTraffic ( ) ; } return UpstreamQueueState . FULL ; } return UpstreamQueueState . EMPTY ; }
public static void writeByteArrayToFile ( File file , byte [ ] data , boolean append ) throws IOException { OutputStream out = null ; try { out = openOutputStream ( file , append ) ; out . write ( data ) ; out . close ( ) ; } finally { IOUtils . closeQuietly ( out ) ; } }
public PluginLoaderThread ( final Window parent , final String rootPath , final List < String > pluginPaths , final T pluginInterface , final IPluginRegistry < IPlugin < T > > registry , final ConfigManager configFile ) { this . rootPath = Preconditions . checkNotNull ( rootPath , STR_ ) ; this . pluginPaths = Preconditions . checkNotNull ( pluginPaths , STR_ ) ; this . pluginInterface = Preconditions . checkNotNull ( pluginInterface , STR_ ) ; this . registry = Preconditions . checkNotNull ( registry , STR_ ) ; this . configFile = Preconditions . checkNotNull ( configFile , STR_ ) ; this . parent = parent ; }
public Location ( long addr ) { this . data = null ; this . offset = addr ; }
public Object runSafely ( Catbert . FastStack stack ) throws Exception { return new Long ( stack . getUIMgrSafe ( ) . getVideoFrame ( ) . getDurationMillis ( ) ) ; }
public static double cdf ( double x , double k , double theta , double shift ) { if ( x <= shift ) { return NUM_ ; } final double e = Math . exp ( ( x - shift ) * theta ) ; return e < Double . POSITIVE_INFINITY ? GammaDistribution . regularizedGammaP ( k , e ) : NUM_ ; }
public boolean removeSpringConfig ( SpringConfig springConfig ) { if ( springConfig == null ) { throw new IllegalArgumentException ( STR_ ) ; } return mSpringConfigMap . remove ( springConfig ) != null ; }
public double arcDistance ( final PlanetModel planetModel , final double x , final double y , final double z , final Membership ... bounds ) { if ( evaluateIsZero ( x , y , z ) ) { if ( meetsAllBounds ( x , y , z , bounds ) ) return NUM_ ; return Double . POSITIVE_INFINITY ; } final Plane perpPlane = new Plane ( this . y * z - this . z * y , this . z * x - this . x * z , this . x * y - this . y * x , NUM_ ) ; final GeoPoint [ ] intersectionPoints = findIntersections ( planetModel , perpPlane ) ; double minDistance = Double . POSITIVE_INFINITY ; for ( final GeoPoint intersectionPoint : intersectionPoints ) { if ( meetsAllBounds ( intersectionPoint , bounds ) ) { final double theDistance = intersectionPoint . arcDistance ( x , y , z ) ; if ( theDistance < minDistance ) { minDistance = theDistance ; } } } return minDistance ; }
public static void doShowBreak ( DebugCLI cli ) throws NotConnectedException { int isolateId = cli . getActiveIsolateId ( ) ; cli . waitTilHalted ( isolateId ) ; try { Session session = cli . getSession ( ) ; StringBuilder sb = new StringBuilder ( ) ; if ( session . getWorkerSession ( isolateId ) . isSuspended ( ) ) { sb . append ( getLocalizationManager ( ) . getLocalizedTextString ( STR_ ) ) ; sb . append ( STR_ ) ; appendBreakInfo ( cli , sb , BOOL_ , isolateId ) ; } else sb . append ( getLocalizationManager ( ) . getLocalizedTextString ( STR_ ) ) ; cli . out ( sb . toString ( ) ) ; } catch ( NullPointerException npe ) { cli . err ( getLocalizationManager ( ) . getLocalizedTextString ( STR_ ) ) ; } }
public boolean refill ( ) throws IOException { if ( ! inflater . needsInput ( ) ) return BOOL_ ; releaseInflatedBytes ( ) ; if ( inflater . getRemaining ( ) != NUM_ ) throw new IllegalStateException ( STR_ ) ; if ( source . exhausted ( ) ) return BOOL_ ; Segment head = source . buffer ( ) . head ; bufferBytesHeldByInflater = head . limit - head . pos ; inflater . setInput ( head . data , head . pos , bufferBytesHeldByInflater ) ; return BOOL_ ; }
SyncService ( InetSocketAddress address , Device device ) { mAddress = address ; mDevice = device ; }
protected long checkInstant ( long instant , Chronology chronology ) { return chronology . dayOfMonth ( ) . roundFloor ( instant ) ; }
public double eval ( double params [ ] ) { return ( Math . min ( Math . min ( params [ NUM_ ] , params [ NUM_ ] ) , Math . min ( params [ NUM_ ] , params [ NUM_ ] ) ) ) ; }
private void toggleMicMute ( ) { AudioManager audioManager = ( AudioManager ) VectorCallViewActivity . this . getSystemService ( Context . AUDIO_SERVICE ) ; if ( null != audioManager ) { boolean isMuted = audioManager . isMicrophoneMute ( ) ; Log . d ( LOG_TAG , STR_ + isMuted + STR_ + ! isMuted ) ; audioManager . setMicrophoneMute ( ! isMuted ) ; } else { Log . w ( LOG_TAG , STR_ ) ; } }
public CGSize displaySize ( ) { return CGSize . make ( surfaceSize_ . width , surfaceSize_ . height ) ; }
private static void writeUntouchedImage ( final File sourceFile , final File destFile ) throws IOException { FileInputStream fileIS = new FileInputStream ( sourceFile ) ; writeUntouchedImage ( fileIS , destFile ) ; }
public static boolean [ ] booleans ( boolean ... elements ) { return elements ; }
public Model copy ( ) { return new Model ( this . modelBoxes , this . fwdVec , this . upVec ) ; }
private CBreakpointSetFunctions ( ) { }
public void test_parkFor_2 ( ) throws Exception { CyclicBarrier barrier = new CyclicBarrier ( NUM_ ) ; Parker parker = new Parker ( barrier , BOOL_ , NUM_ ) ; Thread parkerThread = new Thread ( parker ) ; Thread waiterThread = new Thread ( new WaitAndUnpark ( barrier , NUM_ , parkerThread ) ) ; parkerThread . start ( ) ; waiterThread . start ( ) ; parker . assertDurationIsInRange ( NUM_ ) ; waiterThread . join ( ) ; parkerThread . join ( ) ; }
private RDORole findOrCreateRole ( RDOUserFees userFees , String roleId , int parentEntryNr ) { RDORole priceModelRole = userFees . getRole ( roleId ) ; if ( priceModelRole == null ) { priceModelRole = new RDORole ( ) ; priceModelRole . setParentEntryNr ( parentEntryNr ) ; priceModelRole . setEntryNr ( sequence . nextValue ( ) ) ; priceModelRole . setRoleId ( roleId ) ; userFees . getRoles ( ) . add ( priceModelRole ) ; } return priceModelRole ; }
public static int [ ] createIntArray ( List < ? extends Integer > coll ) { int [ ] array = new int [ coll . size ( ) ] ; for ( int i = NUM_ ; i < coll . size ( ) ; i ++ ) { array [ i ] = coll . get ( i ) ; } return array ; }
public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case NUM_ : return SUCCESS ; default : return null ; } }
public boolean isLocalServer ( String serverID ) { return localServerID . equals ( serverID ) ; }
public void removeAllRetentionPolicies ( ) { this . retentionPolicies . clear ( ) ; }
public static String makeLogTag ( Class cls ) { return makeLogTag ( cls . getSimpleName ( ) ) ; }
DeliverSm deliverSm ( byte [ ] b ) throws PDUStringException ;
public abstract boolean isExplicitlyIncluded ( ) ;
protected abstract void loadDataInitial ( final adapter confirmAdapter ) ;
public String nextToken ( ) throws NoSuchElementException , ParseException { if ( this . currentToken == null ) { throw new NoSuchElementException ( STR_ ) ; } final String result = this . currentToken ; this . searchPos = findNext ( this . searchPos ) ; return result ; }
public void startFirstSampleTimer ( ) { }
public < K , D , A , M extends Map < K , D > > Eval < M > groupBy ( Function < ? super T , ? extends K > classifier , Supplier < M > mapFactory , Collector < ? super T , A , D > downstream ) ;
public void recycle ( ) { clear ( ) ; }
public boolean isNull ( int index ) { return JSONObject . NULL . equals ( opt ( index ) ) ; }
public Builder addExtra ( String key , Object value ) { this . extra . put ( key , value ) ; return this ; }
public BridgeContext ( UserAgent userAgent ) { this ( userAgent , sharedPool , new DocumentLoader ( userAgent ) ) ; }
private static void loadFilesPath ( Context context ) { if ( context != null ) { try { File file = context . getFilesDir ( ) ; if ( file != null ) { PROCESS_NAME = DeviceInfoCapture . getInstance ( ) . getProcessNameFromId ( android . os . Process . myPid ( ) ) ; Constants . FILES_PATH = file . getAbsolutePath ( ) + STR_ + PROCESS_NAME ; File dir = new File ( Constants . FILES_PATH ) ; if ( ! dir . exists ( ) ) { dir . mkdirs ( ) ; } } } catch ( Exception e ) { Log . e ( TAG , STR_ ) ; e . printStackTrace ( ) ; } } }
void fill ( byte value ) ;
public GroupsGetInvitedUsersQuery fields ( List < UserField > value ) { return unsafeParam ( STR_ , value ) ; }
protected void fatalAlert ( byte description , String reason , Exception cause ) { throw new AlertException ( description , new SSLException ( reason , cause ) ) ; }
public Builder priority ( Priority value ) { switch ( value ) { case NORMAL : priority = Constants . MESSAGE_PRIORITY_NORMAL ; break ; case HIGH : priority = Constants . MESSAGE_PRIORITY_HIGH ; break ; } return this ; }
private boolean isDragOk ( final java . io . PrintStream out , final java . awt . dnd . DropTargetDragEvent evt ) { boolean ok = BOOL_ ; java . awt . datatransfer . DataFlavor [ ] flavors = evt . getCurrentDataFlavors ( ) ; int i = NUM_ ; while ( ! ok && i < flavors . length ) { if ( flavors [ i ] . equals ( java . awt . datatransfer . DataFlavor . javaFileListFlavor ) ) ok = BOOL_ ; i ++ ; } if ( out != null ) { if ( flavors . length == NUM_ ) log ( out , STR_ ) ; for ( i = NUM_ ; i < flavors . length ; i ++ ) log ( out , flavors [ i ] . toString ( ) ) ; } return ok ; }
public MarkupBuilder ( MarkupBuilder < ? > builder , boolean nested ) { builder . checkWriter ( ) ; if ( nested ) builder . writeCurrentTag ( ) ; if ( nested && ! builder . tagStack . isEmpty ( ) ) { Tag t = builder . tagStack . peek ( ) ; this . depth = NUM_ + t . depth + builder . depth ; } else { this . depth = builder . depth ; } this . writer = builder . writer ; builder . writer = null ; if ( nested ) { this . previousBuilder = builder ; this . bindings = new HashMap < String , Object > ( builder . bindings ) ; } else { this . tagStack = builder . tagStack ; this . bindings = builder . bindings ; this . attributes = builder . attributes ; } }
public ResourceFilter caseSensitive ( ) { caseSensitive = BOOL_ ; return this ; }
public void closeActiveNode ( ) { if ( activeNode . getParent ( ) != null ) showViewsForNode ( activeNode , BOOL_ , BOOL_ ) ; }
public void configure ( Configuration configuration ) ;
public Directive_ createDirective_ ( ) { Directive_Impl directive_ = new Directive_Impl ( ) ; return directive_ ; }
public CUarray ( ) { }
protected void restartRemoteBroker ( ) throws Exception { BrokerRegistry . getInstance ( ) . unbind ( STR_ ) ; remoteConnector . stop ( ) ; remoteBroker . stop ( ) ; remotePersistenceAdapter . stop ( ) ; remotePersistenceAdapter = createRemotePersistenceAdapter ( BOOL_ ) ; remotePersistenceAdapter . start ( ) ; remoteBroker = createRemoteBroker ( remotePersistenceAdapter ) ; remoteBroker . addConnector ( getRemoteURI ( ) ) ; remoteBroker . start ( ) ; BrokerRegistry . getInstance ( ) . bind ( STR_ , remoteBroker ) ; }
public static long estimatePartitionedSizeExactSparsity ( MatrixCharacteristics mc ) { return estimatePartitionedSizeExactSparsity ( mc . getRows ( ) , mc . getCols ( ) , mc . getRowsPerBlock ( ) , mc . getColsPerBlock ( ) , mc . getNonZeros ( ) ) ; }
protected abstract boolean isReadyForPullStart ( ) ;
public void fixUpAndRelocate ( ) { do { this . fixUp ( ) ; } while ( ! this . relocate ( ) ) ; }
public DimStore ( int id , String name , String zip , String addr ) { this . id = id ; this . name = name ; this . zip = zip ; this . addr = addr ; }
public InlineQueryResultCachedDocumentBuilder inputMessageContent ( InputMessageContent inputMessageContent ) { this . input_message_content = inputMessageContent ; return this ; }
public native byte bLength ( ) ;
public static Map < String , Parameter > toParameterMap ( List < Parameter > params ) { Map < String , Parameter > map = new HashMap < String , Parameter > ( params . size ( ) ) ; for ( Parameter param : params ) { if ( map . put ( param . getASCIIName ( ) , param ) != null ) throw new RuntimeException ( STR_ + param . getASCIIName ( ) + STR_ ) ; if ( ! param . getName ( ) . equals ( param . getASCIIName ( ) ) ) if ( map . put ( param . getName ( ) , param ) != null ) throw new RuntimeException ( STR_ + param . getName ( ) + STR_ ) ; } return map ; }
private Rect sourceToViewRect ( Rect sRect , Rect vTarget ) { vTarget . set ( ( int ) sourceToViewX ( sRect . left ) , ( int ) sourceToViewY ( sRect . top ) , ( int ) sourceToViewX ( sRect . right ) , ( int ) sourceToViewY ( sRect . bottom ) ) ; return vTarget ; }
public static double lerp ( double a , double b , double f ) { return a + f * ( b - a ) ; }
void assertNextTerms ( String expectedUnfolded , String expectedFolded , ASCIIFoldingFilter filter , CharTermAttribute termAtt ) throws Exception { assertTrue ( filter . incrementToken ( ) ) ; assertEquals ( expectedFolded , termAtt . toString ( ) ) ; if ( filter . isPreserveOriginal ( ) && ! expectedUnfolded . equals ( expectedFolded ) ) { assertTrue ( filter . incrementToken ( ) ) ; assertEquals ( expectedUnfolded , termAtt . toString ( ) ) ; } }
public synchronized void removePanListener ( PanListener listener ) { mPanListeners . remove ( listener ) ; }
public IntStringTranslator ( ) { list = new ArrayList < String > ( ) ; map = new HashMap < String , Integer > ( ) ; }
final void runTask ( ForkJoinTask < ? > task ) { if ( task != null ) { task . doExec ( ) ; if ( config < NUM_ ) localPollAndExec ( ) ; else localPopAndExec ( ) ; int ns = ++ nsteals ; ForkJoinWorkerThread thread = owner ; currentSteal = null ; if ( ns < NUM_ ) transferStealCount ( pool ) ; if ( thread != null ) thread . afterTopLevelExec ( ) ; } }
private void validateClusterSetup ( Collection < String > collectionNames ) throws InvalidClusterSetupAction { for ( String collectionName : collectionNames ) { int numSourceShards = sourceZKClient . getCollectionShards ( collectionName ) ; String destCollectionName = collectionMapper . dest ( collectionName ) ; int numDestShards = destinationZKClient . getCollectionShards ( destCollectionName ) ; if ( numSourceShards != numDestShards ) { logger . info ( STR_ + collectionName + STR_ + destCollectionName + STR_ + numSourceShards + STR_ + numDestShards ) ; throw new InvalidClusterSetupAction ( STR_ + collectionName + STR_ + destCollectionName + STR_ + numSourceShards + STR_ + numDestShards ) ; } } }
protected boolean inRange ( K key ) { K fromKey = getFromKey ( ) ; K toKey = getToKey ( ) ; return ( fromKey == null || inFromRange ( key , BOOL_ ) ) && ( toKey == null || inToRange ( key , BOOL_ ) ) ; }
static MMRandom generate ( int type ) { System . err . println ( STR_ + type ) ; try { switch ( type ) { case R_CRYPTO : return new MMRandom . CryptoRandom ( ) ; case R_POOL36 : return new MMRandom . Pool36Random ( ) ; case R_SUN : default : return new MMRandom . SunRandom ( ) ; } } catch ( Exception ex ) { System . err . println ( STR_ + type ) ; System . err . println ( STR_ ) ; return new MMRandom . SunRandom ( ) ; } }
public static WGLOffScreenSurfaceData createData ( WGLGraphicsConfig gc , int width , int height , ColorModel cm , Image image , int type ) { return new WGLOffScreenSurfaceData ( null , gc , width , height , image , cm , type ) ; }
public void addClassesToCheck ( File ... files ) throws IOException { addClassesToCheck ( Arrays . asList ( files ) ) ; }
private void returnData ( Object ret ) { if ( myHost != null ) { myHost . returnData ( ret ) ; } }
public Boolean isSearchCaseInsensitive ( ) { return searchCaseInsensitive ; }
public void onWallOptionsClicked ( View view , String wallId , String userId , String selectedTagId ) ;
private void checkAndSetServiceType ( String serviceTypeName ) throws NameNotFoundException { PolicyManager . initAdminSubject ( ) ; ServiceTypeManager stm = null ; try { stm = ServiceTypeManager . getServiceTypeManager ( ) ; serviceType = stm . getServiceType ( serviceTypeName ) ; } catch ( SSOException ssoe ) { PolicyManager . debug . error ( STR_ + ssoe ) ; throw ( new NameNotFoundException ( ssoe , serviceTypeName , PolicyException . SERVICE ) ) ; } }
public void addColumn ( String name , Class type ) { addColumn ( name , type , null ) ; }
private static boolean isXLargeTablet ( final Context context ) { return ( context . getResources ( ) . getConfiguration ( ) . screenLayout & Configuration . SCREENLAYOUT_SIZE_MASK ) >= Configuration . SCREENLAYOUT_SIZE_XLARGE ; }
public void markDelivered ( ) { mResponseDelivered = BOOL_ ; }
public void cancel ( ) { mCanceled = BOOL_ ; }
public ChannelFuture bind ( SocketAddress address ) { return bootstrap . bind ( address ) ; }
RecordReader createReader ( InputSplit split ) throws IOException , InterruptedException ;
public boolean areDifferent ( ) { return ! this . fileDiffs . isEmpty ( ) ; }
final boolean isOnSyncQueue ( Node node ) { if ( node . waitStatus == Node . CONDITION || node . prev == null ) return BOOL_ ; if ( node . next != null ) return BOOL_ ; return findNodeFromTail ( node ) ; }
private void relayoutMeasuredItem ( View child ) { final int w = child . getMeasuredWidth ( ) ; final int h = child . getMeasuredHeight ( ) ; final int childLeft = mListPadding . left ; final int childRight = childLeft + w ; final int childTop = child . getTop ( ) ; final int childBottom = childTop + h ; child . layout ( childLeft , childTop , childRight , childBottom ) ; }
public ResultDataModelTestCase ( String name ) { super ( name ) ; }
protected PortImpl ( ) { super ( ) ; }
public boolean isEnabled ( RichFormatterFeature feature ) { return features . contains ( feature ) ; }
public RunnableDistributedTaskAdapter ( Runnable runnable , T result , AsyncResultsReducer < T , R > reducer , AsyncResultFilter < T > filter ) throws IllegalArgumentException { super ( runnable , result ) ; this . reducer = reducer ; this . filter = filter ; }
public void testVocabulary ( ) throws Exception { assertVocabulary ( a , getDataPath ( STR_ ) , STR_ ) ; }
void onEvent ( T event ) ;
public void menuCanceled ( MenuEvent e ) { }
public CharBuffer insert ( int offset , Object o ) { return insert ( offset , String . valueOf ( o ) ) ; }
public static int sizeofNullableString ( final SimpleString str ) { if ( str == null ) { return NUM_ ; } else { return NUM_ + str . sizeof ( ) ; } }
private PreparedStatement [ ] testBug71396PrepStatementInit ( Connection testConn , String [ ] queries , int maxRows ) throws SQLException { PreparedStatement [ ] testPStmt = new PreparedStatement [ queries . length ] ; for ( int i = NUM_ ; i < queries . length ; i ++ ) { testPStmt [ i ] = testConn . prepareStatement ( queries [ i ] ) ; if ( maxRows > NUM_ ) { testPStmt [ i ] . setMaxRows ( maxRows ) ; } } return testPStmt ; }
public abstract void checkIntegrity ( ) throws IOException ;
private Object readResolve ( ) { return CASE_INSENSITIVE_ORDER ; }
public long timeSinceLast ( ) { long currentTime = System . currentTimeMillis ( ) ; return currentTime - lastMessageTime ; }
protected FriendsAreFriendsQuery userIds ( int ... value ) { return unsafeParam ( STR_ , value ) ; }
public ContainerVmBwProvisioner ( long bw ) { setBw ( bw ) ; setAvailableBw ( bw ) ; }
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( hc_characterdatadeletedataexceedslength . class , args ) ; }
protected boolean isOCPropertiesMayHaveChanged ( ) { return ocProperties != null ; }
private int infixPriority ( char opp ) { switch ( opp ) { case STR_ : case STR_ : case STR_ : case STR_ : case STR_ : case STR_ : case STR_ : case STR_ : case STR_ : case STR_ : return NUM_ ; case STR_ : return NUM_ ; case STR_ : return NUM_ ; case STR_ : return NUM_ ; case STR_ : return NUM_ ; case STR_ : return NUM_ ; case STR_ : return NUM_ ; case STR_ : return NUM_ ; default : throw new IllegalArgumentException ( STR_ + opp ) ; } }
private void createToolsMenu ( Column column ) { JComponent label = createMenuTitle ( STR_ ) ; column . addComponent ( label ) ; JMenuItem item = createMenuItem ( STR_ , STR_ ) ; column . addComponent ( item ) ; item = createMenuItem ( STR_ , STR_ ) ; column . addComponent ( item ) ; }
public void addToEffectedController ( ) { if ( ( ! addedToController ) && ( effected . getLifeStats ( ) != null ) && ( ! effected . getLifeStats ( ) . isAlreadyDead ( ) ) ) { effected . getEffectController ( ) . addEffect ( this ) ; addedToController = BOOL_ ; } }
public void sortLocations ( ) { if ( l_locations . isEmpty ( ) ) return ; Collections . sort ( l_locations ) ; PBLocation fst = l_locations . get ( NUM_ ) , loc ; if ( ! fst . isType ( StringConst . EMPTY ) ) { for ( int i = NUM_ ; i < l_locations . size ( ) ; i ++ ) { loc = l_locations . get ( i ) ; if ( loc . isType ( StringConst . EMPTY ) ) { loc . setType ( fst . getType ( ) ) ; break ; } } fst . setType ( StringConst . EMPTY ) ; } }
public int addItemToEnd ( String productId , BigDecimal amount , BigDecimal quantity , BigDecimal unitPrice , HashMap < String , GenericValue > features , HashMap < String , Object > attributes , String prodCatalogId , String itemType , LocalDispatcher dispatcher , Boolean triggerExternalOps , Boolean triggerPriceRules ) throws CartItemModifyException , ItemNotFoundException { return addItemToEnd ( productId , amount , quantity , unitPrice , features , attributes , prodCatalogId , itemType , dispatcher , triggerExternalOps , triggerPriceRules , Boolean . FALSE , Boolean . FALSE ) ; }
public FrameBodyTPE3 ( ) { }
public SequentialListenerManager addListenerPooled ( Listener listener ) { addListenerExecutor ( listener , new PooledListenerExecutor ( this , listener , executorPool ) ) ; return this ; }
Result insert ( Table table , Column [ ] c , Value [ ] v ) throws SQLException ;
public static boolean linkSequenceHasLoops ( List < Link > linkSequence ) { Set tmpSet = new HashSet < > ( linkSequence ) ; return tmpSet . size ( ) < linkSequence . size ( ) ; }
public abstract void clearParameters ( ) ;
public AsyncFuture < Void > sendMetrics ( Collection < Metric > metrics ) ;
public static Pattern createOrGetPerl5CompiledPattern ( String stringPattern , boolean caseSensitive ) throws MalformedPatternException { Pattern pattern = compiledPerl5Patterns . get ( stringPattern ) ; if ( pattern == null ) { Perl5Compiler compiler = new Perl5Compiler ( ) ; if ( caseSensitive ) { pattern = compiler . compile ( stringPattern , Perl5Compiler . READ_ONLY_MASK ) ; } else { pattern = compiler . compile ( stringPattern , Perl5Compiler . CASE_INSENSITIVE_MASK | Perl5Compiler . READ_ONLY_MASK ) ; } pattern = compiledPerl5Patterns . putIfAbsentAndGet ( stringPattern , pattern ) ; if ( Debug . verboseOn ( ) ) { Debug . logVerbose ( STR_ + stringPattern , module ) ; } } return pattern ; }
String debugLine ( ) ;
private static boolean isLineBreak ( final Character c ) { return c != null && isLineBreak ( c . charValue ( ) ) ; }
public HuffmanCodec ( final int [ ] frequency ) { this ( frequency , new DecoderInputs ( ) ) ; }
public abstract HardwareAddress fromConfigXML ( String s ) ;
public String [ ] trimItems ( String [ ] arr ) ;
protected void generateOMGraphic ( OMGraphic g ) { if ( g != null && g . getNeedToRegenerate ( ) ) { Projection proj = getProjection ( ) ; if ( proj != null ) { g . generate ( proj ) ; } else if ( DEBUG ) { Debug . output ( STR_ + g . getNeedToRegenerate ( ) ) ; } } }
public void mouseClicked ( MouseEvent e ) { }
private void expand ( int i ) { if ( count + i <= buf . length ) { return ; } byte [ ] newbuf = mPool . getBuf ( ( count + i ) * NUM_ ) ; System . arraycopy ( buf , NUM_ , newbuf , NUM_ , count ) ; mPool . returnBuf ( buf ) ; buf = newbuf ; }
private static boolean isEmpty ( String val ) { return val == null || val . isEmpty ( ) ; }
public static boolean evaluate ( final NaviNode node , final SelectionState selectionState ) { return node . getRawNode ( ) . isSelected ( ) == ( selectionState == SelectionState . SELECTED ) ; }
public boolean equals ( Object r ) { if ( r == null ) { return BOOL_ ; } if ( ! ( r . getClass ( ) . equals ( this . getClass ( ) ) ) ) { return BOOL_ ; } CbusAddress opp = ( CbusAddress ) r ; if ( opp . aFrame . length != this . aFrame . length ) { return BOOL_ ; } for ( int i = NUM_ ; i < this . aFrame . length ; i ++ ) { if ( this . aFrame [ i ] != opp . aFrame [ i ] ) { return BOOL_ ; } } return BOOL_ ; }
private void incrementSubmittedJobCount ( ) { countLock . lock ( ) ; try { submittedJobCount ++ ; } finally { countLock . unlock ( ) ; } }
public FriendsGetRequestsQuery out ( Boolean value ) { return unsafeParam ( STR_ , value ) ; }
public boolean isDebuggerActive ( ) { return BOOL_ ; }
public MetalinkFileBuilder addFile ( String name ) { MetalinkFileBuilder newFile = new MetalinkFileBuilder ( name ) ; files . add ( newFile ) ; return newFile ; }
public void addFoundErrors ( final int errorsToAdd ) { isTrue ( errorsToAdd > NUM_ , STR_ ) ; totalResourcesWithErrors ++ ; totalFoundErrors += errorsToAdd ; }
public boolean isAccessibleChildSelected ( int i ) { int column = getAccessibleColumnAtIndex ( i ) ; int row = getAccessibleRowAtIndex ( i ) ; return JTable . this . isCellSelected ( row , column ) ; }
protected AbstractTracingClient ( Client < ? super I , ? extends O > delegate , Brave brave ) { super ( delegate ) ; clientInterceptor = new ClientTracingInterceptor ( brave ) ; }
public void trainModel ( TaskContext taskContext , File trainingFile , double paramC , int paramOrderE , int paramOrderT , double paramEpsilon , int paramB ) throws Exception { File tmpModel = trainModelAtTemporaryLocation ( trainingFile , paramC , paramOrderE , paramOrderT , paramEpsilon , paramB ) ; FileInputStream stream = new FileInputStream ( tmpModel ) ; taskContext . storeBinary ( MODEL_NAME , stream ) ; IOUtils . closeQuietly ( stream ) ; FileUtils . deleteQuietly ( tmpModel ) ; }
static void testLongFloorMod ( long x , long y , Object expected ) { Object result = doFloorMod ( x , y ) ; if ( ! resultEquals ( result , expected ) ) { fail ( STR_ , x , y , result , expected ) ; } Object strict_result = doStrictFloorMod ( x , y ) ; if ( ! resultEquals ( strict_result , expected ) ) { fail ( STR_ , x , y , strict_result , expected ) ; } try { BigDecimal xD = new BigDecimal ( x ) ; BigDecimal yD = new BigDecimal ( y ) ; BigDecimal resultD = xD . divide ( yD , RoundingMode . FLOOR ) ; resultD = resultD . multiply ( yD ) ; resultD = xD . subtract ( resultD ) ; long fr = resultD . longValue ( ) ; if ( ! result . equals ( fr ) ) { fail ( STR_ , x , y , result , fr ) ; } } catch ( ArithmeticException ae ) { if ( y != NUM_ ) { fail ( STR_ ) ; } } }
public static byte [ ] str2bin ( final String values ) { return str2bin ( values , JBBPBitOrder . LSB0 ) ; }
public static String parseResourceId ( String path ) { String result = null ; if ( path != null && path . length ( ) > NUM_ ) { int index = path . lastIndexOf ( STR_ ) ; String fileName = path . substring ( index + NUM_ ) ; result = fileName . substring ( NUM_ , fileName . lastIndexOf ( STR_ ) ) ; } return result ; }
public static void configureIfNecessary ( String resourceName ) { if ( System . getProperty ( STR_ ) == null ) { URL confUrl = Thread . currentThread ( ) . getContextClassLoader ( ) . getResource ( resourceName ) ; if ( confUrl != null ) { LogManager . resetConfiguration ( ) ; PropertyConfigurator . configure ( confUrl ) ; java . util . logging . LogManager . getLogManager ( ) . reset ( ) ; SLF4JBridgeHandler . install ( ) ; } } }
public void writeStartDocument ( ) throws XMLStreamException ;
void rollback ( boolean considerLastMessageAsDelivered ) throws ActiveMQException ;
private void enableExternalChangeLog ( ) throws ConfigException { if ( DirectoryServer . hasBackend ( ChangelogBackend . BACKEND_ID ) ) { return ; } try { changelogBackend = new ChangelogBackend ( this , domainPredicate ) ; changelogBackend . openBackend ( ) ; try { DirectoryServer . registerBackend ( changelogBackend ) ; } catch ( Exception e ) { logger . error ( WARN_CONFIG_BACKEND_CANNOT_REGISTER_BACKEND . get ( changelogBackend . getBackendID ( ) , getExceptionMessage ( e ) ) ) ; } registerVirtualAttributeRules ( ) ; } catch ( Exception e ) { throw new ConfigException ( LocalizableMessage . raw ( STR_ ) , e ) ; } }
private static void ensureValidOrientations ( Alignment horizontalAlignment , Alignment verticalAlignment ) { if ( ! horizontalAlignment . isHorizontal ( ) ) { throw new IllegalArgumentException ( STR_ ) ; } if ( ! verticalAlignment . isVertical ( ) ) { throw new IllegalArgumentException ( STR_ ) ; } }
void buildIndex ( ) ;
public abstract void renderAxisLabels ( Canvas c ) ;
public DatabaseGetCountriesQuery offset ( Integer value ) { return unsafeParam ( STR_ , value ) ; }
public < A > Eval < A [ ] > toArray ( IntFunction < A [ ] > generator ) ;
public static boolean isCurrentWeek ( DateTime date ) { DateTime firstDayOfWeekMidnight = DateTime . now ( DateTimeZone . getDefault ( ) ) . withDayOfWeek ( Calendar . getInstance ( Locale . getDefault ( ) ) . getMinimum ( Calendar . DAY_OF_WEEK ) ) . withTimeAtStartOfDay ( ) ; DateTime firstDayOfNextWeek = firstDayOfWeekMidnight . plusDays ( NUM_ ) ; return ( ( firstDayOfWeekMidnight . isEqual ( date . getMillis ( ) ) ) || firstDayOfWeekMidnight . isBefore ( date . getMillis ( ) ) ) && firstDayOfNextWeek . isAfter ( date . getMillis ( ) ) ; }
public IRouteBuilder < R > ALL ( String path ) ;
public void addEnabledRule ( EnabledRule enabledRule ) { Preconditions . checkNotNullArgument ( enabledRule ) ; if ( enabledRules == null ) { enabledRules = new ArrayList < > ( ) ; } if ( ! enabledRules . contains ( enabledRule ) ) { enabledRules . add ( enabledRule ) ; } }
public void postResponse ( Request < ? > request , Response < ? > response ) ;
private void returnData ( Object ret ) { if ( myHost != null ) { myHost . returnData ( ret ) ; } }
public void notationDecl ( String name , String pubID , String sysID ) throws SAXException { try { DTDprolog ( ) ; m_writer . write ( STR_ ) ; m_writer . write ( name ) ; if ( pubID != null ) { m_writer . write ( STR_ ) ; m_writer . write ( pubID ) ; } else { m_writer . write ( STR_ ) ; m_writer . write ( sysID ) ; } m_writer . write ( STR_ ) ; m_writer . write ( m_lineSep , NUM_ , m_lineSepLen ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
public void addStateName ( String stateName , int line ) { if ( stateGroups != null && stateGroups . containsKey ( stateName ) ) { ThreadLocalToolkit . log ( new AmbiguousStateIdentifier ( stateName ) , path , line ) ; } stateNames = ( stateNames != null ) ? stateNames : new LinkedHashSet < String > ( ) ; stateNames . add ( stateName ) ; }
public void clearPressedKeys ( ) { pressedStateKeys . clear ( ) ; if ( ! pressedStateKeys . isEmpty ( ) ) { logger . error ( STR_ ) ; } }
public void increment ( ) { counter . getAndIncrement ( ) ; }
private void removeFromQueue ( int x , int y ) { Position p = new Position ( x , y ) ; if ( moveQueue . contains ( p ) ) { moveQueue . remove ( p ) ; } }
void run ( final Service service , final NodeRolloutInput input , final FutureCallback < NodeRolloutResult > callback ) ;
protected void sequence_ArrayTypeRef_ParameterizedTypeRefNominal ( ISerializationContext context , ParameterizedTypeRef semanticObject ) { genericSequencer . createSequence ( context , semanticObject ) ; }
public DaemonThreadFactory ( final String threadPrefix , final ThreadGroup threadGroup ) { super ( threadPrefix , threadGroup ) ; }
public int nrOfSubSections ( ) { return sections . size ( ) ; }
public static void validateInputNotEmpty ( String field , String message ) throws CheckException { validateInputSizeMax ( field , message , Integer . MAX_VALUE ) ; }
public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_Instant_INTERVAL_HEAL_TO_ME ( int num0 , String skillname ) { return new SM_SYSTEM_MESSAGE ( NUM_ , num0 , skillname ) ; }
public boolean isPartOf ( final Outfit other ) { boolean partOf ; partOf = ( ( detail == null ) || detail . equals ( other . detail ) ) && ( ( hair == null ) || hair . equals ( other . hair ) ) && ( ( head == null ) || head . equals ( other . head ) ) && ( ( dress == null ) || dress . equals ( other . dress ) ) && ( ( body == null ) || body . equals ( other . body ) ) ; return partOf ; }
public void cancel ( ) { mCanceled = BOOL_ ; }
void removeSuiteTab ( ITab tab ) ;
public static void showToast ( Context context , int resourceId ) { Toast . makeText ( context , context . getString ( resourceId ) , Toast . LENGTH_LONG ) . show ( ) ; }
public int hashCode ( ) ;
Response readOperationResponse ( int operationCode , WarningMessageCallback callback ) throws SQLException , IOException ;
public boolean canUnequip ( ItemStack itemstack , EntityLivingBase player ) ;
Object build ( QueryNode queryNode ) throws QueryNodeException ;
public IntObjectHashMap ( int initialCapacity ) { this ( initialCapacity , defaultMinLoadFactor , defaultMaxLoadFactor ) ; }
public boolean isViewUnder ( View view , int x , int y ) { if ( view == null ) { return BOOL_ ; } return x >= view . getLeft ( ) && x < view . getRight ( ) && y >= view . getTop ( ) && y < view . getBottom ( ) ; }
public boolean isSetSyncValue ( ) { return this . syncValue != null ; }
public void drawingComplete ( OMGraphic omg , OMAction action ) { if ( thingToCreate != null ) { drawingTool . resetGUIWhenDeactivated ( BOOL_ ) ; } omdtmm = null ; }
public int inverse ( int a ) { int d = ( NUM_ << degree ) - NUM_ ; return exp ( a , d ) ; }
public void testAddValue ( ) { DefaultCategoryDataset d1 = new DefaultCategoryDataset ( ) ; d1 . addValue ( null , STR_ , STR_ ) ; assertNull ( d1 . getValue ( STR_ , STR_ ) ) ; d1 . addValue ( new Double ( NUM_ ) , STR_ , STR_ ) ; assertEquals ( new Double ( NUM_ ) , d1 . getValue ( STR_ , STR_ ) ) ; boolean pass = BOOL_ ; try { d1 . addValue ( new Double ( NUM_ ) , null , STR_ ) ; } catch ( IllegalArgumentException e ) { pass = BOOL_ ; } assertTrue ( pass ) ; }
public int addTmpStore ( IMXStore store ) { if ( null != store ) { int pos = mTmpStores . indexOf ( store ) ; if ( pos < NUM_ ) { mTmpStores . add ( store ) ; pos = mTmpStores . indexOf ( store ) ; } return pos ; } return - NUM_ ; }
public String printTree ( ) { String output = STR_ + this . value . toString ( ) ; if ( this . children == null || this . children . isEmpty ( ) ) { return output ; } output += STR_ ; BFINode < EL > currentNode ; for ( int i = NUM_ ; i < this . children . size ( ) ; i ++ ) { currentNode = this . children . get ( i ) ; output += currentNode . printTree ( ) ; } output += STR_ ; return output ; }
public void receive ( T t ) { if ( mDecimationPointer == NUM_ ) { if ( mListener != null ) { mListener . receive ( t ) ; } } mDecimationPointer ++ ; if ( mDecimationPointer == mDecimationFactor ) { mDecimationPointer = NUM_ ; } }
public abstract void writeData ( HierarchicalStreamWriter writer ) ;
public static Ignite start ( IgniteConfiguration cfg , boolean failIfStarted ) throws IgniteCheckedException { return start ( cfg , null , failIfStarted ) ; }
public static void copyInternal ( FloatBuffer buf , int fromPos , int toPos , int length ) { float [ ] data = new float [ length ] ; buf . position ( fromPos ) ; buf . get ( data ) ; buf . position ( toPos ) ; buf . put ( data ) ; }
public static void assertNoMoreVCards ( StreamReader reader ) { try { assertNull ( reader . readNext ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }
public static String formatDateRange ( Context context , long startMillis , long endMillis , int flags ) { return mTZUtils . formatDateRange ( context , startMillis , endMillis , flags ) ; }
protected final void writeB ( ByteBuffer buf , byte [ ] data ) { buf . put ( data ) ; }
public Map < URI , List < URI > > addTargetVolumeFullCopies ( ) { List < URI > fullCopies = Lists . newArrayList ( ) ; Map < URI , List < URI > > fullCopiesMap = new HashMap < > ( ) ; URI targetCG = null ; for ( URI volumeId : uris ( volumeIds ) ) { List < URI > targets = getTargets ( volumeId ) ; for ( URI target : targets ) { if ( targetCG == null ) { targetCG = getConsistencyGroup ( target ) ; } List < URI > volumeFullCopies = getFullCopies ( target ) ; fullCopies . addAll ( volumeFullCopies ) ; fullCopiesMap . put ( target , volumeFullCopies ) ; } } if ( ! fullCopies . isEmpty ( ) && targetCG != null ) { BlockStorageUtils . addVolumesToConsistencyGroup ( targetCG , fullCopies ) ; } return fullCopiesMap ; }
public void registerReceiver ( BroadcastReceiver receiver , IntentFilter filter ) { synchronized ( mReceivers ) { ReceiverRecord entry = new ReceiverRecord ( filter , receiver ) ; ArrayList < IntentFilter > filters = mReceivers . get ( receiver ) ; if ( filters == null ) { filters = new ArrayList < IntentFilter > ( NUM_ ) ; mReceivers . put ( receiver , filters ) ; } filters . add ( filter ) ; for ( int i = NUM_ ; i < filter . countActions ( ) ; i ++ ) { String action = filter . getAction ( i ) ; ArrayList < ReceiverRecord > entries = mActions . get ( action ) ; if ( entries == null ) { entries = new ArrayList < ReceiverRecord > ( NUM_ ) ; mActions . put ( action , entries ) ; } entries . add ( entry ) ; } } }
void toByteBuffer ( ByteBuffer buffer , T object ) throws IOException , UnsupportedOperationException ;
float asFloat ( ) ;
long length ( ) { return length ; }
private int remoteAddPois ( List < Poi > pois , String changeSetId ) { int count = NUM_ ; for ( Poi poi : pois ) { if ( remoteAddPoi ( poi , changeSetId ) ) { count ++ ; } } return count ; }
private void updateProgress ( int progress ) { if ( myHost != null && progress != previousProgress ) { myHost . updateProgress ( progress ) ; } previousProgress = progress ; }
public boolean isConstructor ( ) { return ( Objects . equal ( this . getName ( ) , STR_ ) && ( ! this . isStatic ( ) ) ) ; }
public Property property ( DateTimeFieldType type ) { return new Property ( this , indexOfSupported ( type ) ) ; }
private void fillPermissonHandled ( ) { IBaseDao < Addition , Integer > additionDao = getDaoFactory ( ) . getDAO ( Addition . TYPE_ID ) ; hql = getQuery ( ) ; attachmentList = new ArrayList < Attachment > ( ) ; for ( Object o : additionDao . findByQuery ( hql , paramNames , params ) ) { if ( o instanceof Attachment ) { attachmentList . add ( ( Attachment ) o ) ; } } }
public Snapshot newSnapshot ( ) { return createSnapshot ( new TranslogReader [ NUM_ ] ) ; }
public boolean isBoolean ( ) { return BOOL_ ; }
protected Node deepExport ( Node n , AbstractDocument d ) { super . deepExport ( n , d ) ; AbstractNotation an = ( AbstractNotation ) n ; an . nodeName = nodeName ; an . publicId = publicId ; an . systemId = systemId ; return n ; }
private BaseWatchMeFragment openFragment ( FragmentManager manager , BaseWatchMeFragment fragment , Bundle args , String name ) { if ( args != null ) { fragment . setArguments ( args ) ; } manager . beginTransaction ( ) . replace ( R . id . container , fragment , name ) . addToBackStack ( name ) . setTransition ( FragmentTransaction . TRANSIT_FRAGMENT_OPEN ) . commit ( ) ; return fragment ; }
static HttpHeaders of ( int statusCode ) { return of ( HttpStatus . valueOf ( statusCode ) ) ; }
public static Stream < Transaction > streamDefault ( final Transaction transaction ) { return streamSelfAndFirstChildTransactions ( transaction ) ; }
private void showFeedback ( String message ) { if ( myHost != null ) { myHost . showFeedback ( message ) ; } else { System . out . println ( message ) ; } }
public void testVerifyJBossHomeWhenFileInsteadOfDirectory ( ) throws Exception { this . fsManager . resolveFile ( STR_ ) . createFile ( ) ; try { this . container . verifyJBossHome ( ) ; fail ( STR_ ) ; } catch ( ContainerException expected ) { assertEquals ( STR_ + STR_ + STR_ , expected . getMessage ( ) ) ; } }
private long computeAge ( long nowMillis ) { long apparentReceivedAge = servedDate != null ? Math . max ( NUM_ , receivedResponseMillis - servedDate . getTime ( ) ) : NUM_ ; long receivedAge = ageSeconds != - NUM_ ? Math . max ( apparentReceivedAge , TimeUnit . SECONDS . toMillis ( ageSeconds ) ) : apparentReceivedAge ; long responseDuration = receivedResponseMillis - sentRequestMillis ; long residentDuration = nowMillis - receivedResponseMillis ; return receivedAge + responseDuration + residentDuration ; }
protected String convertLevelName ( String levelName ) { switch ( levelName ) { case STR_ : return STR_ ; case STR_ : return STR_ ; case STR_ : return STR_ ; case STR_ : return STR_ ; default : return STR_ ; } }
public static ZoneTransferIn newAXFR ( Name zone , SocketAddress address , TSIG key ) { return new ZoneTransferIn ( zone , Type . AXFR , NUM_ , BOOL_ , address , key ) ; }
public abstract int size ( ) ;
void rightFloatValueChanged ( short unit , float value ) throws DOMException ;
private static int checkTypeArgument ( final String signature , int pos ) { char c = getChar ( signature , pos ) ; if ( c == STR_ ) { return pos + NUM_ ; } else if ( c == STR_ || c == STR_ ) { pos ++ ; } return checkFieldTypeSignature ( signature , pos ) ; }
private void printGrantedAuthorities ( final Auth0JWTToken principal ) { for ( final GrantedAuthority grantedAuthority : principal . getAuthorities ( ) ) { final String authority = grantedAuthority . getAuthority ( ) ; logger . info ( authority ) ; } }
public static boolean isMiddleMouseButton ( MouseEvent anEvent ) { return ( ( anEvent . getModifiersEx ( ) & InputEvent . BUTTON2_DOWN_MASK ) != NUM_ || anEvent . getButton ( ) == MouseEvent . BUTTON2 ) ; }
void rollback ( EntityContext entityContext ) throws SortServiceProviderException ;
public ISchedulingRule deleteRule ( IResource resource ) { if ( resource . getType ( ) == IResource . ROOT ) return root ; return factoryFor ( resource ) . deleteRule ( resource ) ; }
private synchronized void expungeStaleEntries ( ) { if ( size == NUM_ ) return ; Object r ; while ( ( r = queue . poll ( ) ) != null ) { Entry e = ( Entry ) r ; unlink ( e ) ; int h = e . hash ; int i = indexFor ( h , table . length ) ; Entry prev = table [ i ] ; Entry p = prev ; while ( p != null ) { Entry next = p . next ; if ( p == e ) { if ( prev == e ) table [ i ] = next ; else prev . next = next ; e . next = null ; size -- ; break ; } prev = p ; p = next ; } } }
public static String encodeWebSafe ( byte [ ] source , boolean doPadding ) { return encode ( source , NUM_ , source . length , WEBSAFE_ALPHABET , doPadding ) ; }
public final boolean isLineHighlightEnabled ( ) { return lineHighlight ; }
public void post ( String message ) { if ( mPrintStream != null ) { log . info ( STR_ + message ) ; mPrintStream . print ( message + STR_ ) ; mLastPostTime = SystemClock . elapsedRealtime ( ) ; } }
public void firePropertyChange ( String propertyName , short oldValue , short newValue ) { }
abstract FileDescriptor duplicateForMapping ( FileDescriptor fd ) throws IOException ;
public int nextInt ( ) { return nextInt ( this . mean ) ; }
public Classification ( Collection < T > featureset , K category , float probability ) { this . featureset = featureset ; this . category = category ; this . probability = probability ; }
private java . lang . String registerPrefix ( javax . xml . stream . XMLStreamWriter xmlWriter , java . lang . String namespace ) throws javax . xml . stream . XMLStreamException { java . lang . String prefix = xmlWriter . getPrefix ( namespace ) ; if ( prefix == null ) { prefix = generatePrefix ( namespace ) ; while ( xmlWriter . getNamespaceContext ( ) . getNamespaceURI ( prefix ) != null ) { prefix = org . apache . axis2 . databinding . utils . BeanUtil . getUniquePrefix ( ) ; } xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } return prefix ; }
private String justifyTextLine ( TextPaint textPaint , String lineString , int textAreaWidth ) { int gapIndex = NUM_ ; float lineWidth = textPaint . measureText ( lineString ) ; while ( lineWidth < textAreaWidth && lineWidth > NUM_ ) { gapIndex = lineString . indexOf ( STR_ , gapIndex + NUM_ ) ; if ( gapIndex == - NUM_ ) { gapIndex = NUM_ ; gapIndex = lineString . indexOf ( STR_ , gapIndex + NUM_ ) ; if ( gapIndex == - NUM_ ) return lineString ; } lineString = lineString . substring ( NUM_ , gapIndex ) + STR_ + lineString . substring ( gapIndex + NUM_ , lineString . length ( ) ) ; lineWidth = textPaint . measureText ( lineString ) ; } return lineString ; }
FourthMoment ( ) { super ( ) ; m4 = Double . NaN ; }
public static ComponentUI createUI ( JComponent x ) { return new MotifSplitPaneUI ( ) ; }
public int writeMessage ( ) throws IOException ;
protected static void remoteCreateRegion ( String name , Scope scope ) throws CacheException { Region root = getRootRegion ( ) ; AttributesFactory factory = new AttributesFactory ( ) ; factory . setScope ( scope ) ; Region newRegion = root . createSubregion ( name , factory . create ( ) ) ; LogWriterUtils . getLogWriter ( ) . info ( STR_ + newRegion . getFullPath ( ) + STR_ ) ; }
public void statValueUnchanged ( long time ) ;
public static void changeFont ( JComponent comp , double scaleFactor , int style ) { Font font = comp . getFont ( ) ; font = scale ( font , scaleFactor ) ; comp . setFont ( font . deriveFont ( style ) ) ; }
public ISAdapterIterator makeEntriesIter ( ITemplateHolder template , long SCNFilter , long leaseFilter , IServerTypeDesc [ ] subClasses ) throws SAException { return null ; }
private void removeTask ( String map , String taskId ) { synchronized ( getRequestStatusMap ( map ) ) { getRequestStatusMap ( map ) . remove ( taskId ) ; } }
public boolean isSaveInHistoric ( ) { Object oo = get_Value ( COLUMNNAME_IsSaveInHistoric ) ; if ( oo != null ) { if ( oo instanceof Boolean ) return ( ( Boolean ) oo ) . booleanValue ( ) ; return STR_ . equals ( oo ) ; } return BOOL_ ; }
public String globalInfo ( ) { return STR_ + STR_ + STR_ + STR_ + getTechnicalInformation ( ) . toString ( ) ; }
public long readUnsignedLongToLong ( ) { long result = readLong ( ) ; if ( result < NUM_ ) { throw new IllegalStateException ( STR_ + result ) ; } return result ; }
public void addNamespace ( String prefix , String uri ) { prefixUriMap . put ( prefix , uri ) ; }
void removeScriptTreeTransferHandler ( Class < ? > klass ) ;
public void patchLibraries ( ) { patchHandlerImplementation ( ) ; patchThreadImplementation ( ) ; }
public DoubleMatrix ( ) { }
public void clear ( ) { final Segment < K , V > [ ] segments = this . segments ; for ( int j = NUM_ ; j < segments . length ; ++ j ) { Segment < K , V > s = segmentAt ( segments , j ) ; if ( s != null ) s . clear ( ) ; } }
protected void failAtomicPut ( int k ) { try { jcache ( NUM_ ) . put ( new TestKey ( String . valueOf ( k ) ) , STR_ ) ; assert BOOL_ : STR_ ; } catch ( CacheException e ) { assert X . hasCause ( e , IOException . class ) ; } assert readCnt . get ( ) == NUM_ ; }
public int restrictionStart ( ) { return mRestriction == null ? - NUM_ : mRestriction . getStart ( ) ; }
public String outputString ( DocType doctype ) { StringWriter out = new StringWriter ( ) ; try { output ( doctype , out ) ; } catch ( IOException e ) { } return out . toString ( ) ; }
public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case NUM_ : return HEADER ; case NUM_ : return NODE ; default : return null ; } }
static < E extends Throwable > DoublePredicateWithThrowable < E > asDoublePredicateWithThrowable ( final DoublePredicate doublepredicate ) { return null ; }
public void connect ( jmri . jmrix . loconet . LnTrafficController t ) { if ( t != null ) { t . addLocoNetListener ( ~ NUM_ , this ) ; } }
public void characters ( String chars ) throws SAXException { final int length = chars . length ( ) ; if ( length > m_charsBuff . length ) { m_charsBuff = new char [ length * NUM_ + NUM_ ] ; } chars . getChars ( NUM_ , length , m_charsBuff , NUM_ ) ; this . characters ( m_charsBuff , NUM_ , length ) ; }
protected static < T extends Sdk > UpdateType computeUpdateType ( T oldSdk , T newSdk , boolean isNewSdkDefault , SdkSet < T > sdkSet , String containerId ) { UpdateType updateType = isNewSdkDefault ? UpdateType . DEFAULT_CONTAINER : UpdateType . NAMED_CONTAINER ; if ( oldSdk != null ) { IClasspathEntry [ ] oldClasspathEntries = oldSdk . getClasspathEntries ( ) ; if ( oldClasspathEntries . length != NUM_ || ClasspathUtilities . findClasspathEntryContainer ( oldClasspathEntries , containerId ) == null ) { updateType = UpdateType . RAW ; } } if ( updateType != UpdateType . RAW && newSdk != null ) { if ( sdkSet . findSdk ( newSdk . getName ( ) ) == null ) { updateType = UpdateType . RAW ; } } return updateType ; }
protected String encode ( final String value ) { try { return URLEncoder . encode ( value , STR_ ) ; } catch ( Exception exp ) { return value ; } }
public void reset ( ) { packetCount = NUM_ ; octetCount = NUM_ ; setLong ( packetCount , NUM_ , NUM_ ) ; setLong ( octetCount , NUM_ , NUM_ ) ; delta = now = oldnow = NUM_ ; }
public LMDirichletSimilarity ( ) { this ( NUM_ ) ; }
private void assertNamespaceIamRoleAuthorizationNotExist ( NamespaceEntity namespaceEntity ) { if ( CollectionUtils . isNotEmpty ( namespaceIamRoleAuthorizationDao . getNamespaceIamRoleAuthorizations ( namespaceEntity ) ) ) { throw new AlreadyExistsException ( String . format ( STR_ , namespaceEntity . getCode ( ) ) ) ; } }
public void endElement ( String uri , String lname , String qname ) throws org . xml . sax . SAXException { if ( uri == null ) { String msg = Logging . getMessage ( STR_ ) ; Logging . logger ( ) . severe ( msg ) ; throw new IllegalArgumentException ( msg ) ; } if ( lname == null ) { String msg = Logging . getMessage ( STR_ ) ; Logging . logger ( ) . severe ( msg ) ; throw new IllegalArgumentException ( msg ) ; } if ( qname == null ) { String msg = Logging . getMessage ( STR_ ) ; Logging . logger ( ) . severe ( msg ) ; throw new IllegalArgumentException ( msg ) ; } if ( this . currentElement != null ) { this . currentElement . endElement ( uri , lname , qname ) ; if ( lname . equalsIgnoreCase ( this . currentElement . elementName ) ) this . currentElement = null ; } this . doEndElement ( uri , lname , qname ) ; this . currentCharacters = null ; }
public static boolean isNullValue ( String s ) { return ! isNotNullValue ( s ) ; }
private void linkFirst ( E e ) { checkNotNull ( e ) ; final Node < E > newNode = new Node < E > ( e ) ; restartFromHead : for ( ; ; ) for ( Node < E > h = head , p = h , q ; ; ) { if ( ( q = p . prev ) != null && ( q = ( p = q ) . prev ) != null ) p = ( h != ( h = head ) ) ? h : q ; else if ( p . next == p ) continue restartFromHead ; else { newNode . lazySetNext ( p ) ; if ( p . casPrev ( null , newNode ) ) { if ( p != h ) casHead ( h , newNode ) ; return ; } } } }
public void addFirst ( E e ) { Node < E > newNode = new Node < > ( e ) ; newNode . next = head ; head = newNode ; size ++ ; if ( tail == null ) tail = head ; }
protected void sequence_Group ( ISerializationContext context , Group semanticObject ) { genericSequencer . createSequence ( context , semanticObject ) ; }
protected void installListeners ( ) { super . installListeners ( ) ; table . addPropertyChangeListener ( this ) ; }
public boolean isCritical ( ) { return BOOL_ ; }
public void visitAttribute ( Attribute attr ) { if ( fv != null ) { fv . visitAttribute ( attr ) ; } }
public static boolean deleteFiles ( File directory ) { boolean result = BOOL_ ; if ( directory . isDirectory ( ) ) { File [ ] list = directory . listFiles ( ) ; for ( int i = list . length ; i -- > NUM_ ; ) { File file = list [ i ] ; if ( file . isFile ( ) ) { result = result && file . delete ( ) ; } } } return result ; }
public static PrettyPrint indentWithTabs ( ) { return new PrettyPrint ( new char [ ] { STR_ } ) ; }
private void addOperators ( ListItem column , Listbox listOperator ) { String columnName = column . getValue ( ) . toString ( ) ; log . config ( STR_ + columnName ) ; if ( columnName . endsWith ( STR_ ) || columnName . endsWith ( STR_ ) ) { addOperators ( MQuery . OPERATORS_ID , listOperator ) ; } else if ( columnName . startsWith ( STR_ ) ) { addOperators ( MQuery . OPERATORS_YN , listOperator ) ; } else { addOperators ( MQuery . OPERATORS , listOperator ) ; } }
String popImportURL ( ) { return ( String ) m_importStack . pop ( ) ; }
boolean putFloat ( final String entry , float value , boolean commit ) ;
protected void tearDown ( ) { try { ds . close ( ) ; sds . close ( ) ; } catch ( Exception e ) { } }
protected void buildShape ( BridgeContext ctx , Element e , ShapeNode shapeNode ) { try { SVGOMEllipseElement ee = ( SVGOMEllipseElement ) e ; AbstractSVGAnimatedLength _cx = ( AbstractSVGAnimatedLength ) ee . getCx ( ) ; float cx = _cx . getCheckedValue ( ) ; AbstractSVGAnimatedLength _cy = ( AbstractSVGAnimatedLength ) ee . getCy ( ) ; float cy = _cy . getCheckedValue ( ) ; AbstractSVGAnimatedLength _rx = ( AbstractSVGAnimatedLength ) ee . getRx ( ) ; float rx = _rx . getCheckedValue ( ) ; AbstractSVGAnimatedLength _ry = ( AbstractSVGAnimatedLength ) ee . getRy ( ) ; float ry = _ry . getCheckedValue ( ) ; shapeNode . setShape ( new Ellipse2D . Float ( cx - rx , cy - ry , rx * NUM_ , ry * NUM_ ) ) ; } catch ( LiveAttributeException ex ) { throw new BridgeException ( ctx , ex ) ; } }
public static String incrementAtIndex ( final String s , final int index ) { final char [ ] chars = s . toCharArray ( ) ; chars [ index ] = ( char ) ( chars [ index ] + NUM_ ) ; return new String ( chars ) ; }
private String stateToString ( long s ) { return super . toString ( ) + STR_ + phaseOf ( s ) + STR_ + partiesOf ( s ) + STR_ + arrivedOf ( s ) + STR_ ; }
public PBEMSetupPanel ( final GameSelectorModel model ) { m_gameSelectorModel = model ; m_diceServerEditor = new SelectAndViewEditor ( STR_ , STR_ ) ; m_forumPosterEditor = new SelectAndViewEditor ( STR_ , STR_ ) ; m_emailSenderEditor = new SelectAndViewEditor ( STR_ , STR_ ) ; m_webPosterEditor = new SelectAndViewEditor ( STR_ , STR_ ) ; createComponents ( ) ; layoutComponents ( ) ; setupListeners ( ) ; if ( m_gameSelectorModel . getGameData ( ) != null ) { loadAll ( ) ; } setWidgetActivation ( ) ; }
public static Userprofiles merge ( Userprofiles ... userprofiles ) { Userprofiles result = new Userprofiles ( ) ; Map < String , Boolean > existMap = new HashMap < String , Boolean > ( ) ; for ( Userprofiles userprofilesContainer : userprofiles ) { for ( Userprofile up : userprofilesContainer . getUserprofile ( ) ) { if ( ! existMap . containsKey ( up . getLogin ( ) ) ) { existMap . put ( up . getLogin ( ) , Boolean . TRUE ) ; result . getUserprofile ( ) . add ( up ) ; } } } return result ; }
public boolean isFlagSet ( short flag ) ;
protected void checkAntVersion ( Hashtable h ) { if ( null == h ) h = new Hashtable ( ) ; try { final String ANT_VERSION_CLASS = STR_ ; final String ANT_VERSION_METHOD = STR_ ; final Class noArgs [ ] = new Class [ NUM_ ] ; Class clazz = ObjectFactory . findProviderClass ( ANT_VERSION_CLASS , ObjectFactory . findClassLoader ( ) , BOOL_ ) ; Method method = clazz . getMethod ( ANT_VERSION_METHOD , noArgs ) ; Object returnValue = method . invoke ( null , new Object [ NUM_ ] ) ; h . put ( VERSION + STR_ , ( String ) returnValue ) ; } catch ( Exception e ) { h . put ( VERSION + STR_ , CLASS_NOTPRESENT ) ; } }
private boolean ignoredMessage ( GridIoMessage msg ) { return ignoreMsgCls != null && ignoreMsgCls . isAssignableFrom ( msg . message ( ) . getClass ( ) ) ; }
private MarkupContainer createNegativeItemAllocationResultFragment ( final String sku ) { final ProductSku productSku = productServiceFacade . getProductSkuBySkuCode ( sku ) ; final Map < String , Object > param = new HashMap < String , Object > ( ) ; param . put ( STR_ , getI18NSupport ( ) . getFailoverModel ( productSku . getDisplayName ( ) , productSku . getName ( ) ) . getValue ( getLocale ( ) . getLanguage ( ) ) ) ; param . put ( STR_ , sku ) ; final String errorMessage = WicketUtil . createStringResourceModel ( this , ALLOCATION_DETAIL , param ) . getString ( ) ; error ( errorMessage ) ; return new Fragment ( RESULT_CONTAINER , NEGATIVE_ALLOCATION_RESULT_FRAGMENT , this ) . add ( new Label ( ALLOCATION_DETAIL , errorMessage ) ) ; }
public void testUnsizedIntsCountSeq ( ) { LongAdder counter = new LongAdder ( ) ; SplittableRandom r = new SplittableRandom ( ) ; long size = NUM_ ; r . ints ( ) . limit ( size ) . forEach ( null ) ; assertEquals ( counter . sum ( ) , size ) ; }
public void flip ( BufferedReader reader , PrintStream out ) throws IOException { String line = reader . readLine ( ) ; while ( line != null ) { if ( ! line . startsWith ( STR_ ) ) { line = new StringBuilder ( line ) . reverse ( ) . toString ( ) . replace ( STR_ , STR_ ) . replace ( STR_ , STR_ ) . replace ( STR_ , STR_ ) ; } out . println ( line ) ; line = reader . readLine ( ) ; } }
public boolean okToSend ( ) { return ( BOOL_ ) ; }
public abstract void resetFilter ( RecommendationRequest request ) ;
protected void sequence_BootstrapModule ( ISerializationContext context , BootstrapModule semanticObject ) { genericSequencer . createSequence ( context , semanticObject ) ; }
Tree importNextTree ( ) throws IOException , Importer . ImportException ;
public CStackViewSynchronizer ( final JStackView stackView , final CStackMemoryProvider model , final CDebugPerspectiveModel debugPerspectiveModel ) { Preconditions . checkNotNull ( stackView , STR_ ) ; Preconditions . checkNotNull ( model , STR_ ) ; Preconditions . checkNotNull ( debugPerspectiveModel , STR_ ) ; m_stackView = stackView ; m_model = model ; m_debugPerspectiveModel = debugPerspectiveModel ; m_debugPerspectiveModel . addListener ( m_listener ) ; synchronizeDebuggers ( null , m_debugPerspectiveModel . getCurrentSelectedDebugger ( ) ) ; }
public void readRegisters ( ) throws DebugException { try { m_debugger . readRegisters ( ) ; } catch ( final DebugExceptionWrapper e ) { throw new DebugException ( e ) ; } }
private static void parseInstruction ( final Matcher matcher , final MachineState state , final int lineNumber , final List < Validator > validators ) throws ParseException { final String name = matcher . group ( STR_ ) ; if ( name == null ) { return ; } final Instruction instruction = EMITTER_MAP . getOrDefault ( name , EMITTER_MISSING ) . compile ( matcher , lineNumber , validators ) ; state . lineNumbers . put ( state . instructions . size ( ) , lineNumber ) ; state . instructions . add ( instruction ) ; }
private int monthLength ( int month ) { assert jdate . isNormalized ( ) ; return jdate . isLeapYear ( ) ? GregorianCalendar . LEAP_MONTH_LENGTH [ month ] : GregorianCalendar . MONTH_LENGTH [ month ] ; }
public BlowfishCipher ( ) { core = new CipherCore ( new BlowfishCrypt ( ) , BlowfishConstants . BLOWFISH_BLOCK_SIZE ) ; }
public boolean isToHoist ( FunctionDeclaration element ) { return isTaggedAs ( Tag . toHoist , element ) ; }
protected AbstractFloatList ( ) { }
public GroupAction ( DrawingEditor editor ) { this ( editor , new GroupFigure ( ) , BOOL_ ) ; }
public abstract Equality < ? super E > equality ( ) ;
public static Object invokeMethod ( Class < ? > clazz , Object obj , String name , Class < ? > [ ] parameterTypes , Object [ ] args ) throws NoSuchMethodException , InvocationTargetException , IllegalAccessException { if ( clazz == null || obj == null || name == null ) { throw new IllegalArgumentException ( STR_ ) ; } if ( parameterTypes != null && args != null && parameterTypes . length > NUM_ && args . length > NUM_ ) { if ( parameterTypes . length == args . length ) { Method method = clazz . getDeclaredMethod ( name , parameterTypes ) ; if ( ! method . isAccessible ( ) ) { method . setAccessible ( BOOL_ ) ; } return method . invoke ( obj , args ) ; } } else { Method method = clazz . getDeclaredMethod ( name ) ; if ( ! method . isAccessible ( ) ) { method . setAccessible ( BOOL_ ) ; } return method . invoke ( obj ) ; } return null ; }
public void stop ( ) { if ( mCacheDispatcher != null ) { mCacheDispatcher . quit ( ) ; } for ( int i = NUM_ ; i < mDispatchers . length ; i ++ ) { if ( mDispatchers [ i ] != null ) { mDispatchers [ i ] . quit ( ) ; } } }
public static byte [ ] decode ( byte [ ] data , byte [ ] key ) throws Exception { SecretKey securekey = new SecretKeySpec ( key , STR_ ) ; Cipher cipher = Cipher . getInstance ( STR_ ) ; IvParameterSpec zeroIv = new IvParameterSpec ( iv ) ; cipher . init ( Cipher . DECRYPT_MODE , securekey , zeroIv ) ; return cipher . doFinal ( data ) ; }
public static void showCommandLineOptions ( ) { showCommandLineOptions ( new TextUICommandLine ( ) ) ; }
private void saveSelection ( ) { log . info ( STR_ ) ; miniTable . editingStopped ( new ChangeEvent ( this ) ) ; ArrayList < Integer > results = new ArrayList < Integer > ( ) ; selection = null ; int rows = miniTable . getRowCount ( ) ; for ( int i = NUM_ ; i < rows ; i ++ ) { IDColumn id = ( IDColumn ) miniTable . getValueAt ( i , NUM_ ) ; if ( id != null && id . isSelected ( ) ) results . add ( id . getRecord_ID ( ) ) ; } if ( results . size ( ) == NUM_ ) return ; log . config ( STR_ + results . size ( ) ) ; selection = results ; }
public static native String readStringPropertyValue ( JavaScriptObject object , String property ) ;
public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; Text textNode ; Text splitNode ; String value ; doc = ( Document ) load ( STR_ , BOOL_ ) ; elementList = doc . getElementsByTagName ( STR_ ) ; nameNode = elementList . item ( NUM_ ) ; textNode = ( Text ) nameNode . getFirstChild ( ) ; splitNode = textNode . splitText ( NUM_ ) ; value = textNode . getNodeValue ( ) ; assertEquals ( STR_ , STR_ , value ) ; }
void executeCallback ( JmsSenderTemplateCallback callback ) throws JMSException ;
public void restoreTabs ( boolean setActiveTab ) { if ( setActiveTab ) { while ( ! mTabsToRestore . isEmpty ( ) && mNormalTabsRestored . size ( ) == NUM_ && mIncognitoTabsRestored . size ( ) == NUM_ ) { TabRestoreDetails tabToRestore = mTabsToRestore . removeFirst ( ) ; restoreTab ( tabToRestore , BOOL_ ) ; } } loadNextTab ( ) ; }
public static UpdateTicker . ThreadTicker threadTicker ( ) { return instance . threadTicker ; }
public boolean isRestartEnabled ( ) ;
public SpecificInsteonLight ( String systemName , SerialTrafficController tc ) { super ( systemName , tc ) ; this . tc = tc ; }
public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ResurrectPositional_ME_TO_B ( String skilltarget , String skillcaster , String skillname ) { return new SM_SYSTEM_MESSAGE ( NUM_ , skilltarget , skillcaster , skillname ) ; }
public boolean write ( byte [ ] audioData ) { return write ( audioData , NUM_ , audioData . length ) ; }
void printMessage ( Diagnostic . Kind kind , CharSequence msg ) ;
protected HttpURLConnection createPut ( String uri ) throws IOException { return createConnection ( uri , METHOD_PUT ) ; }
public boolean isEncrypted ( ) { if ( m_vo . IsEncryptedField ) return BOOL_ ; String ob = getObscureType ( ) ; if ( ob != null && ob . length ( ) > NUM_ ) return BOOL_ ; return m_vo . ColumnName . equals ( STR_ ) ; }
public boolean isCanceled ( ) { return mCanceled ; }
public static < T > Iterable < T > Iterable ( T object ) { return null ; }
public long cardinality ( ) { return BitUtil . pop_array ( bits , NUM_ , numWords ) ; }
public Array loadAsArray ( PageContext pc , String name , Struct filter ) throws PageException ;
private void addDroppableObjects ( RPObject obj , List < Pair < RPObject , RPSlot > > list ) { boolean droppable = BOOL_ ; for ( RPSlot slot : obj . slots ( ) ) { for ( RPObject subobj : slot ) { addDroppableObjects ( subobj , list ) ; droppable = BOOL_ ; } } if ( obj instanceof Item ) { Item item = ( Item ) obj ; if ( item . isBound ( ) || item . isUndroppableOnDeath ( ) ) { droppable = BOOL_ ; } } if ( droppable ) { list . add ( new Pair < RPObject , RPSlot > ( obj , obj . getContainerSlot ( ) ) ) ; } }
void addOutgoingGroupFileTransfer ( String fileTransferId , String chatId , MmContent content , MmContent fileIcon , Set < ContactId > recipients , State state , ReasonCode reasonCode , long timestamp , long timestampSent ) ;
public final String yytext ( ) { return new String ( zzBuffer , zzStartRead , zzMarkedPos - zzStartRead ) ; }
public Criteria or ( ) { Criteria criteria = createCriteriaInternal ( ) ; oredCriteria . add ( criteria ) ; return criteria ; }
public MutablePeriod ( long startInstant , long endInstant ) { super ( startInstant , endInstant , null , null ) ; }
public ToolBarLayout ( int axis ) { this . axis = axis ; }
protected S_OtherImpl ( ) { super ( ) ; }
public boolean isConstant ( ) { return BOOL_ ; }
void onMessage ( String message , RespokeEndpoint endpoint , RespokeGroup group , Date timestamp , Boolean didSend ) ;
public PerlinNoiseGenerator ( Random rand ) { offsetX = rand . nextDouble ( ) * NUM_ ; offsetY = rand . nextDouble ( ) * NUM_ ; offsetZ = rand . nextDouble ( ) * NUM_ ; for ( int i = NUM_ ; i < NUM_ ; i ++ ) { perm [ i ] = rand . nextInt ( NUM_ ) ; } for ( int i = NUM_ ; i < NUM_ ; i ++ ) { int pos = rand . nextInt ( NUM_ - i ) + i ; int old = perm [ i ] ; perm [ i ] = perm [ pos ] ; perm [ pos ] = old ; perm [ i + NUM_ ] = perm [ i ] ; } }
public static < T > void reverseForEach ( ArrayList < T > list , Procedure < ? super T > procedure ) { if ( ! list . isEmpty ( ) ) { ArrayListIterate . forEach ( list , list . size ( ) - NUM_ , NUM_ , procedure ) ; } }
public static Checker check ( Context context ) { return new Checker ( context ) ; }
int count ( ) ;
public void addLocation ( Destination destination ) { mMap . addMarker ( new MarkerOptions ( ) . position ( destination . position ) . icon ( MARKERICON_VISITED ) . anchor ( NUM_ , NUM_ ) . title ( MARKER_PAST ) . snippet ( Integer . toString ( destination . id ) ) ) ; }
void doReps ( ObjectOutputStream oout , ObjectInputStream oin , StreamBuffer sbuf , float [ ] [ ] arrays , int nbatches ) throws Exception { int ncycles = arrays . length ; for ( int i = NUM_ ; i < nbatches ; i ++ ) { sbuf . reset ( ) ; oout . reset ( ) ; for ( int j = NUM_ ; j < ncycles ; j ++ ) { oout . writeObject ( arrays [ j ] ) ; } oout . flush ( ) ; for ( int j = NUM_ ; j < ncycles ; j ++ ) { oin . readObject ( ) ; } } }
public boolean isEventCondition ( ) { return BOOL_ ; }
public ParticleSystem addModifier ( ParticleModifier modifier ) { mModifiers . add ( modifier ) ; return this ; }
public boolean isFilterPresence_out ( ) { return filterPresence_out ; }
private void handleEventBusRegistration ( IJAssignmentTarget fieldRef , HasLifecycleMethods holderWithLifecycleMethods ) { JBlock onStartBlock ; JBlock onStopBlock ; if ( holderWithLifecycleMethods instanceof EServiceHolder ) { onStartBlock = holderWithLifecycleMethods . getOnCreateAfterSuperBlock ( ) ; onStopBlock = holderWithLifecycleMethods . getOnDestroyBeforeSuperBlock ( ) ; } else { onStartBlock = holderWithLifecycleMethods . getOnStartAfterSuperBlock ( ) ; onStopBlock = holderWithLifecycleMethods . getOnStopBeforeSuperBlock ( ) ; } onStartBlock . invoke ( fieldRef , STR_ ) . arg ( JExpr . _this ( ) ) ; onStopBlock . invoke ( fieldRef , STR_ ) . arg ( JExpr . _this ( ) ) ; }
public void validateNamespacePermissions ( List < NamespacePermissionEnum > namespacePermissions ) throws IllegalArgumentException { Assert . isTrue ( ! CollectionUtils . isEmpty ( namespacePermissions ) , STR_ ) ; Set < NamespacePermissionEnum > validatedNamespacePermissions = new HashSet < > ( ) ; for ( NamespacePermissionEnum namespacePermission : namespacePermissions ) { if ( validatedNamespacePermissions . contains ( namespacePermission ) ) { throw new IllegalArgumentException ( String . format ( STR_ , namespacePermission . value ( ) ) ) ; } validatedNamespacePermissions . add ( namespacePermission ) ; } }
public abstract boolean isEmpty ( ) ;
protected BasicArchImpl ( int id , String name ) { _id = id ; _name = name ; }
public void attrModified ( Attr node , String oldv , String newv ) { if ( ! changing && baseVal != null ) { baseVal . invalidate ( ) ; } fireBaseAttributeListeners ( ) ; if ( ! hasAnimVal ) { fireAnimatedAttributeListeners ( ) ; } }
protected void engineSetMode ( String mode ) { if ( ! mode . equalsIgnoreCase ( STR_ ) ) { throw new IllegalArgumentException ( STR_ + mode ) ; } }
private static byte [ ] compress ( byte [ ] d ) { Deflater deflater = new Deflater ( ) ; deflater . setStrategy ( Deflater . HUFFMAN_ONLY ) ; deflater . setInput ( d ) ; deflater . finish ( ) ; ByteArrayOutputStream out2 = new ByteArrayOutputStream ( d . length ) ; byte [ ] buffer = new byte [ NUM_ ] ; while ( ! deflater . finished ( ) ) { int count = deflater . deflate ( buffer ) ; out2 . write ( buffer , NUM_ , count ) ; } deflater . end ( ) ; return out2 . toByteArray ( ) ; }
private static void createEntry ( String name , int ttl , ExpirationAction action , GenericListener l ) throws CacheException { Region region = getRegion ( ) ; AttributesFactory factory = new AttributesFactory ( region . getAttributes ( ) ) ; factory . setStatisticsEnabled ( BOOL_ ) ; factory . setEntryTimeToLive ( new ExpirationAttributes ( ttl , action ) ) ; factory . setScope ( SCOPE ) ; factory . setCacheListener ( l ) ; Region sub = region . createSubregion ( name , factory . create ( ) ) ; sub . create ( name , new Integer ( NUM_ ) , sub . getCache ( ) . getDistributedSystem ( ) . getDistributedMember ( ) ) ; }
public void onPositionChanged ( Slider view , boolean fromUser , float oldPos , float newPos , int oldValue , int newValue ) ;
float lengthSquared ( ) ;
public static < T > T unchecked ( Callable < T > callable , Code _finally ) { try { return callable . call ( ) ; } catch ( Exception e ) { return sneakyThrow ( e ) ; } finally { unchecked ( _finally ) ; } }
public static int [ ] convertIntegers ( List < Integer > integers ) { int [ ] ret = new int [ integers . size ( ) ] ; for ( int i = NUM_ ; i < ret . length ; i ++ ) { ret [ i ] = integers . get ( i ) . intValue ( ) ; } return ret ; }
public static _Fields findByName ( String name ) { return byName . get ( name ) ; }
public Date add ( final int days ) { return new Date ( this . serialNumber + days ) ; }
private void quit ( ) { if ( JOptionPane . YES_OPTION == CMessageBox . showYesNoCancelQuestion ( this , STR_ ) ) { m_currentTutorial . removeListener ( m_listener ) ; m_currentTutorial = null ; m_warningLabel . setText ( STR_ ) ; updateNextButton ( ) ; m_skipButton . setEnabled ( BOOL_ ) ; m_descriptionField . setText ( STR_ ) ; setVisible ( BOOL_ ) ; } }
public static void sort ( Comparable [ ] objects ) { if ( objects . length > NUM_ ) quickSort ( objects , NUM_ , objects . length - NUM_ ) ; }
public void cancelRequest ( ) { if ( mListener == null ) { return ; } BatchedImageRequest request = mInFlightRequests . get ( mCacheKey ) ; if ( request != null ) { boolean canceled = request . removeContainerAndCancelIfNecessary ( this ) ; if ( canceled ) { mInFlightRequests . remove ( mCacheKey ) ; } } else { request = mBatchedResponses . get ( mCacheKey ) ; if ( request != null ) { request . removeContainerAndCancelIfNecessary ( this ) ; if ( request . mContainers . size ( ) == NUM_ ) { mBatchedResponses . remove ( mCacheKey ) ; } } } }
int isDeviceAllowed ( String userId ) ;
void thirdChoiceClicked ( ) ;
public boolean isSleepingAllowed ( ) { return ( m_flags & e_autoSleepFlag ) == e_autoSleepFlag ; }
void updateCategoryOptionComboNames ( ) ;
private PostgreSQLTagFunctions ( ) { }
public ST createStringTemplateInternally ( CompiledST impl ) { ST st = createStringTemplate ( impl ) ; if ( trackCreationEvents && st . debugState != null ) { st . debugState . newSTEvent = null ; } return st ; }
public Element next ( ) { return theNext ; }
public Boolean isNetworkReservationSupported ( ) { return networkReservationSupported ; }
public void init ( ServletContext context ) throws ViewHandlerException ;
public IRole build ( ) throws MissingPermissionsException , RateLimitException , DiscordException { if ( guild == null ) throw new RuntimeException ( STR_ ) ; IRole role = guild . createRole ( ) ; if ( color != null ) role . changeColor ( color ) ; if ( name != null ) role . changeName ( name ) ; if ( permissions != null ) role . changePermissions ( permissions ) ; role . changeHoist ( hoist ) ; role . changeMentionable ( mentionable ) ; return role ; }
private int mergeVectors ( ) throws IOException { try ( TermVectorsWriter termVectorsWriter = codec . termVectorsFormat ( ) . vectorsWriter ( directory , mergeState . segmentInfo , context ) ) { return termVectorsWriter . merge ( mergeState ) ; } }
public static OrionEjbJarXml parseOracleEjbJarXml ( InputStream input ) throws IOException , JDOMException { OrionEjbJarXmlIo xio = new OrionEjbJarXmlIo ( ) ; return ( OrionEjbJarXml ) xio . parseXml ( input ) ; }
public void testThreeNodeSubmitQueryWithBoundedLinearizableConsistency ( ) throws Throwable { testSubmitQuery ( NUM_ , Query . ConsistencyLevel . LINEARIZABLE_LEASE ) ; }
private Class < ? > findDexClass ( String name ) throws TestFailed , InvocationTargetException { try { Class mDexClass = ClassLoader . getSystemClassLoader ( ) . loadClass ( STR_ ) ; Constructor ctor = mDexClass . getConstructor ( new Class [ ] { String . class } ) ; Object mDexFile = ctor . newInstance ( DEX_FILE ) ; Method meth = mDexClass . getMethod ( STR_ , new Class [ ] { String . class , ClassLoader . class } ) ; meth . invoke ( mDexFile , name , this ) ; } catch ( NoSuchMethodException nsme ) { throw new TestFailed ( nsme ) ; } catch ( InstantiationException ie ) { throw new TestFailed ( ie ) ; } catch ( IllegalAccessException iae ) { throw new TestFailed ( iae ) ; } catch ( ClassNotFoundException cnfe ) { throw new TestFailed ( cnfe ) ; } return null ; }
public BasenameList duplicate ( ) { return ( new BasenameList ( this . fromDir , this . fromExt , ( Vector ) ( this . bList . clone ( ) ) ) ) ; }
void onEditorModuleReady ( ) ;
public MarketAddQuery photoIds ( Integer ... value ) { return unsafeParam ( STR_ , value ) ; }
public static void createActions ( ListComponent owner ) { createActions ( owner , EnumSet . of ( ListActionType . CREATE , ListActionType . EDIT , ListActionType . REMOVE ) ) ; }
public double readPrecisionNumber ( boolean usePrecision ) throws IOException , ParsingException { return usePrecision ? readDouble ( ) : readFloat ( ) ; }
public Anonymous_complexAttribute_1_ createAnonymous_complexAttribute_1_ ( ) { Anonymous_complexAttribute_1_Impl anonymous_complexAttribute_1_ = new Anonymous_complexAttribute_1_Impl ( ) ; return anonymous_complexAttribute_1_ ; }
public void onRequestSuccess ( ) { showContent ( BOOL_ ) ; mLoadRetryLayout . setVisibility ( GONE ) ; }
static String javascriptEncode ( String text ) { return text . replace ( STR_ , STR_ ) . replace ( STR_ , STR_ ) . replace ( STR_ , STR_ ) . replace ( STR_ , STR_ ) ; }
public abstract IoBuffer putUnsignedInt ( int value ) ;
public Action ( Visualization vis ) { this ( vis , NUM_ ) ; }
public boolean isSpecial ( int column ) ;
public FloatBufferFactory ( boolean allocateDirect ) { super ( allocateDirect ) ; }
public abstract void addExtremeGravityPSR ( PilotingRollData psr ) ;
private void returnData ( Object ret ) { if ( pluginHost != null ) { pluginHost . returnData ( ret ) ; } }
public static int positiveModulo ( int a , int b ) { int mod = a % b ; return mod >= NUM_ ? mod : mod + b ; }
public double sumWithWeights ( ) { double dSum = NUM_ ; for ( TKeyType dKey : hDistro . keySet ( ) ) { if ( dKey instanceof Double ) dSum += ( ( Double ) dKey * getValue ( dKey ) ) ; else dSum += getValue ( dKey ) ; } return dSum ; }
public void changeShape ( Dimension min , Dimension pref , Dimension max ) { setMinimumSize ( min ) ; setPreferredSize ( pref ) ; setMaximumSize ( max ) ; revalidate ( ) ; }
public static Io . Builder < GraphSONIo > build ( final GraphSONVersion version ) { return new Builder ( version ) ; }
public ChunkedStriterator ( final Iterator < E > src ) { this ( IChunkedIterator . DEFAULT_CHUNK_SIZE , src ) ; }
public JsonArrayRequest ( int method , String url , JSONArray jsonRequest , Listener < JSONArray > listener , ErrorListener errorListener ) { super ( method , url , ( jsonRequest == null ) ? null : jsonRequest . toString ( ) , listener , errorListener ) ; }
public boolean expandPanel ( ) { if ( mFirstLayout ) { mSlideState = SlideState . EXPANDED ; return BOOL_ ; } else { return expandPanel ( NUM_ ) ; } }
public org . omg . CORBA . TCKind discriminator_kind ( ) ;
public boolean isVirtual ( ) { return BOOL_ ; }
public static < T > Filter < T > orFilter ( Filter < T > f1 , Filter < T > f2 ) { return ( new CombinedFilter < T > ( f1 , f2 , BOOL_ ) ) ; }
private static LimitSpec stripColumnsFromLimitSpec ( DruidFactQuery query ) { return ( ( GroupByQuery ) query ) . getLimitSpec ( ) == null ? null : ( ( GroupByQuery ) query ) . getLimitSpec ( ) . withColumns ( new LinkedHashSet < > ( ) ) ; }
public PhotosGetMarketUploadServerQuery cropWidth ( Integer value ) { return unsafeParam ( STR_ , value ) ; }
protected abstract AbstractContext inner ( ) ;
public void addAlTemp ( int f1 , int f2 , int e1 , int e2 ) { alGridCells [ f1 ] [ e1 ] . setTopLeft ( BOOL_ ) ; alGridCells [ f2 ] [ e1 ] . setTopRight ( BOOL_ ) ; alGridCells [ f1 ] [ e2 ] . setBottomLeft ( BOOL_ ) ; alGridCells [ f2 ] [ e2 ] . setBottomRight ( BOOL_ ) ; }
private void writeAttribute ( java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( namespace . equals ( STR_ ) ) { xmlWriter . writeAttribute ( attName , attValue ) ; } else { registerPrefix ( xmlWriter , namespace ) ; xmlWriter . writeAttribute ( namespace , attName , attValue ) ; } }
protected V create ( K key ) { return null ; }
protected synchronized void rememberLastThing ( UndoEvent event ) { if ( undoStack . size ( ) >= stackSize ) { undoStack . removeElementAt ( NUM_ ) ; } if ( logger . isLoggable ( Level . FINE ) ) { logger . fine ( STR_ + event . getDescription ( ) + STR_ ) ; } undoStack . push ( event ) ; }
public void reintializeQuota ( String volume ) { QuotaCommands commands = new QuotaCommands ( server . getNaServer ( ) ) ; commands . turnQuotaOff ( volume ) ; commands . turnQuotaOn ( volume ) ; }
private static boolean canFindLand ( final GameData data , final Unit unit , final Route route ) { final Territory routeEnd = route . getEnd ( ) ; final int movementLeft = getMovementLeftForAirUnitNotMovedYet ( unit , route ) ; return canFindLand ( data , unit , routeEnd , movementLeft ) ; }
public void resetProximityPositions ( ) { int nPredicates = getPredicateCount ( ) ; if ( nPredicates > NUM_ ) { if ( null == m_proximityPositions ) m_proximityPositions = new int [ nPredicates ] ; for ( int i = NUM_ ; i < nPredicates ; i ++ ) { try { initProximityPosition ( i ) ; } catch ( Exception e ) { throw new org . apache . xml . utils . WrappedRuntimeException ( e ) ; } } } }
private static String nextName ( String base ) { SessionEditorIndirectRef sessionEditorRef = DesktopController . getInstance ( ) . getFrontmostSessionEditor ( ) ; SessionEditor sessionEditor = ( SessionEditor ) sessionEditorRef ; SessionEditorWorkbench sessionWorkbench = sessionEditor . getSessionWorkbench ( ) ; SessionWrapper graph = sessionWorkbench . getSessionWrapper ( ) ; if ( base == null ) { throw new NullPointerException ( STR_ ) ; } int i = NUM_ ; loop : while ( BOOL_ ) { i ++ ; String name = base + i ; for ( Object o : graph . getNodes ( ) ) { Node node = ( Node ) ( o ) ; if ( node . getName ( ) . equals ( name ) ) { continue loop ; } } break ; } return base + i ; }
public void testDoConfigureCreatesFiles ( ) throws Exception { configuration . doConfigure ( container ) ; assertTrue ( fileHandler . exists ( DOMAIN_HOME + STR_ ) ) ; assertTrue ( fileHandler . exists ( DOMAIN_HOME + STR_ ) ) ; assertTrue ( fileHandler . exists ( DOMAIN_HOME + STR_ ) ) ; assertTrue ( fileHandler . exists ( DOMAIN_HOME + STR_ ) ) ; assertTrue ( fileHandler . exists ( DOMAIN_HOME + STR_ ) ) ; assertTrue ( fileHandler . exists ( DOMAIN_HOME + STR_ ) ) ; }
public void start ( ) { stop ( ) ; mCacheDispatcher = new CacheDispatcher ( mCacheQueue , mNetworkQueue , mCache , mDelivery ) ; mCacheDispatcher . start ( ) ; for ( int i = NUM_ ; i < mDispatchers . length ; i ++ ) { NetworkDispatcher networkDispatcher = new NetworkDispatcher ( mNetworkQueue , mNetwork , mCache , mDelivery ) ; mDispatchers [ i ] = networkDispatcher ; networkDispatcher . start ( ) ; } }
private static int findIndexOfFirstUserEntry ( List < IRuntimeClasspathEntry > entries ) { for ( int i = NUM_ , size = entries . size ( ) ; i < size ; i ++ ) { if ( entries . get ( i ) . getClasspathProperty ( ) == IRuntimeClasspathEntry . USER_CLASSES ) { return i ; } } return entries . size ( ) ; }
public static boolean checkValueIsTypeNotString ( Object value , Object name , Class type ) { if ( value != null ) { if ( type . isAssignableFrom ( value . getClass ( ) ) ) { return BOOL_ ; } else if ( value instanceof String ) { return BOOL_ ; } else { throw new RuntimeException ( STR_ + name + STR_ + type . getName ( ) + STR_ + value . getClass ( ) ) ; } } else { return BOOL_ ; } }
static ClassLoader findClassLoader ( ) throws ConfigurationError { SecuritySupport ss = SecuritySupport . getInstance ( ) ; ClassLoader context = ss . getContextClassLoader ( ) ; ClassLoader system = ss . getSystemClassLoader ( ) ; ClassLoader chain = system ; while ( BOOL_ ) { if ( context == chain ) { ClassLoader current = ObjectFactory . class . getClassLoader ( ) ; chain = system ; while ( BOOL_ ) { if ( current == chain ) { return system ; } if ( chain == null ) { break ; } chain = ss . getParentClassLoader ( chain ) ; } return current ; } if ( chain == null ) { break ; } chain = ss . getParentClassLoader ( chain ) ; } ; return context ; }
public Scanner ( String s ) { super ( s ) ; }
Optional < IdeaPluginDescriptor > findPlugin ( String pluginId ) ;
static MediaType createAudioType ( String subtype ) { return create ( AUDIO_TYPE , subtype ) ; }
public static void resetGlobalGcInvocationCount ( ) { VMDebug . resetAllocCount ( VMDebug . KIND_GLOBAL_GC_INVOCATIONS ) ; }
public GtfsParser ( String network , String schedule ) { this . sc = parseSchedule ( schedule , network ) ; this . trConfig = new TransitRouterConfig ( sc . getConfig ( ) ) ; this . trRouter = new TransitRouterImpl ( this . trConfig , sc . getTransitSchedule ( ) ) ; }
public JSONArray ( ) { this . myArrayList = new ArrayList < Object > ( ) ; }
private Map < URI , List < URI > > convertAssignmentsToURIs ( Map < Initiator , List < StoragePort > > assignments ) { HashMap < URI , List < URI > > assignmentMap = new HashMap < URI , List < URI > > ( ) ; for ( Initiator initiator : assignments . keySet ( ) ) { URI key = initiator . getId ( ) ; if ( assignmentMap . get ( key ) == null ) { assignmentMap . put ( key , new ArrayList < URI > ( ) ) ; } for ( StoragePort port : assignments . get ( initiator ) ) { assignmentMap . get ( key ) . add ( port . getId ( ) ) ; } } return assignmentMap ; }
protected abstract boolean isReadyForPullEnd ( ) ;
public static cuComplex cuConj ( cuComplex x ) { return cuCmplx ( cuCreal ( x ) , - cuCimag ( x ) ) ; }
private void paintZoomAndOffset ( final Canvas canvas ) { int pos = Application . mainActivity . getSupportActionBar ( ) . getHeight ( ) + NUM_ ; Offset o = getOpenStreetMapTilesOverlay ( ) . getRendererInfo ( ) . getOffset ( zoomLevel ) ; String text = STR_ + zoomLevel + STR_ + ( o != null ? String . format ( Locale . US , STR_ , o . lon ) + STR_ + String . format ( Locale . US , STR_ , o . lat ) : STR_ ) ; float textSize = textPaint . getTextSize ( ) ; canvas . drawText ( text , NUM_ , pos + textSize , textPaint ) ; }
public synchronized void remove ( final Entry element ) { if ( element == null || ! element . getValid ( ) ) { return ; } Entry next = element . getNext ( ) ; Entry prev = element . getPrevious ( ) ; if ( next != null ) { next . setPrevious ( prev ) ; } else { last = prev ; } if ( prev != null ) { prev . setNext ( next ) ; } else { first = next ; } size -- ; element . invalidate ( ) ; }
protected void sendSelfFailurePatch ( T task , String failureMessage ) { sendSelfPatch ( task , TaskState . TaskStage . FAILED , null ) ; }
public InternalServerErrorException ( String message , Response response ) { super ( HttpStatus . INTERNAL_SERVER_ERROR , message , response ) ; }
public Future < List < Value < T > > > readAllValues ( Transaction tr ) ;
private void addFormat ( StringBuilder sb ) { if ( ( options . contentDataType == CollectionDescriptor . BLOB_CONTENT ) || ( options . contentDataType == CollectionDescriptor . RAW_CONTENT ) ) sb . append ( STR_ ) ; }
public static boolean isNonPublicProxyClass ( Class < ? > cls ) { String name = cls . getName ( ) ; int i = name . lastIndexOf ( STR_ ) ; String pkg = ( i != - NUM_ ) ? name . substring ( NUM_ , i ) : STR_ ; return Proxy . isProxyClass ( cls ) && ! pkg . equals ( PROXY_PACKAGE ) ; }
private boolean isLockoutEnabled ( ) { if ( _maxAuthnLoginAttemtsCount == NUM_ || _maxAuthnLoginAttemtsLifeTimeInMins == NUM_ ) { return BOOL_ ; } return BOOL_ ; }
protected AbstractHttp2ConnectionHandler ( Http2ConnectionDecoder decoder , Http2ConnectionEncoder encoder , Http2Settings initialSettings ) { super ( decoder , encoder , initialSettings ) ; }
public void go ( OutputStream out ) throws IOException { buildPage ( ) . write ( out ) ; }
public void clearCache ( ) { if ( mMemoryCache != null ) { mMemoryCache . evictAll ( ) ; VolleyLog . d ( TAG , STR_ ) ; } }
public boolean isDiscardIfFileAltered ( String frameID ) { return discardIfFileAlteredFrames . contains ( frameID ) ; }
public static long parseGMTToMillis ( String gmtTime ) throws ParseException { SimpleDateFormat formatter = new SimpleDateFormat ( FORMAT_HTTP_DATA , Locale . US ) ; formatter . setTimeZone ( GMT_TIME_ZONE ) ; Date date = formatter . parse ( gmtTime ) ; return date . getTime ( ) ; }
public boolean isReadTimedOut ( ) { return StringUtils . contains ( content , STR_ ) ; }
public void doWindowClose ( ) { tradingdayPanel . killAllStrategyWorker ( ) ; doDisconnect ( ) ; doExit ( ) ; }
public static void swapCols ( Matrix matrix , long col1 , long col2 ) { double temp = NUM_ ; long rows = matrix . getRowCount ( ) ; for ( long row = NUM_ ; row < rows ; row ++ ) { temp = matrix . getAsDouble ( row , col1 ) ; matrix . setAsDouble ( matrix . getAsDouble ( row , col2 ) , row , col1 ) ; matrix . setAsDouble ( temp , row , col2 ) ; } }
void writeEntry ( int position , int offset , int value ) throws ArrayIndexOutOfBoundsException { { if ( offset >= slotsize ) throw new ArrayIndexOutOfBoundsException ( XMLMessages . createXMLMessage ( XMLErrorResources . ER_OFFSET_BIGGER_THAN_SLOT , null ) ) ; position *= slotsize ; int chunkpos = position > > lowbits ; int slotpos = position & lowmask ; int [ ] chunk = chunks . elementAt ( chunkpos ) ; chunk [ slotpos + offset ] = value ; } }
private void returnData ( Object ret ) { if ( myHost != null ) { myHost . returnData ( ret ) ; } }
public MessagesSendQuery forwardMessages ( String ... value ) { return unsafeParam ( STR_ , value ) ; }
public boolean is_subset_of ( symbol_set other ) throws internal_error { not_null ( other ) ; for ( Enumeration e = all ( ) ; e . hasMoreElements ( ) ; ) if ( ! other . contains ( ( symbol ) e . nextElement ( ) ) ) return BOOL_ ; return BOOL_ ; }
private void checkGenerationID ( long generationID ) throws DirectoryException { boolean allSet = BOOL_ ; for ( int i = NUM_ ; i < NUM_ ; i ++ ) { allSet = BOOL_ ; for ( RSInfo rsInfo : getRsInfos ( ) ) { if ( rsInfo . getGenerationId ( ) != - NUM_ && rsInfo . getGenerationId ( ) != generationID ) { try { Thread . sleep ( i * NUM_ ) ; } catch ( InterruptedException e ) { Thread . currentThread ( ) . interrupt ( ) ; } allSet = BOOL_ ; break ; } } if ( allSet ) { break ; } } if ( ! allSet ) { LocalizableMessage message = ERR_RESET_GENERATION_ID_FAILED . get ( getBaseDN ( ) ) ; throw new DirectoryException ( ResultCode . OTHER , message ) ; } }
private boolean testJDBC ( String url , String uid , String pwd ) { log . fine ( STR_ + url + STR_ + uid ) ; try { if ( s_oracleDriver == null ) { s_oracleDriver = new OracleDriver ( ) ; DriverManager . registerDriver ( s_oracleDriver ) ; } m_con = DriverManager . getConnection ( url , uid , pwd ) ; } catch ( UnsatisfiedLinkError ule ) { log . warning ( STR_ ) ; log . warning ( ule . toString ( ) ) ; } catch ( Exception e ) { log . warning ( e . toString ( ) ) ; return BOOL_ ; } return BOOL_ ; }
public byte [ ] encode ( ) throws StunException { return encode ( BOOL_ ) ; }
public String leafPredictionStrategyTipText ( ) { return STR_ ; }
public Bundler putDouble ( String key , double value ) { bundle . putDouble ( key , value ) ; return this ; }
private void installHttpSelector ( Properties settings , ProtocolDispatchSelector ps ) throws NumberFormatException { String proxyHost = settings . getProperty ( STR_ , null ) ; int proxyPort = Integer . parseInt ( settings . getProperty ( STR_ , STR_ ) . trim ( ) ) ; if ( proxyHost != null && proxyHost . length ( ) > NUM_ && proxyPort > NUM_ ) { Logger . log ( getClass ( ) , LogLevel . TRACE , STR_ , proxyHost , proxyPort ) ; ps . setSelector ( STR_ , new FixedProxySelector ( proxyHost . trim ( ) , proxyPort ) ) ; } }
AttributedCharacterIterator mutateAttributes ( AttributedCharacterIterator aci ) ;
public void showWithoutAnimating ( Element element ) { if ( isAnyState ( element , State . SHOWN ) ) { return ; } cancel ( element ) ; element . getStyle ( ) . removeProperty ( STR_ ) ; setState ( element , State . SHOWN ) ; }
public JSONObject makeConnectedViaPostProps ( final String postCity , final String category , final Attachment attachment , final int postLength ) { JSONObject props ; try { props = new JSONObject ( ) ; props . put ( STR_ , postCity ) ; props . put ( STR_ , category ) ; props . put ( STR_ , attachment ) ; props . put ( STR_ , postLength ) ; } catch ( JSONException e ) { Logger . e ( TAG , STR_ , e ) ; props = null ; } return props ; }
public Set < Integer > backupPartitions ( UUID nodeId , AffinityTopologyVersion topVer ) { return cachedAffinity ( topVer ) . backupPartitions ( nodeId ) ; }
public static < T > Select < T > from ( Class < T > dataObjectClass ) { return new Select < > ( dataObjectClass ) ; }
public String toString ( ) { return name ; }
AuditService ( ArgusHttpClient client ) { super ( client ) ; }
public static void createAgentJar ( final OutputStream out , final String agentClass , final String bootClassPath , final boolean canRedefineClasses , final boolean canRetransformClasses , final boolean canSetNativeMethodPrefix ) throws IOException { final Manifest man = new Manifest ( ) ; man . getMainAttributes ( ) . put ( Attributes . Name . MANIFEST_VERSION , STR_ ) ; man . getMainAttributes ( ) . putValue ( STR_ , agentClass ) ; if ( bootClassPath != null ) { man . getMainAttributes ( ) . putValue ( STR_ , bootClassPath ) ; } man . getMainAttributes ( ) . putValue ( STR_ , Boolean . toString ( canRedefineClasses ) ) ; man . getMainAttributes ( ) . putValue ( STR_ , Boolean . toString ( canRetransformClasses ) ) ; man . getMainAttributes ( ) . putValue ( STR_ , Boolean . toString ( canSetNativeMethodPrefix ) ) ; final JarOutputStream jarOut = new JarOutputStream ( out , man ) ; jarOut . flush ( ) ; jarOut . close ( ) ; }
public boolean isEnabled ( ) { return mEnabled ; }
public void opponent ( IPlayer opponent ) { this . opponent = opponent ; }
private static void ByteReadByteWrite ( ) throws Throwable { byte [ ] buf = new byte [ NUM_ ] ; boolean reachEOF = BOOL_ ; reset ( ) ; while ( dis . available ( ) == NUM_ ) { int datum = dis . read ( ) ; if ( datum == - NUM_ ) { reachEOF = BOOL_ ; } else { if ( datum < NUM_ || datum > NUM_ ) { fail ( STR_ + datum ) ; } ios . write ( datum ) ; } } dis . close ( ) ; ios . close ( ) ; check ( data [ NUM_ ] == baos . toByteArray ( ) [ NUM_ ] ) ; }
public abstract VirtualFileEntry copyTo ( String newParent , String name , boolean override ) throws NotFoundException , ForbiddenException , ConflictException , ServerException ;
void trimToNothing ( ) ;
public static void appendLast ( JList list , Object element ) { getDefaultListModel ( list ) . addElement ( element ) ; }
public boolean equivTo ( Object o ) ;
public < T > CommandInvoker option ( String name , T value ) { boolean injected = BOOL_ ; for ( FieldInvoker < Option > fieldInvoker : options ) { if ( fieldInvoker . getName ( ) . equals ( name ) ) { fieldInvoker . inject ( value ) ; injected = BOOL_ ; break ; } } if ( ! injected ) { throw new IllegalStateException ( STR_ + name + STR_ ) ; } return this ; }
private DateUtil ( ) { }
public String auditThreads ( ) { String auditReport = null ; Iterator < ThreadHandle > it = threadHandles . values ( ) . iterator ( ) ; while ( it . hasNext ( ) ) { ThreadHandle threadHandle = ( ThreadHandle ) it . next ( ) ; if ( ! threadHandle . isThreadActive ( ) ) { Thread thread = threadHandle . getThread ( ) ; if ( auditReport == null ) { auditReport = STR_ ; } auditReport += STR_ + thread . getName ( ) + STR_ ; } threadHandle . setThreadActive ( BOOL_ ) ; } return auditReport ; }
public int addAccess ( StreetSegment streetSegment , LegMode mode , int startVertexStopIndex ) { ModeStopIndex modeStopIndex = new ModeStopIndex ( mode , startVertexStopIndex ) ; int accessIndex ; if ( ! accessIndexes . containsKey ( modeStopIndex ) ) { access . add ( streetSegment ) ; accessIndex = ( access . size ( ) - NUM_ ) ; accessIndexes . put ( modeStopIndex , accessIndex ) ; } else { accessIndex = accessIndexes . get ( modeStopIndex ) ; } return accessIndex ; }
Parse filter ( String url , WebPage page , Parse parse , HTMLMetaTags metaTags , DocumentFragment doc ) ;
public static void put ( DataService dm , String cacheKey , long timestamp , Object report ) { removeOldEntries ( dm ) ; byte [ ] serializedReport = serializeObject ( report ) ; if ( serializedReport == null ) { return ; } if ( serializedReport . length == NUM_ ) { return ; } ReportResultCache result = new ReportResultCache ( ) ; result . setReport ( serializedReport ) ; result . setCachekey ( cacheKey ) ; result . setTimestamp ( new Date ( timestamp ) ) ; try { dm . persist ( result ) ; } catch ( NonUniqueBusinessKeyException e ) { logger . logWarn ( Log4jLogger . SYSTEM_LOG , e , LogMessageIdentifier . WARN_REPORT_RESULT_CACHE ) ; } }
public long firstOne ( ) ;
public void clearOutputs ( ) { unCache ( ) ; for ( TransactionOutput output : outputs ) { output . setParent ( null ) ; } outputs . clear ( ) ; this . length = this . bitcoinSerialize ( ) . length ; }
public < T > T load ( Class < T > service ) ;
public void logError ( String message ) ;
public ModbusTCPListener ( int poolsize , InetAddress addr ) { threadPool = new ThreadPool ( poolsize ) ; address = addr ; }
private synchronized void writeObject ( java . io . ObjectOutputStream s ) throws IOException { if ( actions == null ) getActions ( ) ; s . defaultWriteObject ( ) ; }
private void addReachable ( Node startNode ) { Stack nodeStack = new Stack ( ) ; nodeStack . add ( startNode ) ; while ( ! nodeStack . empty ( ) ) { Node node = ( Node ) nodeStack . pop ( ) ; add ( node , nodeStack ) ; } }
public UF10 ( int numberOfVariables ) { super ( numberOfVariables , NUM_ ) ; }
boolean isStarting ( ) ;
private static void wrapAll ( Menu menu , Component [ ] components ) { for ( Component c : components ) { MenuItem item = AWTMenuWrapper . wrap ( c ) ; menu . add ( item ) ; if ( item instanceof Menu ) { wrapAll ( ( Menu ) item , ( ( JMenu ) c ) . getMenuComponents ( ) ) ; } } }
public static String encodeBody ( final char [ ] buf ) { return encode ( buf , STR_ ) ; }
public void previousTip ( ) { int count = getModel ( ) . getTipCount ( ) ; if ( count == NUM_ ) { return ; } int previousTip = currentTip - NUM_ ; if ( previousTip < NUM_ ) { previousTip = count - NUM_ ; } setCurrentTip ( previousTip ) ; }
protected ObjectMatrix3D ( ) { }
protected abstract T createNewController ( String name , String yaml , File source , CollectionProcessingEngine engine ) ;
public boolean isNamespaceAware ( ) { return namespaceAware ; }
void registerRecipeHandler ( RecipeHandler handler ) ;
public String toString ( ) { if ( MODELMBEAN_LOGGER . isLoggable ( Level . FINER ) ) { MODELMBEAN_LOGGER . logp ( Level . FINER , ModelMBeanOperationInfo . class . getName ( ) , STR_ , STR_ ) ; } String retStr = STR_ + this . getName ( ) + STR_ + this . getDescription ( ) + STR_ + this . getDescriptor ( ) + STR_ + this . getReturnType ( ) + STR_ ; MBeanParameterInfo [ ] pTypes = this . getSignature ( ) ; for ( int i = NUM_ ; i < pTypes . length ; i ++ ) { retStr = retStr . concat ( ( pTypes [ i ] ) . getType ( ) + STR_ ) ; } return retStr ; }
protected double [ ] [ ] addComponents ( Matrix a ) { int n = this . rows ( ) ; int m = this . columns ( ) ; double [ ] [ ] newComponents = new double [ n ] [ m ] ; for ( int i = NUM_ ; i < n ; i ++ ) { for ( int j = NUM_ ; j < n ; j ++ ) newComponents [ i ] [ j ] = components [ i ] [ j ] + a . components [ i ] [ j ] ; } return newComponents ; }
boolean isConnectable ( ) ;
public boolean verifyXMLSignature ( org . w3c . dom . Document doc , java . security . cert . Certificate cert ) throws XMLSignatureException { if ( doc == null ) { SAMLUtilsCommon . debug . error ( STR_ + STR_ ) ; throw new XMLSignatureException ( SAMLUtilsCommon . bundle . getString ( STR_ ) ) ; } String certAlias = keystore . getCertificateAlias ( cert ) ; return verifyXMLSignature ( doc , certAlias ) ; }
public void addStreamStoreDefinition ( StreamStoreDefinition streamStoreDefinition ) { streamStoreDefinition . getTables ( ) . forEach ( null ) ; StreamStoreRenderer renderer = streamStoreDefinition . getRenderer ( packageName , name ) ; Multimap < String , Supplier < OnCleanupTask > > streamStoreCleanupTasks = streamStoreDefinition . getCleanupTasks ( packageName , name , renderer , namespace ) ; cleanupTasks . putAll ( streamStoreCleanupTasks ) ; streamStoreRenderers . add ( renderer ) ; }
public boolean isBundling ( ) { return getBundling ( ) != null ; }
public MySquidDatabase ( Context context ) { super ( ) ; this . context = context ; }
String id ( ) ;
public static Link valueOf ( String val ) { Matcher matcher = parse . matcher ( val ) ; if ( ! matcher . matches ( ) ) throw new RuntimeException ( STR_ + val ) ; Link link = new Link ( ) ; link . href = matcher . group ( NUM_ ) ; String [ ] props = matcher . group ( NUM_ ) . split ( STR_ ) ; HashMap < String , String > map = new HashMap ( ) ; for ( String prop : props ) { String [ ] split = prop . split ( STR_ ) ; map . put ( split [ NUM_ ] . trim ( ) , split [ NUM_ ] . trim ( ) ) ; } if ( map . containsKey ( STR_ ) ) { link . relationship = map . get ( STR_ ) ; } if ( map . containsKey ( STR_ ) ) { link . type = map . get ( STR_ ) ; } return link ; }
static protected void assertField ( final String header , final String [ ] fields , final int field , final String expected ) { if ( header == null ) throw new IllegalArgumentException ( ) ; if ( fields == null ) throw new IllegalArgumentException ( ) ; if ( expected == null ) throw new IllegalArgumentException ( ) ; if ( field < NUM_ ) throw new IllegalArgumentException ( ) ; if ( field >= fields . length ) throw new AssertionFailedError ( STR_ + fields . length + STR_ + field + STR_ + header ) ; if ( ! expected . equals ( fields [ field ] ) ) { throw new AssertionFailedError ( STR_ + field + STR_ + expected + STR_ + fields [ field ] + STR_ + header ) ; } }
void onAnswer ( long sessionId , String sdp ) ;
public AmericanExercise ( final Date earliestDate , final Date latestDate , final boolean payoffAtExpiry ) { super ( Exercise . Type . American , payoffAtExpiry ) ; QL . require ( earliestDate . le ( latestDate ) , STR_ ) ; super . dates . add ( earliestDate . clone ( ) ) ; super . dates . add ( latestDate . clone ( ) ) ; }
public int numRows ( ) { return MaxR + NUM_ ; }
private static byte [ ] loadDigest ( File file ) throws IOException { BufferedReader reader = null ; try { reader = new BufferedReader ( new FileReader ( getDigestFile ( file ) ) ) ; String line = reader . readLine ( ) ; if ( line == null ) { throw new ValidationException ( file , STR_ ) ; } int split = line . indexOf ( STR_ ) ; String digestHex = line . substring ( NUM_ , split ) ; String fileName = line . substring ( split + NUM_ ) ; if ( ! file . getPath ( ) . equals ( fileName ) ) { throw new ValidationException ( file , STR_ ) ; } return Hex . decodeHex ( digestHex . toCharArray ( ) ) ; } catch ( Exception e ) { throw new ValidationException ( file , STR_ ) ; } finally { if ( reader != null ) { reader . close ( ) ; } } }
protected abstract Symbol invokeReduceAction ( int rule_num , int offset ) ;
public CTextArea ( JTextArea textArea ) { super ( textArea ) ; m_textArea = textArea ; super . setOpaque ( BOOL_ ) ; super . getViewport ( ) . setOpaque ( BOOL_ ) ; m_textArea . setLineWrap ( BOOL_ ) ; m_textArea . setWrapStyleWord ( BOOL_ ) ; m_textArea . firePropertyChange ( STR_ , ! isEditable ( ) , isEditable ( ) ) ; }
T moveToAfter ( By moveTo , int waitInSeconds ) ;
private boolean addToFile ( String line ) { try ( BufferedWriter w = Files . newBufferedWriter ( file , CHARSET , CREATE , WRITE , APPEND ) ) { w . append ( line ) ; w . newLine ( ) ; } catch ( IOException ex ) { LOGGER . warning ( STR_ + ex ) ; return BOOL_ ; } return BOOL_ ; }
public String toString ( ) { return contact . toString ( ) ; }
public static void print ( double x ) { out . print ( x ) ; out . flush ( ) ; }
public static void write ( float lt , float ln , int w , int h , byte [ ] bytes , Color [ ] colorTable , int trans , LinkProperties properties , DataOutputStream dos ) throws IOException { dos . write ( Link . RASTER_HEADER . getBytes ( ) ) ; dos . writeByte ( GRAPHICTYPE_RASTER ) ; dos . writeByte ( RENDERTYPE_LATLON ) ; dos . writeByte ( COLORMODEL_INDEXED ) ; dos . writeFloat ( lt ) ; dos . writeFloat ( ln ) ; dos . writeInt ( w ) ; dos . writeInt ( h ) ; dos . writeInt ( bytes . length ) ; dos . write ( bytes , NUM_ , bytes . length ) ; dos . writeInt ( colorTable . length ) ; int i ; for ( i = NUM_ ; i < colorTable . length ; i ++ ) { dos . writeInt ( colorTable [ i ] . getRGB ( ) ) ; } dos . writeInt ( trans ) ; properties . write ( dos ) ; }
public com . sun . identity . liberty . ws . disco . plugins . jaxb . DiscoEntryElement createDiscoEntryElement ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . liberty . ws . disco . plugins . jaxb . impl . DiscoEntryElementImpl ( ) ; }
public void removeListener ( final INaviGraphListener listener ) { m_listeners . removeListener ( listener ) ; }
public static Dog maxDog ( Dog d1 , Dog d2 ) { if ( d1 . size >= d2 . size ) return d1 ; return d2 ; }
public void removeDirection ( final Direction dir , final boolean face ) { RPAction action ; int size ; action = new RPAction ( ) ; action . put ( STR_ , STR_ ) ; action . put ( STR_ , - dir . get ( ) ) ; send ( action ) ; directions . remove ( dir ) ; size = directions . size ( ) ; if ( size == NUM_ ) { action = new RPAction ( ) ; action . put ( STR_ , STR_ ) ; } else { if ( face ) { action = new FaceRPAction ( directions . get ( size - NUM_ ) ) ; } else { action = new MoveRPAction ( directions . get ( size - NUM_ ) ) ; } } send ( action ) ; }
private void createLoanProductEntity ( ) { System . out . println ( STR_ ) ; final String loanProductJSON = new LoanProductTestBuilder ( ) . withPrincipal ( loanPrincipalAmount ) . withNumberOfRepayments ( numberOfRepayments ) . withinterestRatePerPeriod ( interestRatePerPeriod ) . withInterestRateFrequencyTypeAsYear ( ) . build ( null ) ; this . loanProductId = this . loanTransactionHelper . getLoanProductId ( loanProductJSON ) ; System . out . println ( STR_ + this . loanProductId + STR_ ) ; }
protected void eliminarProductor ( HttpServletRequest request , InfoProductorSerie infoProductorSerie ) { logger . debug ( STR_ ) ; if ( infoProductorSerie != null ) { logger . debug ( STR_ + infoProductorSerie . getDebug ( ) ) ; if ( infoProductorSerie . isNuevo ( ) && infoProductorSerie . isSinGuardar ( ) ) { logger . debug ( STR_ ) ; removeProductor ( request , infoProductorSerie . getGuid ( ) ) ; } else { infoProductorSerie . setMarcas ( FondosConstants . MARCA_ELIMINADO ) ; if ( infoProductorSerie instanceof InfoOrganoProductorSerie ) { InfoOrganoProductorSerie infoOrganoProductorSerie = ( InfoOrganoProductorSerie ) infoProductorSerie ; infoOrganoProductorSerie . setSustituidoVigente ( null ) ; infoOrganoProductorSerie . setSustituyeAHistorico ( null ) ; } } } }
private JsonValue performRead ( String resourceID ) throws ResourceException { JsonValue readResults = null ; readResults = connectionFactory . getConnection ( ) . read ( taskScannerContext . getContext ( ) , Requests . newReadRequest ( resourceID ) ) . getContent ( ) ; return readResults ; }
protected int findMerge ( int size , double [ ] scratch , DBIDArrayIter ix , DBIDArrayIter iy , PointerHierarchyRepresentationBuilder builder ) { double mindist = Double . POSITIVE_INFINITY ; int x = - NUM_ , y = - NUM_ ; for ( int ox = NUM_ , xbase = NUM_ ; ox < size ; xbase += ox ++ ) { if ( builder . isLinked ( ix . seek ( ox ) ) ) { continue ; } assert ( xbase == triangleSize ( ox ) ) ; for ( int oy = NUM_ ; oy < ox ; oy ++ ) { if ( builder . isLinked ( iy . seek ( oy ) ) ) { continue ; } final int idx = xbase + oy ; if ( scratch [ idx ] <= mindist ) { mindist = scratch [ idx ] ; x = ox ; y = oy ; } } } assert ( x >= NUM_ && y >= NUM_ ) ; merge ( size , scratch , ix , iy , builder , mindist , x , y ) ; return x ; }
public void push ( int priority , Task task , CompletionCallback callback ) { this . push ( new PriorityPendingTask ( priority , task , callback ) ) ; }
public void notifyNowPlaying ( ) { Timber . i ( STR_ ) ; if ( musicPlayer . getNowPlaying ( ) == null ) { Timber . i ( STR_ ) ; return ; } MediaSessionCompat mediaSession = musicPlayer . getMediaSession ( ) ; NotificationCompat . Builder builder = MediaStyleHelper . from ( this , mediaSession ) ; setupNotificationActions ( builder ) ; builder . setSmallIcon ( getNotificationIcon ( ) ) . setDeleteIntent ( getStopIntent ( ) ) . setStyle ( new NotificationCompat . MediaStyle ( ) . setShowActionsInCompactView ( NUM_ , NUM_ ) . setShowCancelButton ( BOOL_ ) . setCancelButtonIntent ( getStopIntent ( ) ) . setMediaSession ( musicPlayer . getMediaSession ( ) . getSessionToken ( ) ) ) ; showNotification ( builder . build ( ) ) ; }
public static TypeReference findOrCreate ( String tn ) { return findOrCreate ( BootstrapClassLoader . getBootstrapClassLoader ( ) , Atom . findOrCreateAsciiAtom ( tn ) ) ; }
public boolean removeChoosableFileFilter ( FileFilter f ) { int index = filters . indexOf ( f ) ; if ( index >= NUM_ ) { if ( getFileFilter ( ) == f ) { FileFilter aaff = getAcceptAllFileFilter ( ) ; if ( isAcceptAllFileFilterUsed ( ) && ( aaff != f ) ) { setFileFilter ( aaff ) ; } else if ( index > NUM_ ) { setFileFilter ( filters . get ( NUM_ ) ) ; } else if ( filters . size ( ) > NUM_ ) { setFileFilter ( filters . get ( NUM_ ) ) ; } else { setFileFilter ( null ) ; } } FileFilter [ ] oldValue = getChoosableFileFilters ( ) ; filters . removeElement ( f ) ; firePropertyChange ( CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY , oldValue , getChoosableFileFilters ( ) ) ; return BOOL_ ; } else { return BOOL_ ; } }
public void onRemoteSetup ( NotificationRemote remote ) { if ( DBG ) Log . v ( TAG , STR_ ) ; }
public boolean isDelimiter ( String character ) { return Character . isWhitespace ( character . charAt ( NUM_ ) ) || ( m_Delimiters . indexOf ( character . charAt ( NUM_ ) ) > - NUM_ ) ; }
void disableStandingInstructionsLinkedToClosedLoan ( Loan loan ) ;
public Property centuryOfEra ( ) { return new Property ( this , getChronology ( ) . centuryOfEra ( ) ) ; }
public boolean isOperationsEnabled ( ) { return BOOL_ ; }
public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ExtendAuraRange_ME_TO_B ( String skilltarget , String skillname ) { return new SM_SYSTEM_MESSAGE ( NUM_ , skilltarget , skillname ) ; }
private User fetch ( final String token ) { try { return new DefaultFacebookClient ( token , this . requestor , new DefaultJsonMapper ( ) , Version . LATEST ) . fetchObject ( STR_ , User . class ) ; } catch ( final FacebookException ex ) { throw new IllegalArgumentException ( ex ) ; } }
private int convertToIntPercent ( final double percentHeap ) { assert percentHeap >= NUM_ && percentHeap <= NUM_ ; int ret = ( int ) Math . ceil ( percentHeap * NUM_ ) ; assert ret >= NUM_ && ret <= NUM_ ; return ret ; }
private void initialize ( ) { this . setLayout ( new CardLayout ( ) ) ; this . setSize ( NUM_ , NUM_ ) ; this . setName ( Constant . messages . getString ( STR_ ) ) ; this . setIcon ( new ImageIcon ( ParamsPanel . class . getResource ( STR_ ) ) ) ; this . setDefaultAccelerator ( KeyStroke . getKeyStroke ( KeyEvent . VK_P , Toolkit . getDefaultToolkit ( ) . getMenuShortcutKeyMask ( ) | Event . SHIFT_MASK , BOOL_ ) ) ; this . setMnemonic ( Constant . messages . getChar ( STR_ ) ) ; this . add ( getPanelCommand ( ) , getPanelCommand ( ) . getName ( ) ) ; }
void removeFooterView ( int index ) ;
public PhotosSaveMarketAlbumPhotoQuery saveMarketAlbumPhoto ( UserActor actor , int groupId , String photo , int server , String hash ) { return new PhotosSaveMarketAlbumPhotoQuery ( getClient ( ) , actor , groupId , photo , server , hash ) ; }
boolean isDrawValuesEnabled ( ) ;
public TouchlessScrollView ( Context context , AttributeSet attrs ) { this ( context , attrs , NUM_ ) ; }
void renewScanRangeTasks ( Collection < ScanRangeTask > tasks , Duration ttl ) ;
public int size ( ) { return size ; }
public static void closeReaders ( MapFile . Reader [ ] readers ) throws IOException { if ( readers != null ) { for ( int i = NUM_ ; i < readers . length ; i ++ ) { MapFile . Reader reader = readers [ i ] ; if ( reader != null ) { reader . close ( ) ; } } } }
private void recycleView ( View view , int index ) { int count = wheel . getViewAdapter ( ) . getItemsCount ( ) ; if ( ( index < NUM_ || index >= count ) && ! wheel . isCyclic ( ) ) { emptyItems = addView ( view , emptyItems ) ; } else { while ( index < NUM_ ) { index = count + index ; } index %= count ; items = addView ( view , items ) ; } }
public static boolean isProfanity ( String text ) { if ( ( text == null ) || text . isEmpty ( ) ) { return BOOL_ ; } text = text . toLowerCase ( ) ; for ( String profanity : profanityMap . keySet ( ) ) { if ( ( profanity . length ( ) > NUM_ ) && ( text . indexOf ( profanity ) != - NUM_ ) ) { return BOOL_ ; } } return checkProfanity ( text ) ; }
CompletableFuture < UaClient > disconnect ( ) ;
private static boolean regionMatches ( final CharSequence cs , final boolean ignoreCase , final int thisStart , final CharSequence substring , final int start , final int length ) { return ( ( String ) cs ) . regionMatches ( ignoreCase , thisStart , ( String ) substring , start , length ) ; }
public com . sun . identity . liberty . ws . common . jaxb . assertion . AttributeValueElement createAttributeValueElement ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . liberty . ws . common . jaxb . assertion . impl . AttributeValueElementImpl ( ) ; }
static void updateIt ( Graphics g , JComponent c ) { CompiereColor bg = null ; try { bg = ( CompiereColor ) c . getClientProperty ( CompiereLookAndFeel . BACKGROUND ) ; } catch ( Exception e ) { System . err . println ( STR_ + e . getMessage ( ) ) ; } if ( bg != null ) { bg . paint ( g , c ) ; } else { g . setColor ( c . getBackground ( ) ) ; g . fillRect ( NUM_ , NUM_ , c . getWidth ( ) , c . getHeight ( ) ) ; } }
private CTaggingFunctions ( ) { }
void rewardItem ( Quest quest , EntityPlayer player , ItemStack stack ) ;
public void addTokenRangeToCurrentBatchForCluster ( String cluster , String placement , Collection < ScanRange > ranges ) { PlanBatch batch = _clusterTails . get ( cluster ) ; if ( batch == null ) { batch = new PlanBatch ( ) ; _clusterHeads . put ( cluster , batch ) ; _clusterTails . put ( cluster , batch ) ; } batch . addPlanItem ( new PlanItem ( placement , ranges ) ) ; }
public void onShowModal ( ) ;
protected HttpResponse executeOK ( HttpUriRequest method ) throws IOException , RDF4JException { boolean fail = BOOL_ ; HttpResponse response = execute ( method ) ; try { int httpCode = response . getStatusLine ( ) . getStatusCode ( ) ; if ( httpCode == HttpURLConnection . HTTP_OK || httpCode == HttpURLConnection . HTTP_NOT_AUTHORITATIVE ) { fail = BOOL_ ; return response ; } else { throw new RepositoryException ( STR_ + method . getURI ( ) . toString ( ) ) ; } } finally { if ( fail ) { EntityUtils . consumeQuietly ( response . getEntity ( ) ) ; } } }
public final void notifyHeaderItemInserted ( int position ) { int newHeaderItemCount = getHeaderItemCount ( ) ; if ( position < NUM_ || position >= newHeaderItemCount ) { throw new IndexOutOfBoundsException ( STR_ + position + STR_ + ( newHeaderItemCount - NUM_ ) + STR_ ) ; } notifyItemInserted ( position ) ; }
public PsFixed ( final Identity identity ) { this . user = identity ; }
final Type asFree ( Type t ) { return types . subst ( t , inferencevars , undetvars ) ; }
public View newDropDownView ( LayoutInflater inflater , int position , ViewGroup container ) { return newView ( inflater , position , container ) ; }
private void sincronizarBase ( ) { listaUsuario = ControleDAO . getBanco ( ) . getUsuarioDAO ( ) . listar ( ) ; }
public void initDataBase ( String entidad ) throws Exception ;
public void calculateSourcesSinksEntrypoints ( String sourceSinkFile ) throws IOException , XmlPullParserException { ISourceSinkDefinitionProvider parser = null ; String fileExtension = sourceSinkFile . substring ( sourceSinkFile . lastIndexOf ( STR_ ) ) ; fileExtension = fileExtension . toLowerCase ( ) ; if ( fileExtension . equals ( STR_ ) ) parser = XMLSourceSinkParser . fromFile ( sourceSinkFile ) ; else if ( fileExtension . equals ( STR_ ) ) parser = PermissionMethodParser . fromFile ( sourceSinkFile ) ; else throw new UnsupportedDataTypeException ( STR_ ) ; calculateSourcesSinksEntrypoints ( parser ) ; }
public boolean hasClassIndex ( ) { return ( classIndex >= NUM_ ) ; }
protected void scanCommentChar ( ) { scanChar ( ) ; if ( ch == STR_ ) { if ( peekChar ( ) == STR_ && ! isUnicode ( ) ) { skipChar ( ) ; } else { convertUnicode ( ) ; } } }
public Media ( LibPlay libplay , String path ) { nativeNewFromPath ( libplay , path ) ; mUri = UriFromMrl ( nativeGetMrl ( ) ) ; }
private void handleActionBaz ( String param1 , String param2 ) { throw new UnsupportedOperationException ( STR_ ) ; }
private void connect ( Throwable exception ) { Connection c = Connections . getInstance ( context ) . getConnection ( clientHandle ) ; c . changeConnectionStatus ( Connection . ConnectionStatus . ERROR ) ; c . addAction ( STR_ ) ; }
void dispose ( ) ;
public JDirectoryChooser ( FileSystemView fsv ) { super ( fsv ) ; setShowingCreateDirectory ( BOOL_ ) ; }
void onDestroy ( ) ;
public void free ( ) { this . factory = null ; this . f = null ; this . in = null ; this . hnd = null ; }
public void writeString ( String s , Encoding encoding ) throws IOException { if ( encoding != null ) { byte [ ] buffer = encoding . encodeToCharset ( s ) ; writeBuffer ( buffer ) ; } else { writeBuffer ( s . getBytes ( ) ) ; } }
public MessageFactoryImpl ( ) { }
private static void printXmlFields ( ClassRef cref ) { FieldRef [ ] fields = cref . getFieldArray ( ) ; for ( int i = NUM_ ; i < fields . length ; i ++ ) { FieldRef fref = fields [ i ] ; out . println ( IN3 + STR_ + fref . getName ( ) + STR_ + descriptorToDot ( fref . getTypeName ( ) ) + STR_ ) ; } }
public static String stringFor ( int n ) { switch ( n ) { case CU_OUT_KEY_VALUE_PAIR : return STR_ ; case CU_OUT_CSV : return STR_ ; } return STR_ + n ; }
int byteLength ( V obj ) ;
public void insertLastFocused ( String symbol , boolean append ) { if ( this . variable == lastFocused ) { setVariable ( symbol , append ) ; } else { setExpression ( symbol , append ) ; } }
public synchronized Vertex addActiveMemory ( Vertex vertex ) { Vertex activeVertex = getShortTermMemory ( ) . createVertex ( vertex ) ; getActiveMemory ( ) . add ( activeVertex ) ; for ( MemoryEventListener listener : getListeners ( ) ) { listener . addActiveMemory ( vertex ) ; } notifyAll ( ) ; return activeVertex ; }
public void done ( ) { CountDownLatch latch = this . latch ; latch . countDown ( ) ; }
public Entry ( int hash , Object key , Object value , Entry next ) { this . hash = hash ; this . key = key ; this . value = value ; this . next = next ; }
ExtensionFileFilter ( final String extension , final String description ) { this . extension = extension ; this . description = description ; }
public static long toLong ( byte a , byte b , byte c , byte d , byte e , byte f , byte g , byte h ) { return ( ( ( long ) a & BYTE_MASK ) << ( BYTE_SIZE * NUM_ ) ) | ( ( ( long ) b & BYTE_MASK ) << ( BYTE_SIZE * NUM_ ) ) | ( ( ( long ) c & BYTE_MASK ) << ( BYTE_SIZE * NUM_ ) ) | ( ( ( long ) d & BYTE_MASK ) << ( BYTE_SIZE * NUM_ ) ) | ( ( long ) e << ( BYTE_SIZE * NUM_ ) ) | ( ( ( long ) f & BYTE_MASK ) << ( BYTE_SIZE * NUM_ ) ) | ( ( ( long ) g & BYTE_MASK ) << BYTE_SIZE ) | ( ( long ) h & BYTE_MASK ) ; }
private String _hexString ( byte [ ] bytes ) { StringBuilder result = new StringBuilder ( NUM_ * bytes . length ) ; for ( int i = NUM_ ; i < bytes . length ; i ++ ) { int b = bytes [ i ] & NUM_ ; result . append ( _nibbleToHex [ b / NUM_ ] ) ; result . append ( _nibbleToHex [ b % NUM_ ] ) ; } return result . toString ( ) ; }
public static void drawPickableRect ( DrawContext dc , PickSupport pickSupport , Object pickedObject , Rectangle bounds ) { if ( dc == null ) { String message = Logging . getMessage ( STR_ ) ; Logging . logger ( ) . severe ( message ) ; throw new IllegalArgumentException ( message ) ; } GL2 gl = dc . getGL ( ) . getGL2 ( ) ; Color color = dc . getUniquePickColor ( ) ; int colorCode = color . getRGB ( ) ; pickSupport . addPickableObject ( colorCode , pickedObject ) ; gl . glColor3ub ( ( byte ) color . getRed ( ) , ( byte ) color . getGreen ( ) , ( byte ) color . getBlue ( ) ) ; drawRect ( gl , bounds ) ; }
private boolean isHHSign ( String str ) { boolean sign = BOOL_ ; try { char r = ( char ) Integer . parseInt ( str , NUM_ ) ; } catch ( NumberFormatException e ) { sign = BOOL_ ; } return sign ; }
private void ensureCapacity ( int n ) { if ( n <= NUM_ ) { return ; } int max ; if ( data == null || data . length == NUM_ ) { max = NUM_ ; } else if ( data . length >= n * NUM_ ) { return ; } else { max = data . length ; } while ( max < n * NUM_ ) { max *= NUM_ ; } String newData [ ] = new String [ max ] ; if ( length > NUM_ ) { System . arraycopy ( data , NUM_ , newData , NUM_ , length * NUM_ ) ; } data = newData ; }
private ClientProxyMembershipID canonicalReference ( ) { CacheClientNotifier ccn = CacheClientNotifier . getInstance ( ) ; if ( ccn != null ) { CacheClientProxy cp = ccn . getClientProxy ( this , BOOL_ ) ; if ( cp != null ) { if ( this . isCanonicalEquals ( cp . getProxyID ( ) ) ) { return cp . getProxyID ( ) ; } } } return this ; }
public boolean isRestricted ( SSOToken token ) throws SessionException { Reject . ifNull ( token ) ; if ( ! factory . containsJwt ( token . toString ( ) ) ) { throw new SessionException ( STR_ ) ; } try { return isRestricted ( token . getPrincipal ( ) . getName ( ) ) ; } catch ( SSOException e ) { throw new SessionException ( e ) ; } }
public boolean isOperatorStatistics ( ) { return operatorStatistics ; }
public KeyValueStore ( UniqueOrKey key ) { super ( key ) ; }
public static org . oscm . internal . vo . VOPricedOption convertToUp ( org . oscm . vo . VOPricedOption oldVO ) { if ( oldVO == null ) { return null ; } org . oscm . internal . vo . VOPricedOption newVO = new org . oscm . internal . vo . VOPricedOption ( ) ; newVO . setKey ( oldVO . getKey ( ) ) ; newVO . setVersion ( oldVO . getVersion ( ) ) ; newVO . setPricePerUser ( oldVO . getPricePerUser ( ) ) ; newVO . setPricePerSubscription ( oldVO . getPricePerSubscription ( ) ) ; newVO . setParameterOptionKey ( oldVO . getParameterOptionKey ( ) ) ; newVO . setOptionId ( oldVO . getOptionId ( ) ) ; newVO . setRoleSpecificUserPrices ( convertToUpVOPricedRole ( oldVO . getRoleSpecificUserPrices ( ) ) ) ; return newVO ; }
public SM_SKILL_ACTIVATION ( int skillId ) { this . skillId = skillId ; this . isActive = BOOL_ ; this . unk = NUM_ ; }
void addChild ( FXGNode child ) ;
public static void subscribeToQueueReports ( Callback callback ) { subscribe ( Type . QUEUE , callback ) ; }
final public int size ( ) { return n ; }
public static Integer size ( ) { return PM . size ( ) ; }
public List < Axis > H ( ) { if ( dimension != null && dimension . getId ( ) . getDimensionId ( ) != null ) { ArrayList < Axis > axes = new ArrayList < Axis > ( ) ; for ( Dimension dimension : getParent ( ) . getUniverse ( ) . getSubDimensions ( this . dimension ) ) { Axis a = new Axis ( parent , dimension ) ; axes . add ( a ) ; } return axes ; } else { return Collections . emptyList ( ) ; } }
public static long tickAtIndex ( GeoTimeSerie gts , int idx ) { if ( idx >= gts . values ) { return Long . MIN_VALUE ; } else { return gts . ticks [ idx ] ; } }
void end_value ( ) ;
public Months plus ( int months ) { if ( months == NUM_ ) { return this ; } return Months . months ( FieldUtils . safeAdd ( getValue ( ) , months ) ) ; }
public Period ( int years , int months , int weeks , int days , int hours , int minutes , int seconds , int millis ) { super ( years , months , weeks , days , hours , minutes , seconds , millis , PeriodType . standard ( ) ) ; }
public ClipData ( ClipData other ) { mClipDescription = other . mClipDescription ; mIcon = other . mIcon ; mItems = new ArrayList < Item > ( other . mItems ) ; }
public String directionTipText ( ) { return STR_ ; }
private void checkOrientation ( int orientation ) { final boolean isPortrait = ( Configuration . ORIENTATION_PORTRAIT == orientation ) ; final int modeOptionsDimension = ( int ) getResources ( ) . getDimension ( R . dimen . mode_options_height ) ; FrameLayout . LayoutParams modeOptionsParams = ( FrameLayout . LayoutParams ) mModeOptions . getLayoutParams ( ) ; FrameLayout . LayoutParams modeOptionsToggleParams = ( FrameLayout . LayoutParams ) mModeOptionsToggle . getLayoutParams ( ) ; if ( isPortrait ) { modeOptionsParams . height = modeOptionsDimension ; modeOptionsParams . width = ViewGroup . LayoutParams . MATCH_PARENT ; modeOptionsParams . gravity = Gravity . BOTTOM ; modeOptionsToggleParams . gravity = BOTTOM_RIGHT ; mThreeDots . setImageResource ( R . drawable . ic_options_port ) ; } else { modeOptionsParams . width = modeOptionsDimension ; modeOptionsParams . height = ViewGroup . LayoutParams . MATCH_PARENT ; modeOptionsParams . gravity = Gravity . RIGHT ; modeOptionsToggleParams . gravity = TOP_RIGHT ; mThreeDots . setImageResource ( R . drawable . ic_options_land ) ; } requestLayout ( ) ; }
T flush ( ) ;
default boolean isIntUnderOperation ( ) { return in ( this , CHAR , BYTE , SHORT ) ; }
public void animateX ( int durationMillis ) { if ( android . os . Build . VERSION . SDK_INT < NUM_ ) return ; ObjectAnimator animatorX = ObjectAnimator . ofFloat ( this , STR_ , NUM_ , NUM_ ) ; animatorX . setDuration ( durationMillis ) ; animatorX . addUpdateListener ( mListener ) ; animatorX . start ( ) ; }
protected void addChildElement ( String elementName , String parentName ) { Element parent = getElement ( parentName ) ; Element element = getElement ( elementName ) ; parent . childList . add ( elementName ) ; element . parentList . add ( parentName ) ; }
public static UTMPoint LLtoUTM ( LatLonPoint llpoint ) { return LLtoUTM ( llpoint , Ellipsoid . WGS_84 , new UTMPoint ( ) ) ; }
public static Object paintCachedTeXFormula ( String f , int style , int type , int size , int inset , Color fgcolor , Graphics2DInterface g ) throws ParseException { return paintCachedTeXFormula ( new CachedTeXFormula ( f , style , type , size , inset , fgcolor ) , g ) ; }
public void onQueryComplete ( final int taskId , final Object cookie , final Cursor cursor ) ;
void reset ( Set < Attribute > attributesToDel ) { Set < String > ptsToDel = new HashSet < > ( ) ; for ( Attribute attr : attributesToDel ) { ptsToDel . add ( attr . getProjectType ( ) ) ; } Set < String > attrNamesToDel = new HashSet < > ( ) ; for ( String pt : ptsToDel ) { ProjectTypeDef typeDef = all . get ( pt ) ; for ( Attribute attrDef : typeDef . getAttributes ( ) ) { attrNamesToDel . add ( attrDef . getName ( ) ) ; } } for ( String typeId : ptsToDel ) { this . all . remove ( typeId ) ; if ( this . primary . getId ( ) . equals ( typeId ) ) { this . primary = ProjectTypeRegistry . BASE_TYPE ; this . all . put ( ProjectTypeRegistry . BASE_TYPE . getId ( ) , ProjectTypeRegistry . BASE_TYPE ) ; } else { mixins . remove ( typeId ) ; } } for ( String attr : attrNamesToDel ) { this . attributeDefs . remove ( attr ) ; } }
public static < NodeType extends ZyGraphNode < ? > > String createTooltip ( final AbstractZyGraph < NodeType , ? > graph , final Node node ) { Preconditions . checkNotNull ( graph , STR_ ) ; Preconditions . checkNotNull ( node , STR_ ) ; final IZyNodeRealizer realizer = ( IZyNodeRealizer ) graph . getGraph ( ) . getRealizer ( node ) ; if ( realizer instanceof ZyProximityNodeRealizer < ? > ) { return generateProximityNodeRealizer ( graph , ( ZyProximityNode < ? > ) realizer . getUserData ( ) . getNode ( ) ) ; } else { final ZyLabelContent content = realizer . getNodeContent ( ) ; final boolean boldFirstLine = requiresBoldFirstLine ( graph . getNode ( node ) ) ; return HtmlGenerator . getHtml ( content , GuiHelper . getMonospaceFont ( ) , boldFirstLine ) ; } }
ValueNumberPair [ ] copyValueNumbers ( ) { if ( isTOP ( ) ) { throw new OptimizingCompilerException ( STR_ ) ; } if ( size == NUM_ ) return null ; ValueNumberPair [ ] result = new ValueNumberPair [ size ] ; for ( int i = NUM_ ; i < size ; i ++ ) { result [ i ] = new ValueNumberPair ( numbers [ i ] ) ; } return result ; }
void appendedComment ( Instruction instruction , IComment comment ) ;
public void removeHalfEdges ( int index ) { DoubleEdgeListHalfEdge e = this . edges . get ( index ) ; this . removeHalfEdges ( index , e ) ; }
public float translateX ( float x ) { if ( mOverlay . mFacing == CameraSource . CAMERA_FACING_FRONT ) { return mOverlay . getWidth ( ) - scaleX ( x ) ; } else { return scaleX ( x ) ; } }
public void results ( Bundle results ) throws RemoteException { Message . obtain ( mHandler , MSG_RESET ) . sendToTarget ( ) ; mListener . onResults ( results ) ; }
public boolean isAddExtensionsWanted ( ) { return addExtensionsWanted ; }
protected void overrideDefaultStrategyMap ( final Map < String , S > map ) { }
public boolean checkProgressCBValues ( int [ ] data ) { boolean retFlag = BOOL_ ; for ( int i = NUM_ ; i < NUM_ ; i ++ ) { if ( data [ i ] == NUM_ ) { retFlag = BOOL_ ; break ; } else { retFlag = BOOL_ ; } } return retFlag ; }
boolean canRedefineClasses ( ) ;
public ExceptionOccurredSynchronizer ( final IDebugger debugger , final ListenerProvider < IDebugEventListener > listeners ) { super ( debugger , listeners ) ; }
public OMBitmap ( double lt , double ln , int offset_x1 , int offset_y1 , int w , int h , byte [ ] bytes ) { super ( RENDERTYPE_OFFSET , LINETYPE_UNKNOWN , DECLUTTERTYPE_NONE ) ; lat = lt ; lon = ln ; x = offset_x1 ; y = offset_y1 ; width = w ; height = h ; bits = bytes ; }
public void clearPool ( ) { try { publisherObjectPool . clear ( ) ; } catch ( Exception e ) { logger . error ( STR_ , e ) ; } }
IMessageInstanceTarget newLogUploader ( ) ;
boolean isValid ( ) ;
void onDropCompleted ( View target , DragObject d , boolean isFlingToDelete , boolean success ) ;
boolean supportsTableCorrelationNames ( ) throws SQLException ;
private void showFeedback ( String message ) { if ( myHost != null ) { myHost . showFeedback ( message ) ; } else { System . out . println ( message ) ; } }
public static int copyNativeBinariesIfNeededLI ( File apkFile , File sharedLibraryDir ) { final String cpuAbi = Build . CPU_ABI ; final String cpuAbi2 = Build . CPU_ABI2 ; return nativeCopyNativeBinaries ( apkFile . getPath ( ) , sharedLibraryDir . getPath ( ) , cpuAbi , cpuAbi2 ) ; }
ClientResponse sendGetRequest ( UniformInterface httpInterface ) throws BillingException { ClientResponse response ; try { response = httpInterface . get ( ClientResponse . class ) ; } catch ( Exception e ) { throw new BillingException ( STR_ , new RuntimeException ( STR_ ) ) ; } if ( response . getStatus ( ) != NUM_ ) { throw new BillingException ( STR_ , new RuntimeException ( STR_ + response . getStatus ( ) ) ) ; } return response ; }
private EvaluationStrategies ( ) { }
public String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; toString ( sb , NUM_ , this ) ; return ( sb . toString ( ) ) ; }
public void handleMessageEvent ( ChannelDataMessageEvent messageEvent ) ;
private void pop ( final String desc ) { char c = desc . charAt ( NUM_ ) ; if ( c == STR_ ) { pop ( ( Type . getArgumentsAndReturnSizes ( desc ) > > NUM_ ) - NUM_ ) ; } else if ( c == STR_ || c == STR_ ) { pop ( NUM_ ) ; } else { pop ( NUM_ ) ; } }
public void add ( float element ) { beforeInsert ( size , element ) ; }
public boolean canDockEast ( ) { List constraints = dockPanel . getConstraints ( getChildren ( ) ) ; return DockConstraint . canDockEast ( constraints ) ; }
private ComposableBody applySessionData ( final long rid , final ComposableBody orig ) throws BOSHException { assertLocked ( ) ; Builder builder = orig . rebuild ( ) ; builder . setAttribute ( Attributes . SID , cmParams . getSessionID ( ) . toString ( ) ) ; builder . setAttribute ( Attributes . RID , Long . toString ( rid ) ) ; applyResponseAcknowledgement ( builder , rid ) ; return builder . build ( ) ; }
public static DoubleVector rnorm ( int n , double mean , double sd , Random random ) { if ( sd < NUM_ ) throw new IllegalArgumentException ( STR_ ) ; if ( sd == NUM_ ) return new DoubleVector ( n , mean ) ; DoubleVector v = new DoubleVector ( n ) ; for ( int i = NUM_ ; i < n ; i ++ ) v . set ( i , ( random . nextGaussian ( ) + mean ) / sd ) ; return v ; }
protected void validateUsers ( org . oscm . xsd . User [ ] param ) { }
public final long addAndGet ( long delta ) { for ( ; ; ) { long current = get ( ) ; long next = current + delta ; if ( compareAndSet ( current , next ) ) return next ; } }
public boolean isGameRunning ( ) { switch ( gameState ) { case RUNNING : case NUKEROOM : return BOOL_ ; default : return BOOL_ ; } }
public String process ( String document , ResultFormatter resultFormatter ) throws DocumentCreationTimeMissingException { return process ( document , null , resultFormatter ) ; }
protected void revalidate ( ) { }
private Object readResolve ( ) throws ObjectStreamException { if ( this . equals ( TimePeriodAnchor . START ) ) { return TimePeriodAnchor . START ; } else if ( this . equals ( TimePeriodAnchor . MIDDLE ) ) { return TimePeriodAnchor . MIDDLE ; } else if ( this . equals ( TimePeriodAnchor . END ) ) { return TimePeriodAnchor . END ; } return null ; }
protected abstract Shape createShape ( double [ ] xPoints , double [ ] yPoints , int nPoints , boolean close ) ;
static long med3 ( final SortProxy x , final long a , final long b , final long c ) { return x . compare ( a , b ) < NUM_ ? ( x . compare ( b , c ) < NUM_ ? b : x . compare ( a , c ) < NUM_ ? c : a ) : ( x . compare ( b , c ) > NUM_ ? b : x . compare ( a , c ) > NUM_ ? c : a ) ; }
protected int computeMaxTextHeight ( DrawContext dc ) { TreeAttributes attributes = this . getActiveAttributes ( ) ; Rectangle2D bounds = this . getTextBounds ( dc , STR_ , attributes . getFont ( ) ) ; double lineHeight = Math . abs ( bounds . getY ( ) ) ; return ( int ) Math . max ( lineHeight , attributes . getIconSize ( ) . height ) ; }
private void requestNewInterstitial ( ) { AdRequest adRequest = new AdRequest . Builder ( ) . build ( ) ; mInterstitialAd . loadAd ( adRequest ) ; }
public static FunctionAlias newInstance ( Schema schema , int id , String name , String javaClassMethod , boolean force , boolean bufferResultSetToLocalTemp ) { FunctionAlias alias = new FunctionAlias ( schema , id , name ) ; int paren = javaClassMethod . indexOf ( STR_ ) ; int lastDot = javaClassMethod . lastIndexOf ( STR_ , paren < NUM_ ? javaClassMethod . length ( ) : paren ) ; if ( lastDot < NUM_ ) { throw DbException . get ( ErrorCode . SYNTAX_ERROR_1 , javaClassMethod ) ; } alias . className = javaClassMethod . substring ( NUM_ , lastDot ) ; alias . methodName = javaClassMethod . substring ( lastDot + NUM_ ) ; alias . bufferResultSetToLocalTemp = bufferResultSetToLocalTemp ; alias . init ( force ) ; return alias ; }
public static void createClientCache1UniqueWriter ( String host , Integer port ) throws Exception { ConflationDUnitTest test = new ConflationDUnitTest ( ) ; cache = test . createCache ( createProperties1 ( ) ) ; AttributesFactory factory = new AttributesFactory ( ) ; factory . setScope ( Scope . LOCAL ) ; factory . setPoolName ( createPool ( host , STR_ , port , BOOL_ ) . getName ( ) ) ; RegionAttributes attrs = factory . create ( ) ; cache . createRegion ( REGION_NAME1 , attrs ) ; factory . setPoolName ( createPool ( host , STR_ , port , BOOL_ ) . getName ( ) ) ; attrs = factory . create ( ) ; cache . createRegion ( REGION_NAME2 , attrs ) ; }
void onCameraMetaData ( byte [ ] data , Camera camera ) ;
public static boolean isWithinWorld ( int x , int y ) { return x >= NUM_ && y >= NUM_ && x < ( CHUNKS_X * Chunk . CHUNK_SIZE ) && y < ( CHUNKS_Y * Chunk . CHUNK_SIZE ) ; }
public void test_MultipleAccessToSeveralTables ( ) throws SQLException { threadPool . runTask ( createTask1 ( NUM_ ) ) ; threadPool . runTask ( createTask2 ( NUM_ ) ) ; threadPool . runTask ( createTask3 ( NUM_ ) ) ; }
public void release ( ) { stayAwake ( BOOL_ ) ; updateSurfaceScreenOn ( ) ; mOnPreparedListener = null ; mOnBufferingUpdateListener = null ; mOnCompletionListener = null ; mOnSeekCompleteListener = null ; mOnErrorListener = null ; mOnInfoListener = null ; mOnVideoSizeChangedListener = null ; _release ( ) ; closeFD ( ) ; }
public void write ( Writer out ) throws IOException { Document doc = getDocument ( ) ; try { getUI ( ) . getEditorKit ( this ) . write ( out , doc , NUM_ , doc . getLength ( ) ) ; } catch ( BadLocationException e ) { throw new IOException ( e . getMessage ( ) ) ; } }
public DataInputStream ( java . io . InputStream in ) { super ( in ) ; }
void writeImage ( PNGTranscoder transcoder , BufferedImage img , TranscoderOutput output ) throws TranscoderException ;
public void execute ( ) { writeLine ( WELCOME ) ; executor . getContext ( ) . getCapability ( Context . Capabilities . GLOBAL_CONFIG , BOOL_ ) . ifPresent ( null ) ; console . start ( ) ; }
public SIPETagParser ( String etag ) { super ( etag ) ; }
public boolean isImageCachable ( int w , int h ) { return ( w * h ) < maxSingleImagePixelSize ; }
public abstract void closeInbound ( ) throws SSLException ;
private static long gcd ( long n , long d ) { long n1 = Math . abs ( n ) ; long n2 = Math . abs ( d ) ; int gcd = NUM_ ; for ( int k = NUM_ ; k <= n1 && k <= n2 ; k ++ ) { if ( n1 % k == NUM_ && n2 % k == NUM_ ) gcd = k ; } return gcd ; }
public static _Fields findByName ( String name ) { return byName . get ( name ) ; }
R concat ( R rhs ) ;
public Object runSafely ( Catbert . FastStack stack ) throws Exception { Show s = getShow ( stack ) ; return ( s != null ) ? new Integer ( s . getImageCount ( ) ) : new Integer ( NUM_ ) ; }
private int measureWidth ( int measureSpec ) { float result ; int specMode = MeasureSpec . getMode ( measureSpec ) ; int specSize = MeasureSpec . getSize ( measureSpec ) ; if ( ( specMode == MeasureSpec . EXACTLY ) || ( mViewPager == null ) ) { result = specSize ; } else { final int count = mViewPager . getAdapter ( ) . getCount ( ) ; result = getPaddingLeft ( ) + getPaddingRight ( ) + ( count * mLineWidth ) + ( ( count - NUM_ ) * mGapWidth ) ; if ( specMode == MeasureSpec . AT_MOST ) { result = Math . min ( result , specSize ) ; } } return ( int ) Math . ceil ( result ) ; }
public String toStringAsBinarySequences ( Taxa taxa ) { StringBuilder buf = new StringBuilder ( ) ; for ( Iterator it = taxa . iterator ( ) ; it . hasNext ( ) ; ) { String name = ( String ) it . next ( ) ; int t = taxa . indexOf ( name ) ; buf . append ( STR_ ) . append ( name ) . append ( STR_ ) ; for ( int s = NUM_ ; s <= size ( ) ; s ++ ) { Split split = getSplit ( s ) ; if ( split . getA ( ) . get ( t ) ) buf . append ( STR_ ) ; else buf . append ( STR_ ) ; } buf . append ( STR_ ) ; } return buf . toString ( ) ; }
public QueryPlan ( Database . Transaction transaction , String startTableName ) { this . transaction = transaction ; this . startTableName = startTableName ; this . selectColumns = new ArrayList < String > ( ) ; this . joinTableNames = new ArrayList < String > ( ) ; this . joinLeftColumnNames = new ArrayList < String > ( ) ; this . joinRightColumnNames = new ArrayList < String > ( ) ; this . whereColumnNames = new ArrayList < String > ( ) ; this . whereOperators = new ArrayList < PredicateOperator > ( ) ; this . whereDataTypes = new ArrayList < DataType > ( ) ; this . hasCount = BOOL_ ; this . averageColumnName = null ; this . sumColumnName = null ; this . groupByColumn = null ; this . finalOperator = null ; }
public boolean matches ( Message msg ) ;
public int size ( ) { return entries . size ( ) ; }
DimensionColumnDataChunk [ ] readDimensionChunks ( FileHolder fileReader , int ... blockIndexes ) ;
public static < T extends GenericEntity > List < T > filterByDate ( List < T > datedValues , boolean allAreSame ) { return filterByDate ( datedValues , UtilDateTime . nowTimestamp ( ) , null , null , allAreSame ) ; }
private void failOnStart ( final Throwable cause ) { if ( this . cache != null ) { this . cache . close ( ) ; this . cache = null ; } if ( this . process != null ) { this . process . stop ( ) ; this . process = null ; } INSTANCE . compareAndSet ( this , null ) ; this . running . set ( BOOL_ ) ; }
public SchemaBuilder addMatchingRule ( final String definition , final boolean overwrite ) { return addMatchingRule ( definition , overwrite , null ) ; }
public ObjectFactory ( ) { }
public View ( Controller controller ) { this . controller = controller ; }
public abstract void memberOnline ( PersistentMemberID persistentID ) ;
public TraceCaseActivation_ createTraceCaseActivation_ ( ) { TraceCaseActivation_Impl traceCaseActivation_ = new TraceCaseActivation_Impl ( ) ; return traceCaseActivation_ ; }
public native int integerDoubleFitVirtual ( int val1 , double fval2 , int val3 , double fval4 ) ;
public void process ( DistributionManager dm ) { Assert . assertTrue ( this . date != null ) ; System . out . println ( format . format ( this . date ) ) ; }
public int read ( char [ ] cbuf , int off , int len ) throws IOException { return internalIn . read ( cbuf , off , len ) ; }
void open ( ) ;
private void stubWarnIfOverwritesBytecode ( String warning ) { if ( warnings . add ( warning ) && ( warnIfStubOverwritesBytecode || debugStubParser ) ) { processingEnv . getMessager ( ) . printMessage ( javax . tools . Diagnostic . Kind . WARNING , STR_ + warning ) ; } }
public boolean isValueOnly ( ) { return valueOnly ; }
boolean isBillingAddressNotRequired ( ) ;
public MultiDirectionalSimplex ( final double [ ] steps ) { this ( steps , DEFAULT_KHI , DEFAULT_GAMMA ) ; }
public final boolean isResourceAbsent ( long resourceID ) { return this . isResourceAbsent ( Long . toString ( resourceID ) ) ; }
public DataProviderEntity createDataProviderEntity ( String dataProviderName ) { DataProviderEntity dataProviderEntity = new DataProviderEntity ( ) ; dataProviderEntity . setName ( dataProviderName ) ; return dataProviderDao . saveAndRefresh ( dataProviderEntity ) ; }
public E peek ( ) { return list [ size - NUM_ ] ; }
public static InputStream toInputStream ( String input ) { return toInputStream ( input , Charset . defaultCharset ( ) ) ; }
public native BytePointer put ( byte [ ] array , int offset , int length ) ;
public Drawable loadIcon ( PackageManager pm ) { if ( icon != NUM_ ) { Drawable dr = pm . getDrawable ( packageName , icon , getApplicationInfo ( ) ) ; if ( dr != null ) { return dr ; } } return loadDefaultIcon ( pm ) ; }
public static void checkMethodSignature ( final String signature ) { int pos = NUM_ ; if ( getChar ( signature , NUM_ ) == STR_ ) { pos = checkFormalTypeParameters ( signature , pos ) ; } pos = checkChar ( STR_ , signature , pos ) ; while ( STR_ . indexOf ( getChar ( signature , pos ) ) != - NUM_ ) { pos = checkTypeSignature ( signature , pos ) ; } pos = checkChar ( STR_ , signature , pos ) ; if ( getChar ( signature , pos ) == STR_ ) { ++ pos ; } else { pos = checkTypeSignature ( signature , pos ) ; } while ( getChar ( signature , pos ) == STR_ ) { ++ pos ; if ( getChar ( signature , pos ) == STR_ ) { pos = checkClassTypeSignature ( signature , pos ) ; } else { pos = checkTypeVariableSignature ( signature , pos ) ; } } if ( pos != signature . length ( ) ) { throw new IllegalArgumentException ( signature + STR_ + pos ) ; } }
public void onFlipIgnoreBughouseOtherBoard ( ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( STR_ ) ; } board . setWhiteOnTop ( ! board . isWhiteOnTop ( ) ) ; board . setWhitePieceJailOnTop ( ! board . isWhitePieceJailOnTop ( ) ) ; board . redrawPiecesAndArtifacts ( BOOL_ ) ; board . getControl ( ) . layout ( BOOL_ , BOOL_ ) ; board . getControl ( ) . redraw ( ) ; }
private void waitUntilReadable ( ) throws IOException { readTimeout . enter ( ) ; try { while ( readBuffer . size ( ) == NUM_ && ! finished && ! closed && errorCode == null ) { waitForIo ( ) ; } } finally { readTimeout . exitAndThrowIfTimedOut ( ) ; } }
void indexEntities ( Iterable < EntityState > changedStates ) throws SQLException ;
public com . sun . identity . wsfederation . jaxb . xmlsig . PGPDataElement createPGPDataElement ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . wsfederation . jaxb . xmlsig . impl . PGPDataElementImpl ( ) ; }
public static TestSSLContext create ( TestKeyStore client , TestKeyStore server ) { String provider = StandardNames . JSSE_PROVIDER_NAME ; return create ( client , server , provider , provider ) ; }
public void show ( Animation anim ) { show ( BOOL_ , anim ) ; }
public void removeUpdate ( DocumentEvent changes , Shape a , ViewFactory f ) { updateDamage ( changes , a , f ) ; }
public void clear ( ) { for ( int i = NUM_ ; i < mSubcategories . size ( ) ; i ++ ) { mSubcategories . get ( i ) . clear ( ) ; } mBlocks . clear ( ) ; mSubcategories . clear ( ) ; }
public abstract OpenEntity open ( ExternalId xid , boolean isParameterEntity , String entityName ) throws IOException ;
public BranchGroupPortrayal3D ( BranchGroup scene , double scale ) { this ( scene , scale , null ) ; }
public Commafier ( final Iterable < ? extends Object > elements ) { this ( elements , DEFAULT_SEPARATOR ) ; }
Socket createSocket ( Socket socket , String host , int port , boolean autoClose ) throws IOException , UnknownHostException ;
public String toPattern ( ) { return pattern ; }
public void update ( byte [ ] buf ) { update ( buf , NUM_ , buf . length ) ; }
static void update ( SynthContext state , Graphics g ) { paintRegion ( state , g , null ) ; }
public boolean nextTile ( ) throws ModelControlException { boolean movedToRow = super . nextTile ( ) ; PWResetQuestionModel model = getModel ( ) ; if ( movedToRow ) { String question = questionKeys . get ( getTileIndex ( ) ) ; String localizedStr = model . getLocalizedStrForQuestion ( question ) ; HiddenField hf = ( HiddenField ) getChild ( FLD_ATTR_NAME ) ; hf . setValue ( question ) ; setDisplayFieldValue ( LBL_QUESTION , localizedStr ) ; } return movedToRow ; }
private void verifyDeleteExportRule ( List < ExportRule > listExportRule ) throws Exception { if ( listExportRule == null ) { return ; } _log . info ( STR_ , listExportRule . size ( ) ) ; for ( ExportRule exportRule : listExportRule ) { exportRule . setIsToProceed ( BOOL_ , ExportOperationErrorType . NO_ERROR ) ; _log . info ( STR_ , exportRule . toString ( ) ) ; scanForDuplicateSecFlavor ( exportRule ) ; if ( ! exportRule . isToProceed ( ) ) { _log . info ( STR_ , exportRule . toString ( ) ) ; break ; } FileExportRule rule = validateInputAndQueryDB ( exportRule ) ; if ( rule != null ) { exportRule . setIsToProceed ( BOOL_ , ExportOperationErrorType . NO_ERROR ) ; } else { _log . info ( STR_ ) ; exportRule . setIsToProceed ( BOOL_ , ExportOperationErrorType . EXPORT_NOT_FOUND ) ; } } }
Map < String , String > write ( ) ;
public static _Fields findByThriftIdOrThrow ( int fieldId ) { _Fields fields = findByThriftId ( fieldId ) ; if ( fields == null ) throw new IllegalArgumentException ( STR_ + fieldId + STR_ ) ; return fields ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public void environmentStop ( EnvironmentClassLoader loader ) { Method stop = getStopMethod ( _resource . getClass ( ) ) ; if ( stop == null ) return ; try { stop . invoke ( _resource ) ; } catch ( Throwable e ) { log . log ( Level . WARNING , e . toString ( ) , e ) ; } }
public boolean badRequest ( ) throws HttpRequestException { return HTTP_BAD_REQUEST == code ( ) ; }
public boolean isAfter ( YearMonth other ) { return compareTo ( other ) > NUM_ ; }
public ColladaRoot parse ( Object ... args ) throws XMLStreamException { ColladaParserContext ctx = this . parserContext ; try { for ( XMLEvent event = ctx . nextEvent ( ) ; ctx . hasNext ( ) ; event = ctx . nextEvent ( ) ) { if ( event == null ) continue ; if ( event . isStartElement ( ) && event . asStartElement ( ) . getName ( ) . getLocalPart ( ) . equals ( STR_ ) ) { super . parse ( ctx , event , args ) ; return this ; } } } finally { ctx . getEventReader ( ) . close ( ) ; this . closeEventStream ( ) ; } return null ; }
public void propertyChange ( PropertyChangeEvent evt ) { if ( ! evt . getPropertyName ( ) . equals ( STR_ ) ) { return ; } if ( evt . getNewValue ( ) == Boolean . TRUE ) { return ; } removeTraversingOutListeners ( ( KeyboardFocusManager ) evt . getSource ( ) ) ; appletKFM = KeyboardFocusManager . getCurrentKeyboardFocusManager ( ) ; if ( isVisible ( ) ) { addTraversingOutListeners ( appletKFM ) ; } }
public static HttpRequest options ( final URL url ) throws HttpRequestException { return new HttpRequest ( url , METHOD_OPTIONS ) ; }
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( normalize01 . class , args ) ; }
public static void storagePools ( String id ) { VirtualArrayRestRep virtualArray = getVirtualArray ( id ) ; VirtualArrayStoragePoolsDataTable dataTable = new VirtualArrayStoragePoolsDataTable ( ) ; render ( virtualArray , dataTable ) ; }
< S extends T > S save ( S entity ) ;
public static String [ ] values ( ) { return ALL_VALUES ; }
public static String prependXMLProperty ( String xml , String propertyXML ) { int idx = xml . indexOf ( PropertyTemplate . START_TAG ) ; idx += PropertyTemplate . START_TAG . length ( ) ; return xml . substring ( NUM_ , idx ) + propertyXML + xml . substring ( idx ) ; }
boolean isCompatible ( T t , U u ) ;
protected abstract void addFileSetProperties ( FileSetProperties . Builder properties ) ;
public static String [ ] tokenize ( String string , String splitOn ) { return string . replace ( STR_ , STR_ ) . split ( splitOn ) ; }
public void addPaths ( File file , int type ) throws IOException { addPaths ( new FileReader ( file ) , type ) ; }
public DERSequence ( ) { }
public static int color ( ColorHolder colorHolder , Context ctx ) { if ( colorHolder == null ) { return NUM_ ; } else { return colorHolder . color ( ctx ) ; } }
void queueInputBuffer ( I inputBuffer ) throws E ;
public Criteria createCriteria ( ) { Criteria criteria = createCriteriaInternal ( ) ; if ( oredCriteria . size ( ) == NUM_ ) { oredCriteria . add ( criteria ) ; } return criteria ; }
private void copyScheduleIntoFrontier ( final int minCapacity , final Iterator < Value > itr ) { backing . ensureCapacity ( minCapacity ) ; final Value [ ] a = backing . array ( ) ; int nvertices = NUM_ ; while ( itr . hasNext ( ) ) { final Value v = itr . next ( ) ; a [ nvertices ++ ] = v ; } for ( int i = nvertices ; i < a . length ; i ++ ) { if ( a [ i ] == null ) break ; a [ i ] = null ; } this . vertices = backing . slice ( NUM_ , nvertices ) ; }
int count ( V value ) ;
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( hc_namednodemapreturnattrnode . class , args ) ; }
public Draw ( String name ) { this . name = name ; init ( ) ; }
private static Tag mapUnaryOpCodeToTag ( int unaryOpCode ) { switch ( unaryOpCode ) { case PREINCcode : return PREINC ; case PREDECcode : return PREDEC ; case POSTINCcode : return POSTINC ; case POSTDECcode : return POSTDEC ; default : return NO_TAG ; } }
void openCursor ( DatabaseCursorCallback < K , V > callback ) ;
public static void main ( String [ ] args ) { new GuiMain ( ) ; }
public static URI createVirtualDataCenterId ( String vdcId ) { return newId ( VirtualDataCenter . class , vdcId ) ; }
public boolean wasDoubleClicked ( int code ) { MouseButton mb = this . buttons . get ( code ) ; if ( mb == null ) { return BOOL_ ; } return mb . wasDoubleClicked ( ) ; }
public ByteArrayOutputStream ( int size ) { if ( size < NUM_ ) { throw new IllegalArgumentException ( STR_ + size ) ; } synchronized ( this ) { needNewBuffer ( size ) ; } }
public WithinExtended ( ) { super ( null , null ) ; }
public void testStefan ( ) throws Exception { String text = STR_ ; Document document = DocumentHelper . parseText ( text ) ; XPath xpath = DocumentHelper . createXPath ( STR_ ) ; Object value = xpath . evaluate ( document ) ; }
public UnsupportedResponseTypeException ( final String message , final OAuth2Constants . UrlLocation parameterLocation ) { super ( NUM_ , STR_ , message , parameterLocation ) ; }
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( characterdataappenddatanomodificationallowederrEE . class , args ) ; }
protected TaskImage calculateResultImage ( ImageToProcess img , int subsample ) { final Rect safeCrop = guaranteedSafeCrop ( img . proxy , img . crop ) ; int resultWidth , resultHeight ; if ( mThumbnailShape == ThumbnailShape . MAINTAIN_ASPECT_NO_INSET ) { resultWidth = safeCrop . width ( ) / subsample ; resultHeight = safeCrop . height ( ) / subsample ; } else { final int radius = inscribedCircleRadius ( safeCrop . width ( ) / subsample , safeCrop . height ( ) / subsample ) ; resultWidth = NUM_ * radius ; resultHeight = NUM_ * radius ; } return new TaskImage ( img . rotation , resultWidth , resultHeight , TaskImage . EXTRA_USER_DEFINED_FORMAT_ARGB_8888 , null ) ; }
private int findIndex ( Object key , Object [ ] array ) { int length = array . length ; int index = getModuloHash ( key , length ) ; int last = ( index + length - NUM_ ) % length ; while ( index != last ) { if ( array [ index ] == key || ( array [ index ] == null ) ) { break ; } index = ( index + NUM_ ) % length ; } return index ; }
public void go ( OutputStream out ) throws IOException { go ( new JCalWriter ( out , wrapInArray ( ) ) ) ; }
public static SM_SYSTEM_MESSAGE STR_CHAT_ROOM_CREATE_SUCCESS ( String value0 ) { return new SM_SYSTEM_MESSAGE ( NUM_ , value0 ) ; }
public void stopRefresh ( String time ) { if ( mPullRefreshing == BOOL_ ) { mPullRefreshing = BOOL_ ; mHeaderTimeView . setText ( time ) ; resetHeaderHeight ( ) ; } mHeaderTimeView . setText ( time ) ; }
public static FileSystemProvider create ( ) { String osname = AccessController . doPrivileged ( new GetPropertyAction ( STR_ ) ) ; if ( osname . equals ( STR_ ) ) return createProvider ( STR_ ) ; if ( osname . equals ( STR_ ) ) return createProvider ( STR_ ) ; if ( osname . contains ( STR_ ) ) return createProvider ( STR_ ) ; if ( osname . equals ( STR_ ) ) return createProvider ( STR_ ) ; throw new AssertionError ( STR_ ) ; }
TypePath ( byte [ ] b , int offset ) { this . b = b ; this . offset = offset ; }
static boolean isCOctetStringNullOrNValValid ( String value , int length ) { if ( value == null ) { return BOOL_ ; } if ( value . length ( ) == NUM_ ) { return BOOL_ ; } if ( value . length ( ) == length - NUM_ ) { return BOOL_ ; } return BOOL_ ; }
public void test_ticket_1648a ( ) throws Exception { new TestHelper ( STR_ , STR_ , STR_ , STR_ ) . runTest ( ) ; }
public boolean isInPast ( long time ) { return time > mCursor . getLong ( mCursor . getColumnIndex ( COLUMN_NAME_DEPARTURE ) ) ; }
public String register ( ) throws NonUniqueBusinessKeyException , ValidationException , ObjectNotFoundException , MailOperationException , RegistrationException { if ( logger . isDebugLoggingEnabled ( ) ) { } String mId = getMarketplaceId ( ) ; String parameter = getRequest ( ) . getParameter ( Constants . REQ_PARAM_SERVICE_KEY ) ; String outcome = BaseBean . OUTCOME_SUCCESS ; Long serviceKey = null ; if ( parameter != null && parameter . trim ( ) . length ( ) > NUM_ ) { serviceKey = Long . valueOf ( parameter ) ; } if ( ! isInternalMode ( ) ) { password = STR_ ; } try { organization = getAccountingService ( ) . registerCustomer ( getOrganization ( ) , user . getVOUserDetails ( ) , password , serviceKey , mId , getSupplierId ( ) ) ; } catch ( NonUniqueBusinessKeyException ex ) { if ( isInternalMode ( ) ) { throw ex ; } ex . setMessageKey ( BaseBean . ERROR_USER_ALREADY_EXIST ) ; ExceptionHandler . execute ( ex , BOOL_ ) ; return BaseBean . OUTCOME_ERROR ; } if ( logger . isDebugLoggingEnabled ( ) ) { } return outcome ; }
public static void removeAllServices ( ) throws RpcException { try { ServicePublisher . removeAllServices ( ) ; } catch ( RegistryException e ) { throw new RpcException ( STR_ , e ) ; } }
public boolean isTextElement ( ) { return textElement ; }
void encrypt ( byte [ ] bytes , int off , int len ) ;
private void initActionBarDrawerToggle ( ) { mActionBarDrawerToggle = new ActionBarDrawerToggle ( ( Activity ) getContext ( ) , mDelegate . getDrawerLayout ( ) , this , R . string . accessibility_enhanced_bookmark_drawer_toggle_btn_open , R . string . accessibility_enhanced_bookmark_drawer_toggle_btn_close ) ; mDelegate . getDrawerLayout ( ) . setDrawerListener ( mActionBarDrawerToggle ) ; mActionBarDrawerToggle . syncState ( ) ; }
final int externalHelpComplete ( CountedCompleter < ? > task , int maxTasks ) { WorkQueue [ ] ws ; int wl ; int r = TLRandom . getProbe ( ) ; return ( ( ws = workQueues ) != null && ( wl = ws . length ) > NUM_ ) ? helpComplete ( ws [ ( wl - NUM_ ) & r & SQMASK ] , task , maxTasks ) : NUM_ ; }
private void advance ( ) throws IOException { close ( ) ; if ( it . hasNext ( ) ) { in = it . next ( ) . openStream ( ) ; } }
public ClusterGroupEmptyException ( ) { super ( STR_ ) ; }
public static String seconds2HH_mm_ss ( long seconds ) { long h = NUM_ ; long m = NUM_ ; long s = NUM_ ; long temp = seconds % NUM_ ; if ( seconds > NUM_ ) { h = seconds / NUM_ ; if ( temp != NUM_ ) { if ( temp > NUM_ ) { m = temp / NUM_ ; if ( temp % NUM_ != NUM_ ) { s = temp % NUM_ ; } } else { s = temp ; } } } else { m = seconds / NUM_ ; if ( seconds % NUM_ != NUM_ ) { s = seconds % NUM_ ; } } String dh = h < NUM_ ? STR_ + h : h + STR_ ; String dm = m < NUM_ ? STR_ + m : m + STR_ ; String ds = s < NUM_ ? STR_ + s : s + STR_ ; return dh + STR_ + dm + STR_ + ds ; }
public void incThrottleCount ( ) ;
boolean installContext ( String contextName ) throws Exception ;
protected double computeLabelInteriorOpacity ( double textOpacity ) { return textOpacity * DEFAULT_LABEL_INTERIOR_OPACITY ; }
public boolean addAll ( PointsToSetInternal other , PointsToSetInternal exclude ) { if ( exclude != null ) { throw new RuntimeException ( STR_ ) ; } return newSet . addAll ( other , oldSet ) ; }
public void addOperation ( Model ops , OperationNode node ) { Type type = typeTable . getType ( node . getNamespace ( ) , WEB_SERVICE_OPERATION ) ; Model ws = component ; ComponentChildNodeHandler wsChildNodeHandler = childNodeHandler ; component = new Model ( document , type , ops , node . beginLine ) ; childNodeHandler = new RequestChildNodeHandler ( typeTable ) ; String name = ( String ) node . getAttributeValue ( NAME ) ; ops . setProperty ( name , component ) ; component . setParentIndex ( name ) ; processAttributes ( node , type ) ; processChildren ( node , type ) ; childNodeHandler = wsChildNodeHandler ; component = ws ; }
public Deathdate ( String text ) { super ( text ) ; }
public CounterMovingAverage ( final int numberOfCounters ) { counters = new int [ numberOfCounters ] ; }
protected String values ( int size ) { String values = STR_ ; for ( int i = NUM_ ; i < size - NUM_ ; i ++ ) { values += STR_ ; } values += STR_ ; return values ; }
void removeGroup ( Group group ) throws ObjectLacksException ;
private boolean add ( BasedNumberElement e ) { assert e != null ; if ( isTop ( ) ) return BOOL_ ; set . add ( e ) ; if ( set . size ( ) > bound ) { set = FULL_SET ; return BOOL_ ; } else { return BOOL_ ; } }
public Enumeration < Element > elements ( ) { return ( registry . elements ( ) ) ; }
private void linkLast ( E e ) { checkNotNull ( e ) ; final Node < E > newNode = new Node < E > ( e ) ; restartFromTail : for ( ; ; ) for ( Node < E > t = tail , p = t , q ; ; ) { if ( ( q = p . next ) != null && ( q = ( p = q ) . next ) != null ) p = ( t != ( t = tail ) ) ? t : q ; else if ( p . prev == p ) continue restartFromTail ; else { newNode . lazySetPrev ( p ) ; if ( p . casNext ( null , newNode ) ) { if ( p != t ) casTail ( t , newNode ) ; return ; } } } }
public void showContent ( ) { mSlidingMenu . showContent ( ) ; }
public void stopLocation ( ) { if ( _locationManager != null ) { if ( _locationListenerNetworkProvider != null ) { try { _locationManager . removeUpdates ( _locationListenerNetworkProvider ) ; } catch ( SecurityException exc ) { Log . e ( TAG , exc . getMessage ( ) ) ; } _locationListenerNetworkProvider = null ; } _locationManager = null ; if ( _locationDataBuffer != null ) { _locationDataBuffer . clear ( ) ; } try { Thread . currentThread ( ) . interrupt ( ) ; } catch ( SecurityException exc ) { Log . e ( TAG , exc . getMessage ( ) ) ; sendCallback ( PluginResult . Status . ERROR , JSONHelper . errorJSON ( LocationManager . NETWORK_PROVIDER , ErrorMessages . FAILED_THREAD_INTERRUPT ( ) ) ) ; } } Log . d ( TAG , STR_ ) ; }
protected Shape createOuterFocus ( final SegmentType segmentType , final int x , final int y , final int w , final int h ) { switch ( segmentType ) { case FIRST : return shapeGenerator . createRoundRectangle ( x - NUM_ , y - NUM_ , w + NUM_ , h + NUM_ , CornerSize . OUTER_FOCUS , CornerStyle . ROUNDED , CornerStyle . ROUNDED , CornerStyle . SQUARE , CornerStyle . SQUARE ) ; case MIDDLE : return shapeGenerator . createRectangle ( x - NUM_ , y - NUM_ , w + NUM_ , h + NUM_ ) ; case LAST : return shapeGenerator . createRoundRectangle ( x - NUM_ , y - NUM_ , w + NUM_ , h + NUM_ , CornerSize . OUTER_FOCUS , CornerStyle . SQUARE , CornerStyle . SQUARE , CornerStyle . ROUNDED , CornerStyle . ROUNDED ) ; default : return shapeGenerator . createRoundRectangle ( x - NUM_ , y - NUM_ , w + NUM_ , h + NUM_ , CornerSize . OUTER_FOCUS ) ; } }
public void doLDIFImportBegin ( LDIFImportConfig importConfig ) { throw new UnsupportedOperationException ( ERR_PLUGIN_TYPE_NOT_SUPPORTED . get ( pluginDN , PluginType . LDIF_IMPORT_BEGIN . getName ( ) ) . toString ( ) ) ; }
public GeoPoint createSurfacePoint ( final double x , final double y , final double z ) { final double t = Math . sqrt ( NUM_ / ( x * x * inverseAbSquared + y * y * inverseAbSquared + z * z * inverseCSquared ) ) ; return new GeoPoint ( t * x , t * y , t * z ) ; }
public < T extends JCTree > void printExprs ( List < T > trees , String sep ) throws IOException { if ( trees . nonEmpty ( ) ) { printExpr ( trees . head ) ; for ( List < T > l = trees . tail ; l . nonEmpty ( ) ; l = l . tail ) { print ( sep ) ; printExpr ( l . head ) ; } } }
ArrayList < GeomPlanarGraphDirectedEdge > reconstructPath ( AStarNodeWrapper n ) { ArrayList < GeomPlanarGraphDirectedEdge > result = new ArrayList < GeomPlanarGraphDirectedEdge > ( ) ; AStarNodeWrapper x = n ; while ( x . cameFrom != null ) { result . add ( NUM_ , x . edgeFrom ) ; x = x . cameFrom ; } return result ; }
public Bundler putCharSequence ( String key , CharSequence value ) { bundle . putCharSequence ( key , value ) ; return this ; }
public abstract void clear ( ) throws BackingStoreException ;
public static void o ( Z [ ] a , int w , int d ) { int n = a . length ; int ww = w + d + NUM_ ; int ncp = ( Parameters . PageWidth ) / ww ; int jl = NUM_ ; while ( jl < n ) { int ju = Math . min ( n , jl + ncp ) ; System . out . print ( STR_ ) ; String head = STR_ ; for ( int j = jl ; j < ju ; j ++ ) { head = Integer . toString ( j ) ; while ( head . length ( ) < ww ) head = STR_ + head ; System . out . print ( head ) ; } System . out . print ( STR_ ) ; for ( int j = jl ; j < ju ; j ++ ) { System . out . print ( ZtoEstring ( a [ j ] , w , d ) ) ; } System . out . print ( STR_ ) ; jl = jl + ncp ; } }
public String render ( EventBean theEvent ) ;
public final char charAt ( int index ) { if ( index < NUM_ || index >= remaining ( ) ) { throw new IndexOutOfBoundsException ( STR_ + index + STR_ + remaining ( ) ) ; } return get ( position + index ) ; }
public EWMA ( double alpha , long interval , TimeUnit intervalUnit ) { this . interval = intervalUnit . toNanos ( interval ) ; this . alpha = alpha ; }
public boolean isTranspositions ( ) { return transpositions ; }
public void afterMerge ( Entity entity , View view ) { if ( ! isAuthorizationRequired ( ) ) { return ; } if ( entity != null ) { metadataTools . traverseAttributesByView ( view , entity , new ClearInaccessibleAttributesVisitor ( ) ) ; } }
public Graph readGraph ( File f ) throws DataIOException ;
void onCancelClicked ( ) ;
protected void onBeforeRequest ( RequestContext requestContext ) throws ServletException { try { HttpServletRequest req = requestContext . getRequest ( ) ; req . setCharacterEncoding ( STR_ ) ; HttpSession session = req . getSession ( BOOL_ ) ; String sessLocale = null ; if ( session != null ) { sessLocale = ( String ) session . getAttribute ( URL_LOCALE ) ; } ISLocaleContext lc = new ISLocaleContext ( ) ; if ( sessLocale != null && sessLocale . length ( ) > NUM_ ) { lc . setLocale ( ISLocaleContext . URL_LOCALE , sessLocale ) ; } lc . setLocale ( req ) ; String reqLocale = lc . getLocale ( ) . toString ( ) ; if ( req . getParameter ( URL_LOCALE ) != null ) { if ( session == null ) { session = req . getSession ( BOOL_ ) ; } session . setAttribute ( URL_LOCALE , reqLocale ) ; } } catch ( UnsupportedEncodingException ex ) { debug . error ( STR_ , ex ) ; } }
public void println ( ) { return ; }
public static void createAllTables ( SQLiteDatabase db , boolean ifNotExists ) { UserDao . createTable ( db , ifNotExists ) ; MessageDao . createTable ( db , ifNotExists ) ; }
HierarchicalStreamWriter createWriter ( Writer out ) ;
public void addSubscriptionToStore ( final String topic , final String clientId ) { final ClientTopicCouple subscription = new ClientTopicCouple ( clientId , topic ) ; if ( ! topics . contains ( subscription ) ) { logger . debug ( STR_ + topic + STR_ + clientId + STR_ ) ; subscriptionsStore . add ( subscription ) ; topics . add ( topic ) ; } }
protected void checkAdditionCompatible ( final FieldMatrix < T > m ) throws MathIllegalArgumentException { if ( ( getRowDimension ( ) != m . getRowDimension ( ) ) || ( getColumnDimension ( ) != m . getColumnDimension ( ) ) ) { throw new MathIllegalArgumentException ( LocalizedCoreFormats . DIMENSIONS_MISMATCH_2x2 , m . getRowDimension ( ) , m . getColumnDimension ( ) , getRowDimension ( ) , getColumnDimension ( ) ) ; } }
boolean isElementDefined ( String elemTypeName ) ;
protected void implReplaceWith ( String newReplacement ) { }
public mat4 translate ( vec3 v ) { float [ ] m = this . m ; m [ NUM_ ] += m [ NUM_ ] * v . x ( ) + m [ NUM_ ] * v . y ( ) + m [ NUM_ ] * v . z ( ) ; m [ NUM_ ] += m [ NUM_ ] * v . x ( ) + m [ NUM_ ] * v . y ( ) + m [ NUM_ ] * v . z ( ) ; m [ NUM_ ] += m [ NUM_ ] * v . x ( ) + m [ NUM_ ] * v . y ( ) + m [ NUM_ ] * v . z ( ) ; m [ NUM_ ] += m [ NUM_ ] * v . x ( ) + m [ NUM_ ] * v . y ( ) + m [ NUM_ ] * v . z ( ) ; return this ; }
void executeQuery ( final String text , final int cursor ) ;
public static String makeLogTag ( Class cls ) { return makeLogTag ( cls . getSimpleName ( ) ) ; }
public void addValue ( Number value , Comparable rowKey , Comparable columnKey ) { this . data . addValue ( value , rowKey , columnKey ) ; fireDatasetChanged ( ) ; }
private static void deletePortMapping ( final UPnPMapping mapping ) { if ( mapping . getPort ( ) > NUM_ && gatewayDevice != null ) { boolean unmapped ; String msg ; try { unmapped = gatewayDevice . deletePortMapping ( mapping . getPort ( ) , mapping . getProtocol ( ) ) ; msg = STR_ + mapping . getPort ( ) + STR_ + gatewayDevice . getFriendlyName ( ) ; if ( unmapped ) { LOG . info ( STR_ + msg ) ; } else { LOG . warn ( STR_ + msg ) ; } } catch ( SAXException | IOException e ) { LOG . severe ( STR_ + e . getMessage ( ) ) ; } } mapping . setPort ( NUM_ ) ; }
public final void consultFile ( final String strFileName ) throws JIPSyntaxErrorException , IOException { Consult1 . consult ( strFileName , this , NUM_ ) ; }
public void pause ( ) { getMediaPlayer ( ) . pause ( ) ; }
public void testRuntimeArgs ( ) throws Exception { AbstractInstalledLocalContainerStub container = new AbstractInstalledLocalContainerStub ( configuration ) ; container . getConfiguration ( ) . setProperty ( GeneralPropertySet . RUNTIME_ARGS , STR_ ) ; container . startInternal ( ) ; JvmLauncher java = container . getJava ( ) ; assertTrue ( STR_ , java . getCommandLine ( ) . contains ( STR_ ) ) ; }
public boolean isLocked ( ) ;
public PoolingByteArrayOutputStream ( ByteArrayPool pool ) { this ( pool , DEFAULT_SIZE ) ; }
protected int read ( ) { int curByte = NUM_ ; try { curByte = ( rawData . get ( ) & NUM_ ) ; } catch ( final Exception e ) { status = STATUS_FORMAT_ERROR ; } return curByte ; }
public JedisIcicle ( final JedisPool jedisPool ) { this . jedisPool = jedisPool ; }
protected IgniteEx grid ( String name ) { if ( ! isRemoteJvm ( name ) ) return ( IgniteEx ) G . ignite ( name ) ; else { if ( isRemoteJvm ( ) ) return IgniteNodeRunner . startedInstance ( ) ; else return IgniteProcessProxy . ignite ( name ) ; } }
public String debugDump ( ) { return debugDump ( NUM_ ) ; }
private void handleImageDatastoreResponse ( Operation response , Throwable ex , String imageId , CalculateConstraintCompletion completion ) { if ( ex != null ) { String error = String . format ( STR_ ) ; ServiceUtils . logSevere ( this , error , ex ) ; Exception cloudStoreEx = new SystemErrorException ( error + STR_ + ex . getMessage ( ) ) ; completion . handle ( null , cloudStoreEx ) ; return ; } List < String > seededImageDatastores = new ArrayList < > ( ) ; ServiceDocumentQueryResult queryResult = response . getBody ( QueryTask . class ) . results ; queryResult . documents . values ( ) . forEach ( null ) ; if ( seededImageDatastores . isEmpty ( ) ) { String error = STR_ + imageId ; ServiceUtils . logWarning ( this , error ) ; completion . handle ( null , new NoSuchResourceException ( error ) ) ; return ; } ResourceConstraint constraint = new ResourceConstraint ( ) ; constraint . setType ( ResourceConstraintType . DATASTORE ) ; constraint . setValues ( seededImageDatastores ) ; completion . handle ( constraint , null ) ; }
public static org . oscm . vo . VOMarketplace convertToApi ( org . oscm . internal . vo . VOMarketplace oldVO ) { if ( oldVO == null ) { return null ; } org . oscm . vo . VOMarketplace newVO = new org . oscm . vo . VOMarketplace ( ) ; newVO . setKey ( oldVO . getKey ( ) ) ; newVO . setVersion ( oldVO . getVersion ( ) ) ; newVO . setCategoriesEnabled ( oldVO . isCategoriesEnabled ( ) ) ; newVO . setMarketplaceId ( oldVO . getMarketplaceId ( ) ) ; newVO . setName ( oldVO . getName ( ) ) ; newVO . setOpen ( oldVO . isOpen ( ) ) ; newVO . setOwningOrganizationId ( oldVO . getOwningOrganizationId ( ) ) ; newVO . setOwningOrganizationName ( oldVO . getOwningOrganizationName ( ) ) ; newVO . setReviewEnabled ( oldVO . isReviewEnabled ( ) ) ; newVO . setSocialBookmarkEnabled ( oldVO . isSocialBookmarkEnabled ( ) ) ; newVO . setTaggingEnabled ( oldVO . isTaggingEnabled ( ) ) ; return newVO ; }
public void schedule ( String jobName , String poolName , String serviceName , Map < String , ? extends Object > context , long startTime , int frequency , int interval , int count , long endTime , int maxRetry ) throws JobManagerException { schedule ( jobName , poolName , serviceName , context , startTime , frequency , interval , count , endTime , maxRetry , ( String ) null ) ; }
public boolean useMetrics ( int index ) { return ( ( getFlag ( index ) & USE_MY_METRICS ) != NUM_ ) ; }
public static List < String > parseRolesString ( String roles ) { List < String > result = new ArrayList < String > ( ) ; StringTokenizer st = new StringTokenizer ( roles , STR_ ) ; for ( ; st . hasMoreTokens ( ) ; ) { String role = st . nextToken ( ) . trim ( ) ; if ( ! result . contains ( role ) && ( role . equalsIgnoreCase ( String . valueOf ( SecurityContext . PERMISSION_WRITE ) ) || role . equalsIgnoreCase ( String . valueOf ( SecurityContext . PERMISSION_READ ) ) || role . equalsIgnoreCase ( String . valueOf ( SecurityContext . PERMISSION_EXECUTE ) ) ) ) result . add ( role . toUpperCase ( ) ) ; } return result ; }
public ChatTextSink ( Document document ) { this . document = document ; }
public void checkSimpleArray ( boolean registered ) throws Exception { startUp ( registered ) ; cache1 . put ( NUM_ , new EnumType [ ] { EnumType . ONE , EnumType . TWO } ) ; validateSimpleArray ( registered ) ; }
private void addBOMLine ( MProductBOM line , BigDecimal qty ) { log . fine ( line . toString ( ) ) ; String bomType = line . getBOMType ( ) ; if ( bomType == null ) bomType = MProductBOM . BOMTYPE_StandardPart ; BigDecimal lineQty = line . getBOMQty ( ) . multiply ( qty ) ; MProduct product = line . getProduct ( ) ; if ( product == null ) return ; if ( product . isBOM ( ) && product . isVerified ( ) ) addBOMLines ( product , lineQty ) ; else addDisplay ( line . getM_Product_ID ( ) , product . getM_Product_ID ( ) , bomType , product . getName ( ) , lineQty ) ; }
public void signOut ( ) { if ( mState == STATE_DISCONNECTED ) { debugLog ( STR_ ) ; return ; } if ( mPlusClient != null && mPlusClient . isConnected ( ) ) { debugLog ( STR_ ) ; mPlusClient . clearDefaultAccount ( ) ; } if ( mGamesClient != null && mGamesClient . isConnected ( ) ) { debugLog ( STR_ ) ; mGamesClient . signOut ( ) ; } debugLog ( STR_ ) ; killConnections ( ) ; }
public void registerNode ( String oidString , SnmpMibNode node ) throws IllegalAccessException { SnmpOid oid = new SnmpOid ( oidString ) ; registerNode ( oid . longValue ( ) , NUM_ , node ) ; }
private static native void bytesToFloats ( byte [ ] src , int srcpos , float [ ] dst , int dstpos , int nfloats ) ;
protected void damageLineRange ( int line0 , int line1 , Shape a , Component host ) { if ( a != null ) { Rectangle area0 = lineToRect ( a , line0 ) ; Rectangle area1 = lineToRect ( a , line1 ) ; if ( ( area0 != null ) && ( area1 != null ) ) { Rectangle dmg = area0 . union ( area1 ) ; host . repaint ( dmg . x , dmg . y , dmg . width , dmg . height ) ; } else host . repaint ( ) ; } }
void selectionChanged ( List < T > selection ) ;
public HeadRuleMap ( InputStream in ) { BufferedReader reader = IOUtils . createBufferedReader ( in ) ; String line , pTag , dir , rule ; String [ ] tmp ; try { while ( ( line = reader . readLine ( ) ) != null ) { tmp = P_COLUMN . split ( line ) ; pTag = tmp [ NUM_ ] ; dir = tmp [ NUM_ ] ; rule = tmp [ NUM_ ] ; put ( pTag , new HeadRule ( dir , rule ) ) ; } } catch ( IOException e ) { e . printStackTrace ( ) ; } }
public final void releaseTable ( ) { space . release ( base ) ; valid = BOOL_ ; }
protected Pair < Connection , PreparedStatement > makeNew ( ) { log . info ( STR_ ) ; Connection connection ; try { connection = databaseConnectionFactory . getConnection ( ) ; } catch ( DatabaseConfigException ex ) { throw new EPException ( STR_ , ex ) ; } PreparedStatement preparedStatement ; try { preparedStatement = connection . prepareStatement ( sql ) ; } catch ( SQLException ex ) { try { connection . close ( ) ; } catch ( SQLException e ) { log . warn ( STR_ + e . getMessage ( ) , e ) ; } throw new EPException ( STR_ + sql + STR_ , ex ) ; } return new Pair < Connection , PreparedStatement > ( connection , preparedStatement ) ; }
Object asObject ( ) ;
public String toASCIIString ( ) { StringBuilder result = new StringBuilder ( ) ; ASCII_ONLY . appendEncoded ( result , toString ( ) ) ; return result . toString ( ) ; }
public boolean emailExists ( String email ) { return email != null && userEntityRepository . findByEmail ( email ) != null ; }
public abstract boolean isOutboundDone ( ) ;
public TransferEntropyCalculatorKraskov ( ) throws InstantiationException , IllegalAccessException , ClassNotFoundException { super ( COND_MI_CALCULATOR_KRASKOV1 ) ; kraskovAlgorithmNumber = NUM_ ; props = new Hashtable < String , String > ( ) ; }
public void train ( String sTrainingText ) { sgOverallGraph . setDataString ( sTrainingText + ( new StringBuffer ( ) . append ( ( char ) StreamTokenizer . TT_EOF ) ) . toString ( ) ) ; clLocator . resetCache ( ) ; getDelimiters ( ) ; }
public DataInputStream ( InputStream in ) { super ( in ) ; }
public static BigDecimal availableToCapture ( GenericValue billingAccount ) throws GenericEntityException { BigDecimal netBalance = getBillingAccountNetBalance ( billingAccount . getDelegator ( ) , billingAccount . getString ( STR_ ) ) ; BigDecimal accountLimit = billingAccount . getBigDecimal ( STR_ ) ; return accountLimit . subtract ( netBalance ) . setScale ( decimals , rounding ) ; }
void onAdd ( ) ;
void finalizeLayout ( ) ;
public void startSync ( ) { }
public void clear ( ) { freeObjects . clear ( ) ; }
public void addVerticesToSet ( Set < VertexType > set ) { set . add ( this . m_vertex ) ; Iterator < SearchTree < VertexType > > i = childIterator ( ) ; while ( i . hasNext ( ) ) { SearchTree < VertexType > child = i . next ( ) ; child . addVerticesToSet ( set ) ; } }
private AnimatedDrawableBackend createAnimatedDrawableBackendMock ( final int frameCount ) { final AnimatedDrawableBackend mockAnimatedDrawableBackend = mock ( AnimatedDrawableBackend . class ) ; when ( mockAnimatedDrawableBackend . getFrameCount ( ) ) . thenReturn ( frameCount ) ; when ( mockAnimatedDrawableBackend . getWidth ( ) ) . thenReturn ( NUM_ ) ; when ( mockAnimatedDrawableBackend . getHeight ( ) ) . thenReturn ( NUM_ ) ; return mockAnimatedDrawableBackend ; }
protected synchronized void openConnection ( ) { super . openConnection ( ) ; m_statement = null ; try { final Connection connection = getConnection ( ) ; if ( null != connection ) { m_statement = connection . prepareStatement ( getStatementSQL ( ) ) ; } } catch ( final SQLException se ) { getErrorHandler ( ) . error ( STR_ , se , null ) ; } }
public boolean isValid ( AnnotatedTypeMirror type , Tree tree ) ;
private boolean checkSensorsStatus_underRecording ( ) { EndToEndTestUtils . instrumentation . waitForIdleSync ( ) ; EndToEndTestUtils . startRecording ( ) ; EndToEndTestUtils . findMenuItem ( trackListActivity . getString ( R . string . menu_sensor_state ) , BOOL_ ) ; boolean result = EndToEndTestUtils . SOLO . waitForText ( trackListActivity . getString ( R . string . sensor_state_connected ) , NUM_ , EndToEndTestUtils . LONG_WAIT_TIME ) ; EndToEndTestUtils . stopRecording ( BOOL_ ) ; return result ; }
protected void renderMenuFull ( Appendable writer , Map < String , Object > context , ModelMenu menu , StringBuffer sb ) throws IOException { try { executeMacro ( writer , sb . toString ( ) ) ; } catch ( TemplateException e ) { throw new IOException ( e ) ; } }
public void addAlarm ( VAlarm alarm ) { addComponent ( alarm ) ; }
public Doc brackets ( ) { return brackets ( this ) ; }
public void next ( ) { index ++ ; cur . advance ( ) ; next . advance ( ) ; }
public boolean visitStylesheet ( ElemTemplateElement elem ) { return BOOL_ ; }
public String toString ( ) { return STR_ + getState ( ) + STR_ + tlog + STR_ ; }
private String outOfBoundsMsg ( int index ) { return STR_ + index + STR_ + size ; }
public abstract void writeThreadId ( char [ ] c , int len ) ;
public static void main ( String [ ] arg ) throws Exception { SimpleCommandLineParser parser = new SimpleCommandLineParser ( arg ) ; String query = parser . getValue ( STR_ , STR_ , STR_ ) ; String nresults = parser . getValue ( STR_ , STR_ , STR_ ) ; String start = parser . getValue ( STR_ , STR_ , STR_ ) ; boolean help = parser . containsKey ( STR_ , STR_ ) ; if ( help || ( query == null ) ) { usage ( ) ; System . exit ( NUM_ ) ; } CodeSearchClient client = new CodeSearchClient ( query , nresults , start ) ; client . run ( System . out ) ; }
public void add ( Statement st , Resource ... contexts ) throws RepositoryException ;
protected static boolean isWhitelisted ( Class < ? > genericType ) { return DtoTemplate . jreWhitelist . contains ( genericType ) ; }
public AABB growToContainPoint ( ReadonlyVec3D p ) { min . minSelf ( p ) ; max . maxSelf ( p ) ; set ( min . interpolateTo ( max , NUM_ ) ) ; extent . set ( max . sub ( min ) . scaleSelf ( NUM_ ) ) ; return this ; }
protected Node newNode ( ) { return new SVGOMFlowRegionBreakElement ( ) ; }
public double minValue ( ) { Iterator iIter = asTreeMap ( ) . values ( ) . iterator ( ) ; Double dMin = Double . POSITIVE_INFINITY ; while ( iIter . hasNext ( ) ) { Double dVal = ( Double ) iIter . next ( ) ; dMin = ( dVal < dMin ) ? dVal : dMin ; } return dMin ; }
public String translateTriggerFunction ( String sourceVendorName , String triggerFunction ) ;
public void showRange ( int minRow , int maxRow , int minCol , int maxCol ) throws IOException , ServiceException { CellQuery query = new CellQuery ( cellFeedUrl ) ; query . setMinimumRow ( minRow ) ; query . setMaximumRow ( maxRow ) ; query . setMinimumCol ( minCol ) ; query . setMaximumCol ( maxCol ) ; CellFeed feed = service . query ( query , CellFeed . class ) ; for ( CellEntry entry : feed . getEntries ( ) ) { printCell ( entry ) ; } }
public boolean hasNext ( ) { return currentPos < endPos ; }
public void readRule ( final EvolutionState state , final DataInput dataInput ) throws IOException { state . output . fatal ( STR_ + this . getClass ( ) ) ; }
public void onTaskChanged ( String name ) ;
private static void d_uaColSumLtGe ( MatrixBlock in , MatrixBlock out , double [ ] bv , BinaryOperator bOp ) throws DMLRuntimeException { int agg0 = sumRowSumGtLeColSumLtGe ( NUM_ , bv , bOp ) ; int m = in . clen ; for ( int i = NUM_ ; i < m ; i ++ ) { double ai = in . quickGetValue ( NUM_ , i ) ; int cnt = ( ai == NUM_ ) ? agg0 : sumRowSumGtLeColSumLtGe ( ai , bv , bOp ) ; out . quickSetValue ( NUM_ , i , cnt ) ; } }
public OverScroller ( Context context ) { this ( context , null ) ; }
private void typeInsn ( final int opcode , final Type type ) { mv . visitTypeInsn ( opcode , type . getInternalName ( ) ) ; }
Map < String , String > subproperties ( String prefix ) ;
public static void deleteFileWithRetry ( Path path ) throws IOException { try { deleteFileWithRetry0 ( path ) ; } catch ( InterruptedException x ) { throw new IOException ( STR_ , x ) ; } }
public BigDecimalPolynomial mult ( BigDecimalPolynomial poly2 ) { int N = coeffs . length ; if ( poly2 . coeffs . length != N ) { throw new IllegalArgumentException ( STR_ ) ; } BigDecimalPolynomial c = multRecursive ( poly2 ) ; if ( c . coeffs . length > N ) { for ( int k = N ; k < c . coeffs . length ; k ++ ) { c . coeffs [ k - N ] = c . coeffs [ k - N ] . add ( c . coeffs [ k ] ) ; } c . coeffs = copyOf ( c . coeffs , N ) ; } return c ; }
public void change_panel_size ( Dimension p_new_bounds ) { if ( coordinate_transform == null ) return ; ShapeTileBox design_box = coordinate_transform . design_box ; boolean left_right_swapped = coordinate_transform . is_mirror_left_right ( ) ; boolean top_bottom_swapped = coordinate_transform . is_mirror_top_bottom ( ) ; double rotation = coordinate_transform . get_rotation ( ) ; coordinate_transform = new GdiCoordinateTransform ( design_box , p_new_bounds ) ; coordinate_transform . set_mirror_left_right ( left_right_swapped ) ; coordinate_transform . set_mirror_top_bottom ( top_bottom_swapped ) ; coordinate_transform . set_rotation ( rotation ) ; }
public void forceFinished ( boolean finished ) { mImpl . forceFinished ( mScrollerCompat . mScroller , finished ) ; }
SshPairDto generatePair ( GenerateSshPairRequest request ) throws ServerException ;
boolean onLongPressSidePanel ( MotionEvent e ) ;
public XML fillMappedField ( Class < ? > configuredClass , MappedField configuredField ) { Attribute attribute = getGlobalAttribute ( configuredField , configuredClass ) ; if ( isNull ( attribute ) ) attribute = getAttribute ( configuredField , configuredClass ) ; if ( ! isNull ( attribute ) ) { if ( isEmpty ( configuredField . getMethod ( ) ) ) configuredField . getMethod ( attribute . getGet ( ) ) ; if ( isEmpty ( configuredField . setMethod ( ) ) ) configuredField . setMethod ( attribute . getSet ( ) ) ; } return this ; }
public TransitionBasedParserMLP ( JavaSparkContext jsc , String classifierFileName , FeatureFrame featureFrame ) { this . featureFrame = featureFrame ; this . classifier = TransitionClassifier . load ( jsc , new Path ( classifierFileName , STR_ ) . toString ( ) ) ; this . pipelineModel = PipelineModel . load ( new Path ( classifierFileName , STR_ ) . toString ( ) ) ; this . transitionName = ( ( StringIndexerModel ) pipelineModel . stages ( ) [ NUM_ ] ) . labels ( ) ; String [ ] features = ( ( CountVectorizerModel ) ( pipelineModel . stages ( ) [ NUM_ ] ) ) . vocabulary ( ) ; this . featureMap = new HashMap < String , Integer > ( ) ; for ( int j = NUM_ ; j < features . length ; j ++ ) { this . featureMap . put ( features [ j ] , j ) ; } }
public BackupSpecification backup ( ) throws BackupException , InterruptedException ;
public final void debug ( final Object o , final Throwable t ) { log ( Level . DEBUG , o , t ) ; }
public BattleResults ( final IBattle battle , final WhoWon scriptedWhoWon , final GameData data ) { super ( data ) ; m_battleRoundsFought = battle . getBattleRound ( ) ; m_remainingAttackingUnits = battle . getRemainingAttackingUnits ( ) ; m_remainingDefendingUnits = battle . getRemainingDefendingUnits ( ) ; m_whoWon = scriptedWhoWon ; }
public Map buildMap ( Map other ) { return new HashMap ( other ) ; }
protected Reader openExternalEntity ( IXMLReader xmlReader , String publicID , String systemID ) throws XMLParseException { String parentSystemID = xmlReader . getSystemID ( ) ; try { return xmlReader . openStream ( publicID , systemID ) ; } catch ( Exception e ) { throw new XMLParseException ( parentSystemID , xmlReader . getLineNr ( ) , STR_ + STR_ + systemID ) ; } }
private static int GetArrayLength ( JNIEnvironment env , int arrayJREF ) { if ( traceJNI ) VM . sysWrite ( STR_ ) ; RuntimeEntrypoints . checkJNICountDownToGC ( ) ; try { Object theArray = env . getJNIRef ( arrayJREF ) ; RVMType arrayType = Magic . getObjectType ( theArray ) ; return arrayType . isArrayType ( ) ? Magic . getArrayLength ( theArray ) : - NUM_ ; } catch ( Throwable unexpected ) { if ( traceJNI ) unexpected . printStackTrace ( System . err ) ; env . recordException ( unexpected ) ; return - NUM_ ; } }
public final static HeaderElement [ ] parseElements ( final String value , HeaderValueParser parser ) throws ParseException { if ( value == null ) { throw new IllegalArgumentException ( STR_ ) ; } if ( parser == null ) parser = SaveHeaderValueParser . DEFAULT ; CharArrayBuffer buffer = new CharArrayBuffer ( value . length ( ) ) ; buffer . append ( value ) ; SaveParserCursor cursor = new SaveParserCursor ( NUM_ , value . length ( ) ) ; return parser . parseElements ( buffer , cursor ) ; }
public NeuralConnection ( String id ) { m_id = id ; m_inputList = new NeuralConnection [ NUM_ ] ; m_outputList = new NeuralConnection [ NUM_ ] ; m_inputNums = new int [ NUM_ ] ; m_outputNums = new int [ NUM_ ] ; m_numInputs = NUM_ ; m_numOutputs = NUM_ ; m_unitValue = Double . NaN ; m_unitError = Double . NaN ; m_weightsUpdated = BOOL_ ; m_x = NUM_ ; m_y = NUM_ ; m_type = UNCONNECTED ; }
public void rotate ( float rot ) { Matrix3f tmp = new Matrix3f ( ) ; tmp . loadRotate ( rot ) ; multiply ( tmp ) ; }
public void addFlags ( byte inFlag ) { flags |= inFlag ; if ( VM . VerifyAssertions ) verifyPreciseType ( ) ; }
public static < T > void writeArray ( PacketBuffer buf , T [ ] value , BiConsumer < PacketBuffer , T > writer ) { buf . writeInt ( value . length ) ; for ( T t : value ) { writer . accept ( buf , t ) ; } }
final boolean load ( int offset , boolean changeEntity ) throws IOException { int length = fCurrentEntity . mayReadChunks ? ( fCurrentEntity . ch . length - offset ) : ( DEFAULT_XMLDECL_BUFFER_SIZE ) ; int count = fCurrentEntity . reader . read ( fCurrentEntity . ch , offset , length ) ; boolean entityChanged = BOOL_ ; if ( count != - NUM_ ) { if ( count != NUM_ ) { fCurrentEntity . count = count + offset ; fCurrentEntity . position = offset ; } } else { fCurrentEntity . count = offset ; fCurrentEntity . position = offset ; entityChanged = BOOL_ ; if ( changeEntity ) { endEntity ( ) ; if ( fCurrentEntity == null ) { throw new EOFException ( ) ; } if ( fCurrentEntity . position == fCurrentEntity . count ) { load ( NUM_ , BOOL_ ) ; } } } return entityChanged ; }
public Observable < String > exerciseZip ( Observable < String > a , Observable < String > b ) { return Observable . zip ( a , b , null ) ; }
public void labelDistances ( Hypergraph < V , E > graph , V root ) { labelDistances ( graph , Collections . singleton ( root ) ) ; }
public static FilePathUnstable register ( ) { FilePath . register ( INSTANCE ) ; return INSTANCE ; }
public static void fill ( boolean [ ] array , boolean value ) { for ( int i = NUM_ ; i < array . length ; i ++ ) { array [ i ] = value ; } }
public Set < String > addContent ( MultivariateDistribution distrib ) { if ( ! paused ) { curState . addToState ( distrib ) ; return update ( ) ; } else { log . info ( STR_ + distrib ) ; return Collections . emptySet ( ) ; } }
public boolean isFinished ( ) { return finished ; }
public PollingScanDiskSpaceMonitor ( Set < Path > watchPaths , long pollingIntervalMillis ) { this . watchPaths = Collections . unmodifiableSet ( new HashSet < > ( watchPaths ) ) ; this . pollingIntervalMillis = pollingIntervalMillis ; }
public SurfaceSession ( ) { mNativeClient = nativeCreate ( ) ; }
void postRemove ( HashMapEntry < K , V > e ) { }
public void testMappingCharFilter ( ) throws Exception { send ( STR_ , STR_ ) ; assertEquals ( STR_ , justTokens ( ) ) ; }
boolean containsNode ( Node node ) ;
public void testConnect_IllegalStateException ( ) throws IOException { assertFalse ( this . channel1 . isConnected ( ) ) ; this . channel1 . connect ( localAddr1 ) ; assertTrue ( this . channel1 . isConnected ( ) ) ; try { this . channel1 . connect ( localAddr1 ) ; fail ( STR_ ) ; } catch ( IllegalStateException e ) { } }
public static int computeTagSize ( final int fieldNumber ) { return computeRawVarint32Size ( WireFormat . makeTag ( fieldNumber , NUM_ ) ) ; }
public static void checkErrors ( ) { if ( errors > NUM_ ) throw new GeneratorException ( ) ; }
public FriendsDeleteAllRequestsQuery deleteAllRequests ( UserActor actor ) { return new FriendsDeleteAllRequestsQuery ( getClient ( ) , actor ) ; }
private void writeSymbolsField ( SymbolTable symTab ) { int importedMaxId = symTab . getImportedMaxId ( ) ; int maxId = symTab . getMaxId ( ) ; if ( importedMaxId == maxId ) { return ; } final int originalOffset = myBuffer . length - myOffset ; for ( int i = maxId ; i > importedMaxId ; i -- ) { String str = symTab . findKnownSymbol ( i ) ; if ( str == null ) { writeByte ( ( byte ) ( TYPE_STRING | NULL_LENGTH_MASK ) ) ; } else { writeIonStringContent ( str ) ; } } writePrefix ( TYPE_LIST , myBuffer . length - myOffset - originalOffset ) ; writeByte ( ( byte ) ( NUM_ | SYMBOLS_SID ) ) ; }
public static String readFully ( Reader reader ) throws IOException { try { StringWriter writer = new StringWriter ( ) ; char [ ] buffer = new char [ NUM_ ] ; int count ; while ( ( count = reader . read ( buffer ) ) != - NUM_ ) { writer . write ( buffer , NUM_ , count ) ; } return writer . toString ( ) ; } finally { reader . close ( ) ; } }
public void init$Children ( ) { children = new ASTNode [ NUM_ ] ; setChild ( new List ( ) , NUM_ ) ; setChild ( new List ( ) , NUM_ ) ; setChild ( new Opt ( ) , NUM_ ) ; }
public JarClassLoader [ ] deploy ( final String jarNames [ ] , final byte [ ] [ ] jarBytes ) throws IOException , ClassNotFoundException { JarClassLoader [ ] jarClassLoaders = new JarClassLoader [ jarNames . length ] ; verifyWritableDeployDirectory ( ) ; lock . lock ( ) ; try { for ( int i = NUM_ ; i < jarNames . length ; i ++ ) { if ( ! JarClassLoader . isValidJarContent ( jarBytes [ i ] ) ) { throw new IllegalArgumentException ( STR_ + jarNames [ i ] ) ; } } for ( int i = NUM_ ; i < jarNames . length ; i ++ ) { jarClassLoaders [ i ] = deployWithoutRegistering ( jarNames [ i ] , jarBytes [ i ] ) ; } for ( JarClassLoader jarClassLoader : jarClassLoaders ) { if ( jarClassLoader != null ) { jarClassLoader . loadClassesAndRegisterFunctions ( ) ; } } } finally { lock . unlock ( ) ; } return jarClassLoaders ; }
public static void printToFile ( String filename , String message ) { printToFile ( new File ( filename ) , message , BOOL_ ) ; }
public List discoverHtml ( UrlIdentifier identifier , HttpFetcher httpFetcher ) throws DiscoveryException { HtmlResult result = new HtmlResult ( ) ; HttpRequestOptions requestOptions = httpFetcher . getRequestOptions ( ) ; requestOptions . setContentType ( STR_ ) ; try { HttpResponse resp = httpFetcher . get ( identifier . toString ( ) , requestOptions ) ; if ( HttpStatus . SC_OK != resp . getStatusCode ( ) ) throw new DiscoveryException ( STR_ + identifier . toString ( ) + STR_ + resp . getStatusCode ( ) , OpenIDException . DISCOVERY_HTML_GET_ERROR ) ; result . setClaimed ( new UrlIdentifier ( resp . getFinalUri ( ) ) ) ; if ( resp . getBody ( ) == null ) throw new DiscoveryException ( STR_ + identifier . toString ( ) , OpenIDException . DISCOVERY_HTML_NODATA_ERROR ) ; HTML_PARSER . parseHtml ( resp . getBody ( ) , result ) ; } catch ( IOException e ) { throw new DiscoveryException ( STR_ , OpenIDException . DISCOVERY_HTML_GET_ERROR , e ) ; } _log . info ( STR_ + identifier ) ; return extractDiscoveryInformation ( result ) ; }
public Expression makeFieldReference ( Environment env , Context ctx ) { Expression e = ctx . findOuterLink ( env , NUM_ , localField ) ; return new FieldExpression ( NUM_ , e , localField ) ; }
private void remapContinuousReadingMenu ( ) { final Editor editor = mSharedPreferences . edit ( ) ; final String targetValue = STR_ ; final String replaceValue = STR_ ; final int [ ] gestureKeys = { R . string . pref_shortcut_down_and_left_key , R . string . pref_shortcut_down_and_right_key , R . string . pref_shortcut_left_and_down_key , R . string . pref_shortcut_left_and_up_key , R . string . pref_shortcut_right_and_down_key , R . string . pref_shortcut_right_and_up_key , R . string . pref_shortcut_up_and_left_key , R . string . pref_shortcut_up_and_right_key } ; for ( int key : gestureKeys ) { final String prefKey = mService . getString ( key ) ; if ( mSharedPreferences . getString ( prefKey , STR_ ) . equals ( targetValue ) ) { editor . putString ( prefKey , replaceValue ) ; } } editor . apply ( ) ; }
public Anonymous_traceType_1_ createAnonymous_traceType_1_ ( ) { Anonymous_traceType_1_Impl anonymous_traceType_1_ = new Anonymous_traceType_1_Impl ( ) ; return anonymous_traceType_1_ ; }
public void onSessionProgressText ( Uri mediaUri , int messageId ) ;
D findOneTarget ( T_ID sourceId , String fieldName , QueryParams queryParams ) ;
private synchronized Path readGlyph ( int base , int offset ) { FlPoint pt = new FlPoint ( ) ; Range r = getIndexEntry ( base , offset ) ; Path gp = new Path ( ) ; int hold = pos ; stackptr = NUM_ ; parseGlyph ( r , gp , pt ) ; pos = hold ; gp . transform ( at ) ; return gp ; }
public void update ( DN baseDN , ServerState serverState ) { for ( CSN csn : serverState ) { update ( baseDN , csn ) ; } }
private boolean hasSubstring ( final String value , final int start , final String substring ) { try { if ( start < NUM_ ) { return BOOL_ ; } final int end = start + substring . length ( ) ; if ( end > value . length ( ) ) { return BOOL_ ; } for ( int i = NUM_ , pos = start ; pos < end ; i ++ , pos ++ ) { if ( value . charAt ( pos ) != substring . charAt ( i ) ) { return BOOL_ ; } } return BOOL_ ; } catch ( final Exception e ) { logger . debug ( LocalizableMessage . raw ( STR_ , value , substring , start , e ) ) ; return BOOL_ ; } }
public String encodeSLD ( StyledLayerDescriptor sld ) { StringWriter out = new StringWriter ( ) ; if ( sld != null ) { try { Ysld . encode ( sld , out ) ; } catch ( IOException e ) { ConsoleManager . getInstance ( ) . exception ( this , e ) ; } } return out . toString ( ) ; }
public void showDialog ( Set < Integer > emotesets , String stream ) { if ( stream != null && ! stream . equals ( this . stream ) ) { setUpdated ( UPDATE_CHANNEL_CHANGED ) ; } if ( stream != null ) { this . stream = stream ; } if ( emotesets != null && ! emotesets . equals ( this . emotesets ) ) { setUpdated ( UPDATE_EMOTESET_CHANGED ) ; } this . emotesets = new HashSet < > ( emotesets ) ; updateTitle ( ) ; showEmotes ( ) ; setVisible ( BOOL_ ) ; }
private void removeNeuron ( Neuron neuron ) { NeuronNode node = ( NeuronNode ) objectNodeMap . get ( neuron ) ; if ( node != null ) { selectionModel . remove ( node ) ; node . removeFromParent ( ) ; objectNodeMap . remove ( neuron ) ; if ( neuron . getParentGroup ( ) != null ) { NeuronGroupNode groupNode = ( NeuronGroupNode ) objectNodeMap . get ( neuron . getParentGroup ( ) ) ; if ( groupNode != null ) { groupNode . removeNeuronNode ( node ) ; } } zoomToFitPage ( BOOL_ ) ; } }
private Id < Link > findVehicleLink ( Person p ) { for ( PlanElement planElement : p . getSelectedPlan ( ) . getPlanElements ( ) ) { if ( planElement instanceof Activity ) { Activity activity = ( Activity ) planElement ; ActivityFacilities facilities = this . qsim . getScenario ( ) . getActivityFacilities ( ) ; Config config = this . qsim . getScenario ( ) . getConfig ( ) ; final Id < Link > activityLinkId = PopulationUtils . computeLinkIdFromActivity ( activity , facilities , config ) ; if ( activityLinkId != null ) { return activityLinkId ; } } else if ( planElement instanceof Leg ) { Leg leg = ( Leg ) planElement ; if ( leg . getRoute ( ) . getStartLinkId ( ) != null ) { return leg . getRoute ( ) . getStartLinkId ( ) ; } } } throw new RuntimeException ( STR_ ) ; }
public static void handlePrintConversionException ( Object caller , Exception e , XMLSerializer serializer ) throws SAXException { if ( e instanceof SAXException ) throw ( SAXException ) e ; String message = e . getMessage ( ) ; if ( message == null ) { message = e . toString ( ) ; } ValidationEvent ve = new PrintConversionEventImpl ( ValidationEvent . ERROR , message , new ValidationEventLocatorImpl ( caller ) , e ) ; serializer . reportError ( ve ) ; }
private static String percentEncodeRfc3986 ( String string ) { try { string = string . replace ( STR_ , STR_ ) ; string = URLDecoder . decode ( string , STR_ ) ; string = URLEncoder . encode ( string , STR_ ) ; return string . replace ( STR_ , STR_ ) . replace ( STR_ , STR_ ) . replace ( STR_ , STR_ ) ; } catch ( Exception e ) { return string ; } }
public IssueMatcher type ( CheckType expectedType ) { return addEqualsMatcher ( STR_ , expectedType , null ) ; }
public abstract void test ( ) throws Exception ;
public void add ( int position , int height ) { int currHeight = mMap . get ( position , - NUM_ ) ; if ( currHeight != height ) { if ( currHeight == - NUM_ ) { if ( mMap . size ( ) == mMaxSize ) { mMap . delete ( mOrder . remove ( NUM_ ) ) ; } } else { mOrder . remove ( ( Integer ) position ) ; } mMap . put ( position , height ) ; mOrder . add ( position ) ; } }
public MessageCapture ( final Logger logger , final boolean captureEntity , final boolean captureContext ) { this . logger = logger ; this . captureEntity = captureEntity ; this . captureContext = captureContext ; }
void showSuggestions ( final SuggestionContextDto suggestionContext ) ;
void insert ( T cacheable ) ;
public static BinaryExpression newInitializationExpression ( String variable , ClassNode type , Expression rhs ) { VariableExpression lhs = new VariableExpression ( variable ) ; if ( type != null ) { lhs . setType ( type ) ; } Token operator = Token . newPlaceholder ( Types . ASSIGN ) ; return new BinaryExpression ( lhs , operator , rhs ) ; }
public String optString ( String key , String defaultValue ) { Object object = this . opt ( key ) ; return NULL . equals ( object ) ? defaultValue : object . toString ( ) ; }
public void goToDefaultView ( KMLAbstractFeature feature ) { if ( feature instanceof KMLPlacemark ) { this . goToDefaultPlacemarkView ( ( KMLPlacemark ) feature ) ; } else if ( feature instanceof KMLGroundOverlay ) { this . goToDefaultGroundOverlayView ( ( KMLGroundOverlay ) feature ) ; } }
public DelegatingResourceLoader ( Map < String , ResourceLoader > loaders ) { this ( loaders , null ) ; }
private void createContents ( ) { shell = new Shell ( ) ; shell . setSize ( NUM_ , NUM_ ) ; shell . setText ( getText ( ) ) ; shell . setLayout ( new GridLayout ( NUM_ , BOOL_ ) ) ; }
public JSONObject put ( String key , int value ) throws JSONException { this . put ( key , new Integer ( value ) ) ; return this ; }
public static void verifyIssuesUnordered ( Set < Issue > issuesToVerify , Issue [ ] expectedIssues ) { Issue [ ] issuesToVerifyArray = issuesToVerify . toArray ( new Issue [ issuesToVerify . size ( ) ] ) ; assertEquals ( expectedIssues . length , issuesToVerifyArray . length ) ; for ( Issue expected : expectedIssues ) { assertTrue ( STR_ + expected , ArrayUtils . contains ( issuesToVerifyArray , expected ) ) ; } }
public NotificationChain basicSetRewiredTarget ( SymbolTableEntry newRewiredTarget , NotificationChain msgs ) { SymbolTableEntry oldRewiredTarget = rewiredTarget ; rewiredTarget = newRewiredTarget ; if ( eNotificationRequired ( ) ) { ENotificationImpl notification = new ENotificationImpl ( this , Notification . SET , ImPackage . REFERENCING_ELEMENT_IM__REWIRED_TARGET , oldRewiredTarget , newRewiredTarget ) ; if ( msgs == null ) msgs = notification ; else msgs . add ( notification ) ; } return msgs ; }
public ReplaceField ( Map < String , Object > fieldAttributes ) { this ( fieldAttributes , null ) ; }
public Operator operator ( ) { return operator ; }
private void tryStartingKbMode ( int keyCode ) { if ( ( keyCode == - NUM_ || addKeyIfLegal ( keyCode ) ) ) { mInKbMode = BOOL_ ; mDoneButton . setEnabled ( BOOL_ ) ; updateDisplay ( BOOL_ ) ; } }
public void run ( ) { while ( BOOL_ ) { try { Socket socket = serverSocket . accept ( ) ; ServerThread worker = threadPool . remove ( ) ; worker . addJob ( socket ) ; threadPool . add ( worker ) ; } catch ( Throwable t ) { t . printStackTrace ( ) ; } } }
public static void enableLogs ( ) { verbose = BOOL_ ; }
void download ( String imageUrl , Callback callback ) { try { URLConnection conn = new URL ( imageUrl ) . openConnection ( ) ; conn . connect ( ) ; Bitmap bitmap = BitmapFactory . decodeStream ( conn . getInputStream ( ) ) ; if ( callback != null ) { callback . onImageDownloaded ( bitmap ) ; } } catch ( MalformedURLException e ) { reportError ( callback ) ; } catch ( IOException e ) { reportError ( callback ) ; } }
private void updateBounds ( Relation < V > relation , WritableIntegerDataStore assignment , WritableDoubleDataStore upper , WritableDataStore < double [ ] > lower , double [ ] move ) { for ( DBIDIter it = relation . iterDBIDs ( ) ; it . valid ( ) ; it . advance ( ) ) { upper . increment ( it , move [ assignment . intValue ( it ) ] ) ; double [ ] l = lower . get ( it ) ; for ( int i = NUM_ ; i < k ; i ++ ) { l [ i ] -= move [ i ] ; } } }
public boolean isRdtscp ( ) { return rdtscp ; }
protected IdentifierToken parseName ( boolean star ) throws SyntaxError , IOException { IdentifierToken res = scanner . getIdToken ( ) ; expect ( IDENT ) ; if ( token != FIELD ) { return res ; } StringBuffer buf = new StringBuffer ( res . id . toString ( ) ) ; while ( token == FIELD ) { scan ( ) ; if ( ( token == MUL ) && star ) { scan ( ) ; buf . append ( STR_ ) ; break ; } buf . append ( STR_ ) ; if ( token == IDENT ) { buf . append ( scanner . idValue ) ; } expect ( IDENT ) ; } res . id = Identifier . lookup ( buf . toString ( ) ) ; return res ; }
public void disableVertexAttribute ( String name ) { int location = fetchAttributeLocation ( name ) ; if ( location == - NUM_ ) return ; GLES20 . glDisableVertexAttribArray ( location ) ; }
public void nextGeneration ( ) { generation ++ ; }
public void addLangCondition ( String lang ) { _specificityC ++ ; addCondition ( Condition . createLangCondition ( lang ) ) ; }
public String minInstNumTipText ( ) { return STR_ ; }
public void testCheckFoundWithPseudoSelectorAndWithResultAsNMI ( ) { LOGGER . debug ( STR_ ) ; String [ ] pseudoSelectors = { STR_ , STR_ } ; initCheckerAndLaunch ( STR_ , pseudoSelectors , TestSolution . NEED_MORE_INFO , STR_ ) ; }
public Builder addClause ( Query clause ) { this . query . addBooleanClause ( clause ) ; return this ; }
public void pop2 ( ) { mv . visitInsn ( Opcodes . POP2 ) ; }
private void updateOverscrollAnimation ( final int scrolledOffset ) { if ( mEdgeGlowLeft == null || mEdgeGlowRight == null ) return ; int nextScrollPosition = mCurrentX + scrolledOffset ; if ( mFlingTracker == null || mFlingTracker . isFinished ( ) ) { if ( nextScrollPosition < NUM_ ) { int overscroll = Math . abs ( scrolledOffset ) ; mEdgeGlowLeft . onPull ( ( float ) overscroll / getRenderWidth ( ) ) ; if ( ! mEdgeGlowRight . isFinished ( ) ) { mEdgeGlowRight . onRelease ( ) ; } } else if ( nextScrollPosition > mMaxX ) { int overscroll = Math . abs ( scrolledOffset ) ; mEdgeGlowRight . onPull ( ( float ) overscroll / getRenderWidth ( ) ) ; if ( ! mEdgeGlowLeft . isFinished ( ) ) { mEdgeGlowLeft . onRelease ( ) ; } } } }
public static XmlClass toXmlClass ( Class < ? > aClass ) { XmlClass xmlClass = new XmlClass ( ) ; xmlClass . name = aClass . getName ( ) ; xmlClass . attributes = new ArrayList < XmlAttribute > ( ) ; if ( aClass . getAnnotation ( JGlobalMap . class ) != null ) xmlClass . global = toXmlGlobal ( aClass ) ; for ( Field field : aClass . getDeclaredFields ( ) ) if ( field . getAnnotation ( JMap . class ) != null ) xmlClass . attributes . add ( toXmlAttribute ( aClass , field ) ) ; return xmlClass ; }
public static void enqueueRequest ( Operation operation ) throws DirectoryException { checkCanEnqueueRequest ( operation , BOOL_ ) ; directoryServer . workQueue . submitOperation ( operation ) ; }
public void evaluate ( ) { do step ( ) ; while ( ! done ( ) ) ; }
private void testScenario ( String aConfiguration , boolean anExpectingAnException , Method aMethodToCall ) throws Exception { openSession ( aConfiguration ) ; Element myElement = selectElement ( ) ; String myMethodCallDescription ; if ( aMethodToCall != null ) { Object [ ] myArguments = new Object [ aMethodToCall . getParameterTypes ( ) . length ] ; aMethodToCall . invoke ( myElement , myArguments ) ; myMethodCallDescription = aMethodToCall . toString ( ) ; } else { myMethodCallDescription = STR_ ; } myElement = disableLazyLoaders ( myElement ) ; closeSession ( ) ; try { Assert . assertEquals ( STR_ , myElement . getElement ( ) . getValue ( ) ) ; if ( anExpectingAnException ) { Assert . fail ( STR_ + myMethodCallDescription + STR_ ) ; } } catch ( Exception anException ) { if ( ! anExpectingAnException ) { Assert . fail ( STR_ + myMethodCallDescription + STR_ ) ; } } }
public void testStop ( ) throws Exception { create ( igfs , paths ( DIR , SUBDIR ) , null ) ; IgfsOutputStream os = igfs . create ( FILE , BOOL_ ) ; os . write ( chunk ) ; igfs . stop ( BOOL_ ) ; afterTestsStopped ( ) ; beforeTestsStarted ( ) ; }
public void recordOutBuffer ( Object obj ) { collector ( ) . recordOutBuffer ( getRuleName ( ) , obj ) ; }
public int read ( ) throws IOException { this . readInt = this . is . read ( ) ; this . readChar = ( char ) this . readInt ; return this . readInt ; }
public void saveMappingToFile ( String fileName ) throws IOException { System . err . println ( STR_ + fileName ) ; try ( Writer w = new FileWriter ( fileName ) ) { writeMapping ( w ) ; } System . err . println ( STR_ + id2name . size ( ) + STR_ ) ; }
public final IntGrid3D add ( IntGrid3D withThis ) { checkBounds ( withThis ) ; int [ ] [ ] fieldx = null ; int [ ] fieldxy = null ; int [ ] [ ] [ ] ofield = withThis . field ; int [ ] [ ] ofieldx = null ; int [ ] ofieldxy = null ; final int width = this . width ; final int height = this . height ; final int length = this . length ; for ( int x = NUM_ ; x < width ; x ++ ) { fieldx = field [ x ] ; ofieldx = ofield [ x ] ; for ( int y = NUM_ ; y < height ; y ++ ) { fieldxy = fieldx [ y ] ; ofieldxy = ofieldx [ y ] ; for ( int z = NUM_ ; z < length ; z ++ ) fieldxy [ z ] += ofieldxy [ z ] ; } } return this ; }
void onDoubleClick ( Notification notification ) ;
public Dimension preferredLayoutSize ( Container parent ) { return calculateLayoutSize ( parent , STR_ ) ; }
public static < V > boolean isEmpty ( V [ ] sourceArray ) { return ( sourceArray == null || sourceArray . length == NUM_ ) ; }
public CVisibilityCriteriumPanel ( final CVisibilityCriterium criterium ) { super ( new BorderLayout ( ) ) ; visibilityCriterium = criterium ; visibilityStateBox . addActionListener ( visibilityStateBoxListener ) ; initPanel ( ) ; }
public String sqlMetadata_functionArguments ( String catalogName , String schemaName ) ;
void sendCanMessage ( CanMessage m , CanListener l ) ;
private static void checkTypeSafe ( Collection < ? > c ) { try { RoleUnresolved r ; for ( Object o : c ) r = ( RoleUnresolved ) o ; } catch ( ClassCastException e ) { throw new IllegalArgumentException ( e ) ; } }
private boolean isReadyToBeCancelledLocked ( JobStatus job ) { return ! job . isReady ( ) && isCurrentlyActiveLocked ( job ) ; }
public boolean isMaxYSet ( int scale ) { return mMaxY [ scale ] != - MathHelper . NULL_VALUE ; }
public PoissonSlow ( double mean , MersenneTwisterFast randomGenerator ) { setRandomGenerator ( randomGenerator ) ; setMean ( mean ) ; }
abstract < K , V > ValueReference < K , V > referenceValue ( Segment < K , V > segment , ReferenceEntry < K , V > entry , V value ) ;
protected abstract void writeSpecial ( int b ) throws IOException ;
public void queryDuplexGroupIdentity ( ) { awaitingGroupReadReport = BOOL_ ; gotQueryReply = BOOL_ ; memo . getLnTrafficController ( ) . sendLocoNetMessage ( createUr92GroupIdentityQueryPacket ( ) ) ; invalidateDuplexGroupIdentityInfo ( ) ; if ( swingTmrDuplexInfoQuery != null ) { if ( swingTmrDuplexInfoQuery . isRunning ( ) ) { swingTmrDuplexInfoQuery . restart ( ) ; } else { swingTmrDuplexInfoQuery . start ( ) ; } } }
private List < Target > generateTargets ( final int noOfTgts , final String controllerIdPrefix , final String descriptionPrefix , final TargetTag [ ] tags ) { final List < Target > list = new ArrayList < > ( ) ; for ( int i = NUM_ ; i < noOfTgts ; i ++ ) { String ctrlID = controllerIdPrefix ; if ( Strings . isNullOrEmpty ( ctrlID ) ) { ctrlID = UUID . randomUUID ( ) . toString ( ) ; } ctrlID = String . format ( STR_ , ctrlID , i ) ; final String description = descriptionPrefix + DEFAULT_DESCRIPTION ; final Target target = generateTarget ( ctrlID , description , tags ) ; list . add ( target ) ; } return list ; }
public StreamingDataMessage ( final byte [ ] body , final long timestamp ) { this . body = body ; this . timestamp = timestamp ; }
public void onEdgeTouch ( int edgeFlag ) ;
protected abstract void toASCIIGnuStep ( StringBuilder ascii , int level ) ;
public ClientConnection reset ( ) { selector . reset ( ) ; return this ; }
public SQLInvalidAuthorizationSpecException ( String reason ) { super ( reason , null , NUM_ ) ; }
public void draw ( Canvas canvas , Rect location , Paint paint ) { if ( ! canvas . isHardwareAccelerated ( ) ) { nativeDraw ( canvas . mNativeCanvas , location , mBitmap . ni ( ) , mChunk , paint != null ? paint . mNativePaint : NUM_ , canvas . mDensity , mBitmap . mDensity ) ; } else { mRect . set ( location ) ; canvas . drawPatch ( mBitmap , mChunk , mRect , paint ) ; } }
public TrayNotification ( String title , String body , NotificationType notificationType ) { initTrayNotification ( title , body , notificationType ) ; }
long hash64 ( byte [ ] bytes ) ;
public DataType match ( TokenStream stream , Consumer < ParsingException > errors ) { builder . reset ( ) ; builder . jdbcType = jdbcType ; if ( pattern . match ( stream , builder , errors != null ? errors : null ) ) { return builder . create ( ) ; } return null ; }
public com . sun . identity . liberty . ws . meta . jaxb . StatusType createStatusType ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . liberty . ws . meta . jaxb . impl . StatusTypeImpl ( ) ; }
private void addInterface ( ClassType type , Set < AbstractInterfaceType > interfaces , Events events ) { for ( AbstractInterfaceType i : interfaces ) { AbstractInterfaceType lookupUp = getOrAddReferredType ( i , events , AbstractInterfaceType . class ) ; fireAndSave ( new ReferenceEvent ( type , lookupUp , ReferenceType . REALIZE_INTERFACE ) , events ) ; type . addInterface ( lookupUp ) ; } }
private boolean pop ( byte mode ) { if ( top < NUM_ || stack [ top ] != mode ) { return BOOL_ ; } -- top ; return BOOL_ ; }
abstract String remainder ( String name ) ;
public SolrPing ( ) { super ( METHOD . GET , CommonParams . PING_HANDLER ) ; params = new ModifiableSolrParams ( ) ; }
public abstract void onItemClick ( BaseQuickAdapter adapter , View view , int position ) ;
public ColourMapEntryPanel ( Class < ? > panelId , ColourMapEntryUpdateInterface parent ) { this . parentObj = parent ; createUI ( panelId ) ; }
private static GroupName nameFromObjectName ( ObjectName obj_name , NamedResolverMap resolvedMap ) { String name = obj_name . getKeyProperty ( STR_ ) ; String type = obj_name . getKeyProperty ( STR_ ) ; String domain = obj_name . getDomain ( ) ; Map < String , MetricValue > tags = obj_name . getKeyPropertyList ( ) . entrySet ( ) . stream ( ) . filter ( null ) . filter ( null ) . map ( null ) . collect ( Collectors . toMap ( null , null ) ) ; final List < String > path = new ArrayList < > ( ) ; if ( name != null ) { path . addAll ( Arrays . asList ( name . split ( STR_ ) ) ) ; } else if ( type != null ) { path . addAll ( Arrays . asList ( domain . split ( STR_ ) ) ) ; path . add ( type ) ; } else { path . addAll ( Arrays . asList ( domain . split ( STR_ ) ) ) ; } return resolvedMap . getGroupName ( path , tags ) ; }
private void writeAttribute ( java . lang . String prefix , java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( xmlWriter . getPrefix ( namespace ) == null ) { xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } xmlWriter . writeAttribute ( namespace , attName , attValue ) ; }
public void freeHessian2StreamingInput ( Hessian2StreamingInput in ) { }
public GPNodeParent rootParent ( ) { GPNodeParent cparent = this ; while ( cparent != null && cparent instanceof GPNode ) cparent = ( ( GPNode ) ( cparent ) ) . parent ; return cparent ; }
boolean isUsable ( ItemStack item , EntityLivingBase user , int x , int y , int z ) ;
public void schedule ( TimerTask task , long delay ) { timer . schedule ( new TimerTaskWrapper ( task ) , delay ) ; }
void displayError ( String errorMessge ) ;
public static LongArrayBitVector wrap ( final long [ ] array ) { return wrap ( array , array . length * Long . SIZE ) ; }
protected abstract void loadDataInitial ( final adapter confirmAdapter ) ;
void updateConfiguration ( ConfigurationUpdate configurationUpdate , boolean executeRestart ) throws Exception ;
public boolean saveCheckpoint ( String key , byte [ ] state , long timeout , boolean overwrite ) throws IgniteSpiException ;
void delete ( String destination ) throws PulsarAdminException ;
public boolean isRemoved ( ) { return parentEdge == null ; }
protected DateTimeConverter makeConverter ( ) { return new DateConverter ( ) ; }
public void createPackageContents ( ) { if ( isCreated ) return ; isCreated = BOOL_ ; validationMarkerEClass = createEClass ( VALIDATION_MARKER ) ; createEAttribute ( validationMarkerEClass , VALIDATION_MARKER__DELEGATE_RESOURCE ) ; createEOperation ( validationMarkerEClass , VALIDATION_MARKER___ERESOURCE ) ; preValidationEClass = createEClass ( PRE_VALIDATION ) ; postValidationEClass = createEClass ( POST_VALIDATION ) ; }
protected String readSetting ( final String key ) throws CouldntLoadDataException { return debugTargetSettings . readSetting ( getUniqueKey ( key ) ) ; }
public SplitPaneVerticalState ( ) { super ( STR_ ) ; }
void joinTransaction ( EntityContext newContext , EntityContext contextWithTransaction ) ;
private static boolean isURL ( String input ) { return input . toLowerCase ( ) . startsWith ( STR_ ) ; }
WelcomeWindow ( SetupManager manager , boolean partial ) { super ( manager , I18n . tr ( STR_ ) , partial ? I18n . tr ( STR_ ) : I18n . tr ( STR_ ) ) ; }
public void cacheResult ( java . util . List < Foo > foos ) ;
public boolean isRecursive ( ) { return recursive ; }
public boolean containPhysicalIndexFile ( String physicalName ) { return findPhysicalIndexFile ( physicalName ) != null ; }
public Set advisePrimaryOwners ( ) { Assert . assertTrue ( this . buckets != null ) ; ProxyBucketRegion [ ] bucs = this . buckets ; HashSet hs = new HashSet ( ) ; for ( int i = NUM_ ; i < bucs . length ; i ++ ) { if ( isStorageAssignedForBucket ( i ) ) { InternalDistributedMember mem = bucs [ i ] . getBucketAdvisor ( ) . getPrimary ( ) ; if ( mem != null ) { hs . add ( mem ) ; } } } return hs ; }
public static boolean isUpperCase ( char c ) { return isUpperCase ( ( int ) c ) ; }
public Anonymous_eventDefinition_1_ createAnonymous_eventDefinition_1_ ( ) { Anonymous_eventDefinition_1_Impl anonymous_eventDefinition_1_ = new Anonymous_eventDefinition_1_Impl ( ) ; return anonymous_eventDefinition_1_ ; }
public abstract void showRollbackChangesDialog ( List < Change > changes ) ;
public boolean isShortFeature ( int index ) { index -= numByteFeatures ; return NUM_ <= index && index < numShortFeatures ; }
protected String generateConfigFile ( ) throws JAXBException , LocalRepositoryException , IOException { ZipOutputStream zos = null ; try { PropertyInfoExt properties = new PropertyInfoExt ( coordinator . getPropertyInfo ( ) . getProperties ( ) ) ; zos = new ZipOutputStream ( new FileOutputStream ( CONFIG_FILE_PATH ) ) ; ZipEntry ze = new ZipEntry ( CONFIG_FILE_NAME + getFileExtension ( ) ) ; zos . putNextEntry ( ze ) ; if ( MediaType . APPLICATION_JSON_TYPE . equals ( mediaType ) ) { ( new ObjectMapper ( ) ) . writeValue ( zos , properties ) ; } else { JAXBContext jaxbContext = JAXBContext . newInstance ( PropertyInfo . class ) ; Marshaller marshaller = jaxbContext . createMarshaller ( ) ; marshaller . setProperty ( Marshaller . JAXB_FORMATTED_OUTPUT , BOOL_ ) ; marshaller . marshal ( properties , zos ) ; } zos . flush ( ) ; } finally { if ( zos != null ) { zos . close ( ) ; } } return CONFIG_FILE_PATH ; }
public Connector ( ) { }
public void runBenchmarks ( Reporter reporter , boolean verbose ) { for ( int i = NUM_ ; i < binfo . length ; i ++ ) { if ( verbose ) System . out . println ( STR_ + i + STR_ + binfo [ i ] . getName ( ) + STR_ ) ; try { binfo [ i ] . runBenchmark ( ) ; } catch ( Exception e ) { System . err . println ( STR_ + i + STR_ + e ) ; e . printStackTrace ( ) ; } cleanup ( ) ; } try { reporter . writeReport ( binfo , System . getProperties ( ) ) ; } catch ( IOException e ) { System . err . println ( STR_ ) ; } }
protected void updateGenerateButton ( ) { if ( namesByTypes . isEmpty ( ) ) { view . disableGenerateButton ( ) ; view . disableProgressOnGenerateButton ( ) ; } else { view . enableGenerateButton ( ) ; } }
public static int divideToCeil ( int numerator , int denominator ) { Double result = Math . ceil ( ( double ) numerator / denominator ) ; return result . intValue ( ) ; }
public Attributes2Impl ( ) { declared = EmptyArray . BOOLEAN ; specified = EmptyArray . BOOLEAN ; }
void renderingStarted ( int pageNumber ) ;
static void appendDate ( StringBuilder buff , long dateValue ) { int y = DateTimeUtils . yearFromDateValue ( dateValue ) ; int m = DateTimeUtils . monthFromDateValue ( dateValue ) ; int d = DateTimeUtils . dayFromDateValue ( dateValue ) ; if ( y > NUM_ && y < NUM_ ) { StringUtils . appendZeroPadded ( buff , NUM_ , y ) ; } else { buff . append ( y ) ; } buff . append ( STR_ ) ; StringUtils . appendZeroPadded ( buff , NUM_ , m ) ; buff . append ( STR_ ) ; StringUtils . appendZeroPadded ( buff , NUM_ , d ) ; }
public SeekableByteChannel open ( GcsPath path ) throws IOException { return new GoogleCloudStorageReadChannel ( storageClient , path . getBucket ( ) , path . getObject ( ) , errorExtractor , new ClientRequestHelper < StorageObject > ( ) ) ; }
public void test_getLowestSetBitPos ( ) { byte aBytes [ ] = { - NUM_ , - NUM_ , NUM_ , NUM_ , - NUM_ , - NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , - NUM_ , NUM_ , NUM_ } ; int aSign = NUM_ ; int iNumber = NUM_ ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; int result = aNumber . getLowestSetBit ( ) ; assertTrue ( STR_ , result == iNumber ) ; byte [ ] aBytes_ = { NUM_ , NUM_ , NUM_ } ; iNumber = NUM_ ; aNumber = new BigInteger ( aSign , aBytes_ ) ; result = aNumber . getLowestSetBit ( ) ; assertTrue ( STR_ , result == iNumber ) ; byte [ ] aBytes__ = { - NUM_ , NUM_ , NUM_ } ; iNumber = NUM_ ; aNumber = new BigInteger ( aSign , aBytes__ ) ; result = aNumber . getLowestSetBit ( ) ; assertTrue ( STR_ , result == iNumber ) ; }
protected void emit_ObjectLiteral_CommaKeyword_2_2_q ( EObject semanticObject , ISynNavigable transition , List < INode > nodes ) { acceptNodes ( transition , nodes ) ; }
public String toXML ( ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( STR_ ) . append ( STR_ ) . append ( STR_ + XACML3_NAMESPACE + STR_ ) . append ( STR_ ) ; Iterator < Result > resultIterator = this . getResult ( ) . iterator ( ) ; while ( resultIterator . hasNext ( ) ) { Result result = resultIterator . next ( ) ; if ( result != null ) { stringBuilder . append ( result . toXML ( ) ) ; } } stringBuilder . append ( STR_ ) ; return stringBuilder . toString ( ) ; }
private Workflow . Method createCGMethod ( URI vplexURI , URI cgURI , Collection < URI > vplexVolumeURIList ) { return new Workflow . Method ( CREATE_CG_METHOD_NAME , vplexURI , cgURI , vplexVolumeURIList ) ; }
protected void onInvocationException ( ControllerActionException e ) { }
protected void drawMarkerView ( ) { if ( mMarkerView == null || ! mDrawMarkerView || ! valuesToHighlight ( ) ) return ; }
public static double julianCenturies ( Date date ) { double jd = calculateJulianDay ( date ) ; double delta = jd - NUM_ ; return delta / NUM_ ; }
public static _Fields findByName ( String name ) { return byName . get ( name ) ; }
public void testNoReadThroughTx ( ) { String key = STR_ ; IgniteCache < String , Integer > cache = jcache ( NUM_ ) ; storeStgy . resetStore ( ) ; cache . put ( key , NUM_ ) ; storeStgy . putToStore ( key , NUM_ ) ; try ( final Transaction transaction = grid ( NUM_ ) . transactions ( ) . txStart ( ) ) { Integer old = cache . get ( key ) ; assertEquals ( ( Integer ) NUM_ , old ) ; cache . put ( key , NUM_ ) ; transaction . commit ( ) ; } assertEquals ( NUM_ , storeStgy . getReads ( ) ) ; }
public static PlayStateStatus convertPlayerStateToPlayStateStatus ( int playerState ) { PlayStateStatus status = PlayStateStatus . Unknown ; switch ( playerState ) { case PLAYER_STATE_BUFFERING : status = PlayStateStatus . Buffering ; break ; case PLAYER_STATE_IDLE : status = PlayStateStatus . Finished ; break ; case PLAYER_STATE_PAUSED : status = PlayStateStatus . Paused ; break ; case PLAYER_STATE_PLAYING : status = PlayStateStatus . Playing ; break ; case PLAYER_STATE_UNKNOWN : default : status = PlayStateStatus . Unknown ; break ; } return status ; }
public String addStepsForChangeVirtualPool ( Workflow workflow , String waitFor , List < VolumeDescriptor > volumes , String taskId ) throws InternalException ;
String privateFieldName ( Name name ) ;
public void refreshNonLocalGateways ( ) throws XMPPException { loadNonLocalGateways ( ) ; }
static void parseWrapper ( String clazz , ModuleCandidate candidate ) { try { Class c = Class . forName ( clazz ) ; if ( RobotBase . class . isAssignableFrom ( c ) && classLoadable ( c ) && ! Toast . class . isAssignableFrom ( c ) ) { log . debug ( STR_ + clazz + STR_ + candidate . getModuleFile ( ) + STR_ ) ; ModuleWrapper wrapper = new ModuleWrapper ( candidate . getModuleFile ( ) , c , candidate ) ; getContainers ( ) . add ( new ModuleContainer ( wrapper , candidate ) ) ; } } catch ( Throwable e ) { log . debug ( STR_ + clazz ) ; log . debugException ( e ) ; } }
void onListItemClicked ( EMConversation conversation ) ;
public AABB ( AABB box ) { this ( box , box . getExtent ( ) ) ; }
private List createFaultSAMLArtifact ( ) { FSUtils . debug . message ( STR_ ) ; String handle = SAMLUtils . generateAssertionHandle ( ) ; if ( handle == null ) { if ( FSUtils . debug . messageEnabled ( ) ) { FSUtils . debug . message ( STR_ + STR_ + STR_ ) ; } return null ; } try { String sourceSuccinctID = FSUtils . generateSourceID ( hostedEntityId ) ; AssertionArtifact art = new FSAssertionArtifact ( SAMLUtils . stringToByteArray ( sourceSuccinctID ) , handle . getBytes ( IFSConstants . SOURCEID_ENCODING ) ) ; List artis = new ArrayList ( ) ; artis . add ( art . getAssertionArtifact ( ) ) ; FSAssertionManager am = FSAssertionManager . getInstance ( metaAlias ) ; am . setErrStatus ( art , noFedStatus ) ; return artis ; } catch ( Exception e ) { FSUtils . debug . error ( STR_ , e ) ; return null ; } }
public final native CMLineInfoOverlay lineInfo ( int line ) ;
void onOverdrawBottomHeightChanged ( int overdrawHeight ) ;
public DiskBasedCache ( File rootDirectory ) { this ( rootDirectory , DEFAULT_DISK_USAGE_BYTES ) ; }
public void addPreferencesFromResource ( int preferencesResId ) { requirePreferenceManager ( ) ; setPreferenceScreen ( mPreferenceManager . inflateFromResource ( getActivity ( ) , preferencesResId , getPreferenceScreen ( ) ) ) ; }
public Action ( ) { this ( null ) ; }
public static double degreesDiff ( double a1 , double a2 ) { double diff = a1 - a2 ; while ( diff > NUM_ ) { diff -= NUM_ ; } while ( diff <= - NUM_ ) { diff += NUM_ ; } return diff ; }
private void ensureOpen ( ) throws IOException { if ( closed ) { throw new IOException ( STR_ ) ; } }
DateTimeFormatter toFormatter ( ResolverStyle resolverStyle , Chronology chrono ) { return toFormatter ( Locale . getDefault ( Locale . Category . FORMAT ) , resolverStyle , chrono ) ; }
public void handleDecode ( Result rawResult , Bundle bundle ) { inactivityTimer . onActivity ( ) ; if ( rawResult == null ) { Snackbar . make ( scanContainer , getString ( R . string . decode_null ) , Snackbar . LENGTH_SHORT ) . show ( ) ; return ; } AudioPlayer . getInstance ( this ) . playRaw ( R . raw . scan , BOOL_ , BOOL_ ) ; operateResult ( rawResult ) ; }
private static void usage ( ) { System . out . println ( STR_ + STR_ + STR_ + STR_ + STR_ + STR_ ) ; }
public boolean isChanged ( ) { return changed ; }
public static boolean isTimeout ( Exception e ) { if ( DB . isPostgreSQL ( ) ) return isSQLState ( e , STR_ ) ; return isErrorCode ( e , NUM_ ) ; }
public void testPreparedStatementGetString ( Connection connection ) throws SQLException { try ( PreparedStatement preparedStatement = connection . prepareStatement ( sql ) ) { try ( ResultSet resultSet = preparedStatement . executeQuery ( ) ) { Assert . assertTrue ( resultSet . next ( ) ) ; Assert . assertEquals ( STR_ , resultSet . getString ( NUM_ ) ) ; Assert . assertTrue ( resultSet . next ( ) ) ; Assert . assertEquals ( STR_ , resultSet . getString ( NUM_ ) ) ; Assert . assertTrue ( resultSet . next ( ) ) ; Assert . assertNull ( resultSet . getString ( NUM_ ) ) ; Assert . assertFalse ( resultSet . next ( ) ) ; } } }
public Object runSafely ( Catbert . FastStack stack ) throws Exception { stack . getUIMgrSafe ( ) . getVideoFrame ( ) . playbackControl ( VideoFrame . DVD_CONTROL_RETURN ) ; return null ; }
private static List < Territory > allEnemyTerritories ( final GameData data , final PlayerID player ) { final List < Territory > badGuys = new ArrayList < > ( ) ; for ( final Territory t : data . getMap ( ) . getTerritories ( ) ) { if ( Matches . isTerritoryEnemyAndNotUnownedWaterOrImpassableOrRestricted ( player , data ) . match ( t ) ) { badGuys . add ( t ) ; } } return badGuys ; }
public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_Instant_INTERVAL_HEAL_TO_B ( int num0 , String skilltarget , String skillname ) { return new SM_SYSTEM_MESSAGE ( NUM_ , num0 , skilltarget , skillname ) ; }
public XmlReporter ( OutputStream out , String title ) { this . out = out ; this . title = title ; }
public AsyncMonitor ( final IOneDriveClient client , final AsyncMonitorLocation monitorLocation , final ResultGetter < T > resultGetter ) { mClient = client ; mMonitorLocation = monitorLocation ; mResultGetter = resultGetter ; }
private static boolean isPause ( final AbstractBody msg ) { return msg . getAttribute ( Attributes . PAUSE ) != null ; }
public ByteArrayAnnotatedOutput ( ) { this ( DEFAULT_SIZE ) ; }
public Subpath ( Point startPoint ) { this ( ( float ) startPoint . getX ( ) , ( float ) startPoint . getY ( ) ) ; }
public static boolean checkpw ( String plaintext , String hashed ) { return equalsNoEarlyReturn ( hashed , hashpw ( plaintext , hashed ) ) ; }
private void cancelActiveJob ( GridJobWorker job , boolean sys ) { if ( activeJobs . remove ( job . getJobId ( ) , job ) ) { cancelledJobs . put ( job . getJobId ( ) , job ) ; if ( finishedJobs . contains ( job . getJobId ( ) ) ) cancelledJobs . remove ( job . getJobId ( ) , job ) ; else cancelJob ( job , sys ) ; } }
public void cancelledNotification ( String from , String packetID ) ;
public String encode ( ) { StringBuffer sbuf = new StringBuffer ( ) ; if ( params . length > NUM_ ) { sbuf . append ( STR_ ) ; for ( int i = NUM_ ; i < params . length ; i ++ ) params [ i ] . encode ( sbuf ) ; sbuf . append ( STR_ ) ; } superClass . encode ( sbuf ) ; for ( int i = NUM_ ; i < interfaces . length ; i ++ ) interfaces [ i ] . encode ( sbuf ) ; return sbuf . toString ( ) ; }
protected RrdNioBackend ( String path , boolean readOnly , RrdSyncThreadPool threadPool , int syncPeriod ) throws IOException { super ( path , readOnly ) ; try { mapFile ( ) ; } catch ( IOException ioe ) { super . close ( ) ; throw ioe ; } catch ( RuntimeException rte ) { super . close ( ) ; throw rte ; } try { if ( ! readOnly ) { syncRunnableHandle = threadPool . scheduleWithFixedDelay ( syncRunnable , syncPeriod , syncPeriod , TimeUnit . SECONDS ) ; } } catch ( RuntimeException rte ) { unmapFile ( ) ; super . close ( ) ; throw rte ; } }
public void handle ( Signal sig ) ;
public DispatchHandler addBinding ( Expression < Boolean > condition , Handler handler , URI baseURI ) { bindings . add ( new Binding ( condition , handler , baseURI ) ) ; return this ; }
public TaskResourceRep deactivateFileSystem ( URI fsId , String token , FileSystemDeleteParam fileSystemDeleteParam ) { WebResource rRoot = createRequest ( INTERNAL_FILE_ROOT + fsId + DEACTIVATE ) ; WebResource . Builder requestBuilder = addSignature ( rRoot ) ; TaskResourceRep resp = addToken ( requestBuilder , token ) . post ( TaskResourceRep . class , fileSystemDeleteParam ) ; return resp ; }
< T extends Update > T parse ( String httpResponse ) ;
void onSlide ( int index ) ;
public static byte [ ] longToNetworkByteOrderArray ( long addr ) { return new byte [ ] { ( byte ) ( addr > > > NUM_ ) , ( byte ) ( addr > > > NUM_ ) , ( byte ) ( addr > > > NUM_ ) , ( byte ) addr } ; }
public void testGetContentAdapterService ( ) { System . out . println ( STR_ ) ; mockInitialisationCalls ( BOOL_ , null ) ; AuditCommandImpl instance = new TestAuditCommandImpl ( ) ; ContentAdapterService result = instance . getContentAdapterService ( ) ; assertEquals ( mockContentAdapterService , result ) ; setVerifyMode ( ) ; }
public Mat rgba ( ) ;
public synchronized void writeTo ( OutputStream out ) throws IOException { int remaining = count ; for ( byte [ ] buf : buffers ) { int c = Math . min ( buf . length , remaining ) ; out . write ( buf , NUM_ , c ) ; remaining -= c ; if ( remaining == NUM_ ) { break ; } } }
private boolean onNotificationClosed ( long persistentNotificationId , String origin , String tag , boolean byUser ) { return nativeOnNotificationClosed ( mNativeNotificationManager , persistentNotificationId , origin , tag , byUser ) ; }
public void clearDirtyFlag ( ) { dirty = BOOL_ ; }
public Vector2 scale ( float scale ) { return Vector2 . scale ( this , scale ) ; }
public boolean isValid ( ) { return this . valid ; }
public void bindWithPermutation ( RealVector other ) { RealVector result = createZeroVector ( dimension ) ; result . superpose ( other , NUM_ , PermutationUtils . getShiftPermutation ( VectorType . REAL , dimension , NUM_ ) ) ; result . superpose ( this , NUM_ , PermutationUtils . getShiftPermutation ( VectorType . REAL , dimension , - NUM_ ) ) ; this . coordinates = result . coordinates ; }
boolean contains ( IRectangle r ) ;
public static void notEmpty ( String string ) { if ( string == null || string . length ( ) == NUM_ ) throw new IllegalArgumentException ( STR_ ) ; }
public static void createTable ( Database db , boolean ifNotExists ) { String constraint = ifNotExists ? STR_ : STR_ ; db . execSQL ( STR_ + constraint + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ + STR_ ) ; }
public String subtreeRaisingTipText ( ) { return STR_ ; }
public synchronized void disableType ( String prefix ) { enabledTypes . remove ( prefix ) ; }
public OperationStateException ( String message , ApplicationExceptionBean bean , Throwable cause ) { super ( message , bean , cause ) ; }
public String toString ( ) { return this ; }
public DiskDistributedNoAckAsyncRegionDUnitTest ( ) { super ( ) ; }
public boolean equivalent ( Object a , Object b ) { return nodeToComponent . get ( a ) == nodeToComponent . get ( b ) ; }
public ByteArrayTransferable ( int offset , byte [ ] bytes ) { this . offset = offset ; if ( bytes != null ) { this . bytes = ( byte [ ] ) bytes . clone ( ) ; } else { this . bytes = new byte [ NUM_ ] ; } }
public UsersGetSubscriptionsQuery ( VkApiClient client , UserActor actor ) { super ( client , STR_ , GetSubscriptionsResponse . class ) ; accessToken ( actor . getAccessToken ( ) ) ; }
public void rollback ( ) ;
public native boolean executeDefault ( Date date , CalendarView calendarView ) ;
public static GenericPK create ( Delegator delegator , ModelEntity modelEntity , Map < String , ? extends Object > fields ) { GenericPK newPK = new GenericPK ( ) ; newPK . init ( delegator , modelEntity , fields ) ; return newPK ; }
public static String bytesToColonDelimitedHex ( byte [ ] b ) { if ( b == null || b . length == NUM_ ) { return STR_ ; } int arrayLength = b . length ; StringBuilder buffer = new StringBuilder ( ( arrayLength - NUM_ ) * NUM_ + NUM_ ) ; buffer . append ( byteToHex ( b [ NUM_ ] ) ) ; for ( int i = NUM_ ; i < arrayLength ; i ++ ) { buffer . append ( STR_ ) ; buffer . append ( byteToHex ( b [ i ] ) ) ; } return buffer . toString ( ) ; }
private void readObject ( ObjectInputStream s ) throws ClassNotFoundException , IOException , HeadlessException { GraphicsEnvironment . checkHeadless ( ) ; acc = AccessController . getContext ( ) ; s . defaultReadObject ( ) ; appContext = AppContext . getAppContext ( ) ; }
public double averageTime ( ) ;
protected ValueConverter [ ] convertersForColumns ( Schema schema , TableId tableId , List < Column > columns , Predicate < ColumnId > filter , ColumnMappers mappers ) { ValueConverter [ ] converters = new ValueConverter [ columns . size ( ) ] ; AtomicInteger i = new AtomicInteger ( NUM_ ) ; columns . forEach ( null ) ; return converters ; }
public static void loadModules ( final JTree projectTree , final INaviModule [ ] modules ) { for ( final INaviModule module : modules ) { if ( module . isInitialized ( ) ) { CModuleLoader . loadModule ( projectTree , module ) ; } else { CModuleInitializationFunctions . initializeAndLoadModule ( projectTree , module ) ; } } }
static AggregatedHttpMessage of ( HttpHeaders headers , HttpData content ) { return of ( headers , content , HttpHeaders . EMPTY_HEADERS ) ; }
protected boolean matchNameAttribute ( AttributeSet attr , HTML . Tag tag ) { Object o = attr . getAttribute ( StyleConstants . NameAttribute ) ; if ( o instanceof HTML . Tag ) { HTML . Tag name = ( HTML . Tag ) o ; if ( name == tag ) { return BOOL_ ; } } return BOOL_ ; }
void seek ( long sequenceId ) throws IOException ;
public long [ ] fetchOid ( ) throws BerException { return fetchOid ( OidTag ) ; }
public void toggleTruncation ( ) { mIsShowingTruncatedText = ! mIsShowingTruncatedText ; updateMaxLines ( ) ; }
public static void w ( String tag , String msg ) { w ( tag , msg , null ) ; }
public boolean isNaN ( ) { return Double . isNaN ( hi ) ; }
public SequenceNameLocusSimple ( SequenceNameLocus other ) { this ( other . getSequenceName ( ) , other . getStart ( ) , other . getEnd ( ) ) ; }
public boolean isSomeoneSelected ( ) { return selected != null ; }
UninitializedMessageException newUninitializedMessageException ( ) { return new UninitializedMessageException ( this ) ; }
public JEditorPassword ( ) { super ( ) ; }
public Reporter reporter ( ) { return this . reporter ; }
protected VariableStatementImpl ( ) { super ( ) ; }
public void write ( String str , int off , int len ) throws IOException { if ( _byteBuffer == null ) throw new IOException ( STR_ ) ; final int off_plus_len = off + len ; for ( int i = off ; i < off_plus_len ; ) { char c = str . charAt ( i ++ ) ; if ( c < NUM_ ) { _byteBuffer . put ( ( byte ) c ) ; } else { write ( c ) ; } } }
public Object clone ( ) throws CloneNotSupportedException { if ( this instanceof Cloneable ) { return super . clone ( ) ; } else { throw new CloneNotSupportedException ( ) ; } }
public abstract XMLEventWriter createXMLEventWriter ( java . io . OutputStream stream ) throws XMLStreamException ;
public abstract ByteIterator byteIterator ( ) ;
public Amount subtract ( final Amount amount ) { return new Amount ( this . getNumMicroNem ( ) - amount . getNumMicroNem ( ) ) ; }
public final void testValidateUppercaseNotAllowingSpacesSucceeds ( ) { char [ ] allowedCharacters = new char [ ] { STR_ } ; LetterOrNumberValidator characterOrNumberValidator = new LetterOrNumberValidator ( STR_ , Case . UPPERCASE , BOOL_ , allowedCharacters ) ; assertTrue ( characterOrNumberValidator . validate ( STR_ ) ) ; }
public DateParser ( String value ) { this . value = value ; }
void generateLeaves ( ) { for ( TreeRTGQuercusRobur . FoliageCoordinates worldgenbigtree$foliagecoordinates : this . field_175948_j ) { this . generateLeafNode ( worldgenbigtree$foliagecoordinates ) ; } }
public void invalidateIfChanged ( int tabId , String url ) { if ( mNativeTabContentManager != NUM_ ) { nativeInvalidateIfChanged ( mNativeTabContentManager , tabId , url ) ; } }
public void testLoginException03 ( ) { String msg = null ; LoginException lE = new LoginException ( msg ) ; assertNull ( STR_ , lE . getMessage ( ) ) ; assertNull ( STR_ , lE . getCause ( ) ) ; }
protected void engineUpdate ( byte [ ] input , int offset , int len ) { if ( input == null ) { throw new IllegalArgumentException ( STR_ ) ; } if ( len <= NUM_ ) { return ; } if ( offset < NUM_ ) { throw new ArrayIndexOutOfBoundsException ( offset ) ; } if ( offset > input . length || len > input . length || ( len + offset ) > input . length ) { throw new IllegalArgumentException ( ) ; } SHA1Impl . updateHash ( buffer , input , offset , offset + len - NUM_ ) ; messageLength += len ; }
public void test_DivideBigDecimalRoundingModeFLOOR ( ) { String a = STR_ ; String b = STR_ ; RoundingMode rm = RoundingMode . FLOOR ; String c = STR_ ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) ) ; BigDecimal bNumber = new BigDecimal ( new BigInteger ( b ) ) ; BigDecimal result = aNumber . divide ( bNumber , rm ) ; assertEquals ( STR_ , c , result . toString ( ) ) ; }
public void paintScrollBarTrackBorder ( SynthContext context , Graphics g , int x , int y , int w , int h ) { paintBorder ( context , g , x , y , w , h , null ) ; }
private boolean isWhitespace ( ) { return isWhitespace ( _pos ) ; }
public boolean isAllow_Info_Product ( ) { Object oo = get_Value ( COLUMNNAME_Allow_Info_Product ) ; if ( oo != null ) { if ( oo instanceof Boolean ) return ( ( Boolean ) oo ) . booleanValue ( ) ; return STR_ . equals ( oo ) ; } return BOOL_ ; }
public static void registerConfig ( ) { Config . registerSelf ( RollingAvgStats . class ) ; numSamples = Config . parms . getInt ( STR_ ) ; if ( numSamples <= NUM_ ) { Config . logger . log ( Level . WARNING , STR_ , numSamples ) ; } int runlength = Config . parms . getInt ( STR_ ) ; if ( runlength > NUM_ && numSamples >= runlength ) { Config . logger . log ( Level . WARNING , STR_ , numSamples ) ; } }
public < T > MappingIterator < T > readValues ( InputStream src ) throws IOException , JsonProcessingException { JsonParser jp = _jsonFactory . createJsonParser ( src ) ; if ( _schema != null ) { jp . setSchema ( _schema ) ; } DeserializationContext ctxt = _createDeserializationContext ( jp , _config ) ; return new MappingIterator < T > ( _valueType , jp , ctxt , _findRootDeserializer ( _config , _valueType ) , BOOL_ , _valueToUpdate ) ; }
public long forceGetValueAsLong ( long defaultValue ) { long [ ] l = getValueAsLongs ( ) ; if ( l != null && l . length >= NUM_ ) { return l [ NUM_ ] ; } byte [ ] b = getValueAsBytes ( ) ; if ( b != null && b . length >= NUM_ ) { return b [ NUM_ ] ; } Rational [ ] r = getValueAsRationals ( ) ; if ( r != null && r . length >= NUM_ && r [ NUM_ ] . getDenominator ( ) != NUM_ ) { return ( long ) r [ NUM_ ] . toDouble ( ) ; } return defaultValue ; }
private void writeObject ( java . io . ObjectOutputStream out ) throws java . io . IOException { if ( duplicateStream == null ) { throw new NotSerializableException ( this . getClass ( ) . getName ( ) + STR_ ) ; } OutputStream tempOutputStream = outputStream ; outputStream = null ; out . defaultWriteObject ( ) ; outputStream = tempOutputStream ; }
public void addListener ( ConnectableDeviceListener listener ) { if ( ! listeners . contains ( listener ) ) { listeners . add ( listener ) ; } }
public void testFindUserGroupsOpenLdapWithEmptyBase ( ) throws Exception { LdapManager mgr = getLdapOpenLdap ( ) ; List ret = null ; AndFilter filter = new AndFilter ( ) ; filter . and ( new EqualsFilter ( mgr . getGroupsReturningAttribute ( LdapGroupAttributeConstants . LDAP_GROUP_ATTRIBUTE_MEMBER ) , STR_ ) ) ; try { LdapSearchManagerVO searchMgrVO = new LdapSearchManagerVO ( ) ; searchMgrVO . setFilter ( filter ) ; searchMgrVO . setBase ( STR_ ) ; searchMgrVO . setAddGroupClasses ( BOOL_ ) ; ret = mgr . findUserGroups ( searchMgrVO ) ; } catch ( Exception e ) { } assertEquals ( NUM_ , ret . size ( ) ) ; }
private void advance ( ) throws IOException { close ( ) ; if ( it . hasNext ( ) ) { current = it . next ( ) . openStream ( ) ; } }
public static void moveDirectory ( File srcDir , File destDir ) throws IOException { if ( srcDir == null ) { throw new NullPointerException ( STR_ ) ; } if ( destDir == null ) { throw new NullPointerException ( STR_ ) ; } if ( ! srcDir . exists ( ) ) { throw new FileNotFoundException ( STR_ + srcDir + STR_ ) ; } if ( ! srcDir . isDirectory ( ) ) { throw new IOException ( STR_ + srcDir + STR_ ) ; } if ( destDir . exists ( ) ) { throw new FileExistsException ( STR_ + destDir + STR_ ) ; } boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath ( ) . startsWith ( srcDir . getCanonicalPath ( ) ) ) { throw new IOException ( STR_ + srcDir + STR_ + destDir ) ; } copyDirectory ( srcDir , destDir ) ; deleteDirectory ( srcDir ) ; if ( srcDir . exists ( ) ) { throw new IOException ( STR_ + srcDir + STR_ + destDir + STR_ ) ; } } }
public native void seekTo ( long msec ) throws IllegalStateException ;
public static Builder newBuilder ( ) { return new Builder ( ) ; }
void receive ( I event ) ;
static BufferedImage convertImage ( BufferedImage image ) { switch ( image . getType ( ) ) { case BufferedImage . TYPE_INT_ARGB_PRE : return image ; case BufferedImage . TYPE_4BYTE_ABGR : image . coerceData ( BOOL_ ) ; return image ; } BufferedImage convertedImage = new BufferedImage ( image . getWidth ( ) , image . getHeight ( ) , BufferedImage . TYPE_INT_ARGB_PRE ) ; Graphics2D g = convertedImage . createGraphics ( ) ; g . setColor ( new java . awt . Color ( NUM_ , NUM_ , NUM_ , NUM_ ) ) ; g . fillRect ( NUM_ , NUM_ , image . getWidth ( ) , image . getHeight ( ) ) ; g . drawImage ( image , NUM_ , NUM_ , null ) ; g . dispose ( ) ; return convertedImage ; }
public void actionPerformed ( ActionEvent ev ) { execute ( STR_ + ( ! isSelected ( ) ) + STR_ ) ; }
public static DecimalStyle of ( Locale locale ) { Objects . requireNonNull ( locale , STR_ ) ; DecimalStyle info = CACHE . get ( locale ) ; if ( info == null ) { info = create ( locale ) ; CACHE . putIfAbsent ( locale , info ) ; info = CACHE . get ( locale ) ; } return info ; }
public AbstractNode < ? > compute ( final LoadChildRequest req ) throws InterruptedException { return req . parent . _getChild ( req . index , req ) ; }
public boolean isDistinct ( ) { return distinct ; }
public AuthSignupQuery voice ( Boolean value ) { return unsafeParam ( STR_ , value ) ; }
public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { request . getSession ( ) . setAttribute ( STR_ , STR_ ) ; response . sendRedirect ( STR_ ) ; return ; }
public boolean isRegularExpressions ( ) { return isRegularExpressions ; }
public boolean created ( ) throws HttpRequestException { return HTTP_CREATED == code ( ) ; }
private void executeValidWorkflowAndExtractCheckValues ( ) { ConfigHandler configHandler = new ClientConfigHandler ( ) ; TransportHandler transportHandler = configHandler . initializeTransportHandler ( config ) ; TlsContext tlsContext = configHandler . initializeTlsContext ( config ) ; WorkflowExecutor workflowExecutor = configHandler . initializeWorkflowExecutor ( transportHandler , tlsContext ) ; WorkflowTrace trace = tlsContext . getWorkflowTrace ( ) ; workflowExecutor . executeWorkflow ( ) ; transportHandler . closeConnection ( ) ; ECDHClientKeyExchangeMessage message = ( ECDHClientKeyExchangeMessage ) trace . getFirstHandshakeMessage ( HandshakeMessageType . CLIENT_KEY_EXCHANGE ) ; BigInteger x = message . getPublicKeyBaseX ( ) . getValue ( ) ; BigInteger y = message . getPublicKeyBaseY ( ) . getValue ( ) ; checkPoint = new Point ( x , y ) ; checkPMS = message . getPremasterSecret ( ) . getValue ( ) ; }
public boolean isSuccess ( ) { return error == null ; }
public synchronized static boolean isSparkContextCreated ( ) { return ( _spctx != null ) ; }
public Label ( ) { }
protected void fireImplementationEventListeners ( NodeEventTarget node , AbstractEvent e , boolean useCapture ) { String type = e . getType ( ) ; XBLEventSupport support = ( XBLEventSupport ) node . getEventSupport ( ) ; if ( support == null ) { return ; } EventListenerList list = support . getImplementationEventListeners ( type , useCapture ) ; if ( list == null ) { return ; } EventListenerList . Entry [ ] listeners = list . getEventListeners ( ) ; fireEventListeners ( node , e , listeners , null , null ) ; }
public XMLElement ( String fullName ) { this ( fullName , null , null , NO_LINE ) ; }
public boolean isSingleResult ( ) { return _results . getFieldNames ( ) . length == NUM_ && _results . getFieldValues ( ) . length == NUM_ ; }
public boolean equals ( Object other ) { if ( other == null ) return BOOL_ ; if ( getClass ( ) != other . getClass ( ) ) { return BOOL_ ; } HostPort that = ( HostPort ) other ; return port == that . port && host . equals ( that . host ) ; }
public static < M , A , B , C > ListT < M , C > zipWith_ ( Monad < M > monad , BiFunction < A , B , __ < M , C > > fn , ListT < M , A > ma , ListT < M , B > mb ) { __ < M , Maybe < T2 < A , ListT < M , A > > > > ua = ma . uncons ( monad ) ; __ < M , Maybe < T2 < B , ListT < M , B > > > > ub = mb . uncons ( monad ) ; __ < M , ListT < M , C > > uc = monad . bind ( ua , null ) ; return wrapEffect ( monad , uc ) ; }
protected void packetFromThisVMReceived ( Map < String , String > payload ) { receivedJDPpackets ++ ; final String jdpName = payload . get ( STR_ ) ; log . fine ( STR_ + String . valueOf ( receivedJDPpackets ) + STR_ + jdpName ) ; }
private void popIlev ( ) { ilev = ilev > > > NUM_ ; }
public static long [ ] hashToLongs ( int [ ] data , long seed ) { if ( ( data == null ) || ( data . length == NUM_ ) ) { return null ; } return hash ( data , seed ) ; }
protected boolean hasCompressedThumbnail ( ) { return mThumbnail != null ; }
boolean isChunkLoaded ( int x , int z ) ;
protected String findFileName ( String [ ] searchPaths , String partialFile ) { if ( searchPaths == null || searchPaths . length == NUM_ ) { return null ; } for ( int i = NUM_ ; i < searchPaths . length ; i ++ ) { String dtedFileName = searchPaths [ i ] + partialFile ; if ( BinaryFile . exists ( dtedFileName ) ) { return dtedFileName ; } } return null ; }
public final boolean equals ( Object node ) { try { return equals ( ( Node ) node ) ; } catch ( ClassCastException cce ) { return BOOL_ ; } }
public static NeuralNetwork readFrom ( String filename ) throws IOException , ClassNotFoundException { ObjectInputStream ois = new ObjectInputStream ( new FileInputStream ( filename ) ) ; NeuralNetwork net = ( NeuralNetwork ) ois . readObject ( ) ; ois . close ( ) ; return net ; }
public boolean isSet ( _Fields field ) { if ( field == null ) { throw new IllegalArgumentException ( ) ; } switch ( field ) { } throw new IllegalStateException ( ) ; }
public void produceEvent ( LogConnection conn , long seqno , String shardId , Timestamp ts ) throws ReplicatorException , InterruptedException { produceEvent ( conn , seqno , ( short ) NUM_ , BOOL_ , shardId , ts ) ; }
static void testExtend ( ClassLoader loader ) { Class doubledExtendClass ; Object obj ; try { doubledExtendClass = loader . loadClass ( STR_ ) ; } catch ( ClassNotFoundException cnfe ) { System . err . println ( STR_ + cnfe ) ; return ; } try { obj = doubledExtendClass . newInstance ( ) ; } catch ( InstantiationException ie ) { System . err . println ( STR_ + ie ) ; return ; } catch ( IllegalAccessException iae ) { System . err . println ( STR_ + iae ) ; return ; } catch ( LinkageError le ) { System . out . println ( STR_ ) ; return ; } Base baseRef = ( Base ) obj ; DoubledExtend de = baseRef . getExtended ( ) ; try { String result ; result = Base . doStuff ( de ) ; System . err . println ( STR_ ) ; System . err . println ( STR_ + result + STR_ ) ; } catch ( LinkageError le ) { System . out . println ( STR_ ) ; return ; } }
private int frequencyToChannel ( int freq ) { if ( freq == NUM_ ) return NUM_ ; else if ( freq < NUM_ ) return ( freq - NUM_ ) / NUM_ ; else if ( freq >= NUM_ && freq <= NUM_ ) return ( freq - NUM_ ) / NUM_ ; else return ( freq - NUM_ ) / NUM_ ; }
private static < T extends Object > T [ ] arraycopy ( T [ ] result , T [ ] head , T [ ] tail ) { System . arraycopy ( head , NUM_ , result , NUM_ , head . length ) ; System . arraycopy ( tail , NUM_ , result , head . length , tail . length ) ; return result ; }
private void checkAndDisplayMatrix ( ) { if ( checkMatrixBounds ( ) ) { setImageViewMatrix ( getDrawMatrix ( ) ) ; } }
public SVGPath relativeEllipticalArc ( double rx , double ry , double ar , double la , double sp , double [ ] xy ) { append ( PATH_ARC_RELATIVE , rx , ry , ar , la , sp , xy [ NUM_ ] , xy [ NUM_ ] ) ; return this ; }
public static void ignoreException ( String pattern ) { if ( SolrException . ignorePatterns == null ) SolrException . ignorePatterns = new HashSet < > ( ) ; SolrException . ignorePatterns . add ( pattern ) ; }
public MekaDialog ( Dialog owner , String title ) { this ( owner , title , ModalityType . MODELESS ) ; }
int pureLength ( ) { return length - delimiter . length ( ) ; }
public DataSetBuilder < T > repeatAll ( int times ) { builder . repeatAll ( times ) ; return this ; }
public void requestVoiceVerificationCode ( ) throws IOException { this . pushServiceSocket . createAccount ( BOOL_ ) ; }
public synchronized final Map < String , Object > snapshot ( ) { return new LinkedHashMap < > ( map ) ; }
private float interpolate ( ) { long currTime = System . currentTimeMillis ( ) ; float elapsed = ( currTime - startTime ) / ZOOM_TIME ; elapsed = Math . min ( NUM_ , elapsed ) ; return interpolator . getInterpolation ( elapsed ) ; }
private java . lang . String registerPrefix ( javax . xml . stream . XMLStreamWriter xmlWriter , java . lang . String namespace ) throws javax . xml . stream . XMLStreamException { java . lang . String prefix = xmlWriter . getPrefix ( namespace ) ; if ( prefix == null ) { prefix = generatePrefix ( namespace ) ; while ( xmlWriter . getNamespaceContext ( ) . getNamespaceURI ( prefix ) != null ) { prefix = org . apache . axis2 . databinding . utils . BeanUtil . getUniquePrefix ( ) ; } xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } return prefix ; }
void onListItemCollapsed ( int position ) ;
protected boolean wantProcessGroup ( final String groupName , final ResourceType resourceType ) { return BOOL_ ; }
protected abstract TBar createBar ( final long value ) ;
private void updateStats ( String tblName ) { Connection conn = ses . attachment ( ) ; assert conn != null ; Statement stmt = null ; try { stmt = conn . createStatement ( ) ; stmt . executeUpdate ( STR_ + tblName + STR_ ) ; } catch ( SQLException e ) { throw new IgniteException ( STR_ , e ) ; } finally { U . closeQuiet ( stmt ) ; } }
private void init ( ) { formatHtmlAndCustomTags ( ) ; }
public void run ( IAction action ) { MessageDialog . openInformation ( window . getShell ( ) , STR_ , STR_ ) ; }
void doRefreshMirrorLink ( StorageSystem system , FileShare source , FileShare target , TaskCompleter completer ) ;
int nextRun ( ) { final int runBase = runEnd ( NUM_ ) ; assert runBase < to ; if ( runBase == to - NUM_ ) { return NUM_ ; } int o = runBase + NUM_ ; if ( compare ( runBase , runBase + NUM_ ) > NUM_ ) { while ( o < to && compare ( o - NUM_ , o ) > NUM_ ) { ++ o ; } reverse ( runBase , o ) ; } else { while ( o < to && compare ( o - NUM_ , o ) <= NUM_ ) { ++ o ; } } final int runHi = Math . max ( o , Math . min ( to , runBase + minRun ) ) ; binarySort ( runBase , runHi , o ) ; return runHi - runBase ; }
void createControl ( Composite parent ) ;
public void addMapComponent ( Object obj ) ;
public boolean isEmpty ( ) { return keyEdit . getText ( ) . toString ( ) . trim ( ) . equals ( STR_ ) && valueEdit . getText ( ) . toString ( ) . trim ( ) . equals ( STR_ ) ; }
private void validateMirrorCount ( Volume sourceVolume , VirtualPool sourceVPool , int count ) { int currentMirrorCount = ( sourceVolume . getMirrors ( ) == null || sourceVolume . getMirrors ( ) . isEmpty ( ) ) ? NUM_ : sourceVolume . getMirrors ( ) . size ( ) ; int requestedMirrorCount = currentMirrorCount + count ; if ( sourceVPool . getHighAvailability ( ) != null && sourceVPool . getHighAvailability ( ) . equals ( VirtualPool . HighAvailabilityType . vplex_distributed . name ( ) ) ) { VPlexUtil . validateMirrorCountForVplexDistVolume ( sourceVolume , sourceVPool , count , currentMirrorCount , requestedMirrorCount , _dbClient ) ; } else if ( sourceVPool . getMaxNativeContinuousCopies ( ) < requestedMirrorCount ) { throw APIException . badRequests . invalidParameterBlockMaximumCopiesForVolumeExceeded ( sourceVPool . getMaxNativeContinuousCopies ( ) , sourceVolume . getLabel ( ) , sourceVolume . getId ( ) , currentMirrorCount ) ; } }
private void outputDataRecord ( ProcessContext c , KV < KV < K , W > , WindowedValue < V > > value , long keyIndex ) { IsmRecord < WindowedValue < V > > ismRecord = IsmRecord . of ( ImmutableList . of ( value . getKey ( ) . getKey ( ) , value . getKey ( ) . getValue ( ) , keyIndex ) , value . getValue ( ) ) ; c . output ( ismRecord ) ; }
public MemoryFile ( String name , int length ) throws IOException { mLength = length ; mFD = native_open ( name , length ) ; if ( length > NUM_ ) { mAddress = native_mmap ( mFD , length , PROT_READ | PROT_WRITE ) ; } else { mAddress = NUM_ ; } }
public void draw ( Graphics2D g2 , DialPlot plot , Rectangle2D frame , Rectangle2D view ) ;
public void checkLRU ( ) { if ( this . entriesInitialized ) { try { this . entries . lruUpdateCallback ( ) ; } catch ( DiskAccessException dae ) { this . handleDiskAccessException ( dae ) ; throw dae ; } } }
public Matrix4x3f m12 ( float m12 ) { this . m12 = m12 ; properties &= ~ ( PROPERTY_IDENTITY | PROPERTY_TRANSLATION ) ; return this ; }
public void start ( Profile profile , String url , String text , boolean preventInlineAutocomplete ) { start ( profile , url , text , - NUM_ , preventInlineAutocomplete ) ; }
public void deselect ( int index ) { deselectItem ( index ) ; }
protected void loadTenantACLs ( ACLResources resources ) { tenants = Lists . newArrayList ( ) ; URI virtualPoolId = ResourceUtils . uri ( id ) ; if ( virtualPoolId != null ) { for ( ACLEntry acl : resources . getACLs ( virtualPoolId ) ) { if ( StringUtils . isNotBlank ( acl . getTenant ( ) ) ) { tenants . add ( acl . getTenant ( ) ) ; } } } enableTenants = ! tenants . isEmpty ( ) ; }
void joinedServer ( String server ) ;
public com . sun . identity . wsfederation . jaxb . xmlsig . KeyValueType createKeyValueType ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . wsfederation . jaxb . xmlsig . impl . KeyValueTypeImpl ( ) ; }
protected static int hashString ( final String string , final MpqHashType mpqHash ) { final int offset = mpqHash . offset ; long seed1 = NUM_ ; long seed2 = NUM_ ; int ch ; final int length = string . length ( ) ; for ( int i = NUM_ ; i < length ; i ++ ) { ch = Character . toUpperCase ( string . charAt ( i ) ) ; seed1 = CRYPT_TABLE [ offset + ch ] ^ ( ( seed1 + seed2 ) & NUM_ ) ; seed2 = ( ch + seed1 + seed2 + ( seed2 << NUM_ ) + NUM_ ) & NUM_ ; } return ( int ) seed1 ; }
public static RegistrationException convertToApi ( org . oscm . internal . types . exception . RegistrationException oldEx ) { org . oscm . internal . types . exception . beans . RegistrationExceptionBean bean = ( org . oscm . internal . types . exception . beans . RegistrationExceptionBean ) getFaultInfo ( oldEx ) ; RegistrationExceptionBean v13Bean = convertBeanToApi ( bean , RegistrationExceptionBean . class ) ; if ( bean != null ) { RegistrationException . Reason v13Reason = EnumConverter . convert ( bean . getReason ( ) , RegistrationException . Reason . class ) ; v13Bean . setReason ( v13Reason ) ; } return newApiException ( RegistrationException . class , getExceptionMessage ( oldEx ) , v13Bean , oldEx . getStackTrace ( ) ) ; }
private void clearBackEdges ( SpaceEffGraphNode bb ) { SpaceEffGraphNode . OutEdgeEnumeration f = bb . outEdges ( ) ; while ( f . hasMoreElements ( ) ) { SpaceEffGraphEdge outEdge = ( SpaceEffGraphEdge ) f . next ( ) ; outEdge . clearBackEdge ( ) ; } }
public ProductFilter ( ) { initComponents ( ) ; }
public static IEditorPart openEditor ( String editorId , IEditorInput input ) { final IWorkbenchPage activePage = getActivePage ( ) ; if ( activePage != null ) { try { final IEditorPart openEditor = activePage . openEditor ( input , editorId ) ; getActiveWindow ( ) . setActivePage ( null ) ; getActiveWindow ( ) . setActivePage ( activePage ) ; return openEditor ; } catch ( PartInitException e ) { e . printStackTrace ( ) ; } } return null ; }
public ResourceLazyLoadingScript routing ( Object routing ) { this . routing = routing ; return this ; }
private final void smoothScrollTo ( int scrollValue , long duration ) { smoothScrollTo ( scrollValue , duration , NUM_ , null ) ; }
public HTMLEntities ( ) { initializeEntitiesTables ( ) ; }
public void testRefresh_RequestsSync ( ) { mController . init ( ) ; mController . onRefreshRequested ( ) ; verify ( mMockSyncManager ) . startFullSync ( ) ; }
public JdbcConnection query ( String query , StatementFactory statementFactory , ResultSetConsumer resultConsumer ) throws SQLException { Connection conn = connection ( ) ; try ( Statement statement = statementFactory . createStatement ( conn ) ) { if ( LOGGER . isTraceEnabled ( ) ) { LOGGER . trace ( STR_ , query ) ; } try ( ResultSet resultSet = statement . executeQuery ( query ) ) { if ( resultConsumer != null ) { resultConsumer . accept ( resultSet ) ; } } } return this ; }
public void truncate ( int newsize ) { if ( newsize < size ) { double [ ] odists = dists ; dists = new double [ newsize ] ; System . arraycopy ( odists , NUM_ , dists , NUM_ , newsize ) ; int [ ] oids = ids ; ids = new int [ newsize ] ; System . arraycopy ( oids , NUM_ , ids , NUM_ , newsize ) ; size = newsize ; } }
public boolean mousePressed ( MouseEvent e ) { return BOOL_ ; }
int deleteByPrimaryKey ( Short customerId ) ;
public int length ( ) { return bytes . length ; }
public BufferIterator littleEndianIterator ( ) { return new NioBufferIterator ( address , ( int ) size , ByteOrder . nativeOrder ( ) != ByteOrder . LITTLE_ENDIAN ) ; }
void markNameValid ( ) ;
public void runTest ( ) throws Throwable { Document doc ; NodeList acronymList ; Node testNode ; NamedNodeMap attributes ; Attr titleAttr ; String value ; Text textNode ; NodeList childNodes ; doc = ( Document ) load ( STR_ , BOOL_ ) ; acronymList = doc . getElementsByTagName ( STR_ ) ; testNode = acronymList . item ( NUM_ ) ; attributes = testNode . getAttributes ( ) ; titleAttr = ( Attr ) attributes . getNamedItem ( STR_ ) ; childNodes = titleAttr . getChildNodes ( ) ; assertSize ( STR_ , NUM_ , childNodes ) ; textNode = ( Text ) childNodes . item ( NUM_ ) ; value = textNode . getNodeValue ( ) ; assertEquals ( STR_ , STR_ , value ) ; textNode = ( Text ) childNodes . item ( NUM_ ) ; assertNull ( STR_ , textNode ) ; }
private native void _setDataSource ( String path , String [ ] keys , String [ ] values ) throws IOException , IllegalArgumentException , IllegalStateException ;
public StoredTransactionOutput ( Sha256Hash hash , long index , BigInteger value , int height , boolean isCoinbase , byte [ ] scriptBytes ) { this . hash = hash ; this . index = index ; this . value = value ; this . height = isCoinbase ? height : NONCOINBASE_HEIGHT ; this . scriptBytes = scriptBytes ; }
public static DateTimeFormatter ordinalDate ( ) { if ( od == null ) { od = new DateTimeFormatterBuilder ( ) . append ( yearElement ( ) ) . append ( dayOfYearElement ( ) ) . toFormatter ( ) ; } return od ; }
private int canUseListViewForHighLighting ( String key ) { if ( getListView ( ) == null ) { return - NUM_ ; } RecyclerView listView = getListView ( ) ; RecyclerView . Adapter adapter = listView . getAdapter ( ) ; if ( adapter != null && adapter instanceof PreferenceGroupAdapter ) { return findListPositionFromKey ( ( PreferenceGroupAdapter ) adapter , key ) ; } return - NUM_ ; }
public colgroup addElement ( Element element ) { addElementToRegistry ( element ) ; return ( this ) ; }
public void add ( ShortcutInfo item ) { contents . add ( item ) ; for ( int i = NUM_ ; i < listeners . size ( ) ; i ++ ) { listeners . get ( i ) . onAdd ( item ) ; } itemsChanged ( ) ; }
public static String makeMarginTransform ( double owidth , double oheight , double iwidth , double iheight , double margin ) { return makeMarginTransform ( owidth , oheight , iwidth , iheight , margin , margin , margin , margin ) ; }
public ProcessContextEditor ( Process process , ProcessContext alternativeContext ) { inputEditor = new RepositoryLocationsEditor < OutputPorts > ( BOOL_ , STR_ , STR_ ) ; outputEditor = new RepositoryLocationsEditor < InputPorts > ( BOOL_ , STR_ , STR_ ) ; macroEditor = new MacroEditor ( BOOL_ ) ; setLayout ( new GridLayout ( NUM_ , NUM_ ) ) ; ( ( GridLayout ) getLayout ( ) ) . setHgap ( NUM_ ) ; ( ( GridLayout ) getLayout ( ) ) . setVgap ( NUM_ ) ; add ( inputEditor ) ; add ( outputEditor ) ; add ( macroEditor ) ; setProcess ( process , alternativeContext ) ; }
public ComponentBuilder color ( ChatColor color ) { this . current . setColor ( color ) ; return this ; }
public static String generateNativeGuidForStoragePortFromIndication ( String sourceInstanceSystemName , String portNetworkId ) { String [ ] splitedString = sourceInstanceSystemName . split ( Constants . PATH_DELIMITER_REGEX ) ; return String . format ( STR_ , splitedString [ NUM_ ] , splitedString [ NUM_ ] , portNetworkId ) ; }
private Object [ ] createDataRow ( RPObject item , int maxPreferredWidth ) { Object [ ] rval = new Object [ NUM_ ] ; rval [ NUM_ ] = getItemSprite ( item ) ; rval [ NUM_ ] = getFormattedPrice ( item ) ; StringBuilder html = new StringBuilder ( STR_ ) ; html . append ( maxPreferredWidth - NUM_ ) ; html . append ( STR_ ) ; String text = item . get ( STR_ ) ; HTMLBuilder build = new HTMLBuilder ( ) ; formatter . format ( text , defaultAttrs , build ) ; html . append ( build . toHTML ( ) ) ; html . append ( STR_ ) ; rval [ NUM_ ] = html . toString ( ) ; return rval ; }
public Wine runForeground ( String executableToRun , List < String > arguments ) throws CancelException { runForeground ( new File ( executableToRun ) , arguments , null ) ; return this ; }
private boolean isGivenVolumeListSameAsInStorageGroup ( StorageSystem storage , CIMObjectPath groupPath , List < URI > volumeURIs ) throws WBEMException { Set < String > returnedNativeGuids = new HashSet < String > ( ) ; Set < String > givenNativeGuids = new HashSet < String > ( ) ; CloseableIterator < CIMObjectPath > volumePathItr = null ; try { List < Volume > volumes = _dbClient . queryObject ( Volume . class , volumeURIs ) ; volumePathItr = _helper . getAssociatorNames ( storage , groupPath , null , SmisConstants . CIM_STORAGE_VOLUME , null , null ) ; while ( volumePathItr . hasNext ( ) ) { returnedNativeGuids . add ( _helper . getVolumeNativeGuid ( volumePathItr . next ( ) ) ) ; } for ( Volume volume : volumes ) { givenNativeGuids . add ( volume . getNativeGuid ( ) ) ; } _log . info ( STR_ , returnedNativeGuids ) ; _log . info ( STR_ , givenNativeGuids ) ; Set < String > diff = Sets . difference ( returnedNativeGuids , givenNativeGuids ) ; return ( diff . isEmpty ( ) ) ; } finally { volumePathItr . close ( ) ; } }
public final BigDecimal bigVal ( ) { return this . bigVal ; }
public ByteOrder order ( ) { ByteOrder bo = _buf . order ( ) ; return bo ; }
public CSSEncoder ( Mode mode ) { _mode = mode ; _lowMask = mode . lowMask ( ) ; _highMask = mode . highMask ( ) ; }
public RegularDegreeEdgeIterator ( RegularDegreeEdgePool regularDegreeEdgePool ) { this . regularDegreeEdgePool = regularDegreeEdgePool ; }
private void updateWifiStatusDisplay ( ) { final WifiManager wifiManager = ( WifiManager ) getActivity ( ) . getSystemService ( Context . WIFI_SERVICE ) ; wifi . setText ( Boolean . toString ( wifiManager . isWifiEnabled ( ) ) ) ; }
private void deleteUnsortedLifecycleMethods ( Collection < PsiMethod > methods ) { for ( PsiMethod method : methods ) method . delete ( ) ; }
public ViewHelper linkify ( int viewId , int linkifyMask ) { return view ( viewId ) . linkify ( linkifyMask ) . reverse ( this ) ; }
public static void applyFilters ( List < Integer > filterIds , Script script ) { ScriptFilterDao dao = new ScriptFilterDao ( ) ; applyFiltersToScript ( dao . findForIds ( filterIds ) , script ) ; }
public void removeAllMapMouseListeners ( ) ;
V remove ( K k ) ;
public boolean isCurrentlyLive ( ) { return this . currentlyLive ; }
public void endHeader ( ) throws IOException { write ( STR_ ) ; }
private boolean validateServiceIntent ( Context context , Intent intent ) { ResolveInfo resolveInfo = context . getPackageManager ( ) . resolveService ( intent , NUM_ ) ; if ( resolveInfo == null ) { return BOOL_ ; } return validateAppSignatureForPackage ( context , resolveInfo . serviceInfo . packageName ) ; }
public static boolean startsWith ( String columnPath , String tableName ) { if ( tableName == null || columnPath == null ) return BOOL_ ; return columnPath . startsWith ( tableName + STR_ ) ; }
public int initialCount ( ) ;
public boolean drag ( float x , float y ) { if ( ! checkClicked ( x , y ) ) { setPressed ( BOOL_ ) ; return BOOL_ ; } return isPressed ( ) ; }
public List < Long > readVectorUInt ( ) { throw new RuntimeException ( STR_ ) ; }
public void readMetadata ( ) throws SQLException { if ( valid ) { return ; } String [ ] metaInfos = queryMetaInfos ( isFunction ) ; String paramList = metaInfos [ NUM_ ] ; String functionReturn = metaInfos [ NUM_ ] ; parseParamList ( isFunction , paramList ) ; if ( isFunction ) { parseFunctionReturnParam ( functionReturn ) ; } }
public AbstractResourceScanner < V > newScanner ( BlockingBuffer < V [ ] > buffer ) ;
public void testArriveAndDeregister5 ( ) { Phaser root = new Phaser ( ) ; Phaser parent = new Phaser ( root ) ; Phaser child = new Phaser ( parent ) ; assertState ( root , NUM_ , NUM_ , NUM_ ) ; assertState ( parent , NUM_ , NUM_ , NUM_ ) ; assertState ( child , NUM_ , NUM_ , NUM_ ) ; assertEquals ( NUM_ , child . register ( ) ) ; assertState ( root , NUM_ , NUM_ , NUM_ ) ; assertState ( parent , NUM_ , NUM_ , NUM_ ) ; assertState ( child , NUM_ , NUM_ , NUM_ ) ; assertEquals ( NUM_ , child . arriveAndDeregister ( ) ) ; assertTerminated ( child , NUM_ ) ; assertTerminated ( parent , NUM_ ) ; assertTerminated ( root , NUM_ ) ; }
public void connect ( final MqttCallback callback , final Runnable connectionRunnable ) throws SpyException { createClient ( callback ) ; final ReconnectionSettings reconnectionSettings = getMqttConnectionDetails ( ) . getReconnectionSettings ( ) ; if ( reconnectionSettings == null ) { new Thread ( connectionRunnable ) . start ( ) ; } else { reconnectionManager . addConnection ( this , connectionRunnable ) ; } }
public abstract void doAfterEachTest ( ) ;
private void focusSpinnerIfNecessary ( ) { Component fo = KeyboardFocusManager . getCurrentKeyboardFocusManager ( ) . getFocusOwner ( ) ; if ( spinner . isRequestFocusEnabled ( ) && ( fo == null || ! SwingUtilities . isDescendingFrom ( fo , spinner ) ) ) { Container root = spinner ; if ( ! root . isFocusCycleRoot ( ) ) { root = root . getFocusCycleRootAncestor ( ) ; } if ( root != null ) { FocusTraversalPolicy ftp = root . getFocusTraversalPolicy ( ) ; Component child = ftp . getComponentAfter ( root , spinner ) ; if ( child != null && SwingUtilities . isDescendingFrom ( child , spinner ) ) { child . requestFocus ( ) ; } } } }
public static < K , V > SynchronizedBagMultimap < K , V > of ( MutableBagMultimap < K , V > multimap , Object lock ) { if ( multimap == null ) { throw new IllegalArgumentException ( STR_ ) ; } return new SynchronizedBagMultimap < > ( multimap , lock ) ; }
ArchivedCoupling ( final ArchiveContents parent , final org . simbrain . workspace . Coupling < ? > coupling ) { this . archivedProducer = new ArchivedAttribute ( parent , coupling . getProducer ( ) ) ; this . archivedConsumer = new ArchivedAttribute ( parent , coupling . getConsumer ( ) ) ; }
public void runTest ( ) throws Throwable { Document doc ; NamedNodeMap attributes ; Node element ; Attr attribute ; Attr newAttr1 ; Attr newAttr2 ; Attr newAttribute ; String attrName ; doc = ( Document ) load ( STR_ , BOOL_ ) ; element = doc . createElementNS ( STR_ , STR_ ) ; newAttr1 = doc . createAttributeNS ( STR_ , STR_ ) ; newAttribute = ( ( Element ) element ) . setAttributeNodeNS ( newAttr1 ) ; newAttr2 = doc . createAttributeNS ( STR_ , STR_ ) ; newAttribute = ( ( Element ) element ) . setAttributeNodeNS ( newAttr2 ) ; attributes = element . getAttributes ( ) ; attribute = ( Attr ) attributes . getNamedItemNS ( STR_ , STR_ ) ; attrName = attribute . getNodeName ( ) ; assertEquals ( STR_ , STR_ , attrName ) ; }
public void clear ( ) { if ( mOriginalValues != null ) { synchronized ( mLock ) { mOriginalValues . clear ( ) ; mObjects . clear ( ) ; } } else { mObjects . clear ( ) ; } if ( mNotifyOnChange ) notifyDataSetChanged ( ) ; }
public static ViewPropertyAnimator showViewByScaleY ( View v , AnimatorListener animatorListener ) { ViewPropertyAnimator propertyAnimator = v . animate ( ) . setStartDelay ( SCALE_DELAY ) . scaleY ( NUM_ ) ; propertyAnimator . setListener ( animatorListener ) ; return propertyAnimator ; }
public AccessRequest ( ) { super ( PacketType . ACCESS_REQUEST ) ; }
public void addLocationItem ( String prefix , Properties props ) { prefix = PropUtils . getScopedPropertyPrefix ( prefix ) ; String locationName = props . getProperty ( prefix + NameProperty ) ; String latString = props . getProperty ( prefix + LatProperty ) ; String lonString = props . getProperty ( prefix + LonProperty ) ; String scaleString = props . getProperty ( prefix + ScaleProperty ) ; String projID = props . getProperty ( prefix + ProjectionTypeProperty ) ; if ( Debug . debugging ( STR_ ) ) { Debug . output ( STR_ + locationName + STR_ + latString + STR_ + lonString + STR_ + scaleString + STR_ + projID ) ; } try { float lat = new Float ( latString ) . floatValue ( ) ; float lon = new Float ( lonString ) . floatValue ( ) ; float scale = new Float ( scaleString ) . floatValue ( ) ; GoToButton gtb = new GoToButton ( locationName , lat , lon , scale , projID ) ; ensureCustomViews ( ) . add ( gtb ) ; add ( gtb ) ; } catch ( NumberFormatException nfe ) { return ; } }
static ReplayPromise < String > replayPromiseString ( final Duration timeout , final long time ) { return new ReplayPromiseImpl < > ( timeout , time ) ; }
public static synchronized void deleteByReponame ( String repoName ) throws IOException { Directory dir = FSDirectory . open ( Paths . get ( Properties . getProperties ( ) . getProperty ( Values . INDEXLOCATION , Values . DEFAULTINDEXLOCATION ) ) ) ; Analyzer analyzer = new CodeAnalyzer ( ) ; IndexWriterConfig iwc = new IndexWriterConfig ( analyzer ) ; iwc . setOpenMode ( IndexWriterConfig . OpenMode . CREATE_OR_APPEND ) ; IndexWriter writer = new IndexWriter ( dir , iwc ) ; writer . deleteDocuments ( new Term ( Values . REPONAME , repoName ) ) ; writer . close ( ) ; }
protected FinalizableWeakReference ( T referent , FinalizableReferenceQueue queue ) { super ( referent , queue . queue ) ; queue . cleanUp ( ) ; }
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( importNode04 . class , args ) ; }
public void keyPressed ( KeyEvent e ) { synchronized ( keyLock ) { keysDown . add ( e . getKeyCode ( ) ) ; } }
public IconicsDrawable sizeRes ( int dimenRes ) { return sizePx ( mContext . getResources ( ) . getDimensionPixelSize ( dimenRes ) ) ; }
private void updateProgress ( int progress ) { if ( myHost != null && progress != previousProgress ) { myHost . updateProgress ( progress ) ; } previousProgress = progress ; }
public ModelImporterVisualPanel1 ( ModelImporterWizardPanel1 panel ) { initComponents ( ) ; this . panel = panel ; ps = new PropertySheet ( ) ; ps . setNodes ( new Node [ ] { } ) ; ps . setDescriptionAreaVisible ( BOOL_ ) ; jPanel2 . add ( ps ) ; }
void joinDistributedSystem ( ) ;
public static boolean storageDirectoryExists ( ) { return new File ( HostsSupportImpl . getStorageDirectoryString ( ) ) . isDirectory ( ) ; }
public boolean isDocOrdered ( ) { return m_exprObj . isDocOrdered ( ) ; }
private static boolean isNalStartCode ( byte [ ] data , int index ) { if ( data . length - index <= NAL_START_CODE . length ) { return BOOL_ ; } for ( int j = NUM_ ; j < NAL_START_CODE . length ; j ++ ) { if ( data [ index + j ] != NAL_START_CODE [ j ] ) { return BOOL_ ; } } return BOOL_ ; }
public void reset ( ) { for ( int i = NUM_ ; i < a . length ; i ++ ) { a [ i ] = i ; } numLeft = new BigInteger ( total . toString ( ) ) ; }
public void addMemoryPressureListener ( MemoryPressureListener listener ) { mListeners . add ( listener ) ; }
public int equivHashCode ( ) { return getBase ( ) . equivHashCode ( ) * NUM_ + getIndex ( ) . equivHashCode ( ) + NUM_ ; }
protected void copyBindings ( ) throws StandardException { for ( QueryTreeNode node : bindingsToCopy ) { Object userData = node . getUserData ( ) ; if ( userData instanceof TableBinding ) userData = new TableBinding ( ( TableBinding ) userData ) ; else if ( userData instanceof ColumnBinding ) { ColumnBinding cb = ( ColumnBinding ) userData ; FromTable oldFromTable = cb . getFromTable ( ) ; FromTable newFromTable = ( FromTable ) nodeMap . get ( oldFromTable ) ; if ( newFromTable == null ) newFromTable = oldFromTable ; ResultColumn oldResultColumn = cb . getResultColumn ( ) ; if ( oldResultColumn == null ) { userData = new ColumnBinding ( newFromTable , cb . getColumn ( ) , cb . isNullable ( ) ) ; } else { ResultColumn newResultColumn = ( ResultColumn ) nodeMap . get ( oldResultColumn ) ; if ( newResultColumn == null ) newResultColumn = oldResultColumn ; userData = new ColumnBinding ( newFromTable , newResultColumn ) ; } } else { continue ; } node . setUserData ( userData ) ; } }
public static boolean hasIceCreamSandwich ( ) { return Build . VERSION . SDK_INT >= Build . VERSION_CODES . ICE_CREAM_SANDWICH ; }
abstract protected void removeStreamingBuffers ( ) ;
public IonValue oneValue ( String text ) { IonValue value = null ; Iterator < IonValue > iterator = system ( ) . iterate ( text ) ; if ( iterator . hasNext ( ) ) { value = iterator . next ( ) ; if ( iterator . hasNext ( ) ) { IonValue part = iterator . next ( ) ; fail ( STR_ + part + STR_ + text ) ; } } else { fail ( STR_ + text ) ; } return value ; }
private void showFeedback ( String message ) { if ( myHost != null ) { myHost . showFeedback ( message ) ; } else { System . out . println ( message ) ; } }
public String parse ( ) throws QueryException { return ( parse ( BOOL_ ) ) ; }
public void killAllLoads ( ) { killAllLoads ( BOOL_ ) ; }
void scheduleMessageReceived ( NextFilter nextFilter , Object message ) { messageReceivedEventQueue . add ( new IoFilterEvent ( nextFilter , IoEventType . MESSAGE_RECEIVED , session , message ) ) ; }
public static void defineCharacterSet ( String name , char [ ] table ) { if ( table . length < NUM_ ) throw new IllegalArgumentException ( STR_ ) ; characterSets . put ( name , table ) ; }
public static BindResult unmodifiableBindResult ( final BindResult result ) { if ( result instanceof UnmodifiableBindResultImpl ) { return result ; } return new UnmodifiableBindResultImpl ( result ) ; }
public void load ( List < PolicyInformation > policyInformation ) { PolicyInformation [ ] policyInformationArray = policyInformation . toArray ( new PolicyInformation [ policyInformation . size ( ) ] ) ; Arrays . sort ( policyInformationArray , new PolicyInformationComparator ( ) ) ; data = new Object [ policyInformation . size ( ) ] [ NUM_ ] ; int i = NUM_ ; for ( PolicyInformation policyInfo : policyInformationArray ) { data [ i ] [ NUM_ ] = policyInfo ; i ++ ; } fireTableDataChanged ( ) ; }
protected String templateString ( ) { String result = STR_ ; String tempResult = STR_ ; for ( int m_ResultsetKeyColumn : m_ResultsetKeyColumns ) { tempResult = m_Template . toString ( m_ResultsetKeyColumn ) + STR_ ; tempResult = Utils . removeSubstring ( tempResult , STR_ ) ; tempResult = Utils . removeSubstring ( tempResult , STR_ ) ; tempResult = Utils . removeSubstring ( tempResult , STR_ ) ; result += tempResult ; } return result . trim ( ) ; }
public boolean containsValue ( Object value ) { Iterator < Map . Entry < K , V > > it = entrySet ( ) . iterator ( ) ; if ( value != null ) { while ( it . hasNext ( ) ) { if ( value . equals ( it . next ( ) . getValue ( ) ) ) { return BOOL_ ; } } } else { while ( it . hasNext ( ) ) { if ( it . next ( ) . getValue ( ) == null ) { return BOOL_ ; } } } return BOOL_ ; }
public abstract void doInBackground ( ) ;
public void release ( ) throws BackupException ;
public int truncateToPage ( int addr ) { return ( addr > > OFFSET_BITS ) << OFFSET_BITS ; }
private final void dispatachChars ( Node node ) throws org . xml . sax . SAXException { if ( fSerializer != null ) { this . fSerializer . characters ( node ) ; } else { String data = ( ( Text ) node ) . getData ( ) ; this . fSerializer . characters ( data . toCharArray ( ) , NUM_ , data . length ( ) ) ; } }
public boolean isDataConnectivityPossible ( ) throws android . os . RemoteException ;
public boolean hasDuration ( ) { return hasExtension ( Duration . class ) ; }
public static long [ ] hashToLongs ( long datum , long seed ) { long [ ] data = { datum } ; return hash ( data , seed ) ; }
public static void dropTable ( Database db , boolean ifExists ) { String sql = STR_ + ( ifExists ? STR_ : STR_ ) + STR_ ; db . execSQL ( sql ) ; }
public boolean isImmediateAuth ( ) { return _immediateAuth ; }
int removeDownload ( VideoModel model ) ;
public CheckedInputStream ( InputStream in , Checksum cksum ) { super ( in ) ; this . cksum = cksum ; }
private EFS ( ) { super ( ) ; }
static native void futimes ( int fd , long times0 , long times1 ) throws UnixException ;
public static < T extends Comparable < T > > boolean assertComparison ( T actual , T expected ) { boolean ret = BOOL_ ; if ( ( expected == null ) && ( actual == null ) ) { ret = BOOL_ ; } else if ( expected != null ) { ret = expected . compareTo ( actual ) == NUM_ ; } return ret ; }
public OffsettedItem ( int alignment , int writeSize ) { Section . validateAlignment ( alignment ) ; if ( writeSize < - NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } this . alignment = alignment ; this . writeSize = writeSize ; this . addedTo = null ; this . offset = - NUM_ ; }
public FeedbackTest ( ) { setResponseLogLengthLimit ( NUM_ ) ; }
public Set < String > addContent ( String variable , Value value ) { if ( ! paused ) { curState . addToState ( new Assignment ( variable , value ) ) ; return update ( ) ; } else { log . info ( STR_ + variable + STR_ + value ) ; return Collections . emptySet ( ) ; } }
public void emitNewEvent ( C eventCollector , K eventContainer , Event originalEvent , Event outputEvent ) ;
public void makeDirs ( File f ) throws IOException ;
private static JButton createExitButton ( String key , ActionListener al ) { String str = getMsg ( key ) ; JButton btn = new JButton ( str ) ; btn . addActionListener ( al ) ; btn . getAccessibleContext ( ) . setAccessibleDescription ( str ) ; return btn ; }
boolean contains ( InetAddress ip ) ;
public String toXML ( ) { StringBuilder stringBuilder = new StringBuilder ( ) ; return stringBuilder . toString ( ) ; }
public abstract int size ( ) ;
protected byte [ ] loadBytes ( InputStream is ) throws IOException { BufferedInputStream bufInputStream = new BufferedInputStream ( is , NUM_ ) ; ByteArrayOutputStream byteOutStream = new ByteArrayOutputStream ( ) ; int c ; int bufferSize = NUM_ ; byte [ ] buffer = new byte [ bufferSize ] ; while ( ( c = bufInputStream . read ( buffer ) ) != - NUM_ ) { byteOutStream . write ( buffer , NUM_ , c ) ; } return byteOutStream . toByteArray ( ) ; }
public CheckpointEvent ( ClusterNode node , String msg , int type , String cpKey ) { super ( node , msg , type ) ; this . cpKey = cpKey ; }
protected void waitForReceiverNotification ( ) throws Exception { waitForReceiverNotifications ( NUM_ ) ; }
public synchronized boolean isEnabled ( ) { return enabled ; }
public static void stopWavFile ( ) { m_clip . stop ( ) ; m_clip . flush ( ) ; m_clip . close ( ) ; }
void switchBgToNomal ( ) ;
protected void install ( Log log ) { prev = log . diagnosticHandler ; log . diagnosticHandler = this ; }
public void deleteLoginFailedIP ( String ip ) { client . delete ( String . class , CONFIG_DELETE_BLOCK_IP , ip ) ; }
public String rules ( ) { return STR_ ; }
public void reset ( ) { synchronized ( zsRef ) { ensureOpen ( ) ; reset ( zsRef . address ( ) ) ; buf = defaultBuf ; finished = BOOL_ ; needDict = BOOL_ ; off = len = NUM_ ; bytesRead = bytesWritten = NUM_ ; } }
public static Document createDocument ( ) { try { DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; DocumentBuilder parser = factory . newDocumentBuilder ( ) ; return parser . newDocument ( ) ; } catch ( Exception e ) { System . out . println ( e . getMessage ( ) ) ; } return null ; }
public Vector ( int capacity , int capacityIncrement ) { if ( capacity < NUM_ ) { throw new IllegalArgumentException ( ) ; } elementData = newElementArray ( capacity ) ; elementCount = NUM_ ; this . capacityIncrement = capacityIncrement ; }
public abstract void reverse ( ) ;
private void returnData ( Object ret ) { if ( myHost != null ) { myHost . returnData ( ret ) ; } }
public void testRealWordCircleWithDistance02 ( ) throws Exception { new TestHelper ( STR_ , STR_ , STR_ , STR_ ) . runTest ( ) ; }
public void clear ( Profile profile ) { nativeClear ( mNativeOmniboxPrerender , profile ) ; }
public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case NUM_ : return NOTE_ID ; case NUM_ : return CLASS_NAME ; case NUM_ : return INTERPRETER_CONTEXT ; default : return null ; } }
public static ConnectionDialog createConnectionDialog ( final AbstractConnectionPanel optionsPanel , final ConnectNeurons connection , final NetworkPanel networkPanel ) { ConnectionDialog cd = new ConnectionDialog ( optionsPanel , connection , networkPanel ) ; cd . init ( ) ; return cd ; }
private void trimToSize ( int maxSize ) { while ( BOOL_ ) { String key ; Bitmap value ; synchronized ( this ) { if ( size < NUM_ || ( map . isEmpty ( ) && size != NUM_ ) ) { throw new IllegalStateException ( getClass ( ) . getName ( ) + STR_ ) ; } if ( size <= maxSize || map . isEmpty ( ) ) { break ; } Map . Entry < String , Bitmap > toEvict = map . entrySet ( ) . iterator ( ) . next ( ) ; if ( toEvict == null ) { break ; } key = toEvict . getKey ( ) ; value = toEvict . getValue ( ) ; map . remove ( key ) ; size -= sizeOf ( key , value ) ; } } }
public void saveCSV ( File file ) throws IOException { FileWriter writer = null ; try { writer = new FileWriter ( file ) ; writer . write ( toCSV ( ) ) ; } finally { if ( writer != null ) { writer . close ( ) ; } } }
public ModuleFolderFilter ( IPath prefix ) { this . prefix = prefix ; }
public void testBogusArguments ( ) throws Exception { IllegalArgumentException expected = expectThrows ( IllegalArgumentException . class , null ) ; assertTrue ( expected . getMessage ( ) . contains ( STR_ ) ) ; }
public void parse ( final String osmFilename ) { parse ( osmFilename , null ) ; }
public PacketExtension parseExtension ( XmlPullParser parser ) throws Exception { MessageEvent messageEvent = new MessageEvent ( ) ; boolean done = BOOL_ ; while ( ! done ) { int eventType = parser . next ( ) ; if ( eventType == XmlPullParser . START_TAG ) { if ( parser . getName ( ) . equals ( STR_ ) ) messageEvent . setPacketID ( parser . nextText ( ) ) ; if ( parser . getName ( ) . equals ( MessageEvent . COMPOSING ) ) messageEvent . setComposing ( BOOL_ ) ; if ( parser . getName ( ) . equals ( MessageEvent . DELIVERED ) ) messageEvent . setDelivered ( BOOL_ ) ; if ( parser . getName ( ) . equals ( MessageEvent . DISPLAYED ) ) messageEvent . setDisplayed ( BOOL_ ) ; if ( parser . getName ( ) . equals ( MessageEvent . OFFLINE ) ) messageEvent . setOffline ( BOOL_ ) ; } else if ( eventType == XmlPullParser . END_TAG ) { if ( parser . getName ( ) . equals ( STR_ ) ) { done = BOOL_ ; } } } return messageEvent ; }
public Uri insert ( Uri uri , ContentValues cvs ) { Uri returnUri ; switch ( sUriMatcher . match ( uri ) ) { case CHARACTERS : returnUri = insertCharacters ( uri , cvs ) ; break ; default : throw new UnsupportedOperationException ( STR_ + uri ) ; } mContext . getContentResolver ( ) . notifyChange ( uri , null ) ; return returnUri ; }
protected String makeLegalForJAAS ( final String src ) { String result = src ; if ( result == null ) { result = STR_ ; } if ( result . startsWith ( STR_ ) ) { result = result . substring ( NUM_ ) ; } return result ; }
public static boolean boardIsSize ( final File filepath , final BoardDimensions size ) { int boardx = NUM_ ; int boardy = NUM_ ; try { Reader r = new BufferedReader ( new FileReader ( filepath ) ) ; StreamTokenizer st = new StreamTokenizer ( r ) ; st . eolIsSignificant ( BOOL_ ) ; st . commentChar ( STR_ ) ; st . quoteChar ( STR_ ) ; st . wordChars ( STR_ , STR_ ) ; while ( st . nextToken ( ) != StreamTokenizer . TT_EOF ) { if ( ( st . ttype == StreamTokenizer . TT_WORD ) && st . sval . equalsIgnoreCase ( STR_ ) ) { st . nextToken ( ) ; boardx = ( int ) st . nval ; st . nextToken ( ) ; boardy = ( int ) st . nval ; break ; } } r . close ( ) ; } catch ( IOException ex ) { return BOOL_ ; } return ( boardx == size . width ( ) ) && ( boardy == size . height ( ) ) ; }
private static Pool createPool ( String host , String name , Integer port , boolean enableQueue ) { return PoolManager . createFactory ( ) . addServer ( host , port . intValue ( ) ) . setSubscriptionEnabled ( enableQueue ) . setSubscriptionRedundancy ( - NUM_ ) . setReadTimeout ( NUM_ ) . setSocketBufferSize ( NUM_ ) . setMinConnections ( NUM_ ) . setThreadLocalConnections ( BOOL_ ) . create ( STR_ + name ) ; }
public SQLTransactionRollbackException ( String reason ) { super ( reason , null , NUM_ ) ; }
public static String fromUUID ( UUID uuid ) { return STR_ + uuid . toString ( ) ; }
private static boolean isPunctuation ( char ch ) { switch ( ch ) { case STR_ : case STR_ : case STR_ : case STR_ : case STR_ : case STR_ : case STR_ : case STR_ : case STR_ : return BOOL_ ; default : return BOOL_ ; } }
public static int compressTime ( long date ) { Long lowResolutionDate = new Long ( ( date - TIME_ZERO ) / MS_IN_SEC ) ; return lowResolutionDate . intValue ( ) ; }
public static double [ ] [ ] add ( double [ ] [ ] M1 , double [ ] [ ] M2 ) { if ( M1 . length != M2 . length ) { System . err . println ( STR_ ) ; return M1 ; } double [ ] [ ] M = new double [ M1 . length ] [ M1 [ NUM_ ] . length ] ; for ( int i = NUM_ ; i < M1 . length ; i ++ ) { if ( M1 [ i ] . length != M2 [ i ] . length ) { System . err . println ( STR_ ) ; return M1 ; } for ( int j = NUM_ ; j < M1 [ i ] . length ; j ++ ) { M [ i ] [ j ] = M1 [ i ] [ j ] + M2 [ i ] [ j ] ; } } return M ; }
protected void initDbObjectBase ( Database db , int objectId , String name , String traceModule ) { this . database = db ; this . trace = db . getTrace ( traceModule ) ; this . id = objectId ; this . objectName = name ; }
public SectionExtractor ( List < String > templatesToMark ) { this ( ) ; this . templatesToMark = templatesToMark ; }
static final int calculatePCMFrameSize ( int sampleSizeInBits , int channels ) { return ( ( sampleSizeInBits + NUM_ ) / NUM_ ) * channels ; }
public void renameClass ( Map classnames ) { LongVector v = items ; int size = numOfItems ; for ( int i = NUM_ ; i < size ; ++ i ) { ConstInfo ci = v . elementAt ( i ) ; ci . renameClass ( this , classnames , itemsCache ) ; } }
public void hide ( Animation anim ) { hide ( BOOL_ , anim ) ; }
private void initListeners ( ) { addMouseListener ( m_listener ) ; addMouseMotionListener ( m_listener ) ; addMouseWheelListener ( m_listener ) ; addFocusListener ( m_listener ) ; addComponentListener ( m_listener ) ; addKeyListener ( m_listener ) ; m_caret . addCaretListener ( m_listener ) ; }
public String [ ] validOption2 ( ) { return new String [ ] { STR_ } ; }
public void goToNextColor ( ) { setColorIndex ( getNextColorIndex ( ) ) ; }
public LingRunner ( GraphSource graphWrapper , Parameters params ) { super ( graphWrapper . getGraph ( ) , params , null ) ; }
public abstract void endCDATA ( ) throws SAXException ;
private void updateHubDspChain ( ) { NativeHub hub = mPlaybackService . getNativeHub ( ) ; String [ ] sockets = new String [ mDSPChain . size ( ) ] ; int index = NUM_ ; for ( ProviderIdentifier id : mDSPChain ) { DSPConnection conn = PluginsLookup . getDefault ( ) . getDSP ( id ) ; if ( conn != null ) { String socketName = conn . getAudioSocketName ( ) ; if ( socketName == null ) { socketName = mPlaybackService . assignProviderAudioSocket ( conn ) ; } if ( socketName == null ) { Log . e ( TAG , STR_ ) ; } else if ( DEBUG ) { Log . d ( TAG , STR_ + index + STR_ + socketName ) ; } sockets [ index ] = socketName ; } else { Log . e ( TAG , STR_ ) ; Log . e ( TAG , STR_ ) ; Log . e ( TAG , STR_ ) ; Log . e ( TAG , STR_ ) ; Log . e ( TAG , STR_ ) ; } index ++ ; } hub . setDSPChain ( sockets ) ; }
public abstract void remove ( Directory dir ) throws IOException ;
int updateByPrimaryKeySelective ( Rules record ) ;
private Rotation composeInverseInternal ( Rotation r ) { return new Rotation ( - r . q0 * q0 - ( r . q1 * q1 + r . q2 * q2 + r . q3 * q3 ) , - r . q1 * q0 + r . q0 * q1 + ( r . q2 * q3 - r . q3 * q2 ) , - r . q2 * q0 + r . q0 * q2 + ( r . q3 * q1 - r . q1 * q3 ) , - r . q3 * q0 + r . q0 * q3 + ( r . q1 * q2 - r . q2 * q1 ) , BOOL_ ) ; }
public synchronized boolean hasMoreTokens ( ) { return ( this . pos < this . sourceLength ) ; }
public void tapOnWifi ( ) { System . out . println ( STR_ + appiumDriver . manage ( ) . window ( ) . getSize ( ) ) ; if ( deviceName . equalsIgnoreCase ( STR_ ) ) { appiumDriver . tap ( NUM_ , NUM_ , NUM_ , NUM_ ) ; } else if ( deviceName . equalsIgnoreCase ( STR_ ) ) { appiumDriver . tap ( NUM_ , NUM_ , NUM_ , NUM_ ) ; } }
boolean inSubroutine ( final long id ) { if ( ( status & Label . VISITED ) != NUM_ ) { return ( srcAndRefPositions [ ( int ) ( id > > > NUM_ ) ] & ( int ) id ) != NUM_ ; } return BOOL_ ; }
public void addSequence ( final double [ ] datum , final double [ ] weights ) { QL . require ( datum . length == weights . length , INCOMPATIBLE_ARRAY_SIZES ) ; for ( int i = NUM_ ; i < datum . length ; i ++ ) { add ( datum [ i ] , weights [ i ] ) ; } }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public void makeImmutable ( ) { if ( isMutable ) { isMutable = BOOL_ ; } }
public void testSequenceSequentialOperations ( ) throws Throwable { testSequenceOperations ( NUM_ , Query . ConsistencyLevel . SEQUENTIAL ) ; }
public DOMAccessException ( ) { this ( null , null ) ; }
public void onNewIntent ( Intent intent ) { }
public static void dataChanged ( Context context ) { if ( sBackupManager == null ) { sBackupManager = new BackupManager ( context ) ; } sBackupManager . dataChanged ( ) ; }
public void release ( ) { if ( mReleased ) { return ; } mReleased = BOOL_ ; clear ( BOOL_ ) ; onRelease ( ) ; }
public Builder continuous ( Boolean continuous ) { this . continuous = continuous ; return this ; }
private void computeDefaultFilters ( File indicatorFile , JsonObject jsonObj ) { defaultFilters = new ArrayList < Filter > ( ) ; JsonArray filterArray = Utils . getFieldValueAsArray ( jsonObj , STR_ ) ; if ( filterArray != null ) { Set < String > filterFields = Utils . getAllFilterFields ( jsonObj ) ; for ( int i = NUM_ ; i < filterArray . size ( ) ; i ++ ) { JsonElement filterElt = filterArray . get ( i ) ; Filter filter ; try { filter = Filter . parse ( filterElt , filterFields ) ; defaultFilters . add ( filter ) ; } catch ( FilterParseException e ) { String title = STR_ ; String msg = STR_ + indicatorFile ; DroidsafePluginUtilities . showError ( title , msg , e ) ; ; e . printStackTrace ( ) ; } } } }
public char current ( ) { return pos == max ? DONE : chars [ pos ] ; }
public boolean isVerticalType ( Value val ) { throw new RuntimeException ( STR_ ) ; }
List < DataElement > searchDataElementsByName ( String key ) ;
protected ODEStateAndDerivative initIntegration ( final ExpandableODE eqn , final ODEState s0 , final double t ) { this . equations = eqn ; evaluations = evaluations . withCount ( NUM_ ) ; eqn . init ( s0 , t ) ; final double t0 = s0 . getTime ( ) ; final double [ ] y0 = s0 . getCompleteState ( ) ; final double [ ] y0Dot = computeDerivatives ( t0 , y0 ) ; final ODEStateAndDerivative s0WithDerivatives = eqn . getMapper ( ) . mapStateAndDerivative ( t0 , y0 , y0Dot ) ; for ( final EventState state : eventsStates ) { state . getEventHandler ( ) . init ( s0WithDerivatives , t ) ; } for ( ODEStepHandler handler : stepHandlers ) { handler . init ( s0WithDerivatives , t ) ; } setStateInitialized ( BOOL_ ) ; return s0WithDerivatives ; }
public static DateFormat toTimeFormat ( String timeFormat , TimeZone tz , Locale locale ) { DateFormat df = null ; if ( UtilValidate . isEmpty ( timeFormat ) ) { df = DateFormat . getTimeInstance ( DateFormat . MEDIUM , locale ) ; } else { df = new SimpleDateFormat ( timeFormat , locale == null ? Locale . getDefault ( ) : locale ) ; } df . setTimeZone ( tz ) ; return df ; }
protected void buildJMSResources ( ) throws Exception { destroyJMSResources ( BOOL_ ) ; if ( ! connectionInitialised ) buildConnectionResources ( ) ; if ( transacted ) { Log . logger . log ( Level . FINE , STR_ ) ; context = masterContext . createContext ( JMSContext . SESSION_TRANSACTED ) ; } else { int ackMode = Config . parms . getInt ( STR_ ) ; Log . logger . log ( Level . FINE , STR_ , ackMode ) ; context = masterContext . createContext ( ackMode ) ; } }
void export ( URI storage , URI fsURI , List < FileShareExport > exports , String opId ) throws InternalException ;
final Segment < V > segmentFor ( int hash ) { return segments [ ( hash > > > segmentShift ) & segmentMask ] ; }
public AnnotationVisitor visitAnnotation ( String name , String desc ) { if ( av != null ) { return av . visitAnnotation ( name , desc ) ; } return null ; }
public void incrementIterationCount ( ) throws MathIllegalStateException { iterations . increment ( ) ; }
public BurlapRemote ( String type , String url ) { this . type = type ; this . url = url ; }
private InetAddress socksGetServerAddress ( ) throws UnknownHostException { String proxyName ; InetSocketAddress addr = ( InetSocketAddress ) proxy . address ( ) ; proxyName = addr . getHostName ( ) ; if ( proxyName == null ) { proxyName = addr . getAddress ( ) . getHostAddress ( ) ; } return InetAddress . getByName ( proxyName ) ; }
static Mode mapIntToValue ( final int modeInt ) { for ( Mode value : Mode . values ( ) ) { if ( modeInt == value . getIntValue ( ) ) { return value ; } } return getDefault ( ) ; }
public void onErrorResponse ( VolleyError error ) ;
protected void deleteExceptionByteArrayRef ( DeadLetterJobEntity jobEntity ) { ByteArrayRef exceptionByteArrayRef = jobEntity . getExceptionByteArrayRef ( ) ; if ( exceptionByteArrayRef != null ) { exceptionByteArrayRef . delete ( ) ; } }
public void refresh ( ) { label . setText ( String . valueOf ( MathHelper . round ( val , NUM_ ) ) ) ; if ( val == min ) minus . setEnabled ( BOOL_ ) ; else minus . setEnabled ( BOOL_ ) ; if ( val == max ) plus . setEnabled ( BOOL_ ) ; else plus . setEnabled ( BOOL_ ) ; if ( cb != null ) cb . callback ( val ) ; plus . repaint ( ) ; minus . repaint ( ) ; if ( progress != null ) { progress . setValue ( val / max ) ; } }
void generateTrunk ( ) { BlockPos blockpos = this . basePos ; BlockPos blockpos1 = this . basePos . up ( this . height ) ; IBlockState block = this . logBlock ; this . func_175937_a ( blockpos , blockpos1 , block ) ; if ( this . trunkSize == NUM_ ) { this . func_175937_a ( blockpos . east ( ) , blockpos1 . east ( ) , block ) ; this . func_175937_a ( blockpos . east ( ) . south ( ) , blockpos1 . east ( ) . south ( ) , block ) ; this . func_175937_a ( blockpos . south ( ) , blockpos1 . south ( ) , block ) ; } }
public MarketGetCommentsQuery ( VkApiClient client , UserActor actor , int ownerId , int itemId ) { super ( client , STR_ , GetCommentsResponse . class ) ; accessToken ( actor . getAccessToken ( ) ) ; ownerId ( ownerId ) ; itemId ( itemId ) ; }
public COpenOriginalFunction ( final CGraphWindow parent , final IViewContainer container , final INaviFunction function ) { super ( String . format ( STR_ , function . getName ( ) ) ) ; m_parent = parent ; m_container = container ; m_function = function ; }
public EntityQuery distinct ( boolean distinct ) { this . distinct = distinct ; return this ; }
public ThreadCreatedSynchronizer ( final IDebugger debugger , final ListenerProvider < IDebugEventListener > listeners ) { super ( debugger , listeners ) ; }
public ImageSize scale ( float scale ) { return new ImageSize ( ( int ) ( width * scale ) , ( int ) ( height * scale ) ) ; }
public final int update ( Uri uri , ContentValues values , String where , String [ ] selectionArgs ) { IContentProvider provider = acquireProvider ( uri ) ; if ( provider == null ) { throw new IllegalArgumentException ( STR_ + uri ) ; } try { long startTime = SystemClock . uptimeMillis ( ) ; int rowsUpdated = provider . update ( uri , values , where , selectionArgs ) ; long durationMillis = SystemClock . uptimeMillis ( ) - startTime ; maybeLogUpdateToEventLog ( durationMillis , uri , STR_ , where ) ; return rowsUpdated ; } catch ( RemoteException e ) { return - NUM_ ; } finally { releaseProvider ( provider ) ; } }
public static boolean isValidateOnEveryKey ( ) { return validateOnEveryKey ; }
public void runTest ( ) throws Throwable { Document doc ; Node refChild ; Node newChild ; NodeList elementList ; Node elementNode ; Node insertedNode ; doc = ( Document ) load ( STR_ , BOOL_ ) ; newChild = doc . createElement ( STR_ ) ; refChild = doc . createElement ( STR_ ) ; elementList = doc . getElementsByTagName ( STR_ ) ; elementNode = elementList . item ( NUM_ ) ; { boolean success = BOOL_ ; try { insertedNode = elementNode . insertBefore ( newChild , refChild ) ; } catch ( DOMException ex ) { success = ( ex . code == DOMException . NOT_FOUND_ERR ) ; } assertTrue ( STR_ , success ) ; } }
protected abstract void doClose ( ) throws IOException ;
public UserChangedEvent ( Object source ) { super ( source ) ; }
void sendAudioEvents ( Object event , List listeners ) { if ( ( listeners == null ) || ( listeners . size ( ) == NUM_ ) ) { return ; } start ( ) ; EventInfo eventInfo = new EventInfo ( event , listeners ) ; postEvent ( eventInfo ) ; }
public void addIVCombination ( int attackIV , int defenseIV , int staminaIV ) { int sumIV = attackIV + defenseIV + staminaIV ; int percentPerfect = Math . round ( sumIV / NUM_ * NUM_ ) ; if ( ( percentPerfect < lowPercent ) || ( percentPerfect == lowPercent ) && ( attackIV < lowAttack ) ) { lowPercent = percentPerfect ; lowAttack = attackIV ; lowDefense = defenseIV ; lowStamina = staminaIV ; } if ( ( percentPerfect > highPercent ) || ( percentPerfect == highPercent ) && ( attackIV > highAttack ) ) { highPercent = percentPerfect ; highAttack = attackIV ; highDefense = defenseIV ; highStamina = staminaIV ; } iVCombinations . add ( new IVCombination ( attackIV , defenseIV , staminaIV ) ) ; }
private CloneUtils ( ) { }
private boolean zzRefill ( ) throws java . io . IOException { return zzCurrentPos >= s . offset + s . count ; }
static int indexOf ( CharSequence cs , CharSequence searchChar , int start ) { return cs . toString ( ) . indexOf ( searchChar . toString ( ) , start ) ; }
public void pause ( ) { torrentHandle . pause ( ) ; }
public boolean isRightToLeft ( ) { return direction == UBiDiDirection_UBIDI_RTL ; }
private void writeQName ( javax . xml . namespace . QName qname , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { java . lang . String namespaceURI = qname . getNamespaceURI ( ) ; if ( namespaceURI != null ) { java . lang . String prefix = xmlWriter . getPrefix ( namespaceURI ) ; if ( prefix == null ) { prefix = generatePrefix ( namespaceURI ) ; xmlWriter . writeNamespace ( prefix , namespaceURI ) ; xmlWriter . setPrefix ( prefix , namespaceURI ) ; } if ( prefix . trim ( ) . length ( ) > NUM_ ) { xmlWriter . writeCharacters ( prefix + STR_ + org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } }
public byte [ ] encrypt ( byte [ ] bytes ) { byte [ ] resp = null ; try { resp = crypt ( bytes , Cipher . ENCRYPT_MODE ) ; } catch ( Exception e ) { return null ; } return resp ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null ) { myHost . updateProgress ( progressLabel , progress ) ; } else { System . out . println ( progressLabel + STR_ + progress + STR_ ) ; } }
private static ObjectMapper customizeObjectMapper ( ) { ObjectMapper mapper = new ObjectMapper ( ) ; mapper . registerModule ( new Jdk8Module ( ) ) ; mapper . registerModule ( new GuavaModule ( ) ) ; mapper . registerModule ( new LogbackModule ( ) ) ; mapper . registerModule ( new GuavaExtrasModule ( ) ) ; mapper . registerModule ( new FuzzyEnumModule ( ) ) ; mapper . setPropertyNamingStrategy ( new AnnotationSensitivePropertyNamingStrategy ( ) ) ; mapper . setSubtypeResolver ( new DiscoverableSubtypeResolver ( ) ) ; mapper . setSerializationInclusion ( JsonInclude . Include . NON_NULL ) ; return mapper ; }
public InvalidKeyException ( String msg ) { super ( msg ) ; }
protected void connectionWarn ( ) { }
public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; String childData ; doc = ( Document ) load ( STR_ , BOOL_ ) ; elementList = doc . getElementsByTagName ( STR_ ) ; nameNode = elementList . item ( NUM_ ) ; child = ( CharacterData ) nameNode . getFirstChild ( ) ; child . replaceData ( NUM_ , NUM_ , STR_ ) ; childData = child . getData ( ) ; assertEquals ( STR_ , STR_ , childData ) ; }
public void testNegPosFirstShorter ( ) { String numA = STR_ ; String numB = STR_ ; String res = STR_ ; BigInteger aNumber = new BigInteger ( numA ) ; BigInteger bNumber = new BigInteger ( numB ) ; BigInteger result = aNumber . xor ( bNumber ) ; assertTrue ( res . equals ( result . toString ( ) ) ) ; }
public void sign ( PrivateKey key , String algorithm ) throws CRLException , NoSuchAlgorithmException , InvalidKeyException , NoSuchProviderException , SignatureException { sign ( key , algorithm , null ) ; }
public static boolean endsWithIgnoreCase ( String str , String suffix ) { return str != null && suffix != null && str . regionMatches ( BOOL_ , str . length ( ) - suffix . length ( ) , suffix , NUM_ , suffix . length ( ) ) ; }
public void waitFor ( InterceptedStream < T > stream ) { T underlyingStream = stream . getStream ( ) ; synchronized ( underlyingStream ) { while ( streams . get ( stream . getIndex ( ) ) == stream ) { try { underlyingStream . wait ( STREAM_WAIT_TIMEOUT ) ; } catch ( InterruptedException e ) { } } } }
public static String generateName ( String prefix ) { return prefix + randomString ( NUM_ ) ; }
public void runTest ( ) throws Throwable { Document doc ; DocumentFragment docFragment ; String documentFragmentName ; doc = ( Document ) load ( STR_ , BOOL_ ) ; docFragment = doc . createDocumentFragment ( ) ; documentFragmentName = docFragment . getNodeName ( ) ; assertEquals ( STR_ , STR_ , documentFragmentName ) ; }
private void importall ( ) { processAndCheckGeonamesFileRetriever ( ) ; processAndCheckGeonamesAdmExtracter ( BOOL_ ) ; processAndCheckGeonamesLanguageImporter ( ) ; processAndCheckGeonamesCountryImporter ( ) ; processAndCheckGeonamesAdm1Importer ( BOOL_ ) ; processAndCheckGeonamesAdm2Importer ( ) ; processAndCheckGeonamesAdm3Importer ( ) ; processAndCheckGeonamesAdm4Importer ( ) ; int allAlternateNamesSize = processAndCheckGeonamesFeatureImporter ( ) ; processAndCheckGeonamesAlternateNamesExtracter ( ) ; processAndCheckGeonamesAlternateNamesAdmImporter ( allAlternateNamesSize ) ; processAndCheckGeonamesAlternateNamesImporter ( allAlternateNamesSize ) ; }
public abstract int addListener ( SSOToken token , IdRepoListener listener ) throws IdRepoException , SSOException ;
public SIPMessage createErrorResponse ( SIPRequest request , int code ) { return request . createResponse ( code ) ; }
public boolean isReversed ( ) { return reversed ; }
public void goToNextColor ( ) { mColorIndex = ( mColorIndex + NUM_ ) % ( mColors . length ) ; }
public void started ( ) { }
private E peekExpired ( ) { E first = q . peek ( ) ; return ( first == null || first . getDelay ( NANOSECONDS ) > NUM_ ) ? null : first ; }
public boolean putRemoteUpdate ( LDAPUpdateMsg update ) { pendingChangesWriteLock . lock ( ) ; try { CSN csn = update . getCSN ( ) ; return pendingChanges . put ( csn , new PendingChange ( csn , null , update ) ) == null ; } finally { pendingChangesWriteLock . unlock ( ) ; } }
void removeListener ( IDatabaseListener listener ) ;
public ParseJsonTest dataType ( ICalDataType dataType ) { this . dataType = dataType ; return this ; }
default FieldDeclaration addPublicField ( Class < ? > typeClass , String name ) { return addField ( typeClass , name , Modifier . PUBLIC ) ; }
public static InsnList loadIntConst ( int i ) { InsnList ret = new InsnList ( ) ; ret . add ( new LdcInsnNode ( i ) ) ; return ret ; }
private BuildUtilities ( ) { }
public LoggerInputStreamSink ( String tag , InputStream in , Logger outLogger ) { this . tag = tag ; if ( tag . compareTo ( STR_ ) == NUM_ ) this . info = BOOL_ ; else this . info = BOOL_ ; this . inputStream = in ; this . outLogger = outLogger ; }
public int size ( ) { return indexToEntry . size ( ) ; }
List < Authority > listAuthorities ( User user ) ;
public boolean isViewUnder ( View view , int x , int y ) { if ( view == null ) { return BOOL_ ; } return x >= view . getLeft ( ) && x < view . getRight ( ) && y >= view . getTop ( ) && y < view . getBottom ( ) ; }
synchronized private void startWorker ( final Writer out ) { if ( f != null && ! f . isDone ( ) ) return ; Runnable r = new AsyncWriterRunnable ( out ) ; f = e . submit ( r , out ) ; }
public blink addElement ( String hashcode , String element ) { addElementToRegistry ( hashcode , element ) ; return ( this ) ; }
public boolean isExpired ( ) { return this . ttl < System . currentTimeMillis ( ) ; }
public void putAll ( TungstenProperties props ) { properties . putAll ( props . map ( ) ) ; }
public void sendMessage ( SIPMessage messageToSend ) throws IOException ;
private OneRowChange generateRowChange ( String schema , String table , RowChangeData . ActionType action ) { OneRowChange oneRowChange = new OneRowChange ( ) ; oneRowChange . setSchemaName ( STR_ ) ; oneRowChange . setTableName ( STR_ ) ; oneRowChange . setTableId ( NUM_ ) ; oneRowChange . setAction ( action ) ; return oneRowChange ; }
public void processTuple ( K tuple ) { MutableInt i = map . get ( tuple ) ; if ( i == null ) { i = new MutableInt ( NUM_ ) ; map . put ( cloneKey ( tuple ) , i ) ; } i . increment ( ) ; }
static UnionImpl initNewDirectInstance ( int lgNomLongs , long seed , float p , ResizeFactor rf , Memory dstMem ) { UpdateSketch gadget = DirectQuickSelectSketch . getInstance ( lgNomLongs , seed , p , rf , dstMem , BOOL_ ) ; UnionImpl unionImpl = new UnionImpl ( gadget , seed ) ; unionImpl . unionMem_ = dstMem ; return unionImpl ; }
public boolean isEditable ( ) { return editable ; }
public final boolean precedes ( TypeSymbol that , Types types ) { if ( this == that ) return BOOL_ ; if ( type . hasTag ( that . type . getTag ( ) ) ) { if ( type . hasTag ( CLASS ) ) { return types . rank ( that . type ) < types . rank ( this . type ) || types . rank ( that . type ) == types . rank ( this . type ) && that . getQualifiedName ( ) . compareTo ( this . getQualifiedName ( ) ) < NUM_ ; } else if ( type . hasTag ( TYPEVAR ) ) { return types . isSubtype ( this . type , that . type ) ; } } return type . hasTag ( TYPEVAR ) ; }
public Rubberband ( Point anchor ) { if ( anchor == null ) { throw new NullPointerException ( STR_ ) ; } this . anchor = anchor ; int width = NUM_ ; int cap = BasicStroke . CAP_ROUND ; int join = BasicStroke . JOIN_BEVEL ; int miterlimit = NUM_ ; float [ ] dash = new float [ ] { NUM_ , NUM_ , NUM_ , NUM_ } ; float dashphase = NUM_ ; stroke = new BasicStroke ( width , cap , join , miterlimit , dash , dashphase ) ; setLocation ( anchor ) ; setSize ( NUM_ , NUM_ ) ; }
public final static int pixel_distance ( int x1 , int y1 , int x2 , int y2 ) { int dx = Math . abs ( x1 - x2 ) ; int dy = Math . abs ( y1 - y2 ) ; return ( dx > dy ) ? dx : dy ; }
public void addForwardEdge ( GraphEdge edge ) { SuccessorEdges . Mutable successors = getNodeSuccessors ( edge . getHead ( ) ) ; successors . addForwardEdge ( edge ) ; }
public static ArrayList < GeoPoint > reduceWithTolerance ( ArrayList < GeoPoint > shape , double tolerance ) { int n = shape . size ( ) ; if ( tolerance <= NUM_ || n < NUM_ ) { return shape ; } boolean [ ] marked = new boolean [ n ] ; for ( int i = NUM_ ; i < n - NUM_ ; i ++ ) marked [ i ] = BOOL_ ; marked [ NUM_ ] = marked [ n - NUM_ ] = BOOL_ ; douglasPeuckerReduction ( shape , marked , tolerance , NUM_ , n - NUM_ ) ; ArrayList < GeoPoint > newShape = new ArrayList < GeoPoint > ( n ) ; for ( int i = NUM_ ; i < n ; i ++ ) { if ( marked [ i ] ) newShape . add ( shape . get ( i ) ) ; } return newShape ; }
public void writeUI32 ( long value ) throws IOException { flushBits ( ) ; out . write ( ( int ) ( value & NUM_ ) ) ; out . write ( ( int ) ( value > > NUM_ ) ) ; out . write ( ( int ) ( value > > NUM_ ) ) ; out . write ( ( int ) ( value > > NUM_ ) ) ; bytesWritten += NUM_ ; }
public abstract void iterate ( ) ;
public static StorableTimeFence inTuesdayInterval ( TimeZone timeZone , long startTimeOfDayMillis , long stopTimeOfDayMillis ) { return new StorableTimeFence ( TUESDAY , timeZone , startTimeOfDayMillis , stopTimeOfDayMillis ) ; }
public < T extends Expression > Optional < T > positionalOrKeyword ( final String key , Class < T > expected ) { if ( ! args . isEmpty ( ) ) { return Optional . of ( args . removeFirst ( ) . cast ( expected ) ) ; } return Optional . ofNullable ( kw . remove ( key ) ) . map ( null ) ; }
public static LinkedHashSet < PhysicalTableDefinition > buildHourlyTableDefinitions ( TestDimensions testDimensions ) { return Utils . asLinkedHashSet ( new PhysicalTableDefinition ( HOURLY , HOUR . buildZonedTimeGrain ( DateTimeZone . UTC ) , testDimensions . getDimensionConfigurationsByApiName ( OTHER ) ) ) ; }
public static < T > Filter < T > collectionAcceptFilter ( T [ ] objs ) { return new CollectionAcceptFilter < T > ( Arrays . asList ( objs ) , BOOL_ ) ; }
public int showDialog ( ) { m_Result = CANCEL_OPTION ; setVisible ( BOOL_ ) ; setButtons ( ) ; return m_Result ; }
void putFileIntoStorage ( UUID fileId , FileDescriptor fileDescr ) throws FileStorageException ;
public void init ( PlugInEventRepresentationContext eventRepresentationContext ) ;
public boolean isOptional ( ) { return optional ; }
public void paintTabbedPaneTabBorder ( SynthContext context , Graphics g , int x , int y , int w , int h , int tabIndex , int orientation ) { paintTabbedPaneTabBorder ( context , g , x , y , w , h , tabIndex ) ; }
public boolean hasAgent ( ) { return super . hasElement ( Agent . KEY ) ; }
public static double [ ] [ ] inverse ( double [ ] [ ] elements ) { return solve ( elements , identity ( elements . length , elements . length ) ) ; }
protected Command processPacketIn ( IOFSwitch sw , OFPacketIn msg , FloodlightContext cntx ) { Ethernet eth = IFloodlightProviderService . bcStore . get ( cntx , IFloodlightProviderService . CONTEXT_PI_PAYLOAD ) ; Command ret = Command . STOP ; String srcNetwork = macToGuid . get ( eth . getSourceMACAddress ( ) ) ; if ( eth . isBroadcast ( ) || eth . isMulticast ( ) || isDefaultGateway ( eth ) || isDhcpPacket ( eth ) ) { ret = Command . CONTINUE ; } else if ( srcNetwork == null ) { log . trace ( STR_ , eth . getSourceMACAddress ( ) . toString ( ) ) ; ret = Command . STOP ; } else if ( oneSameNetwork ( eth . getSourceMACAddress ( ) , eth . getDestinationMACAddress ( ) ) ) { ret = Command . CONTINUE ; } if ( log . isTraceEnabled ( ) ) log . trace ( STR_ , new Object [ ] { eth . getSourceMACAddress ( ) , eth . getDestinationMACAddress ( ) , ret } ) ; return ret ; }
void putVar ( LocalVar var ) { boolean keepLocalVariables = varDebugInfo || ( var . sym . isExceptionParameter ( ) && var . sym . hasTypeAnnotations ( ) ) ; if ( ! keepLocalVariables ) return ; boolean ignoredSyntheticVar = ( var . sym . flags ( ) & Flags . SYNTHETIC ) != NUM_ && ( ( var . sym . owner . flags ( ) & Flags . LAMBDA_METHOD ) == NUM_ || ( var . sym . flags ( ) & Flags . PARAMETER ) == NUM_ ) ; if ( ignoredSyntheticVar ) return ; if ( varBuffer == null ) varBuffer = new LocalVar [ NUM_ ] ; else varBuffer = ArrayUtils . ensureCapacity ( varBuffer , varBufferSize ) ; varBuffer [ varBufferSize ++ ] = var ; }
protected abstract boolean isExpired ( S item , long currentTime ) ;
void clearSelection ( ) ;
static void access ( UnixPath path , int amode ) throws UnixException { NativeBuffer buffer = copyToNativeBuffer ( path ) ; try { access0 ( buffer . address ( ) , amode ) ; } finally { buffer . release ( ) ; } }
public abstract boolean isAbsolute ( ) ;
public void removeUpdate ( DocumentEvent changes , Shape a , ViewFactory f ) { super . removeUpdate ( changes , adjustAllocation ( a ) , f ) ; updateVisibilityModel ( ) ; }
public void commit ( Object config ) throws ConfigurationException { assert ( config . getClass ( ) == configClass ) : ( STR_ + config . getClass ( ) + STR_ + configClass ) ; Set < String > done = new HashSet < String > ( ) ; for ( Iterator < String > vars = varList . iterator ( ) ; vars . hasNext ( ) ; ) { String var = vars . next ( ) ; if ( varMap . containsKey ( var ) ) { commitVariable ( config , var , done ) ; } } for ( Iterator < String > reqs = requiredList . iterator ( ) ; reqs . hasNext ( ) ; ) { String req = reqs . next ( ) ; if ( ! committed . contains ( req ) ) { throw new ConfigurationException . MissingRequirement ( req , null , null , - NUM_ ) ; } } }
public JettyServer ( ClassLoader classLoader ) { }
public AbstractValidatorImplementation ( final Context context , final int resourceId ) { super ( context , resourceId ) ; }
protected final void skip ( ByteBuffer buf , int bytes ) { buf . put ( new byte [ bytes ] ) ; }
private JDiffClassDescription loadClassInfo ( XmlPullParser parser , boolean isInterface , String pkg ) { String className = parser . getAttributeValue ( null , ATTRIBUTE_NAME ) ; JDiffClassDescription currentClass = new JDiffClassDescription ( pkg , className , mResultObserver ) ; currentClass . setModifier ( jdiffModifierToReflectionFormat ( className , parser ) ) ; currentClass . setType ( isInterface ? JDiffClassDescription . JDiffType . INTERFACE : JDiffClassDescription . JDiffType . CLASS ) ; currentClass . setExtendsClass ( parser . getAttributeValue ( null , ATTRIBUTE_EXTENDS ) ) ; return currentClass ; }
public int countBlock ( final Region region , final Set < Integer > searchIDs ) { final boolean [ ] ids = new boolean [ NUM_ ] ; for ( final int id : searchIDs ) { if ( ( id < NUM_ ) && ( id > NUM_ ) ) { ids [ id ] = BOOL_ ; } } return this . countBlock ( region , ids ) ; }
public String str ( ) { if ( null == m_strCache ) m_strCache = new String ( ( char [ ] ) m_obj , m_start , m_length ) ; return m_strCache ; }
public Address createAddress ( URI uri ) ;
public boolean isEnabled ( SignalMast dest ) ;
public boolean isSampling ( ) { return isSampling ; }
public static < U , V > String printMap ( final Map < U , V > map , final Converter < U > keyConverter ) { final ToStringConverter < V > valueConverter = new ToStringConverter < V > ( ) ; return printMap ( map , keyConverter , valueConverter ) ; }
public void fail ( String errorMessage ) { currentTest . get ( ) . fail ( errorMessage ) ; }
public MessageOutputStream ( IChannel channel ) { this . channel = channel ; }
public static PointBuilder newPoint ( double longitude , double latitude ) { return newPoint ( new Coordinate ( longitude , latitude ) ) ; }
public BubbleTransition ( int duration , String componentName ) { this ( duration ) ; this . componentName = componentName ; }
private static void initPrefs ( PreferenceFragment fragment ) { for ( String key : prefKeys ) { initPref ( fragment . findPreference ( key ) ) ; } }
private boolean forceSettleCapturedViewAt ( int finalLeft , int finalTop , int xvel , int yvel ) { final int startLeft = mCapturedView . getLeft ( ) ; final int startTop = mCapturedView . getTop ( ) ; final int dx = finalLeft - startLeft ; final int dy = finalTop - startTop ; if ( dx == NUM_ && dy == NUM_ ) { mScroller . abortAnimation ( ) ; setDragState ( STATE_IDLE ) ; return BOOL_ ; } final int duration = computeSettleDuration ( mCapturedView , dx , dy , xvel , yvel ) ; mScroller . startScroll ( startLeft , startTop , dx , dy , duration ) ; setDragState ( STATE_SETTLING ) ; return BOOL_ ; }
public Sorter ( ) { useDefaultVisual ( ) ; setLayout ( new BorderLayout ( ) ) ; add ( m_visual , BorderLayout . CENTER ) ; m_env = Environment . getSystemWide ( ) ; m_stopRequested = new AtomicBoolean ( BOOL_ ) ; }
public boolean isShowAxes ( ) { return mShowAxes ; }
public IterativeLegendreGaussIntegrator ( final int n , final double relativeAccuracy , final double absoluteAccuracy ) throws MathIllegalArgumentException { this ( n , relativeAccuracy , absoluteAccuracy , DEFAULT_MIN_ITERATIONS_COUNT , DEFAULT_MAX_ITERATIONS_COUNT ) ; }
private void writeQNameAttribute ( java . lang . String namespace , java . lang . String attName , javax . xml . namespace . QName qname , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { java . lang . String attributeNamespace = qname . getNamespaceURI ( ) ; java . lang . String attributePrefix = xmlWriter . getPrefix ( attributeNamespace ) ; if ( attributePrefix == null ) { attributePrefix = registerPrefix ( xmlWriter , attributeNamespace ) ; } java . lang . String attributeValue ; if ( attributePrefix . trim ( ) . length ( ) > NUM_ ) { attributeValue = attributePrefix + STR_ + qname . getLocalPart ( ) ; } else { attributeValue = qname . getLocalPart ( ) ; } if ( namespace . equals ( STR_ ) ) { xmlWriter . writeAttribute ( attName , attributeValue ) ; } else { registerPrefix ( xmlWriter , namespace ) ; xmlWriter . writeAttribute ( namespace , attName , attributeValue ) ; } }
public void rotateCounterClockwise ( ) { rotate ( - NUM_ , BOOL_ ) ; }
public void init ( long chainlength , Likelihood likelihood , MCMCOperator [ ] operators , Logger [ ] loggers ) { MCMCOptions options = new MCMCOptions ( chainlength ) ; MCMCCriterion criterion = new MCMCCriterion ( ) ; criterion . setTemperature ( NUM_ ) ; OperatorSchedule schedule = new SimpleOperatorSchedule ( ) ; for ( MCMCOperator operator : operators ) schedule . addOperator ( operator ) ; init ( options , likelihood , Prior . UNIFORM_PRIOR , schedule , loggers ) ; }
public static void writeRosterFile ( ) { NceConsistRoster . instance ( ) . makeBackupFile ( defaultNceConsistRosterFilename ( ) ) ; try { NceConsistRoster . instance ( ) . writeFile ( defaultNceConsistRosterFilename ( ) ) ; } catch ( Exception e ) { log . error ( STR_ + e ) ; } }
public com . sun . identity . wsfederation . jaxb . wsspolicy . RequestSecurityTokenTemplateType createRequestSecurityTokenTemplateType ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . wsfederation . jaxb . wsspolicy . impl . RequestSecurityTokenTemplateTypeImpl ( ) ; }
public void addMessageListener ( IMessageListener listener ) { listeners . add ( listener ) ; }
private void executeUpload ( String [ ] args ) throws IOException , ServiceException , DocumentListException , InterruptedException { if ( args . length == NUM_ ) { DocumentListEntry entry = documentList . uploadFile ( args [ NUM_ ] , args [ NUM_ ] ) ; printDocumentEntry ( entry ) ; } else { printMessage ( COMMAND_HELP_UPLOAD ) ; } }
public void removeManager ( Manager manager ) ;
public void push ( T o ) { int index = indexOf ( o ) ; if ( index >= NUM_ ) { remove ( index ) ; } if ( size ( ) >= capacity ) { remove ( size ( ) - NUM_ ) ; } add ( NUM_ , o ) ; }
private void updateUiByTrackColorMode ( String trackColorMode ) { boolean isFixedValue = trackColorMode . equals ( getString ( R . string . settings_map_track_color_mode_fixed_value ) ) ; boolean isDynamicValue = trackColorMode . equals ( getString ( R . string . settings_map_track_color_mode_dynamic_value ) ) ; slowPreference . setEnabled ( isFixedValue ) ; mediumPreference . setEnabled ( isFixedValue ) ; percentagePreference . setEnabled ( isDynamicValue ) ; }
protected String createFilename ( Instances inst ) { String result ; String name ; name = inst . relationName ( ) ; if ( getRelationFind ( ) . length ( ) > NUM_ ) { name = name . replaceAll ( getRelationFind ( ) , getRelationReplace ( ) ) ; } result = getTestsetDir ( ) . getPath ( ) + File . separator ; result += getTestsetPrefix ( ) + name + getTestsetSuffix ( ) ; try { result = m_env . substitute ( result ) ; } catch ( Exception ex ) { } return result ; }
private void showFeedback ( String message ) { if ( myHost != null ) { myHost . showFeedback ( message ) ; } else { System . out . println ( message ) ; } }
public synchronized String toString ( ) { return super . toString ( ) ; }
public abstract void test ( ) throws Exception ;
public static byte [ ] computeMd5Hash ( byte [ ] in ) { try { MessageDigest md5 = MessageDigest . getInstance ( STR_ ) ; return md5 . digest ( in ) ; } catch ( NoSuchAlgorithmException e ) { throw new RuntimeException ( e ) ; } }
public static boolean hasBeenCreated ( ) { return sInstance != null ; }
public boolean isRawType ( ) { KeyKind kind = new KeyKind ( this . key ) ; kind . parse ( ) ; return ( kind . flags & KeyKind . F_RAW_TYPE ) != NUM_ ; }
void tabLoadStarted ( int id , boolean incognito ) ;
public static Order aggregation ( String aggregationName , String metricName , boolean asc ) { return new InternalOrder . Aggregation ( aggregationName + STR_ + metricName , asc ) ; }
public RequestHandle head ( String url , ResponseHandlerInterface responseHandler ) { return head ( null , url , null , responseHandler ) ; }
public void registerDataSetObserver ( DataSetObserver observer ) ;
public List < LocalVariable > visibleVariables ( ) throws AbsentInformationException { validateStackFrame ( ) ; createVisibleVariables ( ) ; List < LocalVariable > mapAsList = new ArrayList < LocalVariable > ( visibleVariables . values ( ) ) ; Collections . sort ( mapAsList ) ; return mapAsList ; }
public ScoringFunction createScoringFunction ( final Person person ) ;
EnumEvalResult evaluate ( InetAddress addr ) { EnumEvalResult matched = EnumEvalResult . FALSE ; Iterator < PatternIP > it = patternIPList . iterator ( ) ; for ( ; it . hasNext ( ) && matched != EnumEvalResult . TRUE && matched != EnumEvalResult . ERR ; ) { PatternIP patternIP = it . next ( ) ; matched = patternIP . evaluate ( addr ) ; } return matched . getRet ( type , BOOL_ ) ; }
private boolean endsWithPossessive ( int pos ) { return ( stemEnglishPossessive && pos > NUM_ && text [ pos - NUM_ ] == STR_ && ( text [ pos - NUM_ ] == STR_ || text [ pos - NUM_ ] == STR_ ) && isAlpha ( charType ( text [ pos - NUM_ ] ) ) && ( pos == endBounds || isSubwordDelim ( charType ( text [ pos ] ) ) ) ) ; }
public void deleteUsers ( Set users ) throws AMException , SSOException { Iterator iter = users . iterator ( ) ; while ( iter . hasNext ( ) ) { String userDN = ( String ) iter . next ( ) ; AMUser user = new AMUserImpl ( super . token , userDN ) ; user . delete ( ) ; } }
public boolean isPoolable ( ) throws SQLException ;
public static Builder builder ( ) { return new Builder ( new ConnectResponse ( ) ) ; }
public boolean isSkipLastFooter ( ) { return skipLastFooter ; }
protected void register ( Iterable < String > channelIds ) { for ( String channelId : channelIds ) { register ( channelId ) ; } }
public static < T > JoinObservable < T > from ( Observable < T > o ) { return new JoinObservable < T > ( RxJavaPlugins . onAssembly ( o ) ) ; }
public void paintProgressBarBorder ( SynthContext context , Graphics g , int x , int y , int w , int h , int orientation ) { paintProgressBarBorder ( context , g , x , y , w , h ) ; }
public void tearDown ( ) throws Exception { Throwable t = threadFailure . getAndSet ( null ) ; if ( t != null ) { if ( t instanceof Error ) throw ( Error ) t ; else if ( t instanceof RuntimeException ) throw ( RuntimeException ) t ; else if ( t instanceof Exception ) throw ( Exception ) t ; else { AssertionFailedError afe = new AssertionFailedError ( t . toString ( ) ) ; afe . initCause ( t ) ; throw afe ; } } }
public static Pathway param ( String typeName , String paramName ) { return new RelativePath ( ) . setTypeName ( typeName ) . field ( paramName ) ; }
public void addNonOptionalNonMinusNodeToPartition ( IGroupMemberNode node ) { nonOptionalNonMinusNodes . add ( node ) ; definitelyProduced . addAll ( bindingInfoMap . get ( node ) . getDefinitelyProduced ( ) ) ; }
public void ifPresent ( IntConsumer consumer ) { if ( isPresent ) consumer . accept ( value ) ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public ExamplesGUI ( Vector < Example > examples ) { super ( STR_ ) ; this . examples = examples ; layoutComponents ( ) ; setupActions ( ) ; setVisible ( BOOL_ ) ; list . setSelectedIndex ( NUM_ ) ; }
public void testConnectionsArePooledWithoutExplicitDisconnect ( ) throws Exception { server . enqueue ( new MockResponse ( ) . setBody ( STR_ ) ) ; server . enqueue ( new MockResponse ( ) . setBody ( STR_ ) ) ; server . play ( ) ; URLConnection connection1 = server . getUrl ( STR_ ) . openConnection ( ) ; assertEquals ( STR_ , readAscii ( connection1 . getInputStream ( ) , Integer . MAX_VALUE ) ) ; assertEquals ( NUM_ , server . takeRequest ( ) . getSequenceNumber ( ) ) ; URLConnection connection2 = server . getUrl ( STR_ ) . openConnection ( ) ; assertEquals ( STR_ , readAscii ( connection2 . getInputStream ( ) , Integer . MAX_VALUE ) ) ; assertEquals ( NUM_ , server . takeRequest ( ) . getSequenceNumber ( ) ) ; }
void changedModificationDate ( Project project , Date date ) ;
public DataChangedNotifier ( ) { }
public boolean hasValue ( ) { return getValue ( ) != null ; }
public Executor usingAlgorithmFactory ( AlgorithmFactory algorithmFactory ) { this . algorithmFactory = algorithmFactory ; return this ; }
public static int size ( Iterable < ? > iterable ) { return ( iterable instanceof Collection ) ? ( ( Collection < ? > ) iterable ) . size ( ) : size ( iterable . iterator ( ) ) ; }
public static int supplemental ( char h , char l ) { return ( h - NUM_ ) * NUM_ + ( l - NUM_ ) + NUM_ ; }
public void addColumn ( String name , Expression expr ) { addColumn ( name , ColumnFactory . getColumn ( this , expr ) ) ; }
public Predicate < String > asPredicate ( ) { return null ; }
protected void diff_charsToLines ( LinkedList < Diff > diffs , List < String > lineArray ) { StringBuilder text ; for ( Diff diff : diffs ) { text = new StringBuilder ( ) ; for ( int y = NUM_ ; y < diff . text . length ( ) ; y ++ ) { text . append ( lineArray . get ( diff . text . charAt ( y ) ) ) ; } diff . text = text . toString ( ) ; } }
private void ensureConsistencyAfterTypeUpdate ( final ImmutableSet < BaseType > affectedTypes , final Set < BaseType > inconsistentTypes , final Map < BaseType , Integer > oldSizes ) throws CouldntSaveDataException { while ( ! inconsistentTypes . isEmpty ( ) ) { final BaseType baseType = inconsistentTypes . iterator ( ) . next ( ) ; if ( baseType . getCategory ( ) == BaseTypeCategory . STRUCT ) { adjustMemberOffsets ( baseType , inconsistentTypes , oldSizes , affectedTypes ) ; } else { inconsistentTypes . remove ( baseType ) ; } } }
public void assignSubtract ( ShaderVar value ) { assignSubtract ( value . getName ( ) ) ; }
public static void checkArgument ( boolean expression ) { if ( ExoPlayerLibraryInfo . ASSERTIONS_ENABLED && ! expression ) { throw new IllegalArgumentException ( ) ; } }
private void initDropDownStyle ( ) { if ( headerLayout != null ) { if ( isDropDownStyle ) { addHeaderView ( headerLayout ) ; } else { removeHeaderView ( headerLayout ) ; } return ; } if ( ! isDropDownStyle ) { return ; } LayoutInflater inflater = ( LayoutInflater ) context . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ; headerLayout = ( RelativeLayout ) inflater . inflate ( IdHelper . getLayout ( context , STR_ ) , this , BOOL_ ) ; headerProgressBar = ( ProgressBar ) headerLayout . findViewById ( IdHelper . getViewID ( context , STR_ ) ) ; addHeaderView ( headerLayout ) ; measureHeaderLayout ( headerLayout ) ; headerOriginalHeight = headerLayout . getMeasuredHeight ( ) ; headerOriginalTopPadding = headerLayout . getPaddingTop ( ) ; currentHeaderStatus = HEADER_STATUS_CLICK_TO_LOAD ; }
protected ArgsBase ( ) { _argv = null ; _env = null ; }
public Duration plusNanos ( long nanosToAdd ) { return plus ( NUM_ , nanosToAdd ) ; }
protected void addSeparator ( String parent ) { if ( parent != null && isSubmenu ( parent ) ) { getSubmenu ( parent ) . addSeparator ( ) ; } else { addSeparator ( ) ; } }
LocalBackendBindOperation ( BindOperation bind ) { super ( bind ) ; LocalBackendWorkflowElement . attachLocalOperation ( bind , this ) ; }
public Object runSafely ( Catbert . FastStack stack ) throws Exception { SeriesInfo si = getSeriesInfo ( stack ) ; if ( si == null ) return Boolean . FALSE ; return si . hasImage ( ) ? Boolean . TRUE : Boolean . FALSE ; }
boolean isSocketScheme ( String scheme ) { for ( String p : URIHelper . SOCKET_SCHEMES ) { if ( p . equals ( scheme ) ) { return BOOL_ ; } } return BOOL_ ; }
public synchronized void constrain ( int x , int y , int w , int h ) { for ( int i = NUM_ ; i < RECT_COUNT ; i ++ ) { Rectangle rect = paintRects [ i ] ; if ( rect != null ) { if ( rect . x < x ) { rect . width -= ( x - rect . x ) ; rect . x = x ; } if ( rect . y < y ) { rect . height -= ( y - rect . y ) ; rect . y = y ; } int xDelta = rect . x + rect . width - x - w ; if ( xDelta > NUM_ ) { rect . width -= xDelta ; } int yDelta = rect . y + rect . height - y - h ; if ( yDelta > NUM_ ) { rect . height -= yDelta ; } if ( rect . width <= NUM_ || rect . height <= NUM_ ) { paintRects [ i ] = null ; } } } }
protected void doPlainAuth ( String initialClientResponse , ImapSession session , String tag , ImapCommand command , Responder responder ) { String pass = null ; String user = null ; try { String userpass = new String ( Base64 . decodeBase64 ( initialClientResponse ) ) ; StringTokenizer authTokenizer = new StringTokenizer ( userpass , STR_ ) ; String authorize_id = authTokenizer . nextToken ( ) ; user = authTokenizer . nextToken ( ) ; try { pass = authTokenizer . nextToken ( ) ; } catch ( java . util . NoSuchElementException _ ) { pass = user ; user = authorize_id ; } authTokenizer = null ; } catch ( Exception e ) { } doAuth ( user , pass , session , tag , command , responder , HumanReadableText . AUTHENTICATION_FAILED ) ; }
public void modifyEntity ( String ssoToken , String entityName , String entityType , String entityLocation , Map attributes ) throws EntityException , SSOException , RemoteException ;
public static boolean isHexChar ( char ch ) { return ( ch >= STR_ && ch <= STR_ ) || ( ch >= STR_ && ch <= STR_ ) || ( ch >= STR_ && ch <= STR_ ) ; }
public FBDriverConsistencyCheckException ( String message ) { super ( message , SQLStateConstants . SQL_STATE_GENERAL_ERROR ) ; }
public synchronized boolean isReleased ( ) { return mNativeRefCount == NUM_ ; }
public void paintToolBarBackground ( SynthContext context , Graphics g , int x , int y , int w , int h ) { paintBackground ( context , g , x , y , w , h , null ) ; }
public void releaseTargetVersionLock ( ) { }
public void writeData ( DataOutput dout ) throws IOException { dout . write ( getMessage ( ) ) ; }
public void loadServers ( Context context ) { if ( ! serversLoaded ) { Database db = new Database ( context ) ; servers = db . getServers ( ) ; db . close ( ) ; serversLoaded = BOOL_ ; } }
public Property dayOfMonth ( ) { return new Property ( this , getChronology ( ) . dayOfMonth ( ) ) ; }
public String baseModelId ( ) { return baseModelId ; }
void changedFilebase ( Module module , Address fileBase ) ;
private void initialiseNavigationButtons ( ) { leftButton . setBehaviour ( DEFAULT_LEFT_BUTTON_BEHAVIOUR ) ; leftButton . setAppearance ( DEFAULT_LEFT_BUTTON_APPEARANCE ) ; leftButton . setActivity ( this ) ; rightButton . setBehaviour ( DEFAULT_RIGHT_BUTTON_BEHAVIOUR ) ; rightButton . setAppearance ( DEFAULT_RIGHT_BUTTON_APPEARANCE ) ; rightButton . setActivity ( this ) ; finalButton . setBehaviour ( generateFinalButtonBehaviour ( ) ) ; finalButton . setAppearance ( DEFAULT_FINAL_BUTTON_APPEARANCE ) ; finalButton . setText ( DEFAULT_FINAL_BUTTON_TEXT , null ) ; finalButton . setActivity ( this ) ; }
public final boolean isNative ( ) { return Modifier . isNative ( getModifiers ( ) ) ; }
< T > T create ( Class < T > beanClass ) ;
public void removeSelectionListener ( final NetworkSelectionListener l ) { selectionModel . removeSelectionListener ( l ) ; }
public void deleteClosedConnections ( ) { connectionPool . deleteClosedConnections ( ) ; }
public static void assertLogAndExit ( ) { if ( ! checkAndLog ( ) ) { System . exit ( NUM_ ) ; } }
static boolean isValidInterval ( long pwdRecoveryStartDate ) { Date current = new Date ( ) ; long currentDate = current . getTime ( ) ; long minutes = currentDate - pwdRecoveryStartDate ; return ( minutes > INTERVAL ) ; }
public boolean commitFinalResult ( String text ) { commitText ( text ) ; mPrevText = STR_ ; mGlueCount = NUM_ ; return BOOL_ ; }
public boolean inTransaction ( ) { acquireReference ( ) ; try { return getThreadSession ( ) . hasTransaction ( ) ; } finally { releaseReference ( ) ; } }
public void reverse ( ) { float tmp ; int limit = size / NUM_ ; int j = size - NUM_ ; float [ ] theElements = elements ; for ( int i = NUM_ ; i < limit ; ) { tmp = theElements [ i ] ; theElements [ i ++ ] = theElements [ j ] ; theElements [ j -- ] = tmp ; } }
public void addComment ( String comment ) { try { comment = comment . replace ( STR_ , STR_ ) . replace ( STR_ , STR_ ) ; kit . insertHTML ( doc , doc . getLength ( ) , STR_ + comment + STR_ , NUM_ , NUM_ , null ) ; } catch ( Exception e ) { log . warning ( STR_ + e ) ; } }
public BufferedWriter ( Writer out ) { this ( out , defaultCharBufferSize ) ; }
private void clearSearchResult ( ) { doc . setCharacterAttributes ( NUM_ , doc . getLength ( ) , styles . clearSearchResult ( ) , BOOL_ ) ; }
public static void copyDirectory ( File src , File dst ) throws IOException { if ( src . isDirectory ( ) ) { if ( ! dst . exists ( ) ) { dst . mkdirs ( ) ; } for ( String child : src . list ( ) ) { copyDirectory ( new File ( src , child ) , new File ( dst , child ) ) ; } } else { copyFile ( src , dst ) ; } }
public Date calculateLowestVisibleTickValue ( DateTickUnit unit ) { return nextStandardDate ( getMinimumDate ( ) , unit ) ; }
public void reloadPreferences ( Context context ) { for ( KeyboardAction keyboardAction : mKeyboardActions ) { keyboardAction . refreshPreferences ( context ) ; } }
public void remove ( int start , int end ) { checkWidget ( ) ; this . table . remove ( start , end ) ; }
public UnsignedLong ( long value ) { if ( value < NUM_ ) throw new IllegalArgumentException ( STR_ ) ; this . value = value ; }
public static int putShort ( byte [ ] bytes , int offset , short val ) { if ( littleEndian ) { val = Short . reverseBytes ( val ) ; } theUnsafe . putShort ( bytes , offset + BYTE_ARRAY_BASE_OFFSET , val ) ; return offset + Bytes . SIZEOF_SHORT ; }
protected void deleteNamespace ( ) { HttpDelete delete = new HttpDelete ( url ( STR_ + namespace ) ) ; submit ( delete , NUM_ ) ; }
private void shutdownCamera ( boolean restart ) { if ( PermissionsHelper . isMorHigher ( ) && ! mPermissionsSatisfied ) return ; if ( mCameraFragment == null || mRenderer == null ) return ; mCameraFragment . closeCamera ( ) ; mRestartCamera = restart ; mRenderer . getRenderHandler ( ) . sendShutdown ( ) ; mRenderer = null ; }
public boolean isShort ( STypeDef requiredType , NumberLiteral literal , LineCol lineCol ) throws SyntaxException { return ( requiredType == null || requiredType instanceof ShortTypeDef || requiredType instanceof SClassDef && requiredType . isAssignableFrom ( getTypeWithName ( STR_ , lineCol ) ) ) && ! literal . literal ( ) . contains ( STR_ ) ; }
public Vec2 divide ( double divisor ) { this . x /= divisor ; this . y /= divisor ; return this ; }
public static Credential basic ( String userName , String password ) { try { String usernameAndPassword = userName + STR_ + password ; byte [ ] bytes = usernameAndPassword . getBytes ( STR_ ) ; String encoded = Base64 . encode ( bytes ) ; return new Credential ( STR_ + encoded ) ; } catch ( UnsupportedEncodingException e ) { throw new AssertionError ( ) ; } }
public Person ( int id , String firstName , String lastName , double salary ) { this ( id , NUM_ , firstName , lastName , salary ) ; }
public void onFitStatusUpdated ( boolean connected ) { mGameViews . getStartMenuFragment ( ) . onFitStatusUpdated ( connected ) ; mGameViews . getEndSummaryFragment ( ) . onFitStatusUpdated ( connected ) ; if ( ! connected ) { if ( mMainService != null && mMainService . isMissionRunning ( ) ) { mMainService . endMission ( ) ; } else { getFragmentManager ( ) . popBackStack ( GameViews . START_MENU_TAG , NUM_ ) ; } if ( mMainService != null ) { NotificationOptions notificationOptions = NotificationOptions . getDefaultNotificationOptions ( ) ; notificationOptions . setTitle ( getResources ( ) . getString ( R . string . disconnection_notification_title ) ) ; notificationOptions . setContent ( getResources ( ) . getString ( R . string . disconnection_notification_content ) ) ; notificationOptions . setNotificationId ( MainService . FITNESS_DISCONNECT_NOTIFICATION_ID ) ; notificationOptions . setPriorityAsHigh ( ) ; notificationOptions . setNotificationDefaults ( NotificationCompat . DEFAULT_LIGHTS ) ; mMainService . postActionNotification ( notificationOptions ) ; } } }
public EnhancedQuickAdapter ( Context context , int layoutResId , List < T > data ) { super ( context , layoutResId , data ) ; }
T access ( ) ;
public WallGetCommentsQuery previewLength ( Integer value ) { return unsafeParam ( STR_ , value ) ; }
protected double calculateHighestVisibleTickValue ( ) { double unit = getTickUnit ( ) . getSize ( ) ; double index = Math . floor ( getRange ( ) . getUpperBound ( ) / unit ) ; return index * unit ; }
private int checkJson ( String string ) { try { Object json = new JSONTokener ( string ) . nextValue ( ) ; if ( json instanceof JSONObject ) { return JSON_OBJECT ; } else if ( json instanceof JSONArray ) { return JSON_ARRAY ; } else { return JSON_ERROR ; } } catch ( JSONException e ) { e . printStackTrace ( ) ; return JSON_ERROR ; } }
public boolean isSet ( _Fields field ) { if ( field == null ) { throw new IllegalArgumentException ( ) ; } switch ( field ) { case SUCCESS : return isSetSuccess ( ) ; } throw new IllegalStateException ( ) ; }
public static boolean isLaunchErrorActivityWhenInBackground ( ) { return launchErrorActivityWhenInBackground ; }
double H ( ) { int [ ] n = new int [ numberOfGroups ] ; double [ ] rbar = new double [ numberOfGroups ] ; for ( RankedObservation observation : data ) { n [ observation . getGroup ( ) ] ++ ; rbar [ observation . getGroup ( ) ] += observation . getRank ( ) ; } double H = NUM_ ; for ( int i = NUM_ ; i < numberOfGroups ; i ++ ) { H += Math . pow ( rbar [ i ] , NUM_ ) / n [ i ] ; } int N = data . size ( ) ; return NUM_ / ( N * ( N + NUM_ ) ) * H - NUM_ * ( N + NUM_ ) ; }
public TokenDelegate lastDelegate ( ) { return delegationChain . isEmpty ( ) ? null : delegationChain . get ( delegationChain . size ( ) - NUM_ ) ; }
public void log ( Option o ) { logString ( STR_ ) ; logString ( o . getKey ( ) ) ; logString ( STR_ ) ; logValue ( o , BOOL_ ) ; logNewLine ( ) ; }
public void ifPresent ( Action1 < T > action ) { if ( value != null ) action . call ( value ) ; }
public boolean isLazy ( ) { return mLazy ; }
public static String escapeString ( String str ) { return escapeString ( str , ESCAPE_CHAR , COMMA ) ; }
public void runTest ( ) throws Throwable { Document doc ; EntityReference entRef ; CharacterData entText ; doc = ( Document ) load ( STR_ , BOOL_ ) ; entRef = doc . createEntityReference ( STR_ ) ; assertNotNull ( STR_ , entRef ) ; entText = ( CharacterData ) entRef . getFirstChild ( ) ; assertNotNull ( STR_ , entText ) ; { boolean success = BOOL_ ; try { entText . setNodeValue ( STR_ ) ; } catch ( DOMException ex ) { success = ( ex . code == DOMException . NO_MODIFICATION_ALLOWED_ERR ) ; } assertTrue ( STR_ , success ) ; } }
public void addGetDataEventListener ( Executor executor , GetDataEventListener listener ) { getDataEventListeners . add ( new ListenerRegistration < GetDataEventListener > ( listener , executor ) ) ; }
public abstract String incrementName ( InetAddress networkInterface , String name , NameType type ) ;
public CDebuggerContainerNodeComponent ( final JTree projectTree , final IDatabase database ) { super ( new CDebuggersTable ( projectTree , database ) , null , null ) ; m_database = database ; m_listener = new InternalDebuggerDescriptionManagerListener ( ) ; m_database . getContent ( ) . getDebuggerTemplateManager ( ) . addListener ( m_listener ) ; updateBorderText ( getBorderText ( ) ) ; }
public Intent replaceExtras ( Bundle extras ) { mExtras = extras != null ? new Bundle ( extras ) : null ; return this ; }
public void addRecentFile ( final File f ) { if ( f != null ) { recentFiles . add ( f ) ; } makeRecentMenu ( ) ; }
public static void fill ( int [ ] array , int value ) { for ( int i = NUM_ ; i < array . length ; i ++ ) { array [ i ] = value ; } }
public void close ( ) throws IOException { if ( ! closed ) { finish ( ) ; if ( usesDefaultDeflater ) def . end ( ) ; out . close ( ) ; closed = BOOL_ ; } }
public void actionPerformed ( ActionEvent ev ) { final Object choice = JOptionPane . showInputDialog ( getViewer ( ) . getFrame ( ) , STR_ , STR_ , JOptionPane . QUESTION_MESSAGE , ProgramProperties . getProgramIcon ( ) , SHAPES , SHAPES [ NUM_ ] ) ; if ( choice != null ) execute ( STR_ + choice . toString ( ) + STR_ ) ; }
public static void touch ( FileSystem fs , Path path ) throws IOException { fs . delete ( path , BOOL_ ) ; writeTextFile ( fs , path , null , BOOL_ ) ; }
public String outputPerClassInfoRetrievalStatsTipText ( ) { return STR_ + STR_ ; }
public ErrorLocation ( Node n ) { node = n ; }
private List < User > toUserList ( List < UsageLicense > usageLicenses ) { List < User > users = new ArrayList < User > ( ) ; if ( usageLicenses != null ) { for ( UsageLicense usageLicense : usageLicenses ) { User userWithRole = new User ( ) ; userWithRole . setApplicationUserId ( usageLicense . getApplicationUserId ( ) ) ; PlatformUser platformUser = usageLicense . getUser ( ) ; userWithRole . setUserId ( platformUser . getUserId ( ) ) ; userWithRole . setUserFirstName ( platformUser . getFirstName ( ) ) ; userWithRole . setUserLastName ( platformUser . getLastName ( ) ) ; userWithRole . setEmail ( platformUser . getEmail ( ) ) ; userWithRole . setLocale ( platformUser . getLocale ( ) ) ; RoleDefinition userRoleDefinition = usageLicense . getRoleDefinition ( ) ; if ( userRoleDefinition != null ) { userWithRole . setRoleIdentifier ( userRoleDefinition . getRoleId ( ) ) ; } users . add ( userWithRole ) ; } } return users ; }
public Vector2 ( float x , float y ) { this . x = x ; this . y = y ; }
public static DownscaleQuality forString ( String type , DownscaleQuality dflt ) { DownscaleQuality q = ( DownscaleQuality ) constList . get ( type ) ; return q == null ? dflt : q ; }
public void loadParameterFromZK ( ) { try { PropertyInfoExt params = _coordinator . getTargetInfo ( PropertyInfoExt . class ) ; _maxAuthnLoginAttemtsCount = NumberUtils . toInt ( params . getProperty ( MAX_AUTH_LOGIN_ATTEMPTS ) , Constants . DEFAULT_AUTH_LOGIN_ATTEMPTS ) ; _maxAuthnLoginAttemtsLifeTimeInMins = NumberUtils . toInt ( params . getProperty ( AUTH_LOCKOUT_TIME_IN_MINUTES ) , Constants . DEFAULT_AUTH_LOCKOUT_TIME_IN_MINUTES ) ; } catch ( Exception e ) { _log . warn ( STR_ ) ; _maxAuthnLoginAttemtsCount = Constants . DEFAULT_AUTH_LOGIN_ATTEMPTS ; _maxAuthnLoginAttemtsLifeTimeInMins = Constants . DEFAULT_AUTH_LOCKOUT_TIME_IN_MINUTES ; } }
private BSPTree < Sphere1D > childAfter ( BSPTree < Sphere1D > node ) { if ( isDirect ( node ) ) { return node . getPlus ( ) ; } else { return node . getMinus ( ) ; } }
public LinkActionList ( Link link , Layer layer , Projection proj , OMGridGenerator generator ) throws IOException , EOFException { this . link = link ; linkStatus = readGestureResponses ( layer , proj , generator ) ; }
public static BigInteger [ ] convertListToArray ( List < BigInteger > list ) { BigInteger [ ] result = new BigInteger [ list . size ( ) ] ; for ( int i = NUM_ ; i < list . size ( ) ; i ++ ) { result [ i ] = list . get ( i ) ; } return result ; }
void sendToTopic ( String text , String jmsTopic ) ;
public static void addLink ( PaginationLink link , int pageNumber , UriBuilder uriBuilder , Map < String , URI > bodyLinks ) { UriBuilder pageLink = uriBuilder . replaceQueryParam ( STR_ , pageNumber ) ; bodyLinks . put ( link . getBodyName ( ) , pageLink . build ( ) ) ; }
abstract public boolean isArray ( ) ;
public Future < Exception > authorizeBot ( String applicationId , Permissions permissions ) ;
public boolean isFocusTraversable ( ) { return BOOL_ ; }
public boolean objOnMatrix ( int objXIndex , int objYIndex , int objIndexLength , int objIndexHeight ) { if ( objXIndex + objIndexLength < NUM_ || objYIndex + objIndexHeight < NUM_ || objXIndex > maxx || objYIndex > maxy ) { return BOOL_ ; } return BOOL_ ; }
public static < E > FastSet < E > newSet ( ) { return new SparseSet < E > ( ) ; }
boolean compareStrings ( XMLString s1 , XMLString s2 ) { return ( s1 . toDouble ( ) <= s2 . toDouble ( ) ) ; }
public abstract void draw ( Canvas canvas , Paint paint ) ;
public String toString ( ) { return STR_ + getValue ( ) ; }
public static ASN1Primitive parseExtensionValue ( byte [ ] encExtValue ) throws IOException { return ASN1Primitive . fromByteArray ( ASN1OctetString . getInstance ( encExtValue ) . getOctets ( ) ) ; }
public boolean isAnExpression ( ) { if ( isA ( Types . COMPLEX_EXPRESSION ) ) { return BOOL_ ; } return marked ; }
private boolean valueOutOfRange ( float leftThumbValue , float rightThumbValue ) { return ( leftThumbValue < mTickStart || leftThumbValue > mTickEnd || rightThumbValue < mTickStart || rightThumbValue > mTickEnd ) ; }
public String filterTipText ( ) { return STR_ ; }
public double observationCount ( boolean bOnlyValue ) { if ( bOnlyValue ) return hDistro . keySet ( ) . size ( ) ; else { int iCnt = NUM_ ; Iterator iKeyIter = hDistro . keySet ( ) . iterator ( ) ; while ( iKeyIter . hasNext ( ) ) { Object oNextKey = iKeyIter . next ( ) ; iCnt += ( ( Double ) hDistro . get ( oNextKey ) ) ; } return iCnt ; } }
public int lastIndexOf ( int c ) { return lastIndexOf ( c , count - NUM_ ) ; }
private void printGroupInformation ( String output , String [ ] [ ] array ) { if ( array . length > NUM_ ) { for ( int i = NUM_ ; i < array . length ; i ++ ) { output += STR_ + array [ i ] [ NUM_ ] + STR_ + array [ i ] [ NUM_ ] + STR_ + array [ i ] [ NUM_ ] ; } } }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
private void transfer ( Entry < K , V > [ ] src , Entry < K , V > [ ] dest ) { for ( int j = NUM_ ; j < src . length ; ++ j ) { Entry < K , V > e = src [ j ] ; src [ j ] = null ; while ( e != null ) { Entry < K , V > next = e . next ; Object key = e . get ( ) ; if ( key == null ) { e . next = null ; e . value = null ; size -- ; } else { int i = indexFor ( e . hash , dest . length ) ; e . next = dest [ i ] ; dest [ i ] = e ; } e = next ; } } }
JSONObject asJson ( ) ;
ListenableFuture < MemcacheStatus > replace ( String key , V value , int ttl ) ;
private int measureLong ( int measureSpec ) { int result ; int specMode = MeasureSpec . getMode ( measureSpec ) ; int specSize = MeasureSpec . getSize ( measureSpec ) ; if ( ( specMode == MeasureSpec . EXACTLY ) || ( mViewPager == null ) ) { result = specSize ; } else { final int count = InfiniteViewPager . FakePositionHelper . getAdapterSize ( mViewPager ) ; ; result = ( int ) ( getPaddingLeft ( ) + getPaddingRight ( ) + ( count * NUM_ * mRadius ) + ( count - NUM_ ) * mRadius + NUM_ ) ; if ( specMode == MeasureSpec . AT_MOST ) { result = Math . min ( result , specSize ) ; } } return result ; }
public SerializedField ( View parent , Model model , String name , Serializable value ) { super ( parent , model , name , name , null ) ; setValue ( value , BOOL_ ) ; }
void removeDomain ( String domain ) throws Exception ;
public static native void computeBoundingSphere ( float [ ] positions , int positionsOffset , int positionsCount , float [ ] sphere , int sphereOffset ) ;
public static boolean hasValueDeadbandTypeChanged ( final ISourceDataTag sourceDataTag , final ISourceDataTag oldSourceDataTag ) { return sourceDataTag . getValueDeadbandType ( ) != oldSourceDataTag . getValueDeadbandType ( ) ; }
public boolean stoplistContains ( String x ) { if ( stopwords == null ) return BOOL_ ; return stopwords . contains ( x ) ; }
public List parseFailed ( String parseModule ) { return moduleStore . removeKey ( parseModule ) ; }
public Spkac ( String challenge , SignatureType signatureAlgorithm , SpkacSubject subject , PublicKey publicKey , PrivateKey privateKey ) throws SpkacException { this . challenge = challenge ; this . signatureAlgorithm = signatureAlgorithm ; this . subject = subject ; this . publicKey = publicKey ; this . signature = createSignature ( privateKey ) ; }
public Uri insert ( Context context ) { return context . getContentResolver ( ) . insert ( uri ( ) , values ( ) ) ; }
public Address __rsub__ ( final Object rhs ) { return new Address ( getBigInteger ( rhs ) . subtract ( m_value ) ) ; }
private void displayPopupMenu ( final MouseEvent event ) { final int selectedIndex = getSelectionIndex ( event ) ; if ( selectedIndex != - NUM_ ) { final TargetProcessThread thread = m_table . getModel ( ) . getThreads ( ) . get ( selectedIndex ) ; final IDebugger debugger = m_debugPerspectiveModel . getCurrentSelectedDebugger ( ) ; final CThreadInformationTableMenu popupMenu = new CThreadInformationTableMenu ( SwingUtilities . getWindowAncestor ( CThreadInformationPanel . this ) , debugger , thread ) ; popupMenu . show ( m_table , event . getX ( ) , event . getY ( ) ) ; } }
public Object call ( Context cx , Scriptable scope , Scriptable thisObj , Object [ ] args ) ;
public MongoHistory ( SharedMongoResource mongo ) { this . mongo = mongo ; }
void undoableEditHappened ( UndoableEditEvent e ) ;
private void parseHeaderLine ( HeadersSet headers , String header ) { final int colonOffset = header . indexOf ( STR_ ) ; if ( colonOffset == - NUM_ ) { return ; } String headerName = header . substring ( NUM_ , colonOffset ) . trim ( ) ; String headerValue = header . substring ( header . indexOf ( STR_ ) + NUM_ ) . trim ( ) ; headers . addHeader ( headerName , headerValue ) ; }
private static byte [ ] concatBytes ( byte [ ] array1 , byte [ ] array2 ) { byte [ ] cBytes = new byte [ array1 . length + array2 . length ] ; try { System . arraycopy ( array1 , NUM_ , cBytes , NUM_ , array1 . length ) ; System . arraycopy ( array2 , NUM_ , cBytes , array1 . length , array2 . length ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } return cBytes ; }
void clearCache ( ) { sheetSelectionModel . clearTableModelCache ( ) ; }
public native void reset ( ) throws SQLite . Exception ;
public Builder withFlicker ( ) { flicker = BOOL_ ; return this ; }
public void goToNextColor ( ) { mColorIndex = ( mColorIndex + NUM_ ) % ( mColors . length ) ; }
private void returnData ( Object ret ) { if ( myHost != null ) { myHost . returnData ( ret ) ; } }
private static final ModelMBeanNotificationInfo makeGenericInfo ( ) { final Descriptor genericDescriptor = new DescriptorSupport ( new String [ ] { STR_ , STR_ , STR_ , STR_ , STR_ } ) ; return new ModelMBeanNotificationInfo ( new String [ ] { STR_ } , STR_ , STR_ , genericDescriptor ) ; }
public Executor createQueue ( int poolsize , String prefix ) { final Executor r = new Executor ( poolsize , prefix ) ; r . setContinueExistingPeriodicTasksAfterShutdownPolicy ( BOOL_ ) ; r . setExecuteExistingDelayedTasksAfterShutdownPolicy ( BOOL_ ) ; queues . add ( r ) ; return r ; }
public abstract void registerCq ( ClientProxyMembershipID p_clientProxyId , CacheClientNotifier p_ccn , int p_cqState ) throws CqException , RegionNotFoundException ;
R handleError ( String debug , Request request , E error ) ;
private void lockRoot ( ) { if ( ! U . compareAndSwapInt ( this , LOCKSTATE , NUM_ , WRITER ) ) { contendedLock ( ) ; } }
public WildFly8xStandaloneLocalConfigurationCapability ( ) { super ( ) ; this . propertySupportMap . put ( GeneralPropertySet . PROTOCOL , Boolean . FALSE ) ; this . propertySupportMap . put ( DatasourcePropertySet . DATASOURCE , Boolean . TRUE ) ; this . propertySupportMap . put ( DatasourcePropertySet . TRANSACTION_SUPPORT , Boolean . TRUE ) ; this . propertySupportMap . put ( JBossPropertySet . JBOSS_MANAGEMENT_HTTP_PORT , Boolean . TRUE ) ; this . propertySupportMap . put ( JBossPropertySet . JBOSS_AJP_PORT , Boolean . TRUE ) ; this . propertySupportMap . put ( JBossPropertySet . ALTERNATIVE_DEPLOYMENT_DIR , Boolean . TRUE ) ; this . propertySupportMap . put ( JBossPropertySet . ALTERNATIVE_MODULES_DIR , Boolean . TRUE ) ; this . propertySupportMap . put ( JBossPropertySet . CONFIGURATION , Boolean . TRUE ) ; }
public static Date daysBefore ( Date dateInst , int numDays ) { if ( ( numDays <= NUM_ ) || ( dateInst == null ) ) { throw new IllegalArgumentException ( ) ; } final Calendar cal = new GregorianCalendar ( ) ; cal . setTime ( dateInst ) ; cal . add ( Calendar . DAY_OF_YEAR , - numDays ) ; return cal . getTime ( ) ; }
void deleteNewActivatedDevice ( String deviceKey ) ;
private void prev ( ) { if ( changed ( ) && ! MessageBox . confirmDialog ( owner , STR_ + STR_ ) ) return ; hdrPane . setLeft ( dbIcon ) ; titleLb . setText ( STR_ ) ; subTitleLb . setText ( STR_ ) ; rootPane . setCenter ( connLayerPnl ) ; prevBtn . setDisable ( BOOL_ ) ; nextBtn . setText ( STR_ ) ; Controls . tooltip ( nextBtn , STR_ ) ; }
public boolean isEmbedded ( ) ;
public void delete ( CoreContainer cc , CoreDescriptor ... coreDescriptors ) ;
public Address leader ( ) { return leader ; }
void edit ( ) { IStructuredSelection selection = ( IStructuredSelection ) fTableViewer . getSelection ( ) ; String location = selection . getFirstElement ( ) . toString ( ) ; File file = new File ( location ) ; String newloc = null ; if ( file . isDirectory ( ) ) { newloc = getDirectory ( location ) ; } if ( newloc != null ) { fLocationList . remove ( location ) ; addLocation ( newloc ) ; } }
public boolean writeCharacteristic ( byte [ ] data , BleCharactCallback bleCallback ) { return writeCharacteristic ( getCharacteristic ( ) , data , bleCallback ) ; }
Promise < WorkspaceDto > startById ( String id , String envName , boolean restore ) ;
public final void finishPreloading ( ) { if ( mPreloading ) { mPreloading = BOOL_ ; flushLayoutCache ( ) ; } }
public static boolean canPlayerAffordTradingFee ( Player player , int price ) { BigDecimal fee = calculateFee ( player , price ) ; List < Item > allEquipped = player . getAllEquipped ( STR_ ) ; int ownedMoney = NUM_ ; for ( Item item : allEquipped ) { Money m = ( Money ) item ; ownedMoney += m . getQuantity ( ) ; } return fee . intValue ( ) <= ownedMoney ; }
public List < String > extractText ( Object data ) { List < String > values = new ArrayList < String > ( ) ; if ( ! ( data instanceof JSONObject ) ) { return values ; } Object en = ( ( JSONObject ) data ) . get ( STR_ ) ; if ( en == null ) { return values ; } else if ( en instanceof JSONObject ) { values . add ( String . valueOf ( ( ( JSONObject ) en ) . get ( STR_ ) ) ) ; } else if ( en instanceof JSONArray ) { for ( Object value : ( ( JSONArray ) en ) ) { values . add ( String . valueOf ( ( ( JSONObject ) value ) . get ( STR_ ) ) ) ; } } return values ; }
private void additionalSection ( final MaterialSection section ) { if ( customLayoutR > - NUM_ ) { section . swapLayout ( customLayoutR ) ; } section . build ( activity ) ; }
protected void trimToSize ( ) { synchronized ( sessions ) { int size = sessions . size ( ) ; if ( size > maximumSize ) { int removals = size - maximumSize ; Iterator < SSLSession > i = sessions . values ( ) . iterator ( ) ; do { SSLSession session = i . next ( ) ; i . remove ( ) ; sessionRemoved ( session ) ; } while ( -- removals > NUM_ ) ; } } }
protected WallGetByIdQueryWithExtended posts ( String ... value ) { return unsafeParam ( STR_ , value ) ; }
< T extends LwM2mResponse > void send ( final InetSocketAddress server , final boolean secure , final UplinkRequest < T > request , final ResponseCallback < T > responseCallback , final ErrorCallback errorCallback ) ;
public CompositeByteArrayRelativeWriter ( CompositeByteArray cba , Expander expander , Flusher flusher , boolean autoFlush ) { super ( cba ) ; this . expander = expander ; this . flusher = flusher ; this . autoFlush = autoFlush ; }
private ViewGenerator ( ) { }
private JComponent createPreviewContent ( ) { buttonBarCardPanel = new ButtonBarCardPanel ( ) ; buttonBarCardPanel . setBorder ( BorderFactory . createLineBorder ( Color . LIGHT_GRAY , NUM_ ) ) ; int showingIndex = - NUM_ ; int index = NUM_ ; for ( PrintableComponent comp : components ) { if ( comp . getExportComponent ( ) != null ) { PrintPreviewPanel previewPanel = new PrintPreviewPanel ( comp , pageFormat ) ; buttonBarCardPanel . addCard ( new PrintableComponentCard ( comp ) , previewPanel ) ; previewPanels . add ( previewPanel ) ; if ( showingIndex == - NUM_ && comp . isShowing ( ) ) { showingIndex = index ; } ++ index ; } } if ( showingIndex != - NUM_ && showingIndex <= index ) { buttonBarCardPanel . setSelectedCard ( showingIndex ) ; } return buttonBarCardPanel ; }
private boolean isClockwise ( Point center , Point a , Point b ) { double cross = ( a . x - center . x ) * ( b . y - center . y ) - ( b . x - center . x ) * ( a . y - center . y ) ; return cross > NUM_ ; }
public Map < URI , List < URI > > addTargetVolumeMirrors ( ) { List < URI > blockMirrors = Lists . newArrayList ( ) ; Map < URI , List < URI > > mirrorsMap = new HashMap < > ( ) ; URI targetCG = null ; for ( URI volumeId : uris ( volumeIds ) ) { List < URI > targets = getTargets ( volumeId ) ; for ( URI target : targets ) { if ( targetCG == null ) { targetCG = getConsistencyGroup ( target ) ; } List < URI > mirrors = getMirrors ( target ) ; blockMirrors . addAll ( mirrors ) ; mirrorsMap . put ( target , mirrors ) ; } } if ( ! blockMirrors . isEmpty ( ) && targetCG != null ) { BlockStorageUtils . addVolumesToConsistencyGroup ( targetCG , blockMirrors ) ; } return mirrorsMap ; }
public AlgorithmInitializationException ( Algorithm algorithm , String message ) { super ( algorithm , message ) ; }
private void showFeedback ( String message ) { if ( myHost != null ) { myHost . showFeedback ( message ) ; } else { System . out . println ( message ) ; } }
void onTouch ( float distance ) ;
private CBreakpointModuleSynchronizer ( ) { }
public static double RRSErawFitness ( boolean useTrainingData , GEPIndividual ind , int chromosomeNum ) { double sumOfSquaredAbsoluteError = NUM_ ; double expectedResult ; double result ; double error ; GEPDependentVariable dv ; if ( useTrainingData ) dv = GEPDependentVariable . trainingData ; else dv = GEPDependentVariable . testingData ; double dvValues [ ] = dv . getDependentVariableValues ( chromosomeNum ) ; double dvSumOfSquaredAbsoluteError = dv . getDependentVariableSumOfSquaredAbsoluteError ( chromosomeNum ) ; for ( int i = NUM_ ; i < dvValues . length ; i ++ ) { expectedResult = dvValues [ i ] ; result = ind . eval ( chromosomeNum , useTrainingData , i ) ; error = result - expectedResult ; sumOfSquaredAbsoluteError += error * error ; } if ( dvSumOfSquaredAbsoluteError == NUM_ ) { dvSumOfSquaredAbsoluteError = RELATIVE_ERROR_ZERO_FACTOR ; System . err . println ( STR_ ) ; } return Math . sqrt ( sumOfSquaredAbsoluteError / dvSumOfSquaredAbsoluteError ) ; }
public static ShardRestoreStatus readShardRestoreStatus ( StreamInput in ) throws IOException { ShardRestoreStatus shardSnapshotStatus = new ShardRestoreStatus ( ) ; shardSnapshotStatus . readFrom ( in ) ; return shardSnapshotStatus ; }
public abstract void draw ( Graphics2D g2 , float x , float y ) ;
public boolean isDestroyed ( ) { return cert == null && key == null && alias == null ; }
public void deleteRecursively ( File file ) throws ApplicationException { deleteRecursively ( file , null , FileManager . DeletionPolicy . DELETE_IMMEDIATELY ) ; }
public Object clone ( ) { return this ; }
public AnnotatableElementItemProvider ( AdapterFactory adapterFactory ) { super ( adapterFactory ) ; }
public boolean contains ( String sCategory ) { return CategoryEstimations . containsKey ( sCategory ) ; }
private String nextHost ( ) { currentHost ++ ; if ( currentHost == hostsArray . length ) { currentHost = NUM_ ; } return hostsArray [ currentHost ] ; }
boolean isFinished ( ) ;
private static boolean hasFlag ( byte flags , byte flag ) { return ( flags & flag ) == flag ; }
public void newMethod ( ) throws IOException ;
public void createRepository ( final String namespace , final Properties properties ) throws Exception { createRepository ( namespace , properties , UUID . randomUUID ( ) ) ; }
public FixedLengthDecodingState ( int length ) { this . length = length ; }
public boolean hasNext ( ) throws SQLException { boolean hasNext = ( this . nextRow != null ) ; if ( ! hasNext && ! this . streamerClosed ) { this . io . closeStreamer ( this ) ; this . streamerClosed = BOOL_ ; } return hasNext ; }
public static String readAll ( final File file ) throws IOException { try ( InputStream input = new FileInputStream ( file ) ) { return readAll ( input ) ; } }
public void success ( Exchange exchange ) ;
private void go ( ) { ( ( FrameLayout ) this . getParent ( ) ) . removeView ( this ) ; int [ ] is = new int [ origCards . size ( ) ] ; for ( int i = NUM_ ; i < origCards . size ( ) ; i ++ ) is [ i ] = origCards . get ( i ) ; top . handle ( new Event ( Event . EType . CARDORDER ) . setObject ( new EventObject ( is ) ) ) ; }
public static void komlToBinary ( String koml , String binary ) throws Exception { Object o ; checkKOML ( ) ; o = KOML . read ( koml ) ; if ( o == null ) throw new Exception ( STR_ + koml + STR_ ) ; writeBinary ( binary , o ) ; }
public void addRecentMessageUids ( Collection < MessageUid > uids ) { recentMessageUids . addAll ( uids ) ; }
public void validate ( ) { }
public void shutdown ( ) { }
public TrustManagerImpl ( KeyStore keyStore ) { this ( keyStore , null ) ; }
private static Class < ? > [ ] readParameters ( ObjectInputStream in ) throws IOException , ClassNotFoundException { Class < ? > [ ] result = new Class [ in . readShort ( ) ] ; for ( int i = NUM_ ; i < result . length ; i ++ ) { if ( ! in . readBoolean ( ) ) { result [ i ] = ( Class < ? > ) in . readObject ( ) ; continue ; } result [ i ] = primitives [ in . readByte ( ) ] ; } return result ; }
public LegendItemBlockContainer ( Arrangement arrangement , Dataset dataset , Comparable seriesKey ) { super ( arrangement ) ; this . dataset = dataset ; this . seriesKey = seriesKey ; }
public boolean hasString ( ) { return BOOL_ ; }
public static boolean isRopeBlock ( Block block ) { return block instanceof IBlockRope ; }
int numFeatures ( I i ) ;
private void unlinkFirst ( Node < E > first , Node < E > next ) { for ( Node < E > o = null , p = next , q ; ; ) { if ( p . item != null || ( q = p . next ) == null ) { if ( o != null && p . prev != p && first . casNext ( next , p ) ) { skipDeletedPredecessors ( p ) ; if ( first . prev == null && ( p . next == null || p . item != null ) && p . prev == first ) { updateHead ( ) ; updateTail ( ) ; o . lazySetNext ( o ) ; o . lazySetPrev ( prevTerminator ( ) ) ; } } return ; } else if ( p == q ) return ; else { o = p ; p = q ; } } }
public static void main ( String [ ] args ) throws UnknownHostException { SpringApplication app = new SpringApplication ( Application . class ) ; SimpleCommandLinePropertySource source = new SimpleCommandLinePropertySource ( args ) ; addDefaultProfile ( app , source ) ; Environment env = app . run ( args ) . getEnvironment ( ) ; log . info ( STR_ + STR_ + STR_ , env . getProperty ( STR_ ) , InetAddress . getLocalHost ( ) . getHostAddress ( ) , env . getProperty ( STR_ ) ) ; }
private void readParameterAnnotations ( final MethodVisitor mv , final Context context , int v , final boolean visible ) { int i ; int n = b [ v ++ ] & NUM_ ; int synthetics = Type . getArgumentTypes ( context . desc ) . length - n ; AnnotationVisitor av ; for ( i = NUM_ ; i < synthetics ; ++ i ) { av = mv . visitParameterAnnotation ( i , STR_ , BOOL_ ) ; if ( av != null ) { av . visitEnd ( ) ; } } char [ ] c = context . buffer ; for ( ; i < n + synthetics ; ++ i ) { int j = readUnsignedShort ( v ) ; v += NUM_ ; for ( ; j > NUM_ ; -- j ) { av = mv . visitParameterAnnotation ( i , readUTF8 ( v , c ) , visible ) ; v = readAnnotationValues ( v + NUM_ , c , BOOL_ , av ) ; } } }
boolean isEditBeforeRun ( ) ;
public static void removeBreakpoint ( final BreakpointManager manager , final INaviModule module , final UnrelocatedAddress unrelocatedAddress ) { Preconditions . checkNotNull ( manager , STR_ ) ; Preconditions . checkNotNull ( module , STR_ ) ; Preconditions . checkNotNull ( unrelocatedAddress , STR_ ) ; final BreakpointAddress address = new BreakpointAddress ( module , unrelocatedAddress ) ; if ( manager . hasBreakpoint ( BreakpointType . REGULAR , address ) ) { removeBreakpoints ( Sets . newHashSet ( address ) , manager ) ; } }
public void simulateMethod ( SootMethod method , ReferenceVariable thisVar , ReferenceVariable returnVar , ReferenceVariable params [ ] ) { String subSignature = method . getSubSignature ( ) ; { defaultMethod ( method , thisVar , returnVar , params ) ; return ; } }
public final boolean hasFooter ( ) { return hasFooter ; }
public void writeInteger ( String key , int value ) { SharedPreferences . Editor editor = preferences . edit ( ) ; editor . putInt ( key , value ) ; editor . commit ( ) ; }
public void testClearBitPositiveInside2 ( ) { byte aBytes [ ] = { NUM_ , - NUM_ , NUM_ , NUM_ , - NUM_ , - NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , - NUM_ , NUM_ , NUM_ } ; int aSign = NUM_ ; int number = NUM_ ; byte rBytes [ ] = { NUM_ , - NUM_ , NUM_ , NUM_ , - NUM_ , - NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , - NUM_ , NUM_ , NUM_ } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger result = aNumber . clearBit ( number ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = NUM_ ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( STR_ , NUM_ , result . signum ( ) ) ; }
public void testConnect_CheckOpenBeforeStatus ( ) throws IOException { assertFalse ( this . channel1 . isConnected ( ) ) ; this . channel1 . connect ( localAddr1 ) ; assertTrue ( this . channel1 . isConnected ( ) ) ; this . channel1 . close ( ) ; assertFalse ( this . channel1 . isOpen ( ) ) ; try { this . channel1 . connect ( localAddr1 ) ; fail ( STR_ ) ; } catch ( ClosedChannelException e ) { } }
public FloatMatrix sort ( ) { float array [ ] = toArray ( ) ; java . util . Arrays . sort ( array ) ; return new FloatMatrix ( rows , columns , array ) ; }
abstract boolean isTruncated ( ) ;
HttpPath ( FilesystemPath root , String userPath , Map < String , Object > newAttributes , String path , String query ) { super ( root , userPath , path ) ; _host = ( ( HttpPath ) root ) . _host ; _port = ( ( HttpPath ) root ) . _port ; _query = query ; if ( newAttributes != null ) { _virtualHost = ( String ) newAttributes . get ( STR_ ) ; } }
public void exitFullScreenMode ( ) ;
public static String removeLastOr ( String string ) { string = StringUtils . stripEnd ( string , STR_ ) ; return StringUtils . removeEndIgnoreCase ( string , STR_ ) ; }
Repository openRepository ( Project . NameKey name ) throws RepositoryNotFoundException , IOException ;
double minDist ( SpatialComparable mbr , V v ) ;
public void animateTo ( List < T > newData ) { applyAndAnimateRemovals ( newData ) ; applyAndAnimateAdditions ( newData ) ; applyAndAnimateMovedItems ( newData ) ; }
public void deleteSubGroupContainers ( Set groupContainers ) throws AMException , SSOException { Iterator iter = groupContainers . iterator ( ) ; while ( iter . hasNext ( ) ) { String groupContainerDN = ( String ) iter . next ( ) ; AMGroupContainer groupContainer = new AMGroupContainerImpl ( token , groupContainerDN ) ; groupContainer . delete ( ) ; } }
protected void handleStyledAttributes ( TypedArray a ) { }
private void notifyUserOfGestureChanges ( ) { final Editor editor = mSharedPreferences . edit ( ) ; deprecateStringPreference ( editor , R . string . pref_shortcut_down_and_left_key , R . string . pref_deprecated_shortcut_down_and_left_default ) ; deprecateStringPreference ( editor , R . string . pref_shortcut_down_and_right_key , R . string . pref_deprecated_shortcut_down_and_right_default ) ; deprecateStringPreference ( editor , R . string . pref_shortcut_up_and_left_key , R . string . pref_deprecated_shortcut_up_and_left_default ) ; deprecateStringPreference ( editor , R . string . pref_shortcut_up_and_right_key , R . string . pref_deprecated_shortcut_up_and_right_default ) ; editor . putBoolean ( mService . getString ( R . string . pref_must_accept_gesture_change_notification ) , BOOL_ ) ; editor . apply ( ) ; final Intent notificationIntent = new Intent ( mService , GestureChangeNotificationActivity . class ) ; notificationIntent . addFlags ( Intent . FLAG_ACTIVITY_NEW_TASK ) ; notificationIntent . addFlags ( Intent . FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS ) ; NotificationPosterRunnable runnable = new NotificationPosterRunnable ( buildGestureChangeNotification ( notificationIntent ) , GESTURE_CHANGE_NOTIFICATION_ID ) ; mHandler . postDelayed ( runnable , NOTIFICATION_DELAY ) ; }
public BulletParser parseTags ( final boolean parseTags ) { this . parseTags = parseTags ; return this ; }
public static boolean containsWhitespace ( String str ) { return containsWhitespace ( ( CharSequence ) str ) ; }
public void onPlayPauseClicked ( View v ) throws CastException , TransientNetworkDisconnectionException , NoConnectionException ;
public final String stringVal ( ) { if ( ! hasSpecial ) { return this . subString ( np + NUM_ , sp ) ; } else { return new String ( sbuf , NUM_ , sp ) ; } }
int opus_encode ( PointerByReference st , ShortByReference pcm , int frame_size , Pointer data , int max_data_bytes ) ;
public final void testValidateSucceeds ( ) { NumberValidator numberValidator = new NumberValidator ( STR_ ) ; assertTrue ( numberValidator . validate ( STR_ ) ) ; assertTrue ( numberValidator . validate ( STR_ ) ) ; }
public static final String createXPATHMsg ( ListResourceBundle fResourceBundle , String msgKey , Object args [ ] ) { String fmsg = null ; boolean throwex = BOOL_ ; String msg = null ; if ( msgKey != null ) msg = fResourceBundle . getString ( msgKey ) ; if ( msg == null ) { msg = fResourceBundle . getString ( XPATHErrorResources . BAD_CODE ) ; throwex = BOOL_ ; } if ( args != null ) { try { int n = args . length ; for ( int i = NUM_ ; i < n ; i ++ ) { if ( null == args [ i ] ) args [ i ] = STR_ ; } fmsg = java . text . MessageFormat . format ( msg , args ) ; } catch ( Exception e ) { fmsg = fResourceBundle . getString ( XPATHErrorResources . FORMAT_FAILED ) ; fmsg += STR_ + msg ; } } else fmsg = msg ; if ( throwex ) { throw new RuntimeException ( fmsg ) ; } return fmsg ; }
void transform ( Map < String , ? > result , ResponseBuilder rb , SolrDocumentSource solrDocumentSource ) ;
public static void sort ( int [ ] data , int start , int end , Comparator < ? super DBIDRef > comp ) { quickSort ( data , start , end - NUM_ , comp , new IntegerDBIDVar ( ) , new IntegerDBIDVar ( ) , new IntegerDBIDVar ( ) ) ; }
void addDamage ( int delta ) { this . damage += delta ; }
public void zoomToFitPage ( boolean forceZoom ) { PCamera camera = canvas . getCamera ( ) ; if ( ( autoZoomMode && editMode . isSelection ( ) ) || forceZoom ) { PBounds filtered = new PBounds ( ) ; Iterator iterator = canvas . getLayer ( ) . getChildrenIterator ( ) ; while ( iterator . hasNext ( ) ) { PNode node = ( PNode ) iterator . next ( ) ; if ( node . getVisible ( ) ) { filtered . add ( node . getFullBounds ( ) ) ; } } PBounds adjustedFiltered = new PBounds ( filtered . getX ( ) - NUM_ , filtered . getY ( ) - NUM_ , filtered . getWidth ( ) + NUM_ , filtered . getHeight ( ) + NUM_ ) ; camera . setViewBounds ( adjustedFiltered ) ; } }
public void testNotEveryEdgeToOneNode ( ) { Graph < Integer , Number > graph = generateAndTestSizeOfBarabasiAlbertGraph ( graphFactory , vertexFactory , edgeFactory , init_vertices , edges_to_add_per_timestep , random_seed , num_tests ) ; for ( Integer v : graph . getVertices ( ) ) { assertTrue ( graph . inDegree ( v ) < graph . getEdgeCount ( ) ) ; } }
public static void prepareToDraw ( ) { GLES20 . glUseProgram ( sProgramHandle ) ; Util . checkGlError ( STR_ ) ; GLES20 . glEnableVertexAttribArray ( sPositionHandle ) ; Util . checkGlError ( STR_ ) ; GLES20 . glVertexAttribPointer ( sPositionHandle , COORDS_PER_VERTEX , GLES20 . GL_FLOAT , BOOL_ , VERTEX_STRIDE , sOutlineVertexBuffer ) ; Util . checkGlError ( STR_ ) ; sDrawPrepared = BOOL_ ; }
public RegionImpl ( int offset , int length ) { fOffset = offset ; fLength = length ; }
public SizableIterable ( final Iterable < T > iterable , final int size ) { if ( iterable == null ) throw new NullPointerException ( ) ; if ( size < NUM_ ) throw new IllegalArgumentException ( STR_ ) ; this . iterable = iterable ; this . size = size ; }
public static void displayPanel ( JComponent component ) { displayPanel ( component , null ) ; }
public TransitionData ( S source , S target , Long period , Integer count , Collection < Action < S , E > > actions , Guard < S , E > guard , TransitionKind kind ) { this ( source , target , null , null , period , count , actions , guard , kind , null ) ; }
public BinaryHttpResponseHandler ( String [ ] allowedContentTypes ) { super ( ) ; if ( allowedContentTypes != null ) mAllowedContentTypes = allowedContentTypes ; else Log . e ( LOG_TAG , STR_ ) ; }
public Product asProduct ( SolrDocument doc ) { Long pid = Long . class . cast ( doc . get ( STR_ ) ) ; return productService . getProduct ( pid ) ; }
public AuthPermission ( String name , String actions ) { super ( STR_ . equals ( name ) ? STR_ : name , actions ) ; }
boolean canZoom ( ) ;
public Map < Integer , PdxType > typeMap ( ) { return distributedTypeRegistry . types ( ) ; }
public void testDoubleValueNegInfinity ( ) { String a = STR_ ; BigDecimal aNumber = new BigDecimal ( a ) ; double result = Double . NEGATIVE_INFINITY ; assertEquals ( STR_ , result , aNumber . doubleValue ( ) , NUM_ ) ; }
public void resetAllRotationPoints ( ) { rotationPointX = initRotationPointX ; rotationPointY = initRotationPointY ; rotationPointZ = initRotationPointZ ; }
private static void refreshSystem ( LocalStatisticsImpl s ) { if ( isLinux ( ) ) { LinuxProcFsStatistics . refreshSystem ( s . _getIntStorage ( ) , s . _getLongStorage ( ) , s . _getDoubleStorage ( ) ) ; } else { refreshSystem ( s . _getIntStorage ( ) , s . _getLongStorage ( ) , s . _getDoubleStorage ( ) ) ; } }
boolean hasAnyOpenIncognitoTabs ( ) { for ( Tab tab : mTabs ) { if ( tab . getWebView ( ) != null && tab . getWebView ( ) . isPrivateBrowsingEnabled ( ) ) { return BOOL_ ; } } return BOOL_ ; }
public boolean isSet ( _Fields field ) { if ( field == null ) { throw new IllegalArgumentException ( ) ; } switch ( field ) { case HEADER : return isSetHeader ( ) ; case NODE : return isSetNode ( ) ; } throw new IllegalStateException ( ) ; }
public LegendItem ( String label ) { this ( label , Color . black ) ; }
private void incorporateDequeues ( ) { final int cycles = itrs . cycles ; final int takeIndex = ArrayBlockingQueue . this . takeIndex ; final int prevCycles = this . prevCycles ; final int prevTakeIndex = this . prevTakeIndex ; if ( cycles != prevCycles || takeIndex != prevTakeIndex ) { final int len = items . length ; long dequeues = ( cycles - prevCycles ) * len + ( takeIndex - prevTakeIndex ) ; if ( invalidated ( lastRet , prevTakeIndex , dequeues , len ) ) lastRet = REMOVED ; if ( invalidated ( nextIndex , prevTakeIndex , dequeues , len ) ) nextIndex = REMOVED ; if ( invalidated ( cursor , prevTakeIndex , dequeues , len ) ) cursor = takeIndex ; if ( cursor < NUM_ && nextIndex < NUM_ && lastRet < NUM_ ) detach ( ) ; else { this . prevCycles = cycles ; this . prevTakeIndex = takeIndex ; } } }
public boolean isIndex ( ) { return partitioner instanceof LocalPartitioner ; }
public final int reservedPages ( ) { return reserved ; }
protected void processURL ( HttpMessage message , int depth , String localURL , String baseURL ) { String fullURL = URLCanonicalizer . getCanonicalURL ( localURL , baseURL ) ; if ( fullURL == null ) { return ; } log . debug ( STR_ + localURL + STR_ + fullURL ) ; notifyListenersResourceFound ( message , depth + NUM_ , fullURL ) ; }
public static PathImpl lookupNative ( String url , Map < String , Object > attr ) { return getPwd ( ) . lookupNative ( url , attr ) ; }
public void propagateSwtForeground ( final Component component , final Color foreground , final boolean preserveDefaults ) { assert EventQueue . isDispatchThread ( ) ; assert component != null ; ResourceConverter converter = ResourceConverter . getInstance ( ) ; java . awt . Color fg = converter . convertColor ( foreground ) ; if ( ! fg . equals ( component . getForeground ( ) ) || ! preserveDefaults ) { component . setForeground ( fg ) ; } }
public String nextCDATA ( ) throws JSONException { char c ; int i ; StringBuilder sb = new StringBuilder ( ) ; for ( ; ; ) { c = next ( ) ; if ( end ( ) ) { throw syntaxError ( STR_ ) ; } sb . append ( c ) ; i = sb . length ( ) - NUM_ ; if ( i >= NUM_ && sb . charAt ( i ) == STR_ && sb . charAt ( i + NUM_ ) == STR_ && sb . charAt ( i + NUM_ ) == STR_ ) { sb . setLength ( i ) ; return sb . toString ( ) ; } } }
public static String removeLastComma ( String string ) { string = StringUtils . stripEnd ( string , STR_ ) ; return StringUtils . removeEndIgnoreCase ( string , STR_ ) ; }
protected void paint ( SynthContext context , Graphics g ) { SynthContext accContext = getContext ( menuItem , Region . MENU_ITEM_ACCELERATOR ) ; String prefix = getPropertyPrefix ( ) ; Icon checkIcon = style . getIcon ( context , prefix + STR_ ) ; Icon arrowIcon = style . getIcon ( context , prefix + STR_ ) ; SynthGraphicsUtils . paint ( context , accContext , g , checkIcon , arrowIcon , acceleratorDelimiter , defaultTextIconGap , getPropertyPrefix ( ) ) ; accContext . dispose ( ) ; }
public void init ( BigInteger N , BigInteger g , Digest digest , SecureRandom random ) { this . N = N ; this . g = g ; this . digest = digest ; this . random = random ; }
public boolean isDynamic ( ) { return ( dynamicStatus == DYNAMIC ) ; }
public void removeActionListener ( ActionListener l ) { dispatcher . removeListener ( l ) ; }
public static Resource openResource ( Activity activity , Uri uri ) { try { String mimetype = activity . getContentResolver ( ) . getType ( uri ) ; if ( null == mimetype ) { String extension = MimeTypeMap . getFileExtensionFromUrl ( uri . toString ( ) ) ; if ( extension != null ) { mimetype = MimeTypeMap . getSingleton ( ) . getMimeTypeFromExtension ( extension ) ; } } return new Resource ( activity . getContentResolver ( ) . openInputStream ( uri ) , mimetype ) ; } catch ( Exception e ) { Log . e ( LOG_TAG , STR_ , e ) ; } return null ; }
public static WindowFocusListener remove ( WindowFocusListener l , WindowFocusListener oldl ) { return ( WindowFocusListener ) removeInternal ( l , oldl ) ; }
public static JsonArray geoJSONPosition ( GeoPoint position ) { JsonArray json = new JsonArray ( ) ; json . add ( new JsonPrimitive ( position . getLongitude ( ) ) ) ; json . add ( new JsonPrimitive ( position . getLatitude ( ) ) ) ; return json ; }
public ZipOutputStream ( OutputStream out , Charset charset ) { super ( out , new Deflater ( Deflater . DEFAULT_COMPRESSION , BOOL_ ) ) ; if ( charset == null ) throw new NullPointerException ( STR_ ) ; this . zc = ZipCoder . get ( charset ) ; usesDefaultDeflater = BOOL_ ; }
private boolean matches ( BytesRef termIn , int k ) { return k == NUM_ ? termIn . equals ( term . bytes ( ) ) : automata [ k ] . runAutomaton . run ( termIn . bytes , termIn . offset , termIn . length ) ; }
public static PeriodType months ( ) { PeriodType type = cMonths ; if ( type == null ) { type = new PeriodType ( STR_ , new DurationFieldType [ ] { DurationFieldType . months ( ) } , new int [ ] { - NUM_ , NUM_ , - NUM_ , - NUM_ , - NUM_ , - NUM_ , - NUM_ , - NUM_ } ) ; cMonths = type ; } return type ; }
public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Node testEmployee ; NamedNodeMap attributes ; Node streetAttr ; String attrName ; doc = ( Document ) load ( STR_ , BOOL_ ) ; elementList = doc . getElementsByTagName ( STR_ ) ; testEmployee = elementList . item ( NUM_ ) ; attributes = testEmployee . getAttributes ( ) ; streetAttr = attributes . getNamedItem ( STR_ ) ; assertInstanceOf ( STR_ , Attr . class , streetAttr ) ; attrName = streetAttr . getNodeName ( ) ; assertEquals ( STR_ , STR_ , attrName ) ; attrName = ( ( Attr ) streetAttr ) . getName ( ) ; assertEquals ( STR_ , STR_ , attrName ) ; }
public List < VideoItem > queryAll ( Uri uri , long lastId ) { return FilmstripContentQueries . forCameraPath ( mContentResolver , uri , VideoDataQuery . QUERY_PROJECTION , lastId , QUERY_ORDER , this ) ; }
public void doNextOp ( DhcpStateMachine machine ) { InetAddress clientRequest = mRequestedIp == null ? mClientIp : mRequestedIp ; Log . v ( TAG , STR_ + mRequestedIp + STR_ + mClientIp ) ; machine . onRequestReceived ( mBroadcast , mTransId , mClientMac , clientRequest , mRequestedParams , mHostName ) ; }
void onReloadDisableLoFi ( ) ;
private static void reverseRange ( Object [ ] a , int lo , int hi ) { hi -- ; while ( lo < hi ) { Object t = a [ lo ] ; a [ lo ++ ] = a [ hi ] ; a [ hi -- ] = t ; } }
public static int toInt ( byte a , byte b , byte c , byte d ) { return ( d << ( BYTE_SIZE * NUM_ ) ) | ( ( c & BYTE_MASK ) << ( BYTE_SIZE * NUM_ ) ) | ( ( b & BYTE_MASK ) << BYTE_SIZE ) | ( a & BYTE_MASK ) ; }
private void loadTableInfo ( ) { Timestamp payDate = ( Timestamp ) fieldPayDate . getValue ( ) ; miniTable . setColorCompare ( payDate ) ; log . config ( STR_ + payDate ) ; BankInfo bi = ( BankInfo ) fieldBankAccount . getSelectedItem ( ) . getValue ( ) ; ValueNamePair paymentRule = ( ValueNamePair ) fieldPaymentRule . getSelectedItem ( ) . getValue ( ) ; KeyNamePair docType = ( KeyNamePair ) fieldDtype . getSelectedItem ( ) . getValue ( ) ; int c_bpartner_id = NUM_ ; if ( fieldBPartner . getValue ( ) != null ) { Integer id = ( Integer ) fieldBPartner . getValue ( ) ; c_bpartner_id = id . intValue ( ) ; } loadTableInfo ( bi , payDate , paymentRule , onlyDue . isSelected ( ) , c_bpartner_id , docType , miniTable ) ; calculateSelection ( ) ; }
public void accept ( TestValueVisitor visitor , FieldIdEnum fieldId ) ;
public static Map < String , Object > createDatastoreVolumeParam ( DatastoreToVolumeTable table , DatastoreToVolumeParams params , int hluInc ) { Map < String , Object > map = new HashMap < String , Object > ( ) ; map . putAll ( table . getParams ( ) ) ; map . putAll ( params . getParams ( hluInc ) ) ; return map ; }
public BinaryInvalidTypeException ( String msg ) { super ( msg ) ; }
public StackMapTable toStackMapTable ( ConstPool cp ) { return new StackMapTable ( cp , toByteArray ( ) ) ; }
private synchronized void readObject ( java . io . ObjectInputStream s ) throws IOException , ClassNotFoundException { s . defaultReadObject ( ) ; init ( getMask ( actions ) ) ; }
public void storeOriginals ( ) { mStartingStartTrim = mStartTrim ; mStartingEndTrim = mEndTrim ; mStartingRotation = mRotation ; }
public void seek ( long pos ) throws IOException { throw new IOException ( STR_ + pos + STR_ ) ; }
public void mark ( int readAheadLimit ) throws java . io . IOException { return ; }
public WSPersonalProfileServiceViewBean ( ) { super ( STR_ , DEFAULT_DISPLAY_URL , STR_ ) ; }
public void parseAssumptionsBlock ( List < CharSet > charSets ) throws ImportException , IOException { boolean done = BOOL_ ; while ( ! done ) { String command = readToken ( STR_ ) ; if ( command . equalsIgnoreCase ( STR_ ) || command . equalsIgnoreCase ( STR_ ) ) { done = BOOL_ ; } else if ( match ( STR_ , command , NUM_ ) ) { if ( getLastDelimiter ( ) != STR_ ) { charSets . add ( readCharSetCommand ( ) ) ; } } else { System . err . println ( STR_ + command + STR_ ) ; } } }
public void remember ( IType lhs , IType rhs ) { Assert . isLegal ( lhs != null ) ; Assert . isLegal ( rhs != null ) ; try { if ( ! isCacheableRHS ( rhs ) ) return ; ITypeHierarchy hierarchy = rhs . newSupertypeHierarchy ( getProgressMonitor ( ) ) ; if ( hierarchy . contains ( lhs ) ) { IType [ ] allLHSides = hierarchy . getAllSupertypes ( lhs ) ; String rhsQualifiedName = rhs . getFullyQualifiedName ( ) ; for ( int i = NUM_ ; i < allLHSides . length ; i ++ ) rememberInternal ( allLHSides [ i ] , rhsQualifiedName ) ; rememberInternal ( lhs , rhsQualifiedName ) ; } } catch ( JavaModelException x ) { JavaPlugin . log ( x ) ; } }
public static boolean accessibleForFolder ( String agentName ) { return accessibleForLevel ( agentName , NUM_ ) ; }
public boolean isVisible ( ) { return m_node . isVisible ( ) ; }
public final String yytext ( ) { return new String ( zzBuffer , zzStartRead , zzMarkedPos - zzStartRead ) ; }
private void createRasterProgram ( ) throws IOException { int program = glCreateProgram ( ) ; int vshader = DemoUtils . createShader ( STR_ , GL_VERTEX_SHADER ) ; int fshader = DemoUtils . createShader ( STR_ , GL_FRAGMENT_SHADER ) ; glAttachShader ( program , vshader ) ; glAttachShader ( program , fshader ) ; glBindAttribLocation ( program , NUM_ , STR_ ) ; glBindAttribLocation ( program , NUM_ , STR_ ) ; glBindAttribLocation ( program , NUM_ , STR_ ) ; glBindAttribLocation ( program , NUM_ , STR_ ) ; glBindFragDataLocation ( program , NUM_ , STR_ ) ; glLinkProgram ( program ) ; int linked = glGetProgrami ( program , GL_LINK_STATUS ) ; String programLog = glGetProgramInfoLog ( program ) ; if ( programLog . trim ( ) . length ( ) > NUM_ ) { System . err . println ( programLog ) ; } if ( linked == NUM_ ) { throw new AssertionError ( STR_ ) ; } this . rasterProgram = program ; }
public final boolean peekOrTrue ( ) { return ( m_index > - NUM_ ) ? m_values [ m_index ] : BOOL_ ; }
private boolean isHourInnerCircle ( int hourOfDay ) { return mIs24HourMode && ( hourOfDay <= NUM_ && hourOfDay != NUM_ ) ; }
private void trackAllChildViews ( ) { int childCount = mRv . getChildCount ( ) ; for ( int i = NUM_ ; i < childCount ; i ++ ) { View v = mRv . getChildAt ( i ) ; if ( v instanceof BaseRecyclerViewFastScrollBar . FastScrollFocusableView ) { mTrackedFastScrollViews . add ( ( BaseRecyclerViewFastScrollBar . FastScrollFocusableView ) v ) ; } } }
public abstract int readUnsignedShort ( ) throws IOException ;
public synchronized void add ( Object obj ) { obj = copy ( obj ) ; if ( m_History . contains ( obj ) ) { m_History . remove ( obj ) ; } m_History . insertElementAt ( obj , NUM_ ) ; while ( m_History . size ( ) > MAX_HISTORY_COUNT ) { m_History . remove ( m_History . size ( ) - NUM_ ) ; } }
public void text ( char c , float x , float y ) { if ( textFont == null ) { defaultFontOrDeath ( STR_ ) ; } if ( textAlignY == CENTER ) { y += textAscent ( ) / NUM_ ; } else if ( textAlignY == TOP ) { y += textAscent ( ) ; } else if ( textAlignY == BOTTOM ) { y -= textDescent ( ) ; } textBuffer [ NUM_ ] = c ; textLineAlignImpl ( textBuffer , NUM_ , NUM_ , x , y ) ; }
public UserStyleDialog ( JFrame f ) { super ( f ) ; setModal ( BOOL_ ) ; setTitle ( resources . getString ( STR_ ) ) ; listeners . put ( STR_ , new OKButtonAction ( ) ) ; listeners . put ( STR_ , new CancelButtonAction ( ) ) ; getContentPane ( ) . add ( panel = new Panel ( ) ) ; getContentPane ( ) . add ( createButtonsPanel ( ) , BorderLayout . SOUTH ) ; pack ( ) ; }
public void add ( BackupDescriptor backup ) { backups . add ( backup ) ; }
private static void copy ( Reader in , Writer out ) throws IOException { try { char [ ] buffer = new char [ NUM_ ] ; int bytesRead ; while ( ( bytesRead = in . read ( buffer ) ) != - NUM_ ) { out . write ( buffer , NUM_ , bytesRead ) ; } out . flush ( ) ; } finally { try { in . close ( ) ; } catch ( IOException ex ) { } try { out . close ( ) ; } catch ( IOException ex ) { } } }
public abstract void stopCompensationTimer ( ) ;
private boolean updateOutBlock ( AbstractBlockBase < ? > block ) { BitSet union = new BitSet ( stackSlotMap . length ) ; for ( AbstractBlockBase < ? > succ : block . getSuccessors ( ) ) { union . or ( liveInMap . get ( succ ) ) ; } BitSet outSet = liveOutMap . get ( block ) ; if ( outSet == null || ! union . equals ( outSet ) ) { liveOutMap . put ( block , union ) ; return BOOL_ ; } return BOOL_ ; }
private void linkedModeLeft ( ) { fgActiveLinkedMode = null ; if ( fInfoPopup != null ) { fInfoPopup . close ( ) ; } ISourceViewer viewer = fEditor . getViewer ( ) ; if ( viewer instanceof IEditingSupportRegistry ) { IEditingSupportRegistry registry = ( IEditingSupportRegistry ) viewer ; registry . unregister ( fFocusEditingSupport ) ; } }
public BoolLiteralItemProvider ( AdapterFactory adapterFactory ) { super ( adapterFactory ) ; }
abstract public MeasureAggregator < T > newAggregator ( ) ;
public static void main ( String [ ] args ) { junit . textui . TestRunner . run ( BlobRegressionTest . class ) ; }
private final SortedMap identifyCandidateDelimiters ( String sStr , int iNGramSize ) { String sSubStr = null ; Integer [ ] iRes = null ; ArrayList alRes = new ArrayList ( ) ; TreeMap tmRes = new TreeMap ( ) ; for ( int iCnt = NUM_ ; iCnt <= sStr . length ( ) - iNGramSize ; iCnt ++ ) { if ( iCnt + iNGramSize > sStr . length ( ) ) continue ; sSubStr = sStr . substring ( iCnt , iCnt + iNGramSize ) ; if ( tmRes . containsValue ( sSubStr ) ) continue ; Vertex vStrNode = clLocator . locateVertexInGraph ( sgOverallGraph , new VertexImpl ( sSubStr ) ) ; if ( vStrNode == null ) continue ; double dEntropy = getEntropyOfNextChar ( sSubStr , BOOL_ ) ; tmRes . put ( dEntropy , sSubStr ) ; } return tmRes ; }
public boolean isSupertypeOf ( Type type ) { return type . isSubtypeOf ( this ) ; }
public String addKindParameter ( String url , String kind ) { if ( url . contains ( STR_ ) ) { return url + STR_ + kind ; } else { return url + STR_ + kind ; } }
public synchronized boolean hasAnyRelationshipToTarget ( Vertex target ) { Iterator < Relationship > relationships = allRelationships ( ) ; while ( relationships . hasNext ( ) ) { Relationship relationship = relationships . next ( ) ; if ( ! relationship . isInverse ( ) && relationship . getTarget ( ) . equals ( target ) ) { return BOOL_ ; } } return BOOL_ ; }
private String badArrive ( long s ) { return STR_ + stateToString ( s ) ; }
public PutRepositoryRequest ( String name ) { this . name = name ; }
static public TreeModel instance ( ) { if ( instanceValue == null ) { instanceValue = new TreeModel ( ) ; } return instanceValue ; }
public void unbindCustomTabsService ( Activity activity ) { if ( mConnection == null ) return ; activity . unbindService ( mConnection ) ; mClient = null ; mCustomTabsSession = null ; }
public boolean isValid ( ) { return mCRC [ NUM_ ] == CRC . PASSED || mCRC [ NUM_ ] == CRC . CORRECTED ; }
public static _Fields findByThriftIdOrThrow ( int fieldId ) { _Fields fields = findByThriftId ( fieldId ) ; if ( fields == null ) throw new IllegalArgumentException ( STR_ + fieldId + STR_ ) ; return fields ; }
protected Date evaluateString ( String datemathfmt , Locale locale , TimeZone tz ) { Date date = null ; datemathfmt = datemathfmt . replaceAll ( STR_ , STR_ ) ; try { DateMathParser parser = getDateMathParser ( locale , tz ) ; date = parseMathString ( parser , datemathfmt ) ; } catch ( ParseException e ) { wrapAndThrow ( SEVERE , e , STR_ ) ; } return date ; }
default void pop ( final Object ... ¢ ) { tick ( ¢ ) ; }
private void recursiveDelete ( final File f ) { if ( f . isDirectory ( ) ) { final File [ ] children = f . listFiles ( ) ; for ( int i = NUM_ ; i < children . length ; i ++ ) { recursiveDelete ( children [ i ] ) ; } } if ( log . isInfoEnabled ( ) ) log . info ( STR_ + f ) ; if ( f . exists ( ) && ! f . delete ( ) ) { log . warn ( STR_ + f ) ; } }
public long adjustTimestamp ( long pts ) { if ( lastPts != Long . MIN_VALUE ) { long closestWrapCount = ( lastPts + ( MAX_PTS_PLUS_ONE / NUM_ ) ) / MAX_PTS_PLUS_ONE ; long ptsWrapBelow = pts + ( MAX_PTS_PLUS_ONE * ( closestWrapCount - NUM_ ) ) ; long ptsWrapAbove = pts + ( MAX_PTS_PLUS_ONE * closestWrapCount ) ; pts = Math . abs ( ptsWrapBelow - lastPts ) < Math . abs ( ptsWrapAbove - lastPts ) ? ptsWrapBelow : ptsWrapAbove ; } long timeUs = ptsToUs ( pts ) ; if ( firstSampleTimestampUs != DO_NOT_OFFSET && lastPts == Long . MIN_VALUE ) { timestampOffsetUs = firstSampleTimestampUs - timeUs ; } lastPts = pts ; return timeUs + timestampOffsetUs ; }
public com . sun . identity . liberty . ws . common . jaxb . assertion . ConfirmationMethodElement createConfirmationMethodElement ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . liberty . ws . common . jaxb . assertion . impl . ConfirmationMethodElementImpl ( ) ; }
public static Realm root ( ) { if ( root == null ) { root = new Realm ( convertRealmPathToDN ( STR_ ) ) ; } return root ; }
public final Iterator < KnowledgeEdge > requiredEdgesIterator ( ) { return Collections . unmodifiableSet ( this . allRequiredEdges ) . iterator ( ) ; }
public static Integer parseInt ( String s ) { return ( s == null ) ? ( Integer ) null : Integer . parseInt ( s ) ; }
protected ZebraRolloverStrategy ( final int minIndex , final int maxIndex , final boolean useMax , final int compressionLevel , final StrSubstitutor subst ) { this . minIndex = minIndex ; this . maxIndex = maxIndex ; this . useMax = useMax ; this . compressionLevel = compressionLevel ; this . subst = subst ; }
public void onActualStateChange ( Context context , Intent intent ) { if ( intent . getAction ( ) == null || ! intent . getAction ( ) . equals ( getChangeAction ( ) ) ) { return ; } setCurrentState ( context , getActualState ( context ) ) ; }
public void updateSize ( ) { int viewWidth = getWidth ( ) ; int viewHeight = getHeight ( ) ; if ( viewWidth == NUM_ || viewHeight == NUM_ || mTermSession == null ) return ; int newColumns = Math . max ( NUM_ , ( int ) ( viewWidth / mRenderer . mFontWidth ) ) ; int newRows = Math . max ( NUM_ , ( viewHeight - mRenderer . mFontLineSpacingAndAscent ) / mRenderer . mFontLineSpacing ) ; if ( mEmulator == null || ( newColumns != mEmulator . mColumns || newRows != mEmulator . mRows ) ) { mTermSession . updateSize ( newColumns , newRows ) ; mEmulator = mTermSession . getEmulator ( ) ; mTopRow = NUM_ ; scrollTo ( NUM_ , NUM_ ) ; invalidate ( ) ; } }
public static boolean isSupported ( ) { return Util . getImplementation ( ) . isSocketAvailable ( ) ; }
private String extractUserId ( HttpServerRequest request , Logger log ) { String onBehalfOf = StringUtils . getStringOrEmpty ( request . headers ( ) . get ( ON_BEHALF_OF_HEADER ) ) ; if ( StringUtils . isNotEmpty ( onBehalfOf ) ) { log . debug ( STR_ ) ; return onBehalfOf ; } else { return request . headers ( ) . get ( USER_HEADER ) ; } }
public void encode ( OutputStream out ) throws IOException { DerOutputStream tmp = new DerOutputStream ( ) ; if ( extensionValue == null ) { extensionId = PKIXExtensions . IssuerAlternativeName_Id ; critical = BOOL_ ; encodeThis ( ) ; } super . encode ( tmp ) ; out . write ( tmp . toByteArray ( ) ) ; }
public NotFileFilter ( IOFileFilter filter ) { if ( filter == null ) { throw new IllegalArgumentException ( STR_ ) ; } this . filter = filter ; }
public MaskFormatter ( ) { setAllowsInvalid ( BOOL_ ) ; containsLiteralChars = BOOL_ ; maskChars = EmptyMaskChars ; placeholder = STR_ ; }
public void paintProgressBarBackground ( SynthContext context , Graphics g , int x , int y , int w , int h ) { paintBackground ( context , g , x , y , w , h , null ) ; }
public void open ( ) throws IOException { writer = new PrintWriter ( new BufferedWriter ( new FileWriter ( filename ) ) ) ; writer . println ( columnNames ) ; }
private void listen ( ) throws RemoteException { assert Thread . holdsLock ( this ) ; TCPEndpoint ep = getEndpoint ( ) ; int port = ep . getPort ( ) ; if ( server == null ) { if ( tcpLog . isLoggable ( Log . BRIEF ) ) { tcpLog . log ( Log . BRIEF , STR_ + port + STR_ ) ; } try { server = ep . newServerSocket ( ) ; Thread t = AccessController . doPrivileged ( new NewThreadAction ( new AcceptLoop ( server ) , STR_ + port , BOOL_ ) ) ; t . start ( ) ; } catch ( java . net . BindException e ) { throw new ExportException ( STR_ + port , e ) ; } catch ( IOException e ) { throw new ExportException ( STR_ + port , e ) ; } } else { SecurityManager sm = System . getSecurityManager ( ) ; if ( sm != null ) { sm . checkListen ( port ) ; } } }
String writeConfigFileV3 ( Matsim4UrbansimConfigType m4uConfigType ) throws UncheckedIOException { try { String destination = this . dummyPath + STR_ ; log . info ( STR_ + destination ) ; BufferedWriter bw = IOUtils . getBufferedWriter ( destination ) ; JAXBContext jaxbContext = JAXBContext . newInstance ( org . matsim . contrib . matsim4urbansim . matsim4urbansim . jaxbconfigv3 . ObjectFactory . class ) ; Marshaller m = jaxbContext . createMarshaller ( ) ; MatsimJaxbXmlWriter . setMarshallerProperties ( InternalConstants . CURRENT_MATSIM_4_URBANSIM_XSD_MATSIMORG , m ) ; org . matsim . contrib . matsim4urbansim . matsim4urbansim . jaxbconfigv3 . ObjectFactory of = new org . matsim . contrib . matsim4urbansim . matsim4urbansim . jaxbconfigv3 . ObjectFactory ( ) ; JAXBElement < Matsim4UrbansimConfigType > jaxbElement = of . createMatsim4UrbansimConfig ( m4uConfigType ) ; m . marshal ( jaxbElement , bw ) ; return destination ; } catch ( JAXBException e ) { e . printStackTrace ( ) ; Assert . assertFalse ( BOOL_ ) ; } return null ; }
void enable ( ) ;
public DTBuilder ( int year , int month , int day , int hour , int minute , int second ) { this . year = year ; this . month = month ; this . day = day ; this . hour = hour ; this . minute = minute ; this . second = second ; }
public void writeObject ( Object object ) throws IOException { _out . writeStreamingObject ( object ) ; }
public void attributeAdded ( String key , String scope ) ;
public void redoLastAction ( ) { try { if ( undoManager . canRedo ( ) ) undoManager . redo ( ) ; } catch ( CannotRedoException cre ) { cre . printStackTrace ( ) ; } }
public static void logStatus ( final Logger logger , final ArticleReaderInterface articleReader , final long startTime , final long sleepingTime , final long workingTime ) { String message = STR_ + Time . toClock ( System . currentTimeMillis ( ) - startTime ) + STR_ ; if ( articleReader != null ) { message += STR_ + articleReader . getBytePosition ( ) + STR_ ; } message += STR_ + MathUtilities . percentPlus ( workingTime , sleepingTime ) + STR_ + Time . toClock ( workingTime ) + STR_ + STR_ + Time . toClock ( sleepingTime ) + STR_ ; logger . logMessage ( Level . FINE , message ) ; }
private BreadcrumbItem createItem ( ) { BreadcrumbItem result = new BreadcrumbItem ( this , fContainer ) ; result . setLabelProvider ( ( ILabelProvider ) getLabelProvider ( ) ) ; if ( fToolTipLabelProvider != null ) { result . setToolTipLabelProvider ( fToolTipLabelProvider ) ; } else { result . setToolTipLabelProvider ( ( ILabelProvider ) getLabelProvider ( ) ) ; } result . setContentProvider ( ( ITreeContentProvider ) getContentProvider ( ) ) ; return result ; }
public Node ( Lock lock ) { this . sentinel = this ; this . value = null ; this . lock = lock ; this . prev = this ; this . next = this ; this . key = null ; }
public void close ( ) { throw new MustOverrideException ( ) ; }
public void init$Children ( ) { children = new ASTNode [ NUM_ ] ; setChild ( new List ( ) , NUM_ ) ; setChild ( new List ( ) , NUM_ ) ; setChild ( new Opt ( ) , NUM_ ) ; setChild ( new List ( ) , NUM_ ) ; }
public < T > T evaluate ( Expression expression , Class < T > desiredResultType , Map < String , Object > variables ) { StandardEvaluationContext context = new StandardEvaluationContext ( ) ; if ( variables != null ) { context . setVariables ( variables ) ; } return expression . getValue ( context , desiredResultType ) ; }
public Boolean isInstanceUuid ( ) { return instanceUuid ; }
static < E > ImmutableMap < E , Integer > indexMap ( Collection < E > list ) { ImmutableMap . Builder < E , Integer > builder = new ImmutableMap . Builder < E , Integer > ( list . size ( ) ) ; int i = NUM_ ; for ( E e : list ) { builder . put ( e , i ++ ) ; } return builder . build ( ) ; }
public void requestLoad ( ContentResolver resolver ) ;
private NotificationCompat . Builder createNotificationBuilder ( ) { NotificationCompat . Builder notificationBuilder = new NotificationCompat . Builder ( getContext ( ) ) ; notificationBuilder . setSmallIcon ( R . drawable . notification_icon ) . setAutoCancel ( BOOL_ ) ; notificationBuilder . setColor ( getContext ( ) . getResources ( ) . getColor ( R . color . primary ) ) ; return notificationBuilder ; }
public void addCacheListener ( CacheListener < K , V > aListener ) ;
public TeXParser ( String parseString , TeXFormula formula ) { this ( parseString , formula , BOOL_ ) ; }
public static TypeReference newTryCatchReference ( int tryCatchBlockIndex ) { return new TypeReference ( ( EXCEPTION_PARAMETER << NUM_ ) | ( tryCatchBlockIndex << NUM_ ) ) ; }
public DefaultModel ( ExampleSet exampleSet , double value ) { this ( exampleSet , value , null ) ; }
protected ArrayList < float [ ] > doPolyDispatch ( float [ ] rawllpts , int ltype , int nsegs , boolean isFilled ) { switch ( ltype ) { case LineType . Rhumb : return forwardRhumbPoly ( rawllpts , nsegs , isFilled ) ; case LineType . GreatCircle : return forwardGreatPoly ( rawllpts , nsegs , isFilled ) ; case LineType . Straight : Debug . error ( STR_ ) ; return new ArrayList < float [ ] > ( NUM_ ) ; default : Debug . error ( STR_ ) ; return new ArrayList < float [ ] > ( NUM_ ) ; } }
public void trimToSize ( ) { if ( names != null ) names . trimToSize ( ) ; if ( requiredChildren != null ) { requiredChildren . trimToSize ( ) ; for ( GazEntry nextkey : requiredChildren . values ( ) ) { nextkey . trimToSize ( ) ; } } }
protected SnmpCachedData updateCachedDatas ( Object userData ) { final String [ ] path = JvmRuntimeImpl . getLibraryPath ( userData ) ; final long time = System . currentTimeMillis ( ) ; final int len = path . length ; SnmpOid indexes [ ] = new SnmpOid [ len ] ; for ( int i = NUM_ ; i < len ; i ++ ) { indexes [ i ] = new SnmpOid ( i + NUM_ ) ; } return new SnmpCachedData ( time , indexes , path ) ; }
static DecoratorColor decoratorColor ( SamtTopic isaControl ) { int maturity = getMaturity ( isaControl ) ; int targetMaturity = getTargetMaturity ( isaControl ) ; if ( targetMaturity < TargetMaturity . MIN . value ( ) ) { return DecoratorColor . NULL ; } return computeDecoratorColor ( maturity , targetMaturity ) ; }
public void testDynDateSort ( ) throws Exception { checkSortMissingDefault ( STR_ , STR_ , STR_ ) ; }
public void removeParameters ( ) { this . uriParms = new NameValueList ( ) ; }
public JmxManager ( String host , int registryPort , String serviceName , AuthenticationInfo authInfo ) { this ( host , registryPort + NUM_ , registryPort , serviceName , authInfo ) ; }
public boolean isLedHighlightEnabled ( ) { return preferences . getBoolean ( resources . getString ( R . string . key_led_highlight ) , Boolean . parseBoolean ( resources . getString ( R . string . default_led_highlight ) ) ) ; }
Result decode ( BinaryBitmap image ) throws NotFoundException , ChecksumException , FormatException ;
public Optional < Duration > size ( ) { return size ; }
public Code39Reader ( ) { usingCheckDigit = BOOL_ ; extendedMode = BOOL_ ; }
public void checkRank ( double value , double rank ) { for ( RankedObservation observation : test . data ) { if ( observation . getValue ( ) == value ) { Assert . assertEquals ( rank , observation . getRank ( ) , Settings . EPS ) ; } } }
public static boolean isZero ( double value ) { return isEqual ( value , NUM_ ) ; }
private void decodeLtp ( LongTermPrediction ltp , int maxSfb ) { ltp . lag = br . read ( NUM_ ) ; ltp . coef = ltp_coef [ br . read ( NUM_ ) ] ; for ( int sfb = NUM_ ; sfb < Math . min ( maxSfb , MAX_LTP_LONG_SFB ) ; sfb ++ ) { ltp . used [ sfb ] = br . readBool ( ) ; } }
public void onCenterUpdated ( LatLng center ) { if ( circle != null ) circle . setCenter ( center ) ; if ( radiusMarker != null ) radiusMarker . setPosition ( MarkerAreasUtils . toRadiusLatLng ( center , radiusMeters ) ) ; }
public VerletParticle2D addConstraint ( ParticleConstraint2D c ) { if ( constraints == null ) { constraints = new ArrayList < ParticleConstraint2D > ( NUM_ ) ; } constraints . add ( c ) ; return this ; }
public ClassFile ( DataInputStream in ) throws IOException { read ( in ) ; }
public long [ ] longArrayValue ( ) { lb . position ( NUM_ ) ; long [ ] l = new long [ lb . limit ( ) ] ; lb . get ( l ) ; return l ; }
public DeleteOperation processDelete ( String rawEntryDN ) { return processDelete ( ByteString . valueOfUtf8 ( rawEntryDN ) , null ) ; }
protected void doStopServer ( String [ ] theArgs ) throws Exception { }
public IconicsDrawable iconOffsetYPx ( int iconOffsetY ) { this . mIconOffsetY = iconOffsetY ; return this ; }
public static boolean willChromeHandleIntent ( Context context , Intent intent , boolean matchDefaultOnly ) { try { ResolveInfo info = context . getPackageManager ( ) . resolveActivity ( intent , matchDefaultOnly ? PackageManager . MATCH_DEFAULT_ONLY : NUM_ ) ; return info != null && info . activityInfo . packageName . equals ( context . getPackageName ( ) ) ; } catch ( RuntimeException e ) { logTransactionTooLargeOrRethrow ( e , intent ) ; return BOOL_ ; } }
public PropertiesTracker < T > createTracker ( T entity ) { PropertiesTracker < T > tracker = new PropertiesTracker < > ( entity , this ) ; this . trackers . add ( tracker ) ; return tracker ; }
private InetSocketAddress extractInetSocketAddress ( final Server server ) throws Exception { final ServerImpl impl = ( ServerImpl ) server ; final Field transportServerField = ServerImpl . class . getDeclaredField ( STR_ ) ; transportServerField . setAccessible ( BOOL_ ) ; final Object transportServer = transportServerField . get ( impl ) ; final Field channelField = transportServer . getClass ( ) . getDeclaredField ( STR_ ) ; channelField . setAccessible ( BOOL_ ) ; final Channel channel = ( Channel ) channelField . get ( transportServer ) ; return ( InetSocketAddress ) channel . localAddress ( ) ; }
public IOUtils ( ) { super ( ) ; }
public static double deriv ( double pred , double y , double eps ) { final double x = pred - y ; if ( eps < Math . abs ( x ) ) return Math . signum ( x ) ; else return NUM_ ; }
final public boolean startsWith ( final MutableString prefix ) { final int l = prefix . length ( ) ; if ( l > length ( ) ) return BOOL_ ; int i = l ; final char [ ] a1 = prefix . array ; final char [ ] a2 = array ; while ( i -- != NUM_ ) if ( a1 [ i ] != a2 [ i ] ) return BOOL_ ; return BOOL_ ; }
public static InetAddress intToInetAddress ( int hostAddress ) { byte [ ] addressBytes = { ( byte ) ( NUM_ & hostAddress ) , ( byte ) ( NUM_ & ( hostAddress > > NUM_ ) ) , ( byte ) ( NUM_ & ( hostAddress > > NUM_ ) ) , ( byte ) ( NUM_ & ( hostAddress > > NUM_ ) ) } ; try { return InetAddress . getByAddress ( addressBytes ) ; } catch ( UnknownHostException e ) { throw new AssertionError ( ) ; } }
default String printable ( long offset ) throws BufferUnderflowException { return charToString [ readUnsignedByte ( offset ) ] ; }
public double quadraticMean ( ) { return NumericReduceUtils . quadraticMean . reduce ( this ) ; }
public DeferredSubscriptionSubscriber ( Subscriber < ? super O > subscriber , long initialRequest ) { if ( initialRequest < NUM_ ) { throw new IllegalArgumentException ( STR_ + initialRequest ) ; } this . subscriber = Objects . requireNonNull ( subscriber , STR_ ) ; setInitialRequest ( initialRequest ) ; }
int minute ( ) ;
private static int defaultMaximumDistance ( final Entity entity , final int x , final int y ) { int manhattan = Math . abs ( x - entity . getX ( ) ) + Math . abs ( y - entity . getY ( ) ) ; return Math . max ( NUM_ * manhattan , NUM_ ) ; }
public boolean isMCSiteLocal ( ) { return BOOL_ ; }
public synchronized void registerMapping ( final QName qname , final String javaClassName ) { if ( javaToQName == null ) { javaToQName = Collections . synchronizedMap ( new HashMap < String , QName > ( ) ) ; } if ( qnameToJava == null ) { qnameToJava = Collections . synchronizedMap ( new HashMap < QName , String > ( ) ) ; } javaToQName . put ( javaClassName , qname ) ; qnameToJava . put ( qname , javaClassName ) ; }
private FCZoneReference findFCZoneReferenceForVolGroupKey ( URI exportGroupURI , URI volumeURI , String refKey , String [ ] newOrExisting ) { Map < String , FCZoneReference > volRefMap = _networkScheduler . makeExportToReferenceMap ( refKey ) ; String volExportKey = make2UriKey ( volumeURI , exportGroupURI ) ; if ( volRefMap . containsKey ( volExportKey ) ) { FCZoneReference ref = volRefMap . get ( volExportKey ) ; if ( ref != null && ref . getInactive ( ) == BOOL_ ) { _log . info ( String . format ( STR_ , volumeURI , exportGroupURI , refKey ) ) ; newOrExisting [ NUM_ ] = STR_ ; return ref ; } } return null ; }
public void componentMoved ( ComponentEvent e ) { }
public String translateViewDefinitionStub ( String sourceVendorName , String viewDefinition ) ;
private static String readName ( DataInputStream dis , byte data [ ] ) throws IOException { int c = dis . readUnsignedByte ( ) ; if ( ( c & NUM_ ) == NUM_ ) { c = ( ( c & NUM_ ) << NUM_ ) + dis . readUnsignedByte ( ) ; HashSet < Integer > jumps = new HashSet < Integer > ( ) ; jumps . add ( c ) ; return readName ( data , c , jumps ) ; } if ( c == NUM_ ) { return STR_ ; } byte b [ ] = new byte [ c ] ; dis . readFully ( b ) ; String s = IDN . toUnicode ( new String ( b ) ) ; String t = readName ( dis , data ) ; if ( t . length ( ) > NUM_ ) { s = s + STR_ + t ; } return s ; }
public StyledArrowButton ( int orientation , Style style ) { super ( orientation , style . getForeground ( ) , style . getForeground ( ) , style . getForeground ( ) , style . getForeground ( ) ) ; }
public double computeSpamProbability ( Reader stream ) throws java . io . IOException { Set < String > tokens = parse ( stream ) ; Map < String , Double > workCorpus = getCorpus ( ) ; SortedSet < TokenProbabilityStrength > tokenProbabilityStrengths = getTokenProbabilityStrengths ( tokens , workCorpus ) ; return computeOverallProbability ( tokenProbabilityStrengths , workCorpus ) ; }
public String process ( Item item ) throws ProcessException { return getPhoneFeature ( item , STR_ ) ; }
public AppEvent ( EventType type ) { super ( type ) ; }
private void savePreviousImageValues ( ) { if ( matrix != null && viewHeight != NUM_ && viewWidth != NUM_ ) { matrix . getValues ( m ) ; prevMatrix . setValues ( m ) ; prevMatchViewHeight = matchViewHeight ; prevMatchViewWidth = matchViewWidth ; prevViewHeight = viewHeight ; prevViewWidth = viewWidth ; } }
public void printStackTrace ( PrintWriter output ) { synchronized ( output ) { super . printStackTrace ( output ) ; Throwable throwable = getException ( ) ; if ( throwable != null ) { output . print ( STR_ ) ; throwable . printStackTrace ( output ) ; } } }
protected void error ( Exception ex ) { }
public void printin ( ) { writer . print ( SPACES . substring ( NUM_ , indent ) ) ; }
public com . sun . identity . saml2 . jaxb . xmlenc . ReferenceListType createReferenceListType ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . saml2 . jaxb . xmlenc . impl . ReferenceListTypeImpl ( ) ; }
void weakAssociateAll ( Vertex relationshipType , Vertex target , Vertex type , float correctnessMultiplier ) ;
public com . sun . identity . liberty . ws . common . jaxb . utility . TimestampTraceElement createTimestampTraceElement ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . liberty . ws . common . jaxb . utility . impl . TimestampTraceElementImpl ( ) ; }
public void resetOriginals ( ) { mStartingStartTrim = NUM_ ; mStartingEndTrim = NUM_ ; mStartingRotation = NUM_ ; setStartTrim ( NUM_ ) ; setEndTrim ( NUM_ ) ; setRotation ( NUM_ ) ; }
public static < S extends HasFixedFacetValueChangedHandlers & HasHandlers > void fire ( S source , JavaScriptObject jsObj ) { if ( TYPE != null ) { FixedFacetValueChangedEvent event = new FixedFacetValueChangedEvent ( jsObj ) ; source . fireEvent ( event ) ; } }
public static boolean inProfile ( File path ) { if ( path . getParentFile ( ) != null ) { if ( Profile . isProfile ( path . getParentFile ( ) ) ) { return BOOL_ ; } return Profile . inProfile ( path . getParentFile ( ) ) ; } return BOOL_ ; }
private void checkIfDirectoriesExist ( File [ ] disk_dirs ) { DiskStoreFactoryImpl . checkIfDirectoriesExist ( disk_dirs ) ; }
synchronized private boolean validateIdentity ( String identity ) { try { Enumeration < NetworkInterface > enumeration = NetworkInterface . getNetworkInterfaces ( ) ; while ( enumeration . hasMoreElements ( ) ) { NetworkInterface nic = enumeration . nextElement ( ) ; if ( ! nic . isVirtual ( ) && ! nic . isLoopback ( ) ) { String nicIdentity = this . createIdentity ( nic . getHardwareAddress ( ) ) ; if ( nicIdentity != null && nicIdentity . equals ( identity ) ) { return BOOL_ ; } } } } catch ( SocketException ex ) { log . error ( STR_ , ex . getLocalizedMessage ( ) , ex ) ; } return BOOL_ ; }
public boolean isModifiedSinceDetachmentByDependentRelationships ( ) ;
protected S_SpeciesImpl ( ) { super ( ) ; }
public void close ( ) { synchronized ( mDiskCacheLock ) { if ( mDiskLruCache != null ) { try { if ( ! mDiskLruCache . isClosed ( ) ) { mDiskLruCache . close ( ) ; mDiskLruCache = null ; if ( BuildConfig . DEBUG ) { Log . d ( TAG , STR_ ) ; } } } catch ( IOException e ) { Log . e ( TAG , STR_ + e ) ; } } } }
public final void headTo ( Tuple3d p ) { double angle = Geometric . angle ( this . location , p ) ; turnTo ( Math . toDegrees ( angle ) ) ; }
public RectF fill ( final PDFRenderer state , final Canvas g , final Path s ) { g . drawPath ( s , mainPaint ) ; final RectF bounds = new RectF ( ) ; final RectF result = new RectF ( ) ; s . computeBounds ( bounds , BOOL_ ) ; g . getMatrix ( ) . mapRect ( result , bounds ) ; return bounds ; }
public static int writeSpeexComment ( byte [ ] buf , int offset , String comment ) { int length = comment . length ( ) ; writeInt ( buf , offset , length ) ; writeString ( buf , offset + NUM_ , comment ) ; writeInt ( buf , offset + length + NUM_ , NUM_ ) ; return length + NUM_ ; }
public Object loadInstance ( Class < ? > clazz , Object [ ] args , Object defaultValue ) ;
private boolean isCallerValid ( Context context , int authRequirements , String packageToMatch ) { boolean shouldBeGoogleSigned = ( authRequirements & FLAG_SHOULD_BE_GOOGLE_SIGNED ) != NUM_ ; boolean shouldBeSystem = ( authRequirements & FLAG_SHOULD_BE_SYSTEM ) != NUM_ ; String [ ] callingPackages = getCallingPackages ( context ) ; PackageManager pm = context . getApplicationContext ( ) . getPackageManager ( ) ; boolean matchFound = BOOL_ ; for ( String packageName : callingPackages ) { if ( ! TextUtils . isEmpty ( packageToMatch ) && ! packageName . equals ( packageToMatch ) ) continue ; matchFound = BOOL_ ; if ( ( shouldBeGoogleSigned && ! isGoogleSigned ( pm , packageName ) ) || ( shouldBeSystem && ! isSystemBuild ( pm , packageName ) ) ) { return BOOL_ ; } } return matchFound ; }
public MultiMatchQueryBuilder type ( Object type ) { this . type = type == null ? null : Type . parse ( type . toString ( ) . toLowerCase ( Locale . ROOT ) , ParseFieldMatcher . EMPTY ) ; return this ; }
HandlerResult handleNotification ( Notification notification , T attachment ) ;
public static WindowStateListener add ( WindowStateListener a , WindowStateListener b ) { return ( WindowStateListener ) addInternal ( a , b ) ; }
boolean canZoom ( ) ;
public JsonArray remove ( int index ) { values . remove ( index ) ; return this ; }
public RegexValidator ( String regex , boolean caseSensitive ) { this ( new String [ ] { regex } , caseSensitive ) ; }
private Item newString ( final String value ) { key2 . set ( STR , value , null , null ) ; Item result = get ( key2 ) ; if ( result == null ) { pool . put12 ( STR , newUTF8 ( value ) ) ; result = new Item ( index ++ , key2 ) ; put ( result ) ; } return result ; }
boolean isLocal ( ) ;
void error ( Object message , Throwable t ) ;
public MessageBytes addValue ( byte b [ ] , int startN , int len ) { MimeHeaderField mhf = createHeader ( ) ; mhf . getName ( ) . setBytes ( b , startN , len ) ; return mhf . getValue ( ) ; }
public AbstractResources < T > withInactive ( boolean inactive ) { this . includeInactive = inactive ; return this ; }
private State buildPatch ( TaskState . TaskStage stage , TaskState . SubStage subStage , Throwable e ) { State s = new State ( ) ; s . taskInfo = new TaskState ( ) ; s . taskInfo . stage = stage ; s . taskInfo . subStage = subStage ; if ( e != null ) { s . taskInfo . failure = Utils . toServiceErrorResponse ( e ) ; } return s ; }
CancellableTask updateAddress ( Address address , Callback < Address > callback ) ;
public void passivate ( ) { fireSessionEvent ( Session . SESSION_PASSIVATED_EVENT , null ) ; HttpSessionEvent event = null ; String keys [ ] = keys ( ) ; for ( int i = NUM_ ; i < keys . length ; i ++ ) { Object attribute = attributes . get ( keys [ i ] ) ; if ( attribute instanceof HttpSessionActivationListener ) { if ( event == null ) event = new HttpSessionEvent ( getSession ( ) ) ; try { ( ( HttpSessionActivationListener ) attribute ) . sessionWillPassivate ( event ) ; } catch ( Throwable t ) { ExceptionUtils . handleThrowable ( t ) ; manager . getContext ( ) . getLogger ( ) . error ( sm . getString ( STR_ ) , t ) ; } } } }
public NewsfeedSearchQuery q ( String value ) { return unsafeParam ( STR_ , value ) ; }
public Iterator < E > iterator ( ) ;
void onFrameDeactivated ( ) ;
public boolean testBool ( boolean thing ) throws org . apache . thrift . TException ;
private void handleSendImage ( Intent intent ) { AppLog . i ( this , STR_ ) ; final Uri imageUri = intent . getParcelableExtra ( Intent . EXTRA_STREAM ) ; if ( imageUri != null ) { AppLog . v ( this , STR_ ) ; } else { AppLog . w ( this , STR_ ) ; } Toast . makeText ( this , STR_ , Toast . LENGTH_SHORT ) . show ( ) ; }
AVT processAVT ( StylesheetHandler handler , String uri , String name , String rawName , String value , ElemTemplateElement owner ) throws org . xml . sax . SAXException { try { AVT avt = new AVT ( handler , uri , name , rawName , value , owner ) ; return avt ; } catch ( TransformerException te ) { throw new org . xml . sax . SAXException ( te ) ; } }
public void bindAttribute ( String attributeName , Object control ) ;
public boolean isMCLinkLocal ( ) { return BOOL_ ; }
boolean isObstacle ( final IEntity entity ) ;
private void savePreviousImageValues ( ) { if ( matrix != null && viewHeight != NUM_ && viewWidth != NUM_ ) { matrix . getValues ( m ) ; prevMatrix . setValues ( m ) ; prevMatchViewHeight = matchViewHeight ; prevMatchViewWidth = matchViewWidth ; prevViewHeight = viewHeight ; prevViewWidth = viewWidth ; } }
public byte asByte ( ) ;
public void mouseDragged ( MouseEvent event ) { }
public static int median ( int first , int middle , int last ) { return Math . max ( Math . min ( first , middle ) , Math . min ( Math . max ( first , middle ) , last ) ) ; }
public static < T > HashSet < T > hashSet ( int initialCapacity , float loadFactor ) { return new HashSet < T > ( initialCapacity , loadFactor ) ; }
private static String removeApostrophes ( Object o ) { String s = String . class . cast ( o ) ; if ( s . charAt ( NUM_ ) == STR_ && s . charAt ( s . length ( ) - NUM_ ) == STR_ ) return s . substring ( NUM_ , s . length ( ) - NUM_ ) ; return s ; }
public MiniClientPowerManagement ( ) { super ( ) ; if ( MiniClient . WINDOWS_OS ) sage . Native . loadLibrary ( STR_ ) ; }
public ParameterPair ( Parameter a , Parameter b ) { setPair ( a , b ) ; }
public boolean renameStringIdEntry ( String fromStrId , String toStrId ) { if ( mNumberToIDMap == null ) return BOOL_ ; Integer key = mNumberToIDMap . inverse ( ) . get ( fromStrId ) ; if ( key != null ) { mNumberToIDMap . remove ( key ) ; mNumberToIDMap . put ( key , toStrId ) ; return BOOL_ ; } return BOOL_ ; }
void onPreferenceChanged ( String preferenceKey , Object preferenceValue ) ;
public boolean visitVariableRef ( ExpressionOwner owner , Variable var ) { m_isAbs = BOOL_ ; return BOOL_ ; }
public JSONObject ( JSONObject object ) { this ( object , BOOL_ ) ; }
private boolean hasProxySettings ( Properties settings ) { String proxyHost = settings . getProperty ( STR_ , null ) ; return proxyHost != null && proxyHost . length ( ) > NUM_ ; }
void inject ( Object controller ) ;
void close ( boolean save ) ;
protected < T > Handler < AsyncResult < T > > resultHandler ( RoutingContext context , Handler < T > handler ) { return null ; }
void removeHttpListener ( IHttpListener listener ) ;
public void parse ( DefaultHandler handler ) throws SAXException , IOException ;
public abstract Map < String , Object > nextModifiedParentRowKey ( ) ;
protected void drawBorder ( DrawingContext context ) { Stroke stroke = getBorderStroke ( ) ; if ( stroke != null ) { Paint borderColor = getBorderColor ( ) ; GraphicsUtils . drawPaintedShape ( context . getGraphics ( ) , getBounds ( ) , borderColor , null , stroke ) ; } }
public static void runBlender ( ) { if ( ! runBlender ( null , BOOL_ ) ) { logger . log ( Level . INFO , STR_ ) ; DialogDisplayer . getDefault ( ) . notifyLater ( new NotifyDescriptor . Message ( STR_ ) ) ; } }
public long localNodeOrder ( ) { assert ctx . discovery ( ) != null ; return ctx . discovery ( ) . localNode ( ) . order ( ) ; }
public boolean isEditing ( ) { return Display . getInstance ( ) . isTextEditing ( this ) ; }
public boolean isAutoStart ( ) { return autoStart ; }
public void addMarkerToMap ( LatLng latLng ) { Marker marker = mGoogleMap . addMarker ( new MarkerOptions ( ) . position ( latLng ) . title ( STR_ ) . snippet ( STR_ ) ) ; markers . add ( marker ) ; }
BitMatrix encode ( String contents , BarcodeFormat format , int width , int height ) throws WriterException ;
public String RM2Code ( String mac ) { JsonObject out = broadlinkExecuteCommand ( BroadlinkConstants . CMD_RM2_CODE_ID , BroadlinkConstants . CMD_RM2_CODE , mac ) ; int code = out . get ( BroadlinkConstants . CODE ) . getAsInt ( ) ; if ( NUM_ != code ) return null ; String data = out . get ( STR_ ) . getAsString ( ) ; Log . e ( STR_ , data ) ; return data ; }
public static synchronized boolean randomize ( byte [ ] seed ) throws AssertFailException { Preconditions . checkArgument ( seed . length == NUM_ || seed == null ) ; ByteBuffer byteBuff = nativeECDSABuffer . get ( ) ; if ( byteBuff == null || byteBuff . capacity ( ) < seed . length ) { byteBuff = ByteBuffer . allocateDirect ( seed . length ) ; byteBuff . order ( ByteOrder . nativeOrder ( ) ) ; nativeECDSABuffer . set ( byteBuff ) ; } byteBuff . rewind ( ) ; byteBuff . put ( seed ) ; w . lock ( ) ; try { return secp256k1_context_randomize ( byteBuff , Secp256k1Context . getContext ( ) ) == NUM_ ; } finally { w . unlock ( ) ; } }
boolean canConnectEnergy ( EnumFacing from ) ;
public static boolean hasTable ( final CConnection connection , final String tableName ) throws CouldntLoadDataException { Preconditions . checkNotNull ( tableName , STR_ ) ; Preconditions . checkNotNull ( connection , STR_ ) ; final String query = STR_ + tableName + STR_ ; try ( ResultSet result = connection . executeQuery ( query , BOOL_ ) ) { return result . first ( ) ; } catch ( final SQLException e ) { throw new CouldntLoadDataException ( e ) ; } }
public Job findJob ( String jobId ) { for ( Job job : jobs ) { if ( job . jobId . equals ( jobId ) ) { return job ; } } return null ; }
public cleanGautengNetwork ( ) { log = Logger . getLogger ( cleanGautengNetwork . class ) ; }
public static double geoHashCellHeight ( int level ) { assert level >= NUM_ ; return EARTH_POLAR_DISTANCE / ( NUM_ << ( ( ( ( level + NUM_ ) / NUM_ ) * NUM_ ) + ( ( level / NUM_ ) * NUM_ ) ) ) ; }
private static String encodePath ( String path ) { StringBuilder buffer = new StringBuilder ( ) ; for ( int i = NUM_ ; i < path . length ( ) ; i ++ ) { char c = path . charAt ( i ) ; if ( c == STR_ ) { buffer . append ( STR_ ) ; } else { buffer . append ( c ) ; } } return buffer . toString ( ) ; }
public void prepareDialogInstance ( ) { final LmlParser parser = interfaceService . getParser ( ) ; if ( actionContainer != null ) { parser . getData ( ) . addActionContainer ( getId ( ) , actionContainer ) ; } dialog = ( Window ) parser . createView ( wrappedObject , Gdx . files . internal ( dialogData . value ( ) ) ) . first ( ) ; if ( actionContainer != null ) { parser . getData ( ) . removeActionContainer ( getId ( ) ) ; } }
public static < T > Mapping < Optional < T > > optional ( Mapping < T > base , Constraint ... constraints ) { String mname = STR_ + base . meta ( ) . name ; return new FieldMapping < Optional < T > > ( base . options ( ) . _inputMode ( ) , ( null ) , ( null ) , new MappingMeta ( mname , Optional . class , base ) ) . options ( null ) . constraint ( constraints ) ; }
public Builder requestTimeout ( final int requestTimeout ) { clientConfig . setRequestTimeout ( requestTimeout ) ; return this ; }
public static String computeHashSHA1 ( final String text ) throws NoSuchAlgorithmException { MessageDigest md = MessageDigest . getInstance ( STR_ ) ; md . update ( text . getBytes ( ) , NUM_ , text . length ( ) ) ; byte hashData [ ] = md . digest ( ) ; StringBuilder sb = new StringBuilder ( hashData . length * NUM_ ) ; for ( int i = NUM_ ; i < hashData . length ; i ++ ) { int b = ( NUM_ & hashData [ i ] ) ; if ( b <= NUM_ ) sb . append ( STR_ ) ; sb . append ( Integer . toHexString ( b ) ) ; } return sb . toString ( ) . toUpperCase ( ) ; }
protected ConnectionFigure createConnection ( ) { return ( ConnectionFigure ) prototype . clone ( ) ; }
boolean isDirty ( ) ;
void onConfigurationSelected ( ClasspathPagePresenter property ) ;
private static List < String > buildTestCommand ( File testFile , String modelLocation , String outputPredictions ) throws IOException { List < String > result = new ArrayList < > ( ) ; result . add ( resolveSVMHmmClassifyCommand ( ) ) ; result . add ( testFile . getAbsolutePath ( ) ) ; result . add ( modelLocation ) ; result . add ( outputPredictions ) ; return result ; }
public static Intent composeQuickContactsIntent ( Context context , Rect target , Uri lookupUri , int mode , String [ ] excludeMimes ) { Context actualContext = context ; while ( ( actualContext instanceof ContextWrapper ) && ! ( actualContext instanceof Activity ) ) { actualContext = ( ( ContextWrapper ) actualContext ) . getBaseContext ( ) ; } final int intentFlags = ( actualContext instanceof Activity ) ? Intent . FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET : Intent . FLAG_ACTIVITY_NEW_TASK | Intent . FLAG_ACTIVITY_CLEAR_TASK ; final Intent intent = new Intent ( ACTION_QUICK_CONTACT ) . addFlags ( intentFlags ) ; intent . setData ( lookupUri ) ; intent . setSourceBounds ( target ) ; intent . putExtra ( EXTRA_MODE , mode ) ; intent . putExtra ( EXTRA_EXCLUDE_MIMES , excludeMimes ) ; return intent ; }
void changeName ( String name ) throws RateLimitException , DiscordException , MissingPermissionsException ;
public List < TimestampedValue < OutputT > > peekOutputElementsInWindow ( TupleTag < OutputT > tag , BoundedWindow window ) { ImmutableList . Builder < TimestampedValue < OutputT > > valuesBuilder = ImmutableList . builder ( ) ; for ( WindowedValue < OutputT > value : getOutput ( tag ) ) { if ( value . getWindows ( ) . contains ( window ) ) { valuesBuilder . add ( TimestampedValue . of ( value . getValue ( ) , value . getTimestamp ( ) ) ) ; } } return valuesBuilder . build ( ) ; }
public void onSessionWriteTimeout ( GridNioSession ses ) throws IgniteCheckedException ;
public void clear ( ) { while ( pollFirst ( ) != null ) ; }
public int compare ( JavaScriptElement element1 , Element element2 ) { if ( element2 instanceof JavaScriptElement ) { return compare ( element1 , ( JavaScriptElement ) element2 ) ; } return - NUM_ ; }
int opus_custom_encode_float ( PointerByReference st , float pcm [ ] , int frame_size , ByteBuffer compressed , int maxCompressedBytes ) ;
public NumberUpSupported ( int lowerBound , int upperBound ) { super ( lowerBound , upperBound ) ; if ( lowerBound > upperBound ) { throw new IllegalArgumentException ( STR_ ) ; } else if ( lowerBound < NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } }
private void step1 ( DBIDRef id , WritableDBIDDataStore pi , WritableDoubleDataStore lambda ) { pi . put ( id , id ) ; }
protected void startActivityForResult ( Intent intent , int code ) { activity . startActivityForResult ( intent , code ) ; }
public String verify ( String sig , ByteBuffer data ) { exception = null ; for ( Map . Entry < String , PublicKey > entry : keys . entrySet ( ) ) { boolean verified ; try { verified = CryptoKeys . verify ( entry . getValue ( ) , Base64 . base64ToByteArray ( sig ) , data ) ; log . info ( STR_ , verified ) ; if ( verified ) return entry . getKey ( ) ; } catch ( Exception e ) { exception = e ; log . info ( STR_ ) ; } } return null ; }
private Object readResolve ( ) { return LazyHolder . INSTANCE ; }
public static Object moveObject ( Object fromObj , Object toObj , int numBytes , RVMClass type ) { return JavaHeader . moveObject ( fromObj , toObj , numBytes , type ) ; }
public abstract SQLiteDatabase openOrCreateDatabase ( String name , int mode , CursorFactory factory ) ;
public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostDropRate_ME_TO_SELF ( String skillname ) { return new SM_SYSTEM_MESSAGE ( NUM_ , skillname ) ; }
boolean isClosed ( ) ;
public IndexedImage ( int width , int height , int [ ] palette , byte [ ] data ) { super ( null ) ; this . width = width ; this . height = height ; this . palette = palette ; this . imageDataByte = data ; initOpaque ( ) ; }
public boolean canSetList ( ) { return filter . canSetList ( ) ; }
public DeleteRepositoryRequest name ( String name ) { this . name = name ; return this ; }
abstract void implCloseAll ( ) ;
public static void ValidateSessionExpiry ( DateTime sessionNotOnOrAfter , int clockTolerance ) throws ValidationException { try { log . info ( STR_ + clockTolerance ) ; Validate . isTrue ( clockTolerance >= NUM_ , STR_ ) ; Calendar currentDate = Calendar . getInstance ( ) ; TimeZone gmtTimeZone = TimeZone . getTimeZone ( STR_ ) ; currentDate . setTimeZone ( gmtTimeZone ) ; if ( sessionNotOnOrAfter != null ) { DateTime notOnOrAfter = sessionNotOnOrAfter . plusSeconds ( clockTolerance ) ; Validate . isTrue ( currentDate . getTime ( ) . before ( notOnOrAfter . toDate ( ) ) , STR_ + notOnOrAfter . toString ( ) ) ; } } catch ( IllegalArgumentException e ) { log . error ( Error . IDP_SESSION_EXPIRED , e ) ; throw new ValidationException ( e ) ; } }
public final void testSetPasswordVerificationPrefixWithStringParameter ( ) { String prefix = STR_ ; PasswordEditText passwordEditText = new PasswordEditText ( getContext ( ) ) ; passwordEditText . setPasswordVerificationPrefix ( prefix ) ; assertEquals ( prefix , passwordEditText . getPasswordVerificationPrefix ( ) ) ; }
public StorageEntity createStorageEntity ( String storageName , String storagePlatformCode , List < Attribute > attributes ) { StoragePlatformEntity storagePlatformEntity = storagePlatformDao . getStoragePlatformByName ( storagePlatformCode ) ; if ( storagePlatformEntity == null ) { storagePlatformEntity = storagePlatformDaoTestHelper . createStoragePlatformEntity ( storagePlatformCode ) ; } return createStorageEntity ( storageName , storagePlatformEntity , attributes ) ; }
private void addFilesParameter ( DaemonParameters parameters , String parameterName , String filePrefix , Map < String , String > files ) { StringBuilder propertiesJSON = new StringBuilder ( ) ; propertiesJSON . append ( STR_ ) ; int fileId = NUM_ ; for ( Map . Entry < String , String > entry : files . entrySet ( ) ) { String relativePath = entry . getKey ( ) ; String absolutePath = entry . getValue ( ) ; if ( fileId != NUM_ ) { propertiesJSON . append ( STR_ ) ; } propertiesJSON . append ( STR_ + relativePath + STR_ ) ; parameters . setFile ( filePrefix + fileId , absolutePath ) ; fileId ++ ; } propertiesJSON . append ( STR_ ) ; parameters . setParameter ( parameterName , propertiesJSON . toString ( ) ) ; }
public void removeSubjectStatement ( MemStatement st ) ;
public void sort ( ) { Arrays . sort ( _data , NUM_ , _pos ) ; }
public PendingState ( DownloadInfoRunnable downloadInfoRunnable ) { super ( downloadInfoRunnable ) ; }
public SymbolTableEntryInternal steFor_$makeInterface ( ) { return getSymbolTableEntryInternal ( STR_ , BOOL_ ) ; }
public static boolean isPrime ( int n ) { for ( int d = NUM_ ; d <= n / NUM_ ; d ++ ) { if ( n % d == NUM_ ) return BOOL_ ; } return BOOL_ ; }
default FloatColumn asPercent ( ) { FloatColumn pctColumn = new FloatColumn ( name ( ) + STR_ ) ; float total = sum ( ) ; for ( short next : this ) { if ( total != NUM_ ) { pctColumn . add ( ( ( float ) next / total ) * NUM_ ) ; } else { pctColumn . add ( FloatColumn . MISSING_VALUE ) ; } } return pctColumn ; }
protected void initialize ( ) { m_Filename = STR_ ; m_Title = STR_ ; m_CurrentCol = - NUM_ ; m_LastSearch = STR_ ; m_LastReplace = STR_ ; m_ShowAttributeIndex = BOOL_ ; m_Changed = BOOL_ ; m_ChangeListeners = new HashSet < ChangeListener > ( ) ; }
public SatelliteBase removeSatellite ( long satalliteId ) { SatelliteBase satallite = satallites . remove ( satalliteId ) ; tickingSatallites . remove ( satalliteId ) ; return satallite ; }
public void addNewEntry ( ) { ColourMapData data = new ColourMapData ( ) ; Expression quantity = ff . literal ( NUM_ ) ; if ( ! colourMapList . isEmpty ( ) ) { ColourMapData lastEntry = colourMapList . get ( colourMapList . size ( ) - NUM_ ) ; if ( lastEntry != null ) { quantity = lastEntry . getNextQuantity ( ) ; } } data . setColour ( ff . literal ( ColourUtils . createRandomColour ( ) ) ) ; data . setOpacity ( ff . literal ( DefaultSymbols . defaultColourOpacity ( ) ) ) ; data . setQuantity ( quantity ) ; colourMapList . add ( data ) ; this . fireTableDataChanged ( ) ; if ( parentObj != null ) { parentObj . colourMapUpdated ( ) ; } }
private static byte [ ] byteCopy ( byte [ ] source , int offset , int count , byte [ ] target ) { for ( int i = offset , j = NUM_ ; i < offset + count ; i ++ , j ++ ) { target [ j ] = source [ i ] ; } return target ; }
EventOccurrence ( final Action action , final ODEState newState , final double stopTime ) { this . action = action ; this . newState = newState ; this . stopTime = stopTime ; }
void withGroup ( Node node , boolean visualItems , Consumer cb ) { Consumer callback ; if ( visualItems ) { callback = null ; } else { callback = cb ; } Node proxy = getProxy ( node ) ; callback . accept ( proxy ) ; if ( groups . containsKey ( proxy ) ) { groups . get ( proxy ) . forEach ( callback ) ; } }
Event createEvent ( ) ;
void store ( ReferenceableInstance i ) throws RepositoryException { int pos = idPosMap . get ( i . getId ( ) ) ; typeNameList . set ( pos , i . getTypeName ( ) ) ; storeFields ( pos , i ) ; for ( HierarchicalTypeStore s : superTypeStores ) { s . store ( i ) ; } }
int opus_multistream_encode ( PointerByReference st , ShortBuffer pcm , int frame_size , ByteBuffer data , int max_data_bytes ) ;
public UnscheduleTimeEvent createUnscheduleTimeEvent ( ) { UnscheduleTimeEventImpl unscheduleTimeEvent = new UnscheduleTimeEventImpl ( ) ; return unscheduleTimeEvent ; }
public void zoomReset ( ) { if ( mFitZoom != null ) { mFitZoom . apply ( ) ; mZoomIn . notifyZoomResetListeners ( ) ; repaint ( ) ; } }
public void onNumberVerified ( final VerificationMethod verificationMethod ) { if ( ENABLED ) { track ( STR_ , mPropsGenerator . makeNumberVerifiedProps ( verificationMethod ) ) ; } }
public static IndexWriter createIndexWriter ( String indexPath , boolean create , AnalyzerType analyzer ) throws IOException { return createIndexWriter ( FSDirectory . open ( Paths . get ( indexPath ) ) , create , analyzer ) ; }
public Collection < IgniteTxEntry > optimisticLockEntries ( ) ;
public void onVersionValueFinishedUpdate ( ) ;
public ResponseListener ( ) throws IOException { super ( STR_ ) ; setDaemon ( BOOL_ ) ; serv = new ServerSocket ( NUM_ , NUM_ , InetAddress . getByName ( SystemInfo . singleton ( ) . network ( ) . getHostId ( ) ) ) ; }
public Object onMessage ( String id , Object data ) ;
private static void rdf_ParseTypeOtherPropertyElement ( ) throws XMPException { throw new XMPException ( STR_ , BADXMP ) ; }
public SQLDataMigrator configure ( Connection connection ) { this . connection = connection ; this . metadata = new SQLModel ( connection ) ; return this ; }
public static URL [ ] findClassPaths ( ) { List < URL > list = new ArrayList < URL > ( ) ; String classpath = System . getProperty ( STR_ ) ; StringTokenizer tokenizer = new StringTokenizer ( classpath , File . pathSeparator ) ; while ( tokenizer . hasMoreTokens ( ) ) { String path = tokenizer . nextToken ( ) ; File fp = new File ( path ) ; if ( ! fp . exists ( ) ) throw new RuntimeException ( STR_ + fp ) ; try { list . add ( fp . toURI ( ) . toURL ( ) ) ; } catch ( MalformedURLException e ) { throw new RuntimeException ( e ) ; } } return list . toArray ( new URL [ list . size ( ) ] ) ; }
public void expandTree ( ) { _bugTree . getTreeHelper ( ) . expandTree ( NUM_ ) ; }
private void processStart ( final State current ) { if ( current . isSelfProgressionDisabled ) { ServiceUtils . logInfo ( this , STR_ ) ; return ; } try { if ( ! isFinalStage ( current ) && current . nextPageLink == null ) { Operation queryIpLeasePagination = Operation . createPost ( UriUtils . buildUri ( getHost ( ) , ServiceUriPaths . CORE_LOCAL_QUERY_TASKS ) ) . setBody ( buildIpLeaseQuery ( current ) ) ; queryIpLeasePagination . setCompletion ( ( null ) ) . sendWith ( this ) ; } else { sendStageProgressPatch ( current ) ; } } catch ( Throwable e ) { failTask ( e ) ; } }
public Operation < Owner > isNotNull ( ) ;
public int hashCode ( ) { int hashcode = NUM_ ; for ( int i = NUM_ ; i < m_size ; ++ i ) { int idx = i + NUM_ ; int code = idx * m_names [ i ] . hashCode ( ) ; code ^= idx * m_types [ i ] . hashCode ( ) ; if ( m_dflts [ i ] != null ) code ^= m_dflts [ i ] . hashCode ( ) ; hashcode ^= code ; } return hashcode ; }
public int count ( ) { return dict . size ( ) ; }
public int platformId ( ) { return this . cmapId ( ) . platformId ( ) ; }
public CZoomSourceAction ( final ZyGraph graph , final NaviEdge edge ) { super ( STR_ ) ; Preconditions . checkNotNull ( graph , STR_ ) ; Preconditions . checkNotNull ( edge , STR_ ) ; m_graph = graph ; m_edge = edge ; }
synchronized void receive ( byte b [ ] , int off , int len ) throws IOException { checkStateForReceive ( ) ; writeSide = Thread . currentThread ( ) ; int bytesToTransfer = len ; while ( bytesToTransfer > NUM_ ) { if ( in == out ) awaitSpace ( ) ; int nextTransferAmount = NUM_ ; if ( out < in ) { nextTransferAmount = buffer . length - in ; } else if ( in < out ) { if ( in == - NUM_ ) { in = out = NUM_ ; nextTransferAmount = buffer . length - in ; } else { nextTransferAmount = out - in ; } } if ( nextTransferAmount > bytesToTransfer ) nextTransferAmount = bytesToTransfer ; assert ( nextTransferAmount > NUM_ ) ; System . arraycopy ( b , off , buffer , in , nextTransferAmount ) ; bytesToTransfer -= nextTransferAmount ; off += nextTransferAmount ; in += nextTransferAmount ; if ( in >= buffer . length ) { in = NUM_ ; } } }
public JSONArray ( Object array ) throws JSONException { this ( ) ; if ( array . getClass ( ) . isArray ( ) ) { int length = Array . getLength ( array ) ; for ( int i = NUM_ ; i < length ; i += NUM_ ) { this . put ( JSONObject . wrap ( Array . get ( array , i ) ) ) ; } } else { throw new JSONException ( STR_ ) ; } }
public static boolean referenceEquals ( Object x , Object y ) { return x == y ; }
public Gender gender ( ) { return gender ; }
public void onImageChosen ( RTImage image ) ;
public static int schemaVersion ( final byte versionByte ) { return NIBBLE_MASK & ( versionByte > > > NIBBLE_BITS ) ; }
public SkullMetaBuilder start ( final SkullMeta meta ) { return new SkullMetaBuilder ( meta ) ; }
public AbstractMethodDeclaration_ createAbstractMethodDeclaration_ ( ) { AbstractMethodDeclaration_Impl abstractMethodDeclaration_ = new AbstractMethodDeclaration_Impl ( ) ; return abstractMethodDeclaration_ ; }
public void testSendReceive ( ) throws Throwable { Properties properties = new Properties ( ) ; NettyOptions nettyProperties = new NettyOptions ( properties ) ; Transport transport = new NettyTransport ( nettyProperties ) ; Server server = transport . server ( ) ; Client client = transport . client ( ) ; ThreadContext context = new SingleThreadContext ( STR_ , new Serializer ( ) ) ; context . executor ( ) . execute ( null ) ; await ( NUM_ ) ; context . executor ( ) . execute ( null ) ; await ( NUM_ ) ; context . executor ( ) . execute ( null ) ; await ( NUM_ , NUM_ ) ; }
public void newArray ( final Type type ) { int typ ; switch ( type . getSort ( ) ) { case Type . BOOLEAN : typ = Opcodes . T_BOOLEAN ; break ; case Type . CHAR : typ = Opcodes . T_CHAR ; break ; case Type . BYTE : typ = Opcodes . T_BYTE ; break ; case Type . SHORT : typ = Opcodes . T_SHORT ; break ; case Type . INT : typ = Opcodes . T_INT ; break ; case Type . FLOAT : typ = Opcodes . T_FLOAT ; break ; case Type . LONG : typ = Opcodes . T_LONG ; break ; case Type . DOUBLE : typ = Opcodes . T_DOUBLE ; break ; default : typeInsn ( Opcodes . ANEWARRAY , type ) ; return ; } mv . visitIntInsn ( Opcodes . NEWARRAY , typ ) ; }
public static int min ( int a , int b , int c ) { int mi ; mi = a ; if ( b < mi ) { mi = b ; } if ( c < mi ) { mi = c ; } return mi ; }
public ConnectionHandler ( Socket socket ) { super ( STR_ ) ; this . socket = socket ; }
public Object clone ( ) { HTMLEditorKit o = ( HTMLEditorKit ) super . clone ( ) ; if ( o != null ) { o . input = null ; o . linkHandler = new LinkController ( ) ; } return o ; }
Rectangle2D area ( ) ;
public synchronized void close ( ) { if ( mode != null ) { if ( mode == AccessMode . read ) { if ( dataInput != null ) { dataInput . close ( ) ; dataInput = null ; } } else if ( mode == AccessMode . write ) { if ( dataOutput != null ) { if ( logFlushTask != null ) logFlushTask . removeLogFile ( this ) ; dataOutput . close ( ) ; dataOutput = null ; } } mode = null ; } }
public static native boolean embeddedDispose ( ) ;
void onConsumeMultiFinished ( List < Purchase > purchases , List < IabResult > results ) ;
public RestClient ( String target , CloseableHttpAsyncClient asyncClient ) { if ( null == asyncClient ) { throw new IllegalArgumentException ( STR_ ) ; } if ( null == target ) { throw new IllegalArgumentException ( STR_ ) ; } this . target = target ; this . asyncClient = asyncClient ; }
public void clearCoRoutine ( ) { clearCoRoutine ( BOOL_ ) ; }
private static void sqlQuery ( ) { IgniteCache < AffinityKey < Long > , Person > cache = Ignition . ignite ( ) . cache ( PERSON_CACHE ) ; String sql = STR_ ; print ( STR_ , cache . query ( new SqlQuery < AffinityKey < Long > , Person > ( Person . class , sql ) . setArgs ( NUM_ , NUM_ ) ) . getAll ( ) ) ; print ( STR_ , cache . query ( new SqlQuery < AffinityKey < Long > , Person > ( Person . class , sql ) . setArgs ( NUM_ , NUM_ ) ) . getAll ( ) ) ; }
void tabClosureCommitted ( Tab tab ) ;
private boolean forceSettleCapturedViewAt ( int finalLeft , int finalTop , int xvel , int yvel ) { final int startLeft = mCapturedView . getLeft ( ) ; final int startTop = mCapturedView . getTop ( ) ; final int dx = finalLeft - startLeft ; final int dy = finalTop - startTop ; if ( dx == NUM_ && dy == NUM_ ) { mScroller . abortAnimation ( ) ; setDragState ( STATE_IDLE ) ; return BOOL_ ; } final int duration = computeSettleDuration ( mCapturedView , dx , dy , xvel , yvel ) ; mScroller . startScroll ( startLeft , startTop , dx , dy , duration ) ; setDragState ( STATE_SETTLING ) ; return BOOL_ ; }
boolean representsSameNode ( BrowserNodeInfo node ) ;
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( characterdatasubstringvalue . class , args ) ; }
public boolean accept ( File file ) { return accept ( file . getParentFile ( ) , file . getName ( ) ) ; }
private void invalidPassphrase ( ) { TextView verifying = ( TextView ) getDialog ( ) . findViewById ( R . id . verifying ) ; verifying . setText ( R . string . sync_passphrase_incorrect ) ; }
public static void printInfo ( String title , String infoString ) { if ( infoString == null ) { System . out . println ( STR_ ) ; return ; } String [ ] outerParts = infoString . split ( STR_ ) ; System . out . println ( title ) ; for ( String s : outerParts ) { String [ ] innerParts = s . split ( STR_ ) ; for ( String parts : innerParts ) { System . out . println ( STR_ + parts ) ; } System . out . println ( ) ; } }
public void remove ( AbstractButton b ) { if ( b == null ) { return ; } buttons . removeElement ( b ) ; if ( b . getModel ( ) == selection ) { selection = null ; } b . getModel ( ) . setGroup ( null ) ; }
public Dialog canceledOnTouchOutside ( boolean cancel ) { super . setCanceledOnTouchOutside ( cancel ) ; mCanceledOnTouchOutside = cancel ; return this ; }
public void runTest ( ) throws Throwable { Document doc ; Document ownerDoc ; DOMImplementation domImpl ; DocumentType docType ; String nullID = null ; doc = ( Document ) load ( STR_ , BOOL_ ) ; domImpl = doc . getImplementation ( ) ; docType = domImpl . createDocumentType ( STR_ , nullID , nullID ) ; ownerDoc = docType . getOwnerDocument ( ) ; assertNull ( STR_ , ownerDoc ) ; }
public OrderPositionSplit ( U position , Integer sId ) { Assert . notNull ( position ) ; Assert . notNull ( sId ) ; this . splitId = new OrderPositionSplitKey ( position , sId ) ; this . priority = position . getPriority ( ) ; }
public int countTokens ( ) { int count = NUM_ ; boolean inToken = BOOL_ ; for ( int i = position , length = string . length ( ) ; i < length ; i ++ ) { if ( delimiters . indexOf ( string . charAt ( i ) , NUM_ ) >= NUM_ ) { if ( returnDelimiters ) count ++ ; if ( inToken ) { count ++ ; inToken = BOOL_ ; } } else { inToken = BOOL_ ; } } if ( inToken ) count ++ ; return count ; }
public static < T > Response fromFoResponse ( FoResponse < T > foResponse , ContainerRequestContext context ) { if ( ! foResponse . isSuccessful ( ) && FEC_NOT_LOGIN_YET . equals ( foResponse . getErr ( ) . getErrorCode ( ) ) ) { return buildNotLoginRestResponse ( context ) ; } return fromFoResponse ( foResponse , FO_SC_BIZ_ERROR ) ; }
public void sendReplEvent ( ReplEvent event , boolean forceSend ) throws IOException { if ( buffering ) { buffer . add ( event ) ; if ( forceSend || buffer . size ( ) >= bufferSize ) { writeMessage ( new ProtocolMessage ( buffer ) ) ; buffer . clear ( ) ; } } else { writeMessage ( new ProtocolReplEvent ( event ) ) ; } }
public MyHashSet ( int initialCapacity ) { this ( initialCapacity , DEFAULT_MAX_LOAD_FACTOR ) ; }
static public boolean isTypePrimitive ( String fieldSig ) { char c = fieldSig . charAt ( NUM_ ) ; return ( c != STR_ ) ; }
public int add ( byte [ ] a ) ;
public abstract boolean isFlushAndClose ( ) ;
int iterIntValue ( int iter ) ;
void readBytes ( ChannelHandlerContext ctx , ByteBuf bytes ) ;
public boolean isCollapsed ( final int position ) { return currentExpandedItem != position ; }
public SQLSyntaxErrorException ( String reason , Throwable cause ) { super ( reason , cause ) ; }
public Dialog actionBackground ( int id ) { positiveActionBackground ( id ) ; negativeActionBackground ( id ) ; neutralActionBackground ( id ) ; return this ; }
public void addAnnotation ( Class < ? > ann , URI type ) throws ObjectStoreConfigException { if ( ann . getDeclaredMethods ( ) . length != NUM_ ) throw new ObjectStoreConfigException ( STR_ + ann ) ; addAnnotation ( ann . getDeclaredMethods ( ) [ NUM_ ] , type ) ; }
private String addSelectionArgs ( String selection , String [ ] selectionArgs , String operation ) { if ( selection == null || selectionArgs == null ) return null ; else { String selectionResult = STR_ ; for ( int i = NUM_ ; i < selectionArgs . length - NUM_ ; ++ i ) selectionResult += ( selection + STR_ + operation + STR_ ) ; selectionResult += ( selection + STR_ ) ; Log . d ( TAG , STR_ + selectionResult + STR_ ) ; for ( String args : selectionArgs ) Log . d ( TAG , args + STR_ ) ; return selectionResult ; } }
long size ( ) throws StorageException ;
public final void entityReference ( String name ) throws org . xml . sax . SAXException { try { final java . io . Writer writer = m_writer ; writer . write ( STR_ ) ; writer . write ( name ) ; writer . write ( STR_ ) ; } catch ( IOException e ) { throw new SAXException ( e ) ; } }
public static InjectorBuilder newManager ( ClassLoader classLoader ) { return ServiceManagerProvider . current ( ) . injectManager ( classLoader ) ; }
protected static String canonicalizePrefix ( String prefix ) { prefix = prefix . replace ( STR_ , STR_ ) ; if ( prefix . length ( ) > NUM_ && ! prefix . endsWith ( STR_ ) ) { prefix += STR_ ; } return prefix ; }
protected void check ( String name ) throws Exception { String [ ] params = { name } ; String [ ] signature = { STR_ } ; mBeanServer . invoke ( oname , STR_ , params , signature ) ; }
public float norm2 ( ) { float norm = NUM_ ; for ( int i = NUM_ ; i < length ; i ++ ) { norm += get ( i ) * get ( i ) ; } return ( float ) Math . sqrt ( norm ) ; }
private void validateOrderByAttribute ( String attributeName ) { if ( ( ! nameToAggregateAttributeMap . containsKey ( attributeName ) ) && ( ! nameToGroupByAttributeMap . containsKey ( attributeName ) ) ) { throw new MithraBusinessException ( STR_ + attributeName + STR_ + STR_ ) ; } }
int countByExample ( PassresetExample example ) ;
public static boolean isValidInet4Address ( String inet4Address ) { String [ ] groups = match ( inet4Address ) ; if ( groups == null ) { return BOOL_ ; } for ( String ipSegment : groups ) { if ( ipSegment == null || ipSegment . length ( ) == NUM_ ) { return BOOL_ ; } int iIpSegment ; try { iIpSegment = Integer . parseInt ( ipSegment ) ; } catch ( NumberFormatException e ) { return BOOL_ ; } if ( iIpSegment > IPV4_MAX_OCTET_VALUE ) { return BOOL_ ; } if ( ipSegment . length ( ) > NUM_ && ipSegment . startsWith ( STR_ ) ) { return BOOL_ ; } } return BOOL_ ; }
public static SM_SYSTEM_MESSAGE STR_MSG_CONNECTION_STATUS ( String value0 ) { return new SM_SYSTEM_MESSAGE ( NUM_ , value0 ) ; }
public static boolean isAlpha ( char a ) { return ( ( a >= STR_ && a <= STR_ ) || ( a >= STR_ && a <= STR_ ) ) ; }
public void onEdgeDragStarted ( int edgeFlags , int pointerId ) { }
private int createOverflowBucket ( ) throws IOException { long offset = nioFile . size ( ) ; writeEmptyBuckets ( offset , NUM_ ) ; return ( int ) ( ( offset - HEADER_LENGTH ) / recordSize ) - bucketCount + NUM_ ; }
public void sendError ( String message ) throws IOException { if ( buffering && buffer . size ( ) > NUM_ ) { writeMessage ( new ProtocolMessage ( buffer ) ) ; buffer . clear ( ) ; } writeMessage ( new ProtocolNOK ( message ) ) ; }
public void close ( ) { _ncGuards = null ; }
public void startCanceler ( ) ;
void onCancelButtonClicked ( ) ;
private void init ( final int size , final int dict_size , final Random r ) { if ( size <= NUM_ ) { throw new InvalidParameterException ( STR_ ) ; } if ( dict_size <= NUM_ ) { throw new InvalidParameterException ( STR_ ) ; } if ( dict_size > ( Long . MAX_VALUE - dict_size ) / dict_size ) { throw new InvalidParameterException ( STR_ + STR_ ) ; } this . dict_size = dict_size ; this . n = size ; hash_coefs = new long [ n ] [ NUM_ ] ; for ( int i = NUM_ ; i < n ; i ++ ) { hash_coefs [ i ] [ NUM_ ] = r . nextInt ( dict_size ) ; hash_coefs [ i ] [ NUM_ ] = r . nextInt ( dict_size ) ; } }
public Builder addPart ( Map < String , List < String > > headers , RequestBody body ) { return addPart ( Part . create ( headers , body ) ) ; }
public static boolean implementsZeroArgMethod ( ClassNode classNode , String methodName ) { return implementsMethod ( classNode , methodName , new Class [ NUM_ ] ) ; }
public static boolean isXML11NCName ( int c ) { return ( c < NUM_ && ( XML11CHARS [ c ] & MASK_XML11_NCNAME ) != NUM_ ) || ( NUM_ <= c && c < NUM_ ) ; }
public static double [ ] [ ] align ( int [ ] real , double [ ] pred ) { int missing = numberOfMissingLabels ( real ) ; double [ ] _real = new double [ real . length - missing ] ; double [ ] _pred = new double [ real . length - missing ] ; int offset = NUM_ ; for ( int i = NUM_ ; i < real . length ; i ++ ) { if ( real [ i ] == - NUM_ || pred [ i ] == - NUM_ || Double . isNaN ( pred [ i ] ) ) { offset ++ ; continue ; } _real [ i - offset ] = real [ i ] ; _pred [ i - offset ] = pred [ i ] ; } double [ ] [ ] res = new double [ NUM_ ] [ NUM_ ] ; res [ NUM_ ] = _real ; res [ NUM_ ] = _pred ; return res ; }
public abstract boolean hasExtensions ( ) ;
public Enumeration < V > elements ( ) { return new ValueIterator ( ) ; }
public void addColumns ( int colsToAdd ) { addColumns ( colsToAdd , getDefaultValue ( ) ) ; }
public void addIntoRetries ( AnalyticJob job ) ;
public Object clone ( ) throws CloneNotSupportedException ;
public void removeChangeListener ( RendererChangeListener listener ) ;
public static void clear ( Color color ) { offscreen . setColor ( color ) ; offscreen . fillRect ( NUM_ , NUM_ , width , height ) ; offscreen . setColor ( penColor ) ; draw ( ) ; }
public Shape createScrollCap ( int x , int y , int w , int h ) { path . reset ( ) ; path . moveTo ( x , y ) ; path . lineTo ( x , y + h ) ; path . lineTo ( x + w , y + h ) ; addScrollGapPath ( x , y , w , h , BOOL_ ) ; path . closePath ( ) ; return path ; }
private void logSlowRequests ( long requestLifetime , Request < ? > request , byte [ ] responseContents , StatusLine statusLine ) { if ( DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS ) { VolleyLog . d ( STR_ + STR_ , request , requestLifetime , responseContents != null ? responseContents . length : STR_ , statusLine . getStatusCode ( ) , request . getRetryPolicy ( ) . getCurrentRetryCount ( ) ) ; } }
public boolean isStatic ( ) { return invokeKind ( ) == InvokeKind . Static ; }
public final void cancel ( ) { if ( mIsFinished || mCancelled ) { return ; } mCancelled = BOOL_ ; if ( mAnimationListener != null ) { mAnimationListener . onCancel ( ) ; } }
public static Type newType ( AST ast , VariableDeclaration declaration ) { return newType ( ast , declaration , null , null ) ; }
protected void addTextEditor ( ) { String newLabel = JOptionPane . showInputDialog ( this , Bundle . getMessage ( STR_ ) ) ; if ( newLabel == null ) { return ; } PositionableLabel l = addLabel ( newLabel ) ; l . setPositionable ( BOOL_ ) ; }
public void append ( int key , E value ) { if ( mSize != NUM_ && key <= mKeys [ mSize - NUM_ ] ) { put ( key , value ) ; return ; } if ( mGarbage && mSize >= mKeys . length ) { gc ( ) ; } int pos = mSize ; if ( pos >= mKeys . length ) { int n = ContainerHelpers . idealIntArraySize ( pos + NUM_ ) ; int [ ] nkeys = new int [ n ] ; Object [ ] nvalues = new Object [ n ] ; System . arraycopy ( mKeys , NUM_ , nkeys , NUM_ , mKeys . length ) ; System . arraycopy ( mValues , NUM_ , nvalues , NUM_ , mValues . length ) ; mKeys = nkeys ; mValues = nvalues ; } mKeys [ pos ] = key ; mValues [ pos ] = value ; mSize = pos + NUM_ ; }
public boolean isDistinct ( ) { return distinct ; }
public static Event35Id . Builder newBuilder ( Event35Id other ) { return new Event35Id . Builder ( other ) ; }
public boolean isOnRootFragment ( ) { return mState . fragmentTagStack . size ( ) == mConfig . minStackSize ; }
public Vertex applyEQUAL ( List < Relationship > arguments , Map < Vertex , Vertex > variables , Network network ) { Vertex left = arguments . get ( NUM_ ) . getTarget ( ) . applyQuotient ( variables , network ) ; Vertex right = arguments . get ( NUM_ ) . getTarget ( ) . applyQuotient ( variables , network ) ; if ( left . equals ( right ) ) { return network . createVertex ( Primitive . TRUE ) ; } else { return network . createVertex ( Primitive . FALSE ) ; } }
long minLength ( ) ;
public void skipHDU ( ) throws FitsException , IOException { if ( this . atEOF ) { return ; } else { Header hdr = new Header ( this . dataStr ) ; int dataSize = ( int ) hdr . getDataSize ( ) ; this . dataStr . skipAllBytes ( dataSize ) ; if ( this . dataStr instanceof RandomAccess ) { this . lastFileOffset = ( ( RandomAccess ) this . dataStr ) . getFilePointer ( ) ; } } }
public static int remainder ( int dividend , int divisor ) { return ( int ) ( toLong ( dividend ) % toLong ( divisor ) ) ; }
public String put ( String key , String value , boolean percentEncode ) { SortedSet < String > values = wrappedMap . get ( key ) ; if ( values == null ) { values = new TreeSet < String > ( ) ; wrappedMap . put ( percentEncode ? OAuth . percentEncode ( key ) : key , values ) ; } if ( value != null ) { value = percentEncode ? OAuth . percentEncode ( value ) : value ; values . add ( value ) ; } return value ; }
public static TestSuite suite ( ) throws Exception { Class testClass = ClassLoader . getSystemClassLoader ( ) . loadClass ( STR_ ) ; Constructor testConstructor = testClass . getConstructor ( new Class [ ] { DOMTestDocumentBuilderFactory . class } ) ; DOMTestDocumentBuilderFactory factory = new LSDocumentBuilderFactory ( JAXPDOMTestDocumentBuilderFactory . getConfiguration1 ( ) ) ; Object test = testConstructor . newInstance ( new Object [ ] { factory } ) ; return new JUnitTestSuiteAdapter ( ( DOMTestSuite ) test ) ; }
public boolean isScrollingWhileRefreshingEnabled ( ) ;
public static Color flashColor ( ) { return info ( ) . flashColor ; }
public void updateBlockStates ( ) { for ( BlockState state : blockStateMap . values ( ) ) { state . update ( BOOL_ ) ; } blockStateMap . clear ( ) ; }
private byte [ ] encrypt ( final byte [ ] bytes ) throws IOException { try { return this . create ( Cipher . ENCRYPT_MODE ) . doFinal ( bytes ) ; } catch ( final BadPaddingException ex ) { throw new IOException ( ex ) ; } catch ( final IllegalBlockSizeException ex ) { throw new IOException ( ex ) ; } }
public static Short valueOf ( String string , int radix ) throws NumberFormatException { return valueOf ( parseShort ( string , radix ) ) ; }
public static XmlOrderedResult ordered ( ) { return new XmlOrderedResult ( BOOL_ , STR_ ) ; }
public void changeUpDown ( float radians ) { if ( ! enabled ) { return ; } Pointing pointing = model . getPointing ( ) ; GeocentricCoordinates pointingXyz = pointing . getLineOfSight ( ) ; GeocentricCoordinates topXyz = pointing . getPerpendicular ( ) ; Vector3 deltaXyz = Geometry . scaleVector ( topXyz , - radians ) ; Vector3 newPointingXyz = Geometry . addVectors ( pointingXyz , deltaXyz ) ; newPointingXyz . normalize ( ) ; Vector3 deltaUpXyz = Geometry . scaleVector ( pointingXyz , radians ) ; Vector3 newUpXyz = Geometry . addVectors ( topXyz , deltaUpXyz ) ; newUpXyz . normalize ( ) ; model . setPointing ( newPointingXyz , newUpXyz ) ; }
int deleteByPrimaryKey ( Long id ) ;
ProtocolVersion parseProtocolVersion ( CharArrayBuffer buffer , ParserCursor cursor ) throws ParseException ;
public String buildSentence ( ) { String sentence = STR_ ; sentence = String . format ( STR_ , subjectService . getWord ( ) . getString ( ) , verbService . getWord ( ) . getString ( ) , articleService . getWord ( ) . getString ( ) , adjectiveService . getWord ( ) . getString ( ) , nounService . getWord ( ) . getString ( ) ) ; return sentence ; }
public boolean contains ( T obj ) { throw new RuntimeException ( STR_ ) ; }
public static ClusterStateRequest clusterStateRequest ( ) { return new ClusterStateRequest ( ) ; }
public boolean hasIncomingStreamInstances ( ) { if ( m_listenees . size ( ) == NUM_ ) { return BOOL_ ; } if ( m_listenees . containsKey ( STR_ ) ) { return BOOL_ ; } return BOOL_ ; }
private Object [ ] inliningContext ( ) { if ( ! Debug . isDumpEnabled ( Debug . INFO_LOG_LEVEL ) ) { return NO_CONTEXT ; } Object [ ] result = new Object [ graphQueue . size ( ) ] ; int i = NUM_ ; for ( CallsiteHolder g : graphQueue ) { result [ i ++ ] = g . method ( ) ; } return result ; }
public void subscribeToResellerServiceTerminate ( ) throws Exception { VendorData supplierData = setupNewSupplier ( STR_ ) ; setDateFactory ( STR_ ) ; VOServiceDetails supplService = createPublishActivateService ( supplierData , TestPriceModel . EXAMPLE_RATA_WEEK_ROLES , STR_ ) ; updateOperatorRevenueShare ( NUM_ , supplService . getKey ( ) ) ; updatePartnerRevenueShares ( NUM_ , NUM_ , supplService ) ; VendorData resellerData = setupNewReseller ( STR_ ) ; setCutOffDay ( resellerData . getAdminKey ( ) , NUM_ ) ; CustomerData resellerCustomerData = registerCustomer ( resellerData , STR_ ) ; updateMarketplaceRevenueShare ( NUM_ , resellerData . getMarketplaceId ( NUM_ ) ) ; VOServiceDetails resellerService = grantResalePermission ( supplierData , supplService , resellerData ) ; resellerService = publishActivateService ( resellerData , resellerService ) ; VOSubscriptionDetails resellerSub = subscribe ( resellerCustomerData . getAdminUser ( ) , STR_ , resellerService , STR_ , STR_ ) ; unsubscribe ( resellerCustomerData . getAdminKey ( ) , resellerSub . getSubscriptionId ( ) , STR_ ) ; resetCutOffDay ( resellerData . getAdminKey ( ) ) ; cacheTestData ( STR_ , new TestData ( supplierData , resellerData ) ) ; }
protected void adjustIcons ( JDesktopPane desktop ) { JInternalFrame . JDesktopIcon icon = new JInternalFrame . JDesktopIcon ( new JInternalFrame ( ) ) ; Dimension iconSize = icon . getPreferredSize ( ) ; iconWidth = iconSize . width ; iconHeight = iconSize . height ; JInternalFrame [ ] frames = desktop . getAllFrames ( ) ; for ( int i = NUM_ ; i < frames . length ; i ++ ) { icon = frames [ i ] . getDesktopIcon ( ) ; Point ip = icon . getLocation ( ) ; adjustBoundsForIcon ( icon , ip . x , ip . y ) ; } }
public static < E > String serialize ( Map < String , E > map , Class < E > jsonObjectClass ) throws IOException { return mapperFor ( jsonObjectClass ) . serialize ( map ) ; }
public void testOnServerHealthy_reloadsUsersIfNotAvailable ( ) { when ( mTroubleshooter . isServerHealthy ( ) ) . thenReturn ( BOOL_ ) ; mController . init ( ) ; when ( mTroubleshooter . isServerHealthy ( ) ) . thenReturn ( BOOL_ ) ; mFakeEventBus . post ( new TroubleshootingActionsChangedEvent ( ImmutableSet . of ( TroubleshootingAction . CHECK_PACKAGE_SERVER_CONFIGURATION ) , null ) ) ; verify ( mMockUserManager , times ( NUM_ ) ) . loadKnownUsers ( ) ; }
public boolean isAccessibleSelected ( int r , int c ) { return JTable . this . isCellSelected ( r , c ) ; }
boolean onCheckGroupCanStartDrag ( GVH holder , int groupPosition , int x , int y ) ;
public LocatorProxy ( XMLLocator locator ) { fLocator = locator ; }
private void drawCenterRect ( Canvas canvas ) { int center = getHeight ( ) / NUM_ ; int offset = ( int ) ( getItemHeight ( ) / NUM_ * NUM_ ) ; Paint paint = new Paint ( ) ; paint . setColor ( getResources ( ) . getColor ( R . color . province_line_border ) ) ; paint . setStrokeWidth ( ( float ) NUM_ ) ; canvas . drawLine ( NUM_ , center - offset , getWidth ( ) , center - offset , paint ) ; canvas . drawLine ( NUM_ , center + offset , getWidth ( ) , center + offset , paint ) ; }
private String buildPermanentPresenceInfoDocument ( PresenceInfo info ) { String document = new StringBuilder ( STR_ ) . append ( UTF8_STR ) . append ( STR_ ) . append ( SipUtils . CRLF ) . append ( STR_ ) . append ( STR_ ) . append ( STR_ ) . append ( STR_ ) . append ( STR_ ) . append ( STR_ ) . append ( STR_ ) . append ( ImsModule . getImsUserProfile ( ) . getPublicUri ( ) ) . append ( STR_ ) . append ( SipUtils . CRLF ) . toString ( ) ; String timestamp = DateUtils . encodeDate ( info . getTimestamp ( ) ) ; document += STR_ + SipUtils . CRLF + buildPersonInfo ( info ) + STR_ + timestamp + STR_ + SipUtils . CRLF + STR_ + SipUtils . CRLF ; document += STR_ + SipUtils . CRLF ; return document ; }
public void create ( SSOToken token , String objName , Map attributes ) throws SMSException , SSOException { try { Object [ ] objs = { token . getTokenID ( ) . toString ( ) , objName , attributes } ; client . send ( client . encodeMessage ( STR_ , objs ) , sessionCookies . getLBCookie ( token . getTokenID ( ) . toString ( ) ) , null ) ; } catch ( SSOException ssoe ) { throw ssoe ; } catch ( SMSException smse ) { throw smse ; } catch ( Exception re ) { debug . error ( STR_ , re ) ; throw ( new SMSException ( re , STR_ ) ) ; } }
public Socket createSocket ( InetAddress address , int port , InetAddress myAddress , int myPort ) throws IOException { if ( myAddress != null ) { Socket sock = new Socket ( ) ; sock . bind ( new InetSocketAddress ( myAddress , NUM_ ) ) ; try { sock . connect ( new InetSocketAddress ( address , port ) , NUM_ ) ; } catch ( SocketTimeoutException e ) { throw new ConnectException ( STR_ + address + STR_ + port ) ; } return sock ; } else { Socket sock = new Socket ( ) ; if ( myPort != NUM_ ) { sock . bind ( new InetSocketAddress ( port ) ) ; } try { sock . connect ( new InetSocketAddress ( address , port ) , NUM_ ) ; } catch ( SocketTimeoutException e ) { throw new ConnectException ( STR_ + address + STR_ + port ) ; } return sock ; } }
public NotYetBoundException ( ) { }
public static int clamp ( int n , int min , int max ) { if ( n < min ) return min ; if ( n > max ) return max ; return n ; }
public Conversation ( Plugin plugin , Conversable forWhom , Prompt firstPrompt ) { this ( plugin , forWhom , firstPrompt , new HashMap < Object , Object > ( ) ) ; }
public static List < Alert > findByLimitOffsetStatus ( EntityManager em , int limit , int offset , boolean enabled ) { requireArgument ( em != null , STR_ ) ; TypedQuery < Alert > query = em . createNamedQuery ( STR_ , Alert . class ) ; query . setHint ( STR_ , STR_ ) ; try { query . setParameter ( STR_ , enabled ) ; query . setFirstResult ( offset ) ; query . setMaxResults ( limit ) ; return query . getResultList ( ) ; } catch ( NoResultException ex ) { return new ArrayList < > ( NUM_ ) ; } }
public void addMember ( Canvas component ) { JavaScriptObject componentJS = component . getOrCreateJsObj ( ) ; if ( isCreated ( ) ) { addMemberPostCreate ( componentJS ) ; } else { addMemberPreCreate ( componentJS ) ; } }
public DoublePointer ( double ... array ) { this ( array . length ) ; put ( array ) ; }
public void forwardEvent ( EventType eventType , Object data ) { dispatch ( new AppEvent ( eventType , data ) ) ; }
public Session ( final Socket socket , final SSLSocket secureSocket ) throws IOException { super ( STR_ + socket . getLocalSocketAddress ( ) + STR_ + socket . getRemoteSocketAddress ( ) ) ; if ( logger . isTraceEnabled ( ) ) { logger . trace ( STR_ , socket . getLocalSocketAddress ( ) , socket . getRemoteSocketAddress ( ) , stackTraceToSingleLineString ( new Exception ( ) ) ) ; } this . plainSocket = socket ; this . secureSocket = secureSocket ; this . plainInput = plainSocket . getInputStream ( ) ; this . plainOutput = plainSocket . getOutputStream ( ) ; this . input = new BufferedInputStream ( secureSocket . getInputStream ( ) ) ; this . output = new BufferedOutputStream ( secureSocket . getOutputStream ( ) ) ; this . readableRemoteAddress = plainSocket . getRemoteSocketAddress ( ) . toString ( ) ; this . remoteAddress = new HostPort ( plainSocket . getInetAddress ( ) . getHostAddress ( ) , plainSocket . getPort ( ) ) ; this . localUrl = new HostPort ( plainSocket . getLocalAddress ( ) . getHostName ( ) , plainSocket . getLocalPort ( ) ) ; }
public byte [ ] generate160BitHashId ( ) throws CryptoException { try { DERBitString publicKeyBitString = encodePublicKeyAsBitString ( publicKey ) ; return DigestUtil . getMessageDigest ( publicKeyBitString . getBytes ( ) , DigestType . SHA1 ) ; } catch ( IOException ex ) { throw new CryptoException ( res . getString ( STR_ ) , ex ) ; } }
static boolean isConfigurationAcceptable ( ReplicationDomainCfg configuration , List < LocalizableMessage > unacceptableReasons ) { final DN dn = configuration . getBaseDN ( ) ; LDAPReplicationDomain domain = MultimasterReplication . findDomain ( dn , null ) ; if ( domain != null && domain . getBaseDN ( ) . equals ( dn ) ) { unacceptableReasons . add ( ERR_SYNC_INVALID_DN . get ( ) ) ; return BOOL_ ; } if ( DirectoryServer . getBackend ( dn ) == null ) { unacceptableReasons . add ( ERR_UNKNOWN_DN . get ( dn ) ) ; return BOOL_ ; } try { isFractionalConfigAcceptable ( configuration ) ; } catch ( ConfigException e ) { unacceptableReasons . add ( e . getMessageObject ( ) ) ; return BOOL_ ; } return BOOL_ ; }
public boolean isMinimized ( ) { return this . minimized ; }
protected static boolean isTypeMatched ( CompositeType type1 , CompositeType type2 ) { if ( type1 == type2 ) return BOOL_ ; Set < String > allItems = type1 . keySet ( ) ; if ( ! type2 . keySet ( ) . containsAll ( allItems ) ) return BOOL_ ; for ( String item : allItems ) { OpenType < ? > ot1 = type1 . getType ( item ) ; OpenType < ? > ot2 = type2 . getType ( item ) ; if ( ot1 instanceof CompositeType ) { if ( ! ( ot2 instanceof CompositeType ) ) return BOOL_ ; if ( ! isTypeMatched ( ( CompositeType ) ot1 , ( CompositeType ) ot2 ) ) return BOOL_ ; } else if ( ot1 instanceof TabularType ) { if ( ! ( ot2 instanceof TabularType ) ) return BOOL_ ; if ( ! isTypeMatched ( ( TabularType ) ot1 , ( TabularType ) ot2 ) ) return BOOL_ ; } else if ( ! ot1 . equals ( ot2 ) ) { return BOOL_ ; } } return BOOL_ ; }
private void finishEdit ( ) { this . setVisible ( BOOL_ ) ; }
public ZDT3 ( ) { this ( NUM_ ) ; }
private void noSuccessor ( ) { if ( compute == FRAMES ) { Label l = new Label ( ) ; l . frame = new Frame ( ) ; l . frame . owner = l ; l . resolve ( this , code . length , code . data ) ; previousBlock . successor = l ; previousBlock = l ; } else { currentBlock . outputStackMax = maxStackSize ; } currentBlock = null ; }
protected void cleanTableView ( ) { if ( ++ fLargeCount < NUM_ ) { if ( fAttributeTableViewChainState != null ) { for ( int i = fTableViewBuckets - NUM_ ; i >= NUM_ ; -- i ) { fAttributeTableViewChainState [ i ] = NUM_ ; } } fLargeCount = NUM_ ; } }
public boolean requiredResourceName ( Policy policy , String realmName , String name ) { getSvcTypeNameToActionsMap ( policy , realmName ) ; return requiredResourceNameService . contains ( name ) ; }
public void handleTblDataActionDeleteHrefRequest ( RequestInvocationEvent event ) { String name = ( String ) getDisplayFieldValue ( TBL_DATA_ACTION_DELETE_HREF ) ; deleteDevice ( name , STR_ ) ; forwardTo ( ) ; }
private void showFeedback ( String message ) { if ( myHost != null ) { myHost . showFeedback ( message ) ; } else { System . out . println ( message ) ; } }
public Object runSafely ( Catbert . FastStack stack ) throws Exception { String cnt = getString ( stack ) ; Sage . put ( STR_ , cnt ) ; return null ; }
public SearchResult find ( String tenantName , SearchCriteria criteria , int limit ) throws Exception { return getService ( ) . find ( tenantName , criteria , limit , this . getServiceContext ( ) ) ; }
private void showFeedback ( String feedback ) { if ( myHost != null ) { myHost . showFeedback ( feedback ) ; } else { System . out . println ( feedback ) ; } }
public boolean hasReminder ( ) { return super . hasElement ( Reminder . KEY ) ; }
private void updateFooterViewSize ( int dy , XRecyclerView view ) { if ( dy > NUM_ ) { if ( view . mFooterView . getLayoutParams ( ) . height < view . mFooterViewHeight ) { view . mFooterView . getLayoutParams ( ) . height += dy / NUM_ ; } else { view . mFooterView . getLayoutParams ( ) . height += dy / NUM_ ; } } view . mFooterView . setVisibility ( VISIBLE ) ; view . mFooterView . requestLayout ( ) ; }
public boolean isPolyfill ( ) { return BOOL_ ; }
public static < T > T [ ] newArray ( T [ ] reference , int length ) { return Platform . newArray ( reference , length ) ; }
public boolean isEmptyButtonShown ( ) { return mShowEmptyButton ; }
public void defineToFile ( String key , File value ) { define ( key , value . getAbsolutePath ( ) ) ; }
public String onDemandDirectoryTipText ( ) { return STR_ + STR_ ; }
public FactLine createLine ( DocLine docLine , MAccount account , int C_Currency_ID , BigDecimal Amt ) { if ( Amt . signum ( ) < NUM_ ) return createLine ( docLine , account , C_Currency_ID , null , Amt . abs ( ) ) ; else return createLine ( docLine , account , C_Currency_ID , Amt , null ) ; }
public void closeDriver ( ) { if ( camera != null ) { FlashlightManager . disableFlashlight ( ) ; camera . release ( ) ; camera = null ; } }
public void stop ( ) { if ( mCacheDispatcher != null ) { mCacheDispatcher . quit ( ) ; } for ( NetworkDispatcher dispatcher : mDispatchers ) { if ( dispatcher != null ) { dispatcher . quit ( ) ; } } }
public abstract boolean isUserInRole ( String role ) ;
protected void extendExprGraph ( LetExpression exprGraph , BlockContainer container , Set < OutputAnchor > outsideAnchors ) { connection . ifPresent ( null ) ; }
public void onPackageInstall ( final int operation , InstallCallbackInterface callback ) ;
public CloseableIterator < IndexStoreEntry > descendingIterator ( Object start , boolean startInclusive , Object end , boolean endInclusive , Collection keysToRemove ) ;
public DavaFlowSet handleContinue ( String label , Object output , ASTNode node ) { if ( ! ( output instanceof DavaFlowSet ) ) throw new RuntimeException ( STR_ ) ; DavaFlowSet out = ( DavaFlowSet ) output ; List explicitSet = out . getContinueSet ( label ) ; if ( node == null ) throw new RuntimeException ( STR_ ) ; List implicitSet = out . getImplicitlyContinuedSets ( node ) ; return mergeExplicitAndImplicit ( label , out , explicitSet , implicitSet ) ; }
public Move interpretMove ( Cell cell , Player p ) { return logic . interpretMove ( gameState , cell . col , cell . row , p ) ; }
public static void d ( String tag , String msg ) { if ( sLevel > LEVEL_DEBUG ) { return ; } Log . d ( tag , msg ) ; }
private void showFeedback ( String message ) { if ( myHost != null ) { myHost . showFeedback ( message ) ; } else { System . out . println ( message ) ; } }
public void logException ( Exception ex ) { if ( traceLevel >= TRACE_EXCEPTION ) { checkLogFile ( ) ; ex . printStackTrace ( ) ; if ( printWriter != null ) ex . printStackTrace ( printWriter ) ; } }
public boolean isAuthorized ( Object credential , String action , Object data , Map env ) { return BOOL_ ; }
public static String readJSON ( Context context , String fileName ) { try { BufferedReader bufferedReader = new BufferedReader ( new InputStreamReader ( context . getAssets ( ) . open ( STR_ + fileName + STR_ ) ) ) ; StringBuilder stringBuilder = new StringBuilder ( ) ; String readString ; while ( ( readString = bufferedReader . readLine ( ) ) != null ) { stringBuilder . append ( readString ) ; } bufferedReader . close ( ) ; return stringBuilder . toString ( ) ; } catch ( FileNotFoundException e ) { throw new IllegalArgumentException ( STR_ + fileName + STR_ ) ; } catch ( IOException e ) { throw new IllegalArgumentException ( STR_ + fileName + STR_ ) ; } }
public static void showSnackbar ( Context context , View container , String content , SnackbarDisplayType displayType ) { Snackbar snackbar = Snackbar . make ( container , content , Snackbar . LENGTH_LONG ) ; View snackbarView = snackbar . getView ( ) ; switch ( displayType ) { case FAILURE : snackbarView . setBackgroundColor ( ContextCompat . getColor ( context , R . color . worse_10 ) ) ; break ; case FAILURE_BLUE : snackbarView . setBackgroundColor ( ContextCompat . getColor ( context , R . color . best_100 ) ) ; break ; case DROP : TextView tv = ( TextView ) snackbarView . findViewById ( android . support . design . R . id . snackbar_text ) ; tv . setMaxLines ( NUM_ ) ; snackbarView . setBackgroundColor ( ContextCompat . getColor ( context , R . color . best_10 ) ) ; break ; } snackbar . show ( ) ; }
public boolean configureSpliceTo ( SampleQueue nextQueue ) { if ( spliceOutTimeUs != Long . MIN_VALUE ) { return BOOL_ ; } long firstPossibleSpliceTime ; if ( rollingBuffer . peekSample ( sampleInfoHolder ) ) { firstPossibleSpliceTime = sampleInfoHolder . timeUs ; } else { firstPossibleSpliceTime = lastReadTimeUs + NUM_ ; } RollingSampleBuffer nextRollingBuffer = nextQueue . rollingBuffer ; while ( nextRollingBuffer . peekSample ( sampleInfoHolder ) && ( sampleInfoHolder . timeUs < firstPossibleSpliceTime || ( sampleInfoHolder . flags & C . SAMPLE_FLAG_SYNC ) == NUM_ ) ) { nextRollingBuffer . skipSample ( ) ; } if ( nextRollingBuffer . peekSample ( sampleInfoHolder ) ) { spliceOutTimeUs = sampleInfoHolder . timeUs ; return BOOL_ ; } return BOOL_ ; }
private void filterInitiators ( Collection < Initiator > initiators ) { Iterator < Initiator > initiatorIterator = initiators . iterator ( ) ; while ( initiatorIterator . hasNext ( ) ) { Initiator initiator = initiatorIterator . next ( ) ; if ( ! initiator . getProtocol ( ) . equals ( Initiator . Protocol . ScaleIO . name ( ) ) && ! initiator . getProtocol ( ) . equals ( Initiator . Protocol . iSCSI . name ( ) ) ) { initiatorIterator . remove ( ) ; } } }
static long abs ( long v ) { if ( v < NUM_ ) { return - v ; } else { return v ; } }
public int writeLongGamma ( long x ) throws IOException { if ( x < NUM_ ) throw new IllegalArgumentException ( STR_ + x + STR_ ) ; if ( x < MAX_PRECOMPUTED ) return writeInt ( GAMMA [ ( int ) x ] , GAMMA [ ( int ) x ] > > > NUM_ ) ; final int msb = Fast . mostSignificantBit ( ++ x ) ; final int l = writeUnary ( msb ) ; return l + ( msb != NUM_ ? writeLong ( x , msb ) : NUM_ ) ; }
public static Scenario loadScenarioFromPlansAndConfig ( String plansFile , String configFile ) { Config config = new Config ( ) ; config . addCoreModules ( ) ; ConfigReader configReader = new ConfigReader ( config ) ; configReader . readFile ( configFile ) ; config . plans ( ) . setInputFile ( plansFile ) ; config . plans ( ) . setInputPersonAttributeFile ( null ) ; config . network ( ) . setInputFile ( null ) ; Scenario scenario = ScenarioUtils . loadScenario ( config ) ; return scenario ; }
private void calcNextPos ( int dx , int minX , int maxX , int dy , int minY , int maxY ) { if ( dx != NUM_ ) { leadColumn += dx ; if ( leadColumn > maxX ) { leadColumn = minX ; leadRow ++ ; if ( leadRow > maxY ) { leadRow = minY ; } } else if ( leadColumn < minX ) { leadColumn = maxX ; leadRow -- ; if ( leadRow < minY ) { leadRow = maxY ; } } } else { leadRow += dy ; if ( leadRow > maxY ) { leadRow = minY ; leadColumn ++ ; if ( leadColumn > maxX ) { leadColumn = minX ; } } else if ( leadRow < minY ) { leadRow = maxY ; leadColumn -- ; if ( leadColumn < minX ) { leadColumn = maxX ; } } } }
public static void writeShort ( byte [ ] memory , int index , short value ) { memory [ index + NUM_ ] = ( byte ) ( ( value > > ( NUM_ * NUM_ ) ) & NUM_ ) ; memory [ index + NUM_ ] = ( byte ) ( value & NUM_ ) ; }
public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OpenAerial_A_TO_ME ( String skillcaster , String skillname ) { return new SM_SYSTEM_MESSAGE ( NUM_ , skillcaster , skillname ) ; }
public Type1Message ( byte [ ] material ) throws IOException { parse ( material ) ; }
private static void vecswap ( double [ ] x , int a , int b , int n ) { for ( int i = NUM_ ; i < n ; i ++ , a ++ , b ++ ) swap ( x , a , b ) ; }
public void doScrollStateChange ( AbsListView view , int scrollState ) { mHandler . removeCallbacks ( this ) ; mNewState = scrollState ; mHandler . postDelayed ( this , SCROLL_CHANGE_DELAY ) ; }
private String stripNamespace ( final String query , final DataSourceSchema dataSource ) throws QuarkException { String result = query . replace ( STR_ , STR_ ) ; if ( dataSource != null ) { try { final SqlParser parser = getSqlParser ( query ) ; SqlNode node = parser . parseQuery ( ) ; result = stripNamespace ( node , dataSource . getName ( ) , dataSource . getDataSource ( ) . getSqlDialect ( ) ) ; } catch ( Exception e ) { LOG . warn ( STR_ + e . getMessage ( ) ) ; } } return result ; }
protected boolean showAccessibilityToast ( View view , CharSequence description ) { if ( description == null ) return BOOL_ ; final int screenWidth = getResources ( ) . getDisplayMetrics ( ) . widthPixels ; final int [ ] screenPos = new int [ NUM_ ] ; view . getLocationOnScreen ( screenPos ) ; final int width = view . getWidth ( ) ; Toast toast = Toast . makeText ( getContext ( ) , description , Toast . LENGTH_SHORT ) ; toast . setGravity ( Gravity . TOP | Gravity . END , screenWidth - screenPos [ NUM_ ] - width / NUM_ , getHeight ( ) ) ; toast . show ( ) ; return BOOL_ ; }
public boolean isSigned ( int column ) throws SQLException { Field f = getField ( column ) ; int sqlType = f . getSQLType ( ) ; switch ( sqlType ) { case Types . TINYINT : case Types . SMALLINT : case Types . INTEGER : case Types . BIGINT : case Types . FLOAT : case Types . REAL : case Types . DOUBLE : case Types . NUMERIC : case Types . DECIMAL : return ! f . isUnsigned ( ) ; case Types . DATE : case Types . TIME : case Types . TIMESTAMP : return BOOL_ ; default : return BOOL_ ; } }
void clearBridgeSecret ( ) { expectedBridgeSecret = - NUM_ ; }
public void removeChangeListener ( ChangeListener l ) { m_ChangeListeners . remove ( l ) ; }
public void iterateOverTable ( Iterator pti ) { Map < RandomVariable , Object > possibleWorld = new LinkedHashMap < RandomVariable , Object > ( ) ; MixedRadixNumber mrn = new MixedRadixNumber ( NUM_ , radices ) ; do { for ( RVInfo rvInfo : randomVarInfo . values ( ) ) { possibleWorld . put ( rvInfo . getVariable ( ) , rvInfo . getDomainValueAt ( mrn . getCurrentNumeralValue ( rvInfo . getRadixIdx ( ) ) ) ) ; } pti . iterate ( possibleWorld , values [ mrn . intValue ( ) ] ) ; } while ( mrn . increment ( ) ) ; }
void addTestSetListener ( TestSetListener tsl ) ;
void removeChangeListener ( ChangeListener x ) ;
public CursorPos ( final BlockFace blockFace , final HandType handType , final float x , final float y , final float z ) { Validate . notNull ( handType , STR_ ) ; this . handType = handType ; if ( blockFace != null ) { Validate . isTrue ( blockFace . isBasic ( ) , STR_ ) ; } Validate . isTrue ( validFloatRange . isIn ( x ) , STR_ ) ; Validate . isTrue ( validFloatRange . isIn ( y ) , STR_ ) ; Validate . isTrue ( validFloatRange . isIn ( z ) , STR_ ) ; this . blockFace = blockFace ; this . x = ( byte ) ( x * NUM_ ) ; this . y = ( byte ) ( x * NUM_ ) ; this . z = ( byte ) ( x * NUM_ ) ; }
public void logSQL ( BindedCompiledSQL bsql , long nanoTime ) ;
public static String [ ] toRole ( Object oRoles ) throws PageException { if ( oRoles instanceof String ) { oRoles = ListUtil . listToArrayRemoveEmpty ( oRoles . toString ( ) , STR_ ) ; } if ( oRoles instanceof Array ) { Array arrRoles = ( Array ) oRoles ; String [ ] roles = new String [ arrRoles . size ( ) ] ; for ( int i = NUM_ ; i < roles . length ; i ++ ) { roles [ i ] = Caster . toString ( arrRoles . get ( i + NUM_ , STR_ ) ) ; } return roles ; } throw new ApplicationException ( STR_ ) ; }
void dispose ( IoSession session ) ;
public DisqueReactiveCommandsImpl ( DisqueConnection < K , V > connection , RedisCodec < K , V > codec ) { this . connection = connection ; this . codec = codec ; commandBuilder = new DisqueCommandBuilder < K , V > ( codec ) ; }
void validateNumber ( int i , int ofs , String name , int min , int max ) throws ParseException { if ( i < min || i > max ) { throwInvalid ( name , ofs ) ; } }
public static void addOsmiumCompressorRecipe ( ItemStack input , ItemStack output ) { try { Class recipeClass = Class . forName ( STR_ ) ; Method m = recipeClass . getMethod ( STR_ , ItemStack . class , ItemStack . class ) ; m . invoke ( null , input , output ) ; } catch ( Exception e ) { System . err . println ( STR_ + e . getMessage ( ) ) ; } }
public int [ ] buildColorTable ( ) ;
private static void readRequest ( BufferedReader in ) throws IOException { String line = null ; do { line = in . readLine ( ) ; System . out . println ( STR_ + line ) ; } while ( ( line . length ( ) != NUM_ ) && ( line . charAt ( NUM_ ) != STR_ ) && ( line . charAt ( NUM_ ) != STR_ ) ) ; }
public BigDecimal loadOperatorRevenueSharePercentage ( long serviceKey , long endPeriod ) ;
default DoubleSupplierWithThrowable < E > withLogging ( final Logger logger ) { return withLogging ( logger , STR_ ) ; }
private void handleHovering ( int x , int y ) { handleCellHover ( x , y ) ; if ( columnHeadersVisible ) { handleHoverOnColumnHeader ( x , y ) ; } }
public static float handle ( float digSpeed , World world , IBlockState state , BlockPos pos ) { DigSpeed event = new DigSpeed ( digSpeed , world , state , pos ) ; return ! OpenModLoader . getEventBus ( ) . post ( event ) || event . getDigSpeed ( ) < NUM_ ? NUM_ : event . getDigSpeed ( ) ; }
public String sampleSizePercentTipText ( ) { return STR_ ; }
private void updateProgress ( int progress ) { if ( myHost != null && progress != previousProgress ) { myHost . updateProgress ( progress ) ; } previousProgress = progress ; }
public static RecipePureDaisy registerPureDaisyRecipe ( Object input , IBlockState outputState ) { return registerPureDaisyRecipe ( input , outputState , RecipePureDaisy . DEFAULT_TIME ) ; }
public boolean preTranslate ( float dx , float dy ) { return native_preTranslate ( native_instance , dx , dy ) ; }
boolean navigateToSelectedElement ( boolean requestFocus ) ;
public Try < T , X > recoverWithFor ( Class < ? extends X > t , Function < ? super X , ? extends Success < T , X > > fn ) ;
public String indexedToReadable ( String indexedForm ) { return indexedForm ; }
public static ByteBuffer processInboundPackage ( ByteBuffer roData , int exchangeId , boolean connectionOk ) { roData . rewind ( ) ; if ( BuildConfig . DEBUG ) { XposedBridge . log ( STR_ + Integer . toString ( roData . remaining ( ) ) ) ; } try { synchronized ( sync ) { } } catch ( Throwable e ) { XposedBridge . log ( e ) ; } return null ; }
boolean onCheckCanStartDrag ( T holder , int position , int x , int y ) ;
public void registerProvider ( Class < ? > dtoInterface , DtoProvider < ? > provider ) { dtoInterface2Providers . put ( dtoInterface , provider ) ; }
public static void clickButtonRewiConnect ( ) { RewiMod . getInstance ( ) . connectToServer ( STR_ , STR_ , NUM_ , BOOL_ ) ; }
public void validateVarEntryId ( SnmpOid rowOid , long var , Object data ) throws SnmpStatusException { node . validateVarId ( var , data ) ; }
public final boolean isSilent ( ) { return silent ; }
public static double [ ] mult ( double [ ] [ ] mat , double [ ] vec ) { int m = mat . length ; int n = mat [ NUM_ ] . length ; double [ ] vecres = new double [ m ] ; for ( int i = NUM_ ; i < m ; ++ i ) { vecres [ i ] = NUM_ ; for ( int j = NUM_ ; j < n ; ++ j ) { vecres [ i ] += mat [ i ] [ j ] * vec [ j ] ; } } return ( vecres ) ; }
public void receiveResultqueryUniqueIdentifiersForEntity ( com . emc . storageos . vasa . VasaServiceStub . QueryUniqueIdentifiersForEntityResponse result ) { }
private void handleAutoNumbersForUpdate ( Object [ ] row , ByteBuffer rowBuffer , RowState rowState ) throws IOException { if ( _autoNumColumns . isEmpty ( ) ) { return ; } boolean enableInsert = isAllowAutoNumberInsert ( ) ; rowState . resetAutoNumber ( ) ; for ( ColumnImpl col : _autoNumColumns ) { Object inRowValue = getInputAutoNumberRowValue ( enableInsert , col , row ) ; Object rowValue = ( ( inRowValue == null ) ? getRowColumn ( getFormat ( ) , rowBuffer , col , rowState , null ) : col . getAutoNumberGenerator ( ) . handleInsert ( rowState , inRowValue ) ) ; col . setRowValue ( row , rowValue ) ; } }
default < U > U foldRight ( final U identity , final BiFunction < ? super T , ? super U , ? extends U > accumulator ) { return foldable ( ) . foldRight ( identity , accumulator ) ; }
private void cancel ( ) { m_frame . setVisible ( BOOL_ ) ; m_frame . dispose ( ) ; System . exit ( NUM_ ) ; }
public static ItemBuilder start ( final ItemStack itemStack ) { return new ItemBuilder ( itemStack ) ; }
public void onCancel ( Interaction iact ) { }
public boolean isAnyCampaign ( ) ;
int weigh ( K key , V value ) ;
public synchronized void clear ( String profileName ) { super . clearImpl ( profileName ) ; }
public ImageResizer ( Context context , int imageWidth , int imageHeight ) { super ( context ) ; setImageSize ( imageWidth , imageHeight ) ; }
public static OrderCreateSuccessDialogFragment newInstance ( boolean sampleApplication ) { OrderCreateSuccessDialogFragment orderCreateSuccessDialogFragment = new OrderCreateSuccessDialogFragment ( ) ; orderCreateSuccessDialogFragment . sampleApplication = sampleApplication ; return orderCreateSuccessDialogFragment ; }
public Set < Adapter > requiredTypeAdapters ( ) { return Collections . emptySet ( ) ; }
protected static void launch ( Class < ? extends Activity > activity ) { final Intent intent = new Intent ( application , activity ) ; intent . putExtra ( CONTENT , contentLayoutView ) ; intent . putExtra ( BG_COLOR , backgroundColor ) ; intent . putExtra ( INIT_ACTIVITY , initActivityName ) ; intent . setFlags ( Intent . FLAG_ACTIVITY_CLEAR_TASK | Intent . FLAG_ACTIVITY_NEW_TASK ) ; application . startActivity ( intent ) ; }
public void updateConfigItemByText ( NamespaceTextModel model ) { String appId = model . getAppId ( ) ; Env env = model . getEnv ( ) ; String clusterName = model . getClusterName ( ) ; String namespaceName = model . getNamespaceName ( ) ; long namespaceId = model . getNamespaceId ( ) ; String configText = model . getConfigText ( ) ; ConfigTextResolver resolver = model . getFormat ( ) == ConfigFileFormat . Properties ? propertyResolver : fileTextResolver ; ItemChangeSets changeSets = resolver . resolve ( namespaceId , configText , itemAPI . findItems ( appId , env , clusterName , namespaceName ) ) ; if ( changeSets . isEmpty ( ) ) { return ; } changeSets . setDataChangeLastModifiedBy ( userInfoHolder . getUser ( ) . getUserId ( ) ) ; itemAPI . updateItemsByChangeSet ( appId , env , clusterName , namespaceName , changeSets ) ; Cat . logEvent ( CatEventType . MODIFY_NAMESPACE_BY_TEXT , String . format ( STR_ , appId , env , clusterName , namespaceName ) ) ; Cat . logEvent ( CatEventType . MODIFY_NAMESPACE , String . format ( STR_ , appId , env , clusterName , namespaceName ) ) ; }
public CacheObject searchCache ( Object key ) { for ( int i = NUM_ ; i < objs . length ; i ++ ) { CacheObject co = objs [ i ] ; if ( co == null ) { break ; } else if ( co . id . equals ( key ) ) { return co ; } } return null ; }
public static boolean equals ( byte [ ] array1 , byte [ ] array2 ) { if ( array1 == array2 ) { return BOOL_ ; } if ( array1 == null || array2 == null || array1 . length != array2 . length ) { return BOOL_ ; } for ( int i = NUM_ ; i < array1 . length ; i ++ ) { if ( array1 [ i ] != array2 [ i ] ) { return BOOL_ ; } } return BOOL_ ; }
public void info ( StringId msgID , Object [ ] params , Throwable ex ) ;
public XMLEventParser allocate ( XMLEventParserContext ctx , XMLEvent event ) { if ( ctx == null ) { String message = Logging . getMessage ( STR_ ) ; Logging . logger ( ) . severe ( message ) ; throw new IllegalArgumentException ( message ) ; } XMLEventParser parser = ctx . allocate ( event ) ; if ( parser != null ) parser . setParent ( this ) ; return parser ; }
public void testBadRequest ( ) throws Exception { socketRpcServer . registerService ( new FakeServiceImpl ( null ) ) ; FakeSocket socket = new FakeSocket ( BOOL_ ) . withInputBytes ( STR_ . getBytes ( ) ) ; runHandler ( socket ) ; assertFalse ( socket . getResponse ( ) . getCallback ( ) ) ; assertTrue ( socket . getResponse ( ) . hasError ( ) ) ; assertEquals ( ErrorReason . BAD_REQUEST_DATA , socket . getResponse ( ) . getErrorReason ( ) ) ; }
public native void rotateTo ( float degrees ) ;
protected Stencil ( ) { }
public static void main ( String [ ] args ) { TestConstantValuesPage tester = new TestConstantValuesPage ( ) ; run ( tester , ARGS , TEST , NEGATED_TEST ) ; tester . printSummary ( ) ; }
public Hyphenation hyphenate ( String word ) { return hyphenator != null ? hyphenator . hyphenate ( word ) : null ; }
public void add ( Map values ) throws SQLException { getResultSet ( ) . moveToInsertRow ( ) ; for ( Iterator iter = values . entrySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) iter . next ( ) ; getResultSet ( ) . updateObject ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } getResultSet ( ) . insertRow ( ) ; }
public static < B > ImmutableTypeToInstanceMap < B > of ( ) { return new ImmutableTypeToInstanceMap < B > ( ImmutableMap . < TypeToken < ? extends B > , B > of ( ) ) ; }
public boolean isSegmentBalanced ( ) { if ( m_lines . size ( ) == NUM_ || m_doc . isMultiCurrency ( ) ) return BOOL_ ; MAcctSchemaElement [ ] elements = m_acctSchema . getAcctSchemaElements ( ) ; for ( int i = NUM_ ; i < elements . length ; i ++ ) { MAcctSchemaElement ase = elements [ i ] ; if ( ase . isBalanced ( ) && ! isSegmentBalanced ( ase . getElementType ( ) ) ) return BOOL_ ; } return BOOL_ ; }
protected int placeTo ( ByteBuffer [ ] dsts , int offset , int length ) { if ( buffer == null ) { return NUM_ ; } int pos = NUM_ ; int len = buffer . length ; int rem ; for ( int i = offset ; i < offset + length ; i ++ ) { rem = dsts [ i ] . remaining ( ) ; if ( len - pos < rem ) { dsts [ i ] . put ( buffer , pos , len - pos ) ; pos = len ; break ; } dsts [ i ] . put ( buffer , pos , rem ) ; pos += rem ; } if ( pos != len ) { throw new AlertException ( AlertProtocol . INTERNAL_ERROR , new SSLException ( STR_ + STR_ ) ) ; } buffer = null ; return len ; }
public WSPersonalProfileServiceModelImpl ( HttpServletRequest req , Map map ) throws AMConsoleException { super ( req , SERVICE_NAME , map ) ; }
public int toARGB ( ) ;
public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case NUM_ : return SUCCESS ; default : return null ; } }
public void fine ( String msg ) { loggerProxy . doLog ( Level . FINE , msg ) ; }
void propertyChanged ( ) ;
private void playNext ( ) { if ( mediaType == Config . YOUTUBE_MEDIA_TYPE_VIDEO ) { seekVideo ( NUM_ ) ; restartVideo ( ) ; return ; } if ( previousWasCalled ) { previousWasCalled = BOOL_ ; iterator . next ( ) ; } if ( ! iterator . hasNext ( ) ) { iterator = youTubeVideos . listIterator ( ) ; } videoItem = iterator . next ( ) ; nextWasCalled = BOOL_ ; playVideo ( ) ; }
public Element store ( Object o ) { TripleTurnoutSignalHead p = ( TripleTurnoutSignalHead ) o ; Element element = new Element ( STR_ ) ; element . setAttribute ( STR_ , this . getClass ( ) . getName ( ) ) ; element . setAttribute ( STR_ , p . getSystemName ( ) ) ; element . addContent ( new Element ( STR_ ) . addContent ( p . getSystemName ( ) ) ) ; storeCommon ( p , element ) ; element . addContent ( addTurnoutElement ( p . getGreen ( ) , STR_ ) ) ; element . addContent ( addTurnoutElement ( p . getYellow ( ) , STR_ ) ) ; element . addContent ( addTurnoutElement ( p . getRed ( ) , STR_ ) ) ; return element ; }
protected void verifyMatch ( Object target , Object deserialized ) { CronExpression targetCronExpression = ( CronExpression ) target ; CronExpression deserializedCronExpression = ( CronExpression ) deserialized ; assertNotNull ( deserializedCronExpression ) ; assertEquals ( targetCronExpression . getCronExpression ( ) , deserializedCronExpression . getCronExpression ( ) ) ; assertEquals ( targetCronExpression . getTimeZone ( ) , deserializedCronExpression . getTimeZone ( ) ) ; }
protected void finalize ( ) { m_eventNotifier . setEnabled ( BOOL_ ) ; m_eventNotifier = null ; closeAllQueries ( ) ; }
public TPS currentRow ( ) { return currentRow ( null ) ; }
public CActionFreezeView ( final ZyGraph graph ) { m_graph = Preconditions . checkNotNull ( graph , STR_ ) ; putValue ( Action . SHORT_DESCRIPTION , STR_ ) ; putValue ( SMALL_ICON , new ImageIcon ( CMain . class . getResource ( STR_ ) ) ) ; }
public RSeq ( ) { super ( NAME ) ; }
public void put ( String key , File file , String contentType ) throws FileNotFoundException { if ( key != null && file != null ) { fileParams . put ( key , new FileWrapper ( file , contentType ) ) ; } }
public BucketMovedException ( String msg ) { super ( msg ) ; }
public RandomColors ( long seed ) { this ( ) ; random . setSeed ( seed ) ; }
private void updateProgress ( int progress ) { if ( myHost != null && progress != previousProgress ) { myHost . updateProgress ( progress ) ; } previousProgress = progress ; }
public static KeyStore loadPkcs12KeyStore ( File file , char [ ] password ) throws Exception { return loadKeyStore ( STR_ , file , password ) ; }
private void notifyDataSourceLoaded ( ) { List < DataSourceUpdatedInterface > copyListenerList = new ArrayList < DataSourceUpdatedInterface > ( listenerList ) ; for ( DataSourceUpdatedInterface listener : copyListenerList ) { listener . dataSourceLoaded ( getGeometryType ( ) , this . connectedToDataSourceFlag ) ; } }
public static PluginsCollectionConfig fromXml ( final String toConvert ) throws JAXBException { try ( StringReader reader = new StringReader ( toConvert ) ) { return fromXml ( reader ) ; } }
public static < V > int addDistinctList ( List < V > sourceList , List < V > entryList ) { if ( sourceList == null || isEmpty ( entryList ) ) { return NUM_ ; } int sourceCount = sourceList . size ( ) ; for ( V entry : entryList ) { if ( ! sourceList . contains ( entry ) ) { sourceList . add ( entry ) ; } } return sourceList . size ( ) - sourceCount ; }
public Foo fetchByUuid_C_Last ( java . lang . String uuid , long companyId , com . liferay . portal . kernel . util . OrderByComparator < Foo > orderByComparator ) ;
void updateStart ( int newRecordStart ) { int dataStartOffset = getDataStart ( ) - getRecordStart ( ) ; setRecordStart ( newRecordStart ) ; setDataStart ( newRecordStart + dataStartOffset ) ; }
public long maxSize ( ) { return maxSize ; }
public void writeDebug ( String str ) ;
public static Location toLocation ( ICompilationUnit unit , int offset , int length ) throws JavaModelException { Location result = new Location ( ) ; result . setUri ( getFileURI ( unit ) ) ; int [ ] loc = JsonRpcHelpers . toLine ( unit . getBuffer ( ) , offset ) ; int [ ] endLoc = JsonRpcHelpers . toLine ( unit . getBuffer ( ) , offset + length ) ; Range range = new Range ( ) ; if ( loc != null ) { range . withStart ( new Position ( ) . withLine ( loc [ NUM_ ] ) . withCharacter ( loc [ NUM_ ] ) ) ; } if ( endLoc != null ) { range . withEnd ( new Position ( ) . withLine ( endLoc [ NUM_ ] ) . withCharacter ( endLoc [ NUM_ ] ) ) ; } return result . withRange ( range ) ; }
static Mode mapIntToValue ( final int modeInt ) { for ( Mode value : Mode . values ( ) ) { if ( modeInt == value . getIntValue ( ) ) { return value ; } } return getDefault ( ) ; }
private void throwback ( ) { resend = BOOL_ ; }
private static boolean isNodeList ( Object context ) { if ( context instanceof List ) { List ls = ( List ) context ; int ln = ls . size ( ) ; for ( int i = NUM_ ; i < ln ; i ++ ) { if ( ! ( ls . get ( i ) instanceof Node ) ) { return BOOL_ ; } } return BOOL_ ; } else { return BOOL_ ; } }
public List < T > restore ( List < T > target ) { List < T > result = new LinkedList < T > ( target ) ; ListIterator < Delta < T > > it = getDeltas ( ) . listIterator ( deltas . size ( ) ) ; while ( it . hasPrevious ( ) ) { Delta < T > delta = ( Delta < T > ) it . previous ( ) ; delta . restore ( result ) ; } return result ; }
public String procedure ( String procedureSpec , String command ) throws Exception { return executeExtension ( ResourceType . EXTENSION , procedureSpec , STR_ , command , null ) ; }
private static ViewGroup findAncestorToTakeFocusInTouchMode ( View focused ) { ViewParent parent = focused . getParent ( ) ; while ( parent instanceof ViewGroup ) { final ViewGroup vgParent = ( ViewGroup ) parent ; if ( vgParent . getDescendantFocusability ( ) == ViewGroup . FOCUS_AFTER_DESCENDANTS && vgParent . isFocusableInTouchMode ( ) ) { return vgParent ; } if ( vgParent . isRootNamespace ( ) ) { return null ; } else { parent = vgParent . getParent ( ) ; } } return null ; }
public void updateAlertDefinition ( StatAlertDefinition [ ] defns , int actionCode ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STR_ ) ; } synchronized ( alertDefinitionsMap ) { if ( actionCode == UpdateAlertDefinitionMessage . REMOVE_ALERT_DEFINITION ) { for ( int i = NUM_ ; i < defns . length ; i ++ ) { alertDefinitionsMap . remove ( Integer . valueOf ( defns [ i ] . getId ( ) ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STR_ , defns [ i ] . getName ( ) ) ; } } } else { StatAlertDefinition [ ] alertDefns = this . createMemberStatAlertDefinition ( dm , defns ) ; StatAlertDefinition defn ; for ( int i = NUM_ ; i < alertDefns . length ; i ++ ) { defn = alertDefns [ i ] ; alertDefinitionsMap . put ( Integer . valueOf ( defns [ i ] . getId ( ) ) , defn ) ; } } } if ( logger . isDebugEnabled ( ) ) { logger . debug ( STR_ ) ; } }
public void initializeAttributes ( AbstractElement elt ) { for ( int i = length - NUM_ ; i >= NUM_ ; i -= NUM_ ) { resetAttribute ( elt , keys [ i - NUM_ ] , keys [ i - NUM_ ] , keys [ i ] ) ; } }
public void prepare ( boolean majorGC ) { if ( majorGC ) { markState = ObjectHeader . deltaMarkState ( markState , BOOL_ ) ; lineMarkState ++ ; if ( VM . VERIFY_ASSERTIONS ) VM . assertions . _assert ( lineMarkState <= MAX_LINE_MARK_STATE ) ; } chunkMap . reset ( ) ; defrag . prepare ( chunkMap , this ) ; inCollection = BOOL_ ; }
private boolean isViewWasReused ( ) { String currentCacheKey = engine . getLoadingUriForView ( imageAware ) ; return ! memoryCacheKey . equals ( currentCacheKey ) ; }
public void testCreateStandaloneLocalConfigurationWhenNoHomeDirectorySpecified ( ) { this . factory . registerConfiguration ( STR_ , ContainerType . INSTALLED , ConfigurationType . STANDALONE , StandaloneLocalConfigurationStub . class ) ; LocalConfiguration configuration = ( LocalConfiguration ) this . factory . createConfiguration ( STR_ , ContainerType . INSTALLED , ConfigurationType . STANDALONE ) ; assertEquals ( new DefaultFileHandler ( ) . getTmpPath ( STR_ ) , configuration . getHome ( ) ) ; }
boolean lockWithRetries ( ) ;
private Node < E > succ ( Node < E > n ) { for ( ; ; ) { Node < E > s = nextNode ( n ) ; if ( s == null ) return null ; else if ( s . item != null ) return s ; else if ( s == n ) return firstNode ( ) ; else n = s ; } }
static boolean nonZeroDroppedBits ( int numberOfBits , int digits [ ] ) { int intCount = numberOfBits > > NUM_ ; int bitCount = numberOfBits & NUM_ ; int i ; for ( i = NUM_ ; ( i < intCount ) && ( digits [ i ] == NUM_ ) ; i ++ ) { } return ( ( i != intCount ) || ( digits [ i ] << ( NUM_ - bitCount ) != NUM_ ) ) ; }
void init ( final Vocabulary vocab ) ;
public void printStackTrace ( java . io . PrintStream s ) { printStackTrace ( new java . io . PrintWriter ( s ) ) ; }
public boolean equals ( boolean b ) { return value == b ; }
int size ( ) ;
public boolean isPreviousTokenQuoted ( ) { return previousTokenQuoted ; }
public void addLanesToLinkAssignment ( LanesToLinkAssignment11 assignment ) ;
public synchronized E peek ( ) { int len = size ( ) ; if ( len == NUM_ ) throw new EmptyStackException ( ) ; return elementAt ( len - NUM_ ) ; }
void add ( StackType is ) ;
void clearSymbolIDValues ( ) { if ( _fieldName != null ) { _fieldId = UNKNOWN_SYMBOL_ID ; } if ( _annotations != null ) { for ( int i = NUM_ ; i < _annotations . length ; i ++ ) { SymbolToken annotation = _annotations [ i ] ; if ( annotation == null ) break ; String text = annotation . getText ( ) ; if ( text != null && annotation . getSid ( ) != UNKNOWN_SYMBOL_ID ) { _annotations [ i ] = newSymbolToken ( text , UNKNOWN_SYMBOL_ID ) ; } } } }
public ShowPrintAndExportDialogAction ( PrintableComponent comp , boolean smallIcon ) { this ( smallIcon ) ; this . comp = comp ; }
public void moveBy ( int amountX , int amountY ) { Point p = getPosition ( ) ; move ( p . x + amountX , p . y + amountY ) ; }
private static String createBcryptString ( byte [ ] password , byte [ ] salt , int cost ) { StringBuffer sb = new StringBuffer ( NUM_ ) ; sb . append ( STR_ ) ; sb . append ( version ) ; sb . append ( STR_ ) ; sb . append ( cost < NUM_ ? ( STR_ + cost ) : Integer . toString ( cost ) ) ; sb . append ( STR_ ) ; sb . append ( encodeData ( salt ) ) ; byte [ ] key = BCrypt . generate ( password , salt , cost ) ; sb . append ( encodeData ( key ) ) ; return sb . toString ( ) ; }
private void initialize ( ) { time_low = NUM_ ; time_mid = NUM_ ; time_hi_and_version = NUM_ ; clock_seq_low = NUM_ ; clock_seq_hi_and_reserved = NUM_ ; for ( int j = NUM_ ; j < node . length ; j ++ ) { node [ j ] = NUM_ ; } }
public void test_CREATE_TX_READ_ONLY_01 ( ) throws Exception { assertNotNull ( m_mgr ) ; assertNotNull ( m_mgr . getTransactionManager ( ) ) ; final IRemoteTx tx = m_mgr . getTransactionManager ( ) . createTx ( RemoteTransactionManager . READ_COMMITTED ) ; try { assertTrue ( tx . isActive ( ) ) ; assertTrue ( tx . isReadOnly ( ) ) ; } finally { tx . abort ( ) ; } assertFalse ( tx . isActive ( ) ) ; assertTrue ( tx . isReadOnly ( ) ) ; }
public boolean isDiskType ( ) { return diskType ; }
private static boolean increment ( JsonValue subject , PatchOperation operation ) throws BadRequestException { if ( ! operation . isIncrement ( ) ) { throw new BadRequestException ( STR_ + operation . getOperation ( ) + STR_ ) ; } final JsonValue current = subject . get ( operation . getField ( ) ) ; if ( current == null ) { throw new BadRequestException ( STR_ + operation . getField ( ) + STR_ ) ; } else if ( current . isList ( ) ) { final List < Object > elements = current . asList ( ) ; for ( int i = NUM_ ; i < elements . size ( ) ; i ++ ) { elements . set ( i , increment ( elements . get ( i ) , operation . getValue ( ) . asNumber ( ) , operation . getField ( ) ) ) ; } } else { subject . put ( operation . getField ( ) , increment ( current . getObject ( ) , operation . getValue ( ) . asNumber ( ) , operation . getField ( ) ) ) ; } return BOOL_ ; }
public void timeout ( RpcClient rpcClient , RpcError rpcError ) ;
boolean intersects ( ShapeTileOctagon p_other ) ;
public String toString ( ) { return this . h1 + STR_ + this . h2 + STR_ + this . startTime + STR_ + ( this . endTime > NUM_ ? this . endTime : STR_ ) + STR_ ; }
public com . sun . identity . liberty . ws . common . jaxb . ac . DeactivationCallCenterType createDeactivationCallCenterType ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . liberty . ws . common . jaxb . ac . impl . DeactivationCallCenterTypeImpl ( ) ; }
public static Map < String , String > parseKeyAndValueToMap ( String source ) { if ( StringUtils . isEmpty ( source ) ) { return null ; } try { JSONObject jsonObject = new JSONObject ( source ) ; return parseKeyAndValueToMap ( jsonObject ) ; } catch ( JSONException e ) { if ( isPrintException ) { e . printStackTrace ( ) ; } return null ; } }
public MailContent text ( String s ) { html . a ( escapeXml ( s ) ) ; text . a ( s ) ; return this ; }
public static String removeQueryParameters ( Uri uri ) { assert ( uri . getAuthority ( ) != null ) ; assert ( uri . getPath ( ) != null ) ; Uri . Builder builder = new Uri . Builder ( ) ; builder . scheme ( uri . getScheme ( ) ) ; builder . encodedAuthority ( uri . getAuthority ( ) ) ; builder . encodedPath ( uri . getPath ( ) ) ; return builder . build ( ) . toString ( ) ; }
protected ValidationMarkerImpl ( ) { super ( ) ; }
public void addFirst ( E e ) { if ( e == null ) throw new NullPointerException ( ) ; elements [ head = ( head - NUM_ ) & ( elements . length - NUM_ ) ] = e ; if ( head == tail ) doubleCapacity ( ) ; }
private String readQuotedId ( boolean returnText ) throws IOException , XmlPullParserException { int quote = peekCharacter ( ) ; char [ ] delimiter ; if ( quote == STR_ ) { delimiter = DOUBLE_QUOTE ; } else if ( quote == STR_ ) { delimiter = SINGLE_QUOTE ; } else { throw new XmlPullParserException ( STR_ , this , null ) ; } position ++ ; return readUntil ( delimiter , returnText ) ; }
public static String decrypt ( final String password , String base64EncodedCipherText ) throws GeneralSecurityException { try { final SecretKeySpec key = generateKey ( password ) ; byte [ ] decodedCipherText = Base64 . decode ( base64EncodedCipherText , Base64 . NO_WRAP ) ; byte [ ] decryptedBytes = decrypt ( key , ivBytes , decodedCipherText ) ; String message = new String ( decryptedBytes , CHARSET ) ; return message ; } catch ( UnsupportedEncodingException e ) { throw new GeneralSecurityException ( e ) ; } }
private boolean journalRebuildRequired ( ) { final int redundantOpCompactThreshold = NUM_ ; return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries . size ( ) ; }
public void recon ( ReconciliationContext reconContext ) throws SynchronizationException { EventEntry measure = Publisher . start ( EVENT_RECON , reconContext . getReconId ( ) , null ) ; doRecon ( reconContext ) ; measure . end ( ) ; }
public int read ( String table , String key , Set < String > fields , HashMap < String , ByteIterator > result ) { long st = System . nanoTime ( ) ; int res = _db . read ( table , key , fields , result ) ; long en = System . nanoTime ( ) ; _measurements . measure ( STR_ , ( int ) ( ( en - st ) / NUM_ ) ) ; _measurements . reportReturnCode ( STR_ , res ) ; return res ; }
public static void removeDeletedCharacters ( Account account ) { Iterator < PlayerAccountData > it = account . iterator ( ) ; while ( it . hasNext ( ) ) { PlayerAccountData pad = it . next ( ) ; Race race = pad . getPlayerCommonData ( ) . getRace ( ) ; long deletionTime = ( long ) pad . getDeletionTimeInSeconds ( ) * ( long ) NUM_ ; if ( deletionTime != NUM_ && deletionTime <= System . currentTimeMillis ( ) ) { it . remove ( ) ; account . decrementCountOf ( race ) ; PlayerService . deletePlayerFromDB ( pad . getPlayerCommonData ( ) . getPlayerObjId ( ) ) ; } } if ( account . isEmpty ( ) ) { removeAccountWH ( account . getId ( ) ) ; account . getAccountWarehouse ( ) . clear ( ) ; } }
public boolean hasSuperClassAccess ( ) { return getSuperClassAccessOpt ( ) . getNumChild ( ) != NUM_ ; }
public static ServiceClient createServiceClient ( TrustManager trustManager , KeyManager keyManager ) { return createServiceClient ( CertificateUtil . createSSLContext ( trustManager , keyManager ) ) ; }
public int read ( byte [ ] b , int off , int len ) throws IOException { if ( closed ) { throw new IOException ( STR_ ) ; } if ( len == NUM_ ) { return NUM_ ; } int res = available ( ) ; if ( res == NUM_ ) { res = makeAvailable ( ) ; if ( res == NUM_ ) { return - NUM_ ; } } res = Math . min ( res , len ) ; System . arraycopy ( buffer , head , b , off , res ) ; head += res ; total += res ; return res ; }
public void attachToActivity ( Activity activity , int slideStyle ) { attachToActivity ( activity , slideStyle , BOOL_ ) ; }
private FileDownloadInfo createNewDownloadInfo ( FileDownloadInfo . Reader reader ) { FileDownloadInfo info = reader . newDownloadInfo ( systemFacade , downloadsUriProvider ) ; LLog . v ( STR_ + info . getId ( ) ) ; return info ; }
public int size ( ) throws SQLException ;
public boolean preserveSep ( ) { return preserveSep ; }
private static boolean listsMatch ( ListBlock a , ListBlock b ) { if ( a instanceof BulletList && b instanceof BulletList ) { return equals ( ( ( BulletList ) a ) . getBulletMarker ( ) , ( ( BulletList ) b ) . getBulletMarker ( ) ) ; } else if ( a instanceof OrderedList && b instanceof OrderedList ) { return equals ( ( ( OrderedList ) a ) . getDelimiter ( ) , ( ( OrderedList ) b ) . getDelimiter ( ) ) ; } return BOOL_ ; }
public String numFoldsTipText ( ) { return STR_ + STR_ ; }
public void addWelcomeFile ( String hostName , String contextPath , String version , String welcomeFile ) { hostName = renameWildcardHost ( hostName ) ; ContextVersion contextVersion = findContextVersion ( hostName , contextPath , version , BOOL_ ) ; if ( contextVersion == null ) { return ; } int len = contextVersion . welcomeResources . length + NUM_ ; String [ ] newWelcomeResources = new String [ len ] ; System . arraycopy ( contextVersion . welcomeResources , NUM_ , newWelcomeResources , NUM_ , len - NUM_ ) ; newWelcomeResources [ len - NUM_ ] = welcomeFile ; contextVersion . welcomeResources = newWelcomeResources ; }
default ItemStack extractItem ( ItemStack stack , int size ) { return extractItem ( stack , size , IComparer . COMPARE_DAMAGE | IComparer . COMPARE_NBT ) ; }
public ShortcutInfo ( AppInfo info ) { super ( info ) ; title = Utilities . trim ( info . title ) ; intent = new Intent ( info . intent ) ; customIcon = BOOL_ ; flags = info . flags ; firstInstallTime = info . firstInstallTime ; }
public Or ( ) { super ( Boolean . class , Boolean . class , Boolean . class ) ; }
public boolean isSupported ( String jid ) { try { DiscoverInfo result = ServiceDiscoveryManager . getInstanceFor ( connection ) . discoverInfo ( jid ) ; return result . containsFeature ( DeliveryReceipt . NAMESPACE ) ; } catch ( XMPPException e ) { return BOOL_ ; } }
public boolean isBOM ( ) { Object oo = get_Value ( COLUMNNAME_IsBOM ) ; if ( oo != null ) { if ( oo instanceof Boolean ) return ( ( Boolean ) oo ) . booleanValue ( ) ; return STR_ . equals ( oo ) ; } return BOOL_ ; }
public void __setDaoSession ( DaoSession daoSession ) { this . daoSession = daoSession ; myDao = daoSession != null ? daoSession . getFeedAccountDao ( ) : null ; }
private void writeAttribute ( java . lang . String prefix , java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( xmlWriter . getPrefix ( namespace ) == null ) { xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } xmlWriter . writeAttribute ( namespace , attName , attValue ) ; }
public synchronized void close ( ) throws IOException { if ( journalWriter == null ) { return ; } for ( Entry entry : new ArrayList < Entry > ( lruEntries . values ( ) ) ) { if ( entry . currentEditor != null ) { entry . currentEditor . abort ( ) ; } } trimToSize ( ) ; journalWriter . close ( ) ; journalWriter = null ; }
public RectangleRDD ( JavaSparkContext spark , String InputLocation , Integer Offset , String Splitter , Integer partitions ) { this . setRawRectangleRDD ( spark . textFile ( InputLocation , partitions ) . map ( new RectangleFormatMapper ( Offset , Splitter ) ) ) ; }
public void addFooterView ( View footer ) { addFooterView ( footer , - NUM_ ) ; }
public QuickAdapter ( int layoutResId , List < T > data ) { this ( layoutResId , data , ISelectable . SELECT_MODE_SINGLE ) ; }
public abstract void notifyDataSetChanged ( ) ;
public void writeHouseholds ( String outputfolder ) { if ( this . households == null || this . householdAttributes == null ) { throw new RuntimeException ( STR_ ) ; } else { LOG . info ( STR_ ) ; HouseholdsWriterV10 hw = new HouseholdsWriterV10 ( this . households ) ; hw . setPrettyPrint ( BOOL_ ) ; hw . writeFile ( outputfolder + STR_ ) ; LOG . info ( STR_ ) ; ObjectAttributesXmlWriter oaw = new ObjectAttributesXmlWriter ( householdAttributes ) ; oaw . setPrettyPrint ( BOOL_ ) ; oaw . writeFile ( outputfolder + STR_ ) ; } }
public Integer toInteger ( double d ) ;
private void readObject ( java . io . ObjectInputStream s ) throws java . io . IOException , ClassNotFoundException { s . defaultReadObject ( ) ; int len = s . readInt ( ) ; Object [ ] elements = new Object [ len ] ; for ( int i = NUM_ ; i < len ; i ++ ) elements [ i ] = s . readObject ( ) ; setArray ( elements ) ; }
public boolean isProjectPhaseDim ( ) { Object oo = get_Value ( COLUMNNAME_IsProjectPhaseDim ) ; if ( oo != null ) { if ( oo instanceof Boolean ) return ( ( Boolean ) oo ) . booleanValue ( ) ; return STR_ . equals ( oo ) ; } return BOOL_ ; }
public Response handle ( final String rawRequest ) { final Request req = requestParser . parse ( rawRequest ) ; return handleRequest ( req ) ; }
public String displayMergedLogs ( ) { return this . logCollator . collateLogs ( this . gfManagerAgent ) ; }
public boolean isInJavadoc ( ) { return this . javadoc != NUM_ ; }
public static boolean hasTenant ( ) { return BaggageContents . contains ( RETRO_BAGGAGE_NAMESPACE , TENANT_ID_BAGGAGE_FIELD ) ; }
public void close ( ) throws java . io . IOException { flushBase64 ( ) ; super . close ( ) ; buffer = null ; out = null ; }
void notifyDataSetChanged ( ) ;
private void createEnableReplicationSubCommand ( ) throws ArgumentException { createServerArgs1 ( ) ; createServerArgs2 ( ) ; skipPortCheckArg = BooleanArgument . builder ( STR_ ) . shortIdentifier ( STR_ ) . description ( INFO_DESCRIPTION_ENABLE_REPLICATION_SKIPPORT . get ( ) ) . buildArgument ( ) ; noSchemaReplicationArg = BooleanArgument . builder ( STR_ ) . description ( INFO_DESCRIPTION_ENABLE_REPLICATION_NO_SCHEMA_REPLICATION . get ( ) ) . buildArgument ( ) ; useSecondServerAsSchemaSourceArg = BooleanArgument . builder ( STR_ ) . description ( INFO_DESCRIPTION_ENABLE_REPLICATION_USE_SECOND_AS_SCHEMA_SOURCE . get ( STR_ + noSchemaReplicationArg . getLongIdentifier ( ) ) ) . buildArgument ( ) ; enableReplicationSubCmd = new SubCommand ( this , ENABLE_REPLICATION_SUBCMD_NAME , INFO_DESCRIPTION_SUBCMD_ENABLE_REPLICATION . get ( ) ) ; addArgumentsToSubCommand ( enableReplicationSubCmd , server1 . hostNameArg , server1 . portArg , server1 . bindDnArg , server1 . bindPasswordArg , server1 . bindPasswordFileArg , server1 . replicationPortArg , server1 . secureReplicationArg , server1 . noReplicationServerArg , server1 . onlyReplicationServerArg , server2 . hostNameArg , server2 . portArg , server2 . bindDnArg , server2 . bindPasswordArg , server2 . bindPasswordFileArg , server2 . replicationPortArg , server2 . secureReplicationArg , server2 . noReplicationServerArg , server2 . onlyReplicationServerArg , skipPortCheckArg , noSchemaReplicationArg , useSecondServerAsSchemaSourceArg ) ; }
private void renderAxes ( Camera camera ) { glPushMatrix ( ) ; glLoadIdentity ( ) ; float rotX = camera . getRotation ( ) . x ; float rotY = camera . getRotation ( ) . y ; float rotZ = NUM_ ; glRotatef ( rotX , NUM_ , NUM_ , NUM_ ) ; glRotatef ( rotY , NUM_ , NUM_ , NUM_ ) ; glRotatef ( rotZ , NUM_ , NUM_ , NUM_ ) ; glLineWidth ( NUM_ ) ; glBegin ( GL_LINES ) ; glColor3f ( NUM_ , NUM_ , NUM_ ) ; glVertex3f ( NUM_ , NUM_ , NUM_ ) ; glVertex3f ( NUM_ , NUM_ , NUM_ ) ; glColor3f ( NUM_ , NUM_ , NUM_ ) ; glVertex3f ( NUM_ , NUM_ , NUM_ ) ; glVertex3f ( NUM_ , NUM_ , NUM_ ) ; glColor3f ( NUM_ , NUM_ , NUM_ ) ; glVertex3f ( NUM_ , NUM_ , NUM_ ) ; glVertex3f ( NUM_ , NUM_ , NUM_ ) ; glEnd ( ) ; glPopMatrix ( ) ; }
final public static int insertCollection ( String collection , V v ) { MongoCollection < Document > c = getCollection ( collection ) ; if ( c != null ) { Document d = new Document ( ) ; for ( String name : v . names ( ) ) { Object v1 = v . value ( name ) ; d . append ( name , v1 ) ; } try { c . insertOne ( d ) ; if ( log . isDebugEnabled ( ) ) log . debug ( STR_ + collection + STR_ + d ) ; return NUM_ ; } catch ( Exception e ) { if ( log . isErrorEnabled ( ) ) log . error ( e . getMessage ( ) , e ) ; } } return NUM_ ; }
public boolean isOpenInNewTabEnabled ( ) { return isOpenInNewTabEnabled ; }
private RadialGradient_Delegate ( float x , float y , float radius , int colors [ ] , float positions [ ] , TileMode tile ) { super ( colors , positions ) ; mJavaPaint = new RadialGradientPaint ( x , y , radius , mColors , mPositions , tile ) ; }
public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case NUM_ : return NODE_ID ; case NUM_ : return DOMAIN_ID ; case NUM_ : return HOSTNAME ; case NUM_ : return PORT ; default : return null ; } }
public abstract void addProgressComponents ( Container panel ) ;
public StringConverter ( final Map < String , String > map , final int lengthLimit ) { cache = map ; this . lengthLimit = lengthLimit ; }
Iterator < E > iterator ( ) ;
public void printLayoutToStdOut ( ) throws KeeperException , InterruptedException { StringBuilder sb = new StringBuilder ( ) ; printLayout ( STR_ , NUM_ , sb ) ; System . out . println ( sb . toString ( ) ) ; }
public String hashPassword ( String username , String clearText ) ;
public ResourceManager ( ResourceBundle rb ) { bundle = rb ; }
ConstrainableRegistrarLeaseMap ( RegistrarLease lease , long duration ) { super ( ( Registrar ) ( ( RemoteMethodControl ) lease . getRegistrar ( ) ) . setConstraints ( ConstrainableProxyUtil . translateConstraints ( ( ( RemoteMethodControl ) lease ) . getConstraints ( ) , methodMappings ) ) , lease , duration ) ; }
public static byte [ ] doubleDigestTwoBuffers ( byte [ ] input1 , int offset1 , int length1 , byte [ ] input2 , int offset2 , int length2 ) { synchronized ( digest ) { digest . reset ( ) ; digest . update ( input1 , offset1 , length1 ) ; digest . update ( input2 , offset2 , length2 ) ; byte [ ] first = digest . digest ( ) ; return digest . digest ( first ) ; } }
protected FileIOAnnotationJob ( String inputfile , String outputfile , TextAnnotationBuilder tab , NERAnnotator ann ) { this . inputfile = inputfile ; this . outputfile = outputfile ; this . tab = tab ; this . nerAnnotator = ann ; }
public OptionalValueEditor ( FunctionTableModel tableModel ) { this . tableModel = tableModel ; checkBox . setHorizontalAlignment ( JLabel . CENTER ) ; }
public JPEGQTable ( int [ ] table ) { if ( table == null ) { throw new IllegalArgumentException ( STR_ ) ; } if ( table . length != NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } qTable = Arrays . copyOf ( table , table . length ) ; }
public LogisticGrowthModel ( String name , Parameter N0Parameter , Parameter growthRateParameter , Parameter shapeParameter , double alpha , Type units , boolean usingGrowthRate ) { super ( name ) ; logisticGrowth = new LogisticGrowth ( units ) ; this . N0Parameter = N0Parameter ; addVariable ( N0Parameter ) ; N0Parameter . addBounds ( new Parameter . DefaultBounds ( Double . POSITIVE_INFINITY , NUM_ , NUM_ ) ) ; this . growthRateParameter = growthRateParameter ; addVariable ( growthRateParameter ) ; growthRateParameter . addBounds ( new Parameter . DefaultBounds ( Double . POSITIVE_INFINITY , NUM_ , NUM_ ) ) ; this . shapeParameter = shapeParameter ; addVariable ( shapeParameter ) ; shapeParameter . addBounds ( new Parameter . DefaultBounds ( Double . POSITIVE_INFINITY , NUM_ , NUM_ ) ) ; this . alpha = alpha ; this . usingGrowthRate = usingGrowthRate ; setUnits ( units ) ; }
public static void copy ( InputStream i , OutputStream o ) throws IOException { copy ( i , o , NUM_ ) ; }
public boolean hasOrder ( ) { return order != null ; }
public abstract void denyRequest ( Creature requester , Player responder ) ;
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( prefix07 . class , args ) ; }
public Status ( ) { }
private void skipToNewlineToken ( ) { while ( ! builder . eof ( ) ) { if ( currentToken ( ) == ProjectViewTokenType . NEWLINE ) { return ; } builder . advanceLexer ( ) ; } }
protected void fireItemStateChanged ( ItemEvent e ) { Object [ ] listeners = listenerList . getListenerList ( ) ; for ( int i = listeners . length - NUM_ ; i >= NUM_ ; i -= NUM_ ) { if ( listeners [ i ] == ItemListener . class ) { ( ( ItemListener ) listeners [ i + NUM_ ] ) . itemStateChanged ( e ) ; } } }
public static double min ( DoubleArrayList data ) { int size = data . size ( ) ; if ( size == NUM_ ) throw new IllegalArgumentException ( ) ; double [ ] elements = data . elements ( ) ; double min = elements [ size - NUM_ ] ; for ( int i = size - NUM_ ; -- i >= NUM_ ; ) { if ( elements [ i ] < min ) min = elements [ i ] ; } return min ; }
public void listaOrganizacionesExecuteLogic ( ActionMapping mappings , ActionForm form , HttpServletRequest request , HttpServletResponse response ) { ServiceRepository services = ServiceRepository . getInstance ( ServiceClient . create ( getAppUser ( request ) ) ) ; GestionOrganizacionBI organizacionBI = services . lookupGestionOrganizacionBI ( ) ; List organizaciones = organizacionBI . buscarOrganizaciones ( new OrganizacionVO ( ) ) ; request . setAttribute ( STR_ , organizaciones ) ; request . setAttribute ( STR_ , STR_ ) ; request . setAttribute ( STR_ , OrganizacionConstants . ORGANIZACION_VIEW_NAME ) ; saveCurrentInvocation ( KeysClientsInvocations . USUARIOS_LISTA_ORGANIZACIONES , request ) ; setReturnActionFordward ( request , mappings . findForward ( STR_ ) ) ; }
public boolean isDottedUnderlineTriple ( Node x , Node y , Node z ) { return getGraph ( ) . isDottedUnderlineTriple ( x , y , z ) ; }
public ResourceServlet ( Resource resource ) { this . resource = resource ; }
private static void debugPrintln ( String msg ) { if ( DEBUG ) { System . err . println ( STR_ + msg ) ; } }
public static NbtInputStream fromDeflater ( InputStream in , NbtLimiter limiter ) { return new NbtInputStream ( new DataInputStream ( new BufferedInputStream ( new DeflaterInputStream ( new NbtInputLimitedStream ( in , limiter ) ) ) ) ) ; }
protected void storeState ( ) { storedLikelihoodKnown = likelihoodKnown ; storedLogLikelihood = logLikelihood ; }
boolean thresholdExceeded ( final Set < IBindingSet > distinctProjectionBuffer , final int distinctProjectionBufferThreshold , final List < IBindingSet > incomingBindingsBuffer , final int incomingBindingsBufferThreshold ) { return distinctProjectionBuffer . size ( ) >= distinctProjectionBufferThreshold || incomingBindingsBuffer . size ( ) >= incomingBindingsBufferThreshold ; }
protected boolean checkColumnNames ( ResultSet rs , String [ ] names ) throws SQLException { ResultSetMetaData rsmd = rs . getMetaData ( ) ; if ( rsmd . getColumnCount ( ) < names . length ) { System . out . println ( STR_ + rsmd . getColumnCount ( ) ) ; return BOOL_ ; } for ( int i = NUM_ ; i <= names . length ; i ++ ) { if ( names [ i - NUM_ ] . length ( ) > NUM_ && ! rsmd . getColumnLabel ( i ) . equals ( names [ i - NUM_ ] ) ) { System . out . println ( names [ i - NUM_ ] + STR_ + rsmd . getColumnLabel ( i ) ) ; return BOOL_ ; } } return BOOL_ ; }
void removeEQ ( Object o ) { final ReentrantLock lock = this . lock ; lock . lock ( ) ; try { for ( Iterator < E > it = q . iterator ( ) ; it . hasNext ( ) ; ) { if ( o == it . next ( ) ) { it . remove ( ) ; break ; } } } finally { lock . unlock ( ) ; } }
public void worldToLocal ( Vector3 coord ) { coord . setX ( coord . getX ( ) - tiePoint [ NUM_ ] - ( physicalWidth / NUM_ ) ) ; coord . setY ( coord . getY ( ) - tiePoint [ NUM_ ] + ( physicalLength / NUM_ ) ) ; coord . setZ ( coord . getZ ( ) - tiePoint [ NUM_ ] ) ; }
public void login ( String authSubToken ) { service . setAuthSubToken ( authSubToken ) ; }
public ClassMemberValue ( ConstPool cp ) { super ( STR_ , cp ) ; setValue ( STR_ ) ; }
public void sendException ( final Exception exception , final Map < String , String > properties ) { final PropertyMapBuilder builder = new PropertyMapBuilder ( properties ) ; logger . debug ( String . format ( STR_ , exception . getMessage ( ) , builder . toString ( ) ) ) ; if ( telemetryClient != null ) { telemetryClient . trackException ( exception , builder . build ( ) , null ) ; } }
public final void addAlias ( final URI serviceURI , final URI aliasURI ) { if ( serviceURI == null ) throw new IllegalArgumentException ( ) ; if ( aliasURI == null ) throw new IllegalArgumentException ( ) ; synchronized ( this ) { if ( services . containsKey ( aliasURI ) ) { throw new IllegalStateException ( STR_ + aliasURI ) ; } if ( aliases . containsKey ( aliasURI ) ) { throw new IllegalStateException ( STR_ + aliasURI ) ; } aliases . put ( aliasURI , serviceURI ) ; } }
public static float convertPixelsToDp ( float px , Context context ) { Resources resources = context . getResources ( ) ; DisplayMetrics metrics = resources . getDisplayMetrics ( ) ; float dp = px / ( ( float ) metrics . densityDpi / DisplayMetrics . DENSITY_DEFAULT ) ; return dp ; }
public int [ ] batch ( Connection conn , String sql , Object [ ] [ ] params ) throws SQLException { return batch ( conn , sql , params , null ) ; }
public void reset ( Reader in ) { lexer . yyreset ( in ) ; reset ( ) ; }
private int readAnnotationValues ( int v , final char [ ] buf , final boolean named , final AnnotationVisitor av ) { int i = readUnsignedShort ( v ) ; v += NUM_ ; if ( named ) { for ( ; i > NUM_ ; -- i ) { v = readAnnotationValue ( v + NUM_ , buf , readUTF8 ( v , buf ) , av ) ; } } else { for ( ; i > NUM_ ; -- i ) { v = readAnnotationValue ( v , buf , null , av ) ; } } if ( av != null ) { av . visitEnd ( ) ; } return v ; }
public static boolean useLinearProbabilisticScalingOfPrice ( ) { if ( mainChargingPriceBlurFactor == - NUM_ ) { return BOOL_ ; } else { return BOOL_ ; } }
public boolean canPopupOverlapTaskBar ( ) { boolean result = BOOL_ ; try { SecurityManager sm = System . getSecurityManager ( ) ; if ( sm != null ) { sm . checkPermission ( SecurityConstants . AWT . SET_WINDOW_ALWAYS_ON_TOP_PERMISSION ) ; } } catch ( SecurityException se ) { result = BOOL_ ; } return result ; }
public byte [ ] encryptViaKek ( byte [ ] content ) { return cryptoViaKek ( content , Cipher . ENCRYPT_MODE ) ; }
public CBCOracleRequest ( byte [ ] iv , byte [ ] c1 ) { this . encryptedData = new byte [ iv . length * NUM_ ] ; System . arraycopy ( iv , NUM_ , encryptedData , NUM_ , iv . length ) ; System . arraycopy ( c1 , NUM_ , encryptedData , iv . length , c1 . length ) ; }
protected boolean keep ( ConstraintVariable2 cv1 , ConstraintVariable2 cv2 ) { if ( ( cv1 == null || cv2 == null ) ) return BOOL_ ; if ( cv1 . equals ( cv2 ) ) { if ( cv1 == cv2 ) return BOOL_ ; else Assert . isTrue ( BOOL_ ) ; } if ( cv1 instanceof CollectionElementVariable2 || cv2 instanceof CollectionElementVariable2 ) return BOOL_ ; if ( cv1 instanceof IndependentTypeVariable2 || cv2 instanceof IndependentTypeVariable2 ) return BOOL_ ; if ( isAGenericType ( cv1 . getType ( ) ) ) return BOOL_ ; if ( isAGenericType ( cv2 . getType ( ) ) ) return BOOL_ ; return BOOL_ ; }
private java . lang . String registerPrefix ( javax . xml . stream . XMLStreamWriter xmlWriter , java . lang . String namespace ) throws javax . xml . stream . XMLStreamException { java . lang . String prefix = xmlWriter . getPrefix ( namespace ) ; if ( prefix == null ) { prefix = generatePrefix ( namespace ) ; while ( xmlWriter . getNamespaceContext ( ) . getNamespaceURI ( prefix ) != null ) { prefix = org . apache . axis2 . databinding . utils . BeanUtil . getUniquePrefix ( ) ; } xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } return prefix ; }
public static List < Path > listFilesOnly ( Path directory ) { List < Path > fileNames = new ArrayList < > ( ) ; try ( DirectoryStream < Path > directoryStream = Files . newDirectoryStream ( directory ) ) { for ( Path path : directoryStream ) { if ( Utils . isRegularFile ( path ) ) { String fn = path . getFileName ( ) . toString ( ) . toUpperCase ( ) ; if ( ! skipFolders . contains ( fn ) && ! fn . matches ( skipRegex ) && ! TvShowModuleManager . SETTINGS . getTvShowSkipFolders ( ) . contains ( path . toFile ( ) . getAbsolutePath ( ) ) ) { fileNames . add ( path . toAbsolutePath ( ) ) ; } else { LOGGER . debug ( STR_ + path ) ; } } } } catch ( IOException ex ) { } return fileNames ; }
public final void log ( LogMessage lm ) { if ( flushMessages ) lm . prepareForFlush ( ) ; addMessage ( lm ) ; }
public void readMemory ( final Address address , final int size ) throws DebugException { try { m_debugger . readMemory ( new CAddress ( address . toLong ( ) ) , size ) ; } catch ( final DebugExceptionWrapper e ) { throw new DebugException ( e ) ; } }
int insertSelective ( User record ) ;
public abstract boolean isRegistered ( ) ;
public static Test suite ( ) { return new TestSuite ( MergeInfrequentNominalValuesTest . class ) ; }
public FiltersAggregationBuilder otherBucketKey ( String otherBucketKey ) { this . otherBucketKey = otherBucketKey ; return this ; }
public Joiner pushList ( String alias ) { if ( mapBuilder == null ) { mapBuilder = new MapBuilder ( this ) ; } mapBuilder . addTerm ( MapBuilderTermType . LIST , lookupAlias ( alias ) , alias ) ; return this ; }
public UpdateRequest upsert ( Object ... source ) { safeUpsertRequest ( ) . source ( source ) ; return this ; }
public void notifyDataSetChanged ( ) { mObservable . notifyChanged ( ) ; }
default void dispatch ( Throwable error ) { RequestLog . stopTiming ( REQUEST_WORKFLOW_TIMER ) ; RequestLog . startTiming ( RESPONSE_WORKFLOW_TIMER ) ; invoke ( error ) ; }
protected abstract Method doGetListenerMethod ( ) ;
public static BufferedImage mergeImageAndText ( URL imageFilePath , List < TextPosition > textList ) throws IOException { BufferedImage im = ImageIO . read ( imageFilePath ) ; Graphics2D g2 = im . createGraphics ( ) ; Font font = AppSplashScreen . getFont ( ) ; g2 . setFont ( font ) ; g2 . setRenderingHint ( RenderingHints . KEY_TEXT_ANTIALIASING , RenderingHints . VALUE_TEXT_ANTIALIAS_ON ) ; g2 . setColor ( Color . black ) ; for ( TextPosition obj : textList ) { g2 . drawString ( obj . textString , obj . position . x , obj . position . y ) ; } ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; ImageIO . write ( im , STR_ , baos ) ; InputStream in = new ByteArrayInputStream ( baos . toByteArray ( ) ) ; BufferedImage bImageFromConvert = ImageIO . read ( in ) ; return bImageFromConvert ; }
public final int decrementPendingCountUnlessZero ( ) { int c ; do { } while ( ( c = pending ) != NUM_ && ! U . compareAndSwapInt ( this , PENDING , c , c - NUM_ ) ) ; return c ; }
public void testInputResources ( ) throws Exception { File f = this . initFile ( STR_ ) ; writeAscendingIntFile ( f , NUM_ ) ; for ( int fcnt = NUM_ ; fcnt < NUM_ ; fcnt ++ ) { BufferedFileDataInput bfdi = new BufferedFileDataInput ( f ) ; long offset = bfdi . getOffset ( ) ; for ( int i = NUM_ ; i < NUM_ ; i ++ ) { String position = STR_ + fcnt + STR_ + i ; assertEquals ( position , i , bfdi . readInt ( ) ) ; offset += NUM_ ; assertEquals ( position , offset , bfdi . getOffset ( ) ) ; } bfdi . close ( ) ; } }
public boolean isDrawFinishedLw ( ) { return mHasSurface && ! mDestroying && ( mWinAnimator . mDrawState == WindowStateAnimator . COMMIT_DRAW_PENDING || mWinAnimator . mDrawState == WindowStateAnimator . READY_TO_SHOW || mWinAnimator . mDrawState == WindowStateAnimator . HAS_DRAWN ) ; }
public static void finishStartingService ( Service service , int startId ) { synchronized ( mStartingServiceSync ) { if ( mStartingService != null ) { if ( service . stopSelfResult ( startId ) ) { mStartingService . release ( ) ; } } } }
public PlaSegmentFloat translate ( double p_dist ) { double dx = point_b . v_x - point_a . v_x ; double dy = point_b . v_y - point_a . v_y ; double dxdx = dx * dx ; double dydy = dy * dy ; double lenght = Math . sqrt ( dxdx + dydy ) ; PlaPointFloat new_a ; if ( dxdx <= dydy ) { double rel_x = ( p_dist * lenght ) / dy ; new_a = new PlaPointFloat ( point_a . v_x - rel_x , point_a . v_y ) ; } else { double rel_y = ( p_dist * lenght ) / dx ; new_a = new PlaPointFloat ( point_a . v_x , point_a . v_y + rel_y ) ; } PlaPointFloat new_b = new PlaPointFloat ( new_a . v_x + dx , new_a . v_y + dy ) ; return new PlaSegmentFloat ( new_a , new_b ) ; }
public static boolean isSamePackageMember ( Class < ? > class1 , Class < ? > class2 ) { if ( class1 == class2 ) return BOOL_ ; if ( ! isSamePackage ( class1 , class2 ) ) return BOOL_ ; if ( getOutermostEnclosingClass ( class1 ) != getOutermostEnclosingClass ( class2 ) ) return BOOL_ ; return BOOL_ ; }
public boolean verify ( PublicKey key , Provider sigProvider ) throws NoSuchAlgorithmException , NoSuchProviderException , CMSException { getSigningTime ( ) ; return doVerify ( key , sigProvider ) ; }
private static ParserBolt createParserBolt ( String zookeeperUrl , String brokerUrl , String sensorType , ParserConfigurations configs , SensorParserConfig parserConfig ) { MessageParser < JSONObject > parser = ReflectionUtils . createInstance ( parserConfig . getParserClassName ( ) ) ; parser . configure ( parserConfig . getParserConfig ( ) ) ; AbstractWriter writer = parserConfig . getWriterClassName ( ) == null ? new KafkaWriter ( brokerUrl ) . withTopic ( Constants . ENRICHMENT_TOPIC ) : ReflectionUtils . createInstance ( parserConfig . getWriterClassName ( ) ) ; writer . configure ( sensorType , new ParserWriterConfiguration ( configs ) ) ; WriterHandler writerHandler = createWriterHandler ( writer ) ; return new ParserBolt ( zookeeperUrl , sensorType , parser , writerHandler ) ; }
public static synchronized void addCert ( String keyId , byte [ ] certBytes ) { log . trace ( STR_ , keyId ) ; Key key = findKey ( keyId ) ; Cert cert = new Cert ( SignerUtil . randomId ( ) ) ; cert . setCertificate ( certBytes ) ; key . addCert ( cert ) ; }
public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case NUM_ : return MESSAGE_TYPE ; case NUM_ : return SW_PORT_TUPLE ; case NUM_ : return DATA ; default : return null ; } }
public NamespaceId ( final String name ) { this ( parse ( name ) ) ; }
private void cannotLoadImage ( ) { CharSequence text = getString ( R . string . cannot_load_image ) ; Toast toast = Toast . makeText ( this , text , Toast . LENGTH_SHORT ) ; toast . show ( ) ; }
private boolean zzRefill ( ) throws java . io . IOException { return BOOL_ ; }
public RequestHandle head ( Context context , String url , RequestParams params , ResponseHandlerInterface responseHandler ) { return sendRequest ( httpClient , httpContext , new HttpHead ( getUrlWithQueryString ( isUrlEncodingEnabled , url , params ) ) , null , responseHandler , context ) ; }
public void invertSelection ( ) { partition . invertSelection ( ) ; }
private String addEnableImageAccessStep ( Workflow workflow , ProtectionSystem rpSystem , Map < URI , Integer > snapshots , String waitFor ) throws InternalException { String stepId = workflow . createStepId ( ) ; Workflow . Method enableImageAccessExecuteMethod = new Workflow . Method ( METHOD_ENABLE_IMAGE_ACCESS_STEP , rpSystem . getId ( ) , snapshots ) ; Workflow . Method enableImageAccessExecutionRollbackMethod = new Workflow . Method ( METHOD_ENABLE_IMAGE_ACCESS_ROLLBACK_STEP , rpSystem . getId ( ) , snapshots , BOOL_ ) ; workflow . createStep ( STEP_ENABLE_IMAGE_ACCESS , STR_ + snapshots . keySet ( ) , waitFor , rpSystem . getId ( ) , rpSystem . getSystemType ( ) , this . getClass ( ) , enableImageAccessExecuteMethod , enableImageAccessExecutionRollbackMethod , stepId ) ; _log . info ( String . format ( STR_ , stepId ) ) ; return STEP_ENABLE_IMAGE_ACCESS ; }
public final void invertValueOrdering ( ) { mValueOrderingSign = - mValueOrderingSign ; mSorted = BOOL_ ; }
final int recordExceptionalCompletion ( Throwable ex ) { int s ; if ( ( s = status ) >= NUM_ ) { int h = System . identityHashCode ( this ) ; final ReentrantLock lock = exceptionTableLock ; lock . lock ( ) ; try { expungeStaleExceptions ( ) ; ExceptionNode [ ] t = exceptionTable ; int i = h & ( t . length - NUM_ ) ; for ( ExceptionNode e = t [ i ] ; ; e = e . next ) { if ( e == null ) { t [ i ] = new ExceptionNode ( this , ex , t [ i ] ) ; break ; } if ( e . get ( ) == this ) break ; } } finally { lock . unlock ( ) ; } s = setCompletion ( EXCEPTIONAL ) ; } return s ; }
public static int compareNull ( boolean aNull , int sortType ) { if ( ( sortType & NULLS_FIRST ) != NUM_ ) { return aNull ? - NUM_ : NUM_ ; } else if ( ( sortType & NULLS_LAST ) != NUM_ ) { return aNull ? NUM_ : - NUM_ ; } else { int comp = aNull ? DEFAULT_NULL_SORT : - DEFAULT_NULL_SORT ; return ( sortType & DESCENDING ) == NUM_ ? comp : - comp ; } }
public JsonSerializer ( final boolean enforceReadWriteOrder ) { this ( null , enforceReadWriteOrder ) ; }
public abstract void serviceRest ( HttpServlet servlet , HttpServletRequest req , HttpServletResponse rsp ) throws ServletException , IOException ;
public native void bind ( int pos , byte [ ] value ) throws SQLite . Exception ;
public boolean hasField ( FieldKey key ) { if ( key == null ) { throw new IllegalArgumentException ( ErrorMessage . GENERAL_INVALID_NULL_ARGUMENT . getMsg ( ) ) ; } try { return getFirstField ( key ) != null ; } catch ( KeyNotFoundException knfe ) { logger . log ( Level . SEVERE , knfe . getMessage ( ) , knfe ) ; return BOOL_ ; } }
public abstract void onSelectDate ( LocalDateTime mSelectedDate ) ;
public void remove ( ) { map . remove ( Thread . currentThread ( ) . getId ( ) ) ; }
protected abstract String pullElementName ( ) ;
public static void e ( String tag , String msg ) { e ( tag , msg , null ) ; }
public long restartTime ( long now ) { if ( mNumFailed == NUM_ ) { return now ; } if ( mRetryAfter > NUM_ ) { return mLastMod + mRetryAfter ; } return mLastMod + Constants . RETRY_FIRST_DELAY * ( NUM_ + mFuzz ) * ( NUM_ << ( mNumFailed - NUM_ ) ) ; }
public boolean isDone ( ) { if ( findAllTypes ) { return hasProperIntersection && hasNonProperIntersection ; } if ( findProper ) { return hasProperIntersection ; } return hasIntersection ; }
Prototype compile ( InputStream stream , String chunkname ) throws IOException ;
public static double distanceInMeters ( final double latP1 , final double latP2 , final double lonP1 , final double lonP2 ) { double distRad = Math . acos ( Math . sin ( toRadians ( latP1 ) ) * Math . sin ( toRadians ( latP2 ) ) + Math . cos ( toRadians ( latP1 ) ) * Math . cos ( toRadians ( latP2 ) ) * Math . cos ( toRadians ( lonP1 - lonP2 ) ) ) ; final double distAsDegree = toDegrees ( distRad ) ; return distAsDegree * NUM_ * NUM_ * NUM_ ; }
public CInsertAndOperatorAction ( final CCriteriumTree tree , final CCriteriumTreeNode parent ) { super ( STR_ ) ; m_tree = tree ; m_parent = parent ; }
public long manhattanDistance ( final MutableInt2D p ) { return Math . abs ( ( long ) this . x - p . x ) + Math . abs ( ( long ) this . y - p . y ) ; }
public boolean isValid ( ) { try { findDef ( ) ; } catch ( TypeScriptNoContentAvailableException e ) { return BOOL_ ; } catch ( Exception e ) { TypeScriptUIPlugin . log ( STR_ , e ) ; return BOOL_ ; } return isFileExists ( file ) || isFileExists ( fs ) ; }
public void testTypeCastException ( ) throws Exception { try { new TestHelper ( STR_ ) . runTest ( ) ; } catch ( Exception e ) { if ( e . getMessage ( ) . contains ( FulltextSearchException . TYPE_CAST_EXCEPTION ) ) { return ; } } throw new RuntimeException ( STR_ ) ; }
protected void notifySearchListeners ( SearchEvent e ) { Iterator < SearchListener > iter ; iter = m_SearchListeners . iterator ( ) ; while ( iter . hasNext ( ) ) iter . next ( ) . searchInitiated ( e ) ; }
public ContinuousQueryTask continuousQuery ( TokenFilter filter , ContinuousQueryListener listener ) { return new ContinuousQueryTask ( filter , listener ) ; }
void update ( ) ;
public String push ( final StackType stackType , final Request entry , CrawlProfile profile , final RobotsTxt robots ) { try { switch ( stackType ) { case LOCAL : return this . coreStack . push ( entry , profile , robots ) ; case GLOBAL : return this . limitStack . push ( entry , profile , robots ) ; case REMOTE : { if ( this . remoteStack == null ) { this . initRemoteStack ( ) ; } return ( this . remoteStack != null ) ? this . remoteStack . push ( entry , profile , robots ) : STR_ ; } case NOLOAD : return this . noloadStack . push ( entry , profile , robots ) ; default : return STR_ ; } } catch ( final Exception er ) { ConcurrentLog . logException ( er ) ; return STR_ + er . getMessage ( ) ; } }
public void put ( ByteBuffer src , int length ) { while ( length > NUM_ ) { ByteBuffer dst = getWriteChunk ( ) ; int n = Math . min ( dst . remaining ( ) , length ) ; copy ( src , dst , n ) ; length -= n ; } }
public Boolean isFtSupported ( ) { return ftSupported ; }
private void returnData ( Object ret ) { if ( myHost != null ) { myHost . returnData ( ret ) ; } }
void onUserTitleAvailable ( String title ) ;
public void remove ( String key ) { properties . remove ( key ) ; }
private synchronized void trim ( ) { while ( mCurrentSize > mSizeLimit ) { byte [ ] buf = mBuffersByLastUse . remove ( NUM_ ) ; mBuffersBySize . remove ( buf ) ; mCurrentSize -= buf . length ; } }
void onItemClicked ( WheelView wheel , int itemIndex ) ;
public static void registerMetadata ( MetadataRegistry registry ) { if ( registry . isRegistered ( KEY ) ) { return ; } ElementCreator builder = registry . build ( KEY ) ; }
void performLongClickAfterAnimation ( ) ;
private static boolean expect ( StringTokenizer tokenizer , String token ) { if ( ! tokenizer . hasMoreTokens ( ) ) { return BOOL_ ; } String s = tokenizer . nextToken ( ) ; if ( DEBUG ) { System . out . println ( STR_ + s ) ; } return s . equals ( token ) ; }
public boolean hasFlicker ( ) { return flicker ; }
protected void tearDown ( ) { }
void resetTopSorted ( ) ;
public void invoke ( AbstractHessianInput in , AbstractHessianOutput out ) throws Exception { invoke ( _service , in , out ) ; }
public void startScroll ( int startX , int startY , int dx , int dy ) { startScroll ( startX , startY , dx , dy , DEFAULT_DURATION ) ; }
public AEADBadTagException ( ) { super ( ) ; }
boolean isOnline ( ) ;
public void addHours ( int hours ) { super . addField ( DurationFieldType . hours ( ) , hours ) ; }
boolean checkEOF ( ) throws IOException { switch ( getConnectionState ( ) ) { case cs_START : throw new SocketException ( STR_ ) ; case cs_HANDSHAKE : case cs_DATA : case cs_RENEGOTIATE : case cs_SENT_CLOSE : return BOOL_ ; case cs_APP_CLOSED : throw new SocketException ( STR_ ) ; case cs_ERROR : case cs_CLOSED : default : if ( closeReason == null ) { return BOOL_ ; } IOException e = new SSLException ( STR_ + closeReason ) ; e . initCause ( closeReason ) ; throw e ; } }
public void monitorExit ( ) { mv . visitInsn ( Opcodes . MONITOREXIT ) ; }
static public void assertNotSame ( String message , Object expected , Object actual ) { if ( expected == actual ) failSame ( message ) ; }
public String toString ( ) { return id ; }
default Document increment ( CharSequence name , int increment ) { return increment ( name , Value . create ( increment ) ) ; }
public Set < String > keySet ( ) { return this . map . keySet ( ) ; }
public com . sun . identity . wsfederation . jaxb . wsspolicy . MustSupportServerChallengeElement createMustSupportServerChallengeElement ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . wsfederation . jaxb . wsspolicy . impl . MustSupportServerChallengeElementImpl ( ) ; }
public LowerCaseFilter ( TokenStream in ) { super ( in ) ; }
public void updateUser ( User user ) throws UsersRepositoryException { EntityManager entityManager = entityManagerFactory . createEntityManager ( ) ; final EntityTransaction transaction = entityManager . getTransaction ( ) ; try { if ( contains ( user . getUserName ( ) ) ) { transaction . begin ( ) ; entityManager . merge ( user ) ; transaction . commit ( ) ; } else { getLogger ( ) . debug ( STR_ ) ; throw new UsersRepositoryException ( STR_ + user . getUserName ( ) + STR_ ) ; } } catch ( PersistenceException e ) { getLogger ( ) . debug ( STR_ , e ) ; if ( transaction . isActive ( ) ) { transaction . rollback ( ) ; } throw new UsersRepositoryException ( STR_ + user . getUserName ( ) , e ) ; } finally { entityManager . close ( ) ; } }
public boolean isZero ( ) { return ( this == ZERO ) ; }
private void createInfoLayout ( ) { LayoutInflater inflater = ( LayoutInflater ) getSystemService ( LAYOUT_INFLATER_SERVICE ) ; infoLayout = ( LinearLayout ) inflater . inflate ( R . layout . dialog_info_window , null ) ; layoutParams . gravity = Gravity . CENTER | Gravity . BOTTOM ; ButterKnife . bind ( this , infoLayout ) ; createInputLayout ( ) ; createResultLayout ( ) ; createAllIvLayout ( ) ; initPositionHandler ( ) ; }
public abstract boolean isDirect ( ) ;
void editLocalCodeNodeComment ( INaviCodeNode codeNode , Integer commentId , Integer userId , String newCommentText ) throws CouldntSaveDataException ;
private void writeQName ( javax . xml . namespace . QName qname , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { java . lang . String namespaceURI = qname . getNamespaceURI ( ) ; if ( namespaceURI != null ) { java . lang . String prefix = xmlWriter . getPrefix ( namespaceURI ) ; if ( prefix == null ) { prefix = generatePrefix ( namespaceURI ) ; xmlWriter . writeNamespace ( prefix , namespaceURI ) ; xmlWriter . setPrefix ( prefix , namespaceURI ) ; } if ( prefix . trim ( ) . length ( ) > NUM_ ) { xmlWriter . writeCharacters ( prefix + STR_ + org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } }
public void didCommit ( ) { }
protected static ImageIcon loadIcon ( String iconFile ) { try { return new ImageIcon ( DefaultCheckboxTreeCellRenderer . class . getClassLoader ( ) . getResource ( iconFile ) ) ; } catch ( NullPointerException npe ) { return null ; } }
public void onBackPressed ( ) { if ( ! mFragments . popBackStackImmediate ( ) ) { finish ( ) ; } }
public < F > void addViewType ( Class < ? extends F > clazz , ViewHolderFactory < ? extends ViewHolder < ? extends F > > factory ) { int id = mViewHolderFactoryRegistry . size ( ) ; mViewHolderTypeRegistry . put ( clazz , id ) ; mViewHolderFactoryRegistry . put ( id , factory ) ; }
protected void readNetscapeExt ( ) { do { readBlock ( ) ; if ( block [ NUM_ ] == NUM_ ) { int b1 = block [ NUM_ ] & NUM_ ; int b2 = block [ NUM_ ] & NUM_ ; loopCount = ( b2 << NUM_ ) | b1 ; } } while ( ( blockSize > NUM_ ) && ! err ( ) ) ; }
public IgniteSpiException ( String msg ) { super ( msg ) ; }
public static DhcpPacket decodeFullPacket ( byte [ ] packet , int pktType ) { ByteBuffer buffer = ByteBuffer . wrap ( packet ) . order ( ByteOrder . BIG_ENDIAN ) ; return decodeFullPacket ( buffer , pktType ) ; }
public void loginWithUsername ( final String username , final String password , final ResultListener listener ) { login ( username , null , password , listener ) ; }
public boolean isLogicalFunction ( ) { return BOOL_ ; }
public RefField findField ( final RefClass type ) { return this . findField ( type . clazz ) ; }
private boolean isMineshafterPresent ( ) { try { Class . forName ( STR_ ) ; return BOOL_ ; } catch ( Exception e ) { return BOOL_ ; } }
public boolean isEmpty ( ) { return firstEvent == null ; }
public static Face drawDir ( Direction dir , MeshModel model , double minX , double minY , double minZ , double maxX , double maxY , double maxZ , CubeTextureCoordinates textureCoordinates ) { switch ( dir ) { case DOWN : return drawDown ( model , minX , minY , minZ , maxX , maxY , maxZ , textureCoordinates ) ; case UP : return drawUp ( model , minX , minY , minZ , maxX , maxY , maxZ , textureCoordinates ) ; case NORTH : return drawNorth ( model , minX , minY , minZ , maxX , maxY , maxZ , textureCoordinates ) ; case SOUTH : return drawSouth ( model , minX , minY , minZ , maxX , maxY , maxZ , textureCoordinates ) ; case EAST : return drawEast ( model , minX , minY , minZ , maxX , maxY , maxZ , textureCoordinates ) ; case WEST : return drawWest ( model , minX , minY , minZ , maxX , maxY , maxZ , textureCoordinates ) ; } throw new RenderException ( STR_ ) ; }
public MobileDataStateTracker ( int netType , String tag ) { mNetworkInfo = new NetworkInfo ( netType , TelephonyManager . getDefault ( ) . getNetworkType ( ) , tag , TelephonyManager . getDefault ( ) . getNetworkTypeName ( ) ) ; mApnType = networkTypeToApnType ( netType ) ; }
protected void save ( ) { context . save ( ) ; }
public void visitClassDef ( JCClassDecl tree ) { classdefs . put ( tree . sym , tree ) ; super . visitClassDef ( tree ) ; }
private boolean hasTopLevelAdminRole ( final SessionID actorsSessionID ) throws SessionException , SSOException { SSOToken ssoSession = ssoTokenManager . createSSOToken ( actorsSessionID . toString ( ) ) ; boolean topLevelAdmin = BOOL_ ; Set actions = CollectionUtils . asSet ( PERMISSION_READ , PERMISSION_MODIFY , PERMISSION_DELEGATE ) ; try { DelegationPermission perm = new DelegationPermission ( STR_ , STR_ , STR_ , STR_ , STR_ , actions , Collections . EMPTY_MAP ) ; DelegationEvaluator evaluator = new DelegationEvaluatorImpl ( ) ; topLevelAdmin = evaluator . isAllowed ( ssoSession , perm , Collections . EMPTY_MAP ) ; } catch ( DelegationException de ) { debug . error ( STR_ , de ) ; } return topLevelAdmin ; }
public void destroy ( ) { super . destroy ( ) ; }
public double walkInDefaultOrder ( final RealVectorPreservingVisitor visitor ) { final int dim = getDimension ( ) ; visitor . start ( dim , NUM_ , dim - NUM_ ) ; for ( int i = NUM_ ; i < dim ; i ++ ) { visitor . visit ( i , getEntry ( i ) ) ; } return visitor . end ( ) ; }
public static ServiceConfiguration create ( String configFile ) throws IOException , IllegalArgumentException { checkNotNull ( configFile ) ; return create ( new FileInputStream ( configFile ) ) ; }
private void deleteQueryCompletionHandler ( EnumerationContext ctx , Operation o , Throwable e ) { if ( e != null ) { handleError ( ctx , e ) ; return ; } QueryTask queryTask = o . getBody ( QueryTask . class ) ; deleteHelper ( ctx , queryTask . results ) ; }
private void checkPropertyOnExplicitThis ( PropertyExpression pe ) { if ( ! currentScope . isInStaticContext ( ) ) return ; Expression object = pe . getObjectExpression ( ) ; if ( ! ( object instanceof VariableExpression ) ) return ; VariableExpression ve = ( VariableExpression ) object ; if ( ! ve . getName ( ) . equals ( STR_ ) ) return ; String name = pe . getPropertyAsString ( ) ; if ( name == null || name . equals ( STR_ ) ) return ; Variable member = findClassMember ( currentClass , name ) ; if ( member == null ) return ; checkVariableContextAccess ( member , pe ) ; }
public void addSuperInterfaceId ( Access node ) { List < Access > list = ( parent == null || state == null ) ? getSuperInterfaceIdListNoTransform ( ) : getSuperInterfaceIdList ( ) ; list . addChild ( node ) ; }
public void configureOption2 ( String value ) ;
public boolean isSecondaryMenuShowing ( ) { return mViewAbove . getCurrentItem ( ) == NUM_ ; }
protected void push ( final String stack , final Stack . Entry e ) throws IOException , SpaceExceededException { Stack s = getStack ( stack ) ; if ( s == null ) return ; s . push ( e ) ; }
public Double2D tv ( final Double2D d1 , final Double2D d2 ) { return new Double2D ( tdx ( d1 . x , d2 . x ) , tdy ( d1 . y , d2 . y ) ) ; }
public void keyTyped ( KeyEvent e ) { ( ( KeyListener ) a ) . keyTyped ( e ) ; ( ( KeyListener ) b ) . keyTyped ( e ) ; }
public static TriplePattern createTriplePattern ( Model model , RDFNode subject , Resource predicate , RDFNode object ) { TriplePattern triplePattern = model . createResource ( ) . as ( TriplePattern . class ) ; triplePattern . addProperty ( SP . subject , subject ) ; triplePattern . addProperty ( SP . predicate , predicate ) ; triplePattern . addProperty ( SP . object , object ) ; return triplePattern ; }
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( elementsetattributenodenomodificationallowederr . class , args ) ; }
public LazyValue ( Supplier < T > supplier ) { Validate . notNull ( supplier , STR_ ) ; this . supplier = supplier ; }
public WallGetQueryWithExtended offset ( Integer value ) { return unsafeParam ( STR_ , value ) ; }
void changeUserPassword ( UUID userId , String newPasswordHash ) ;
public static String encodeBytes ( byte [ ] source ) { String encoded = null ; try { encoded = encodeBytes ( source , NUM_ , source . length , NO_OPTIONS ) ; } catch ( java . io . IOException ex ) { assert BOOL_ : ex . getMessage ( ) ; } assert encoded != null ; return encoded ; }
public static final boolean isPointNearPoly ( Geo s , GeoArray r , double near ) { int rlen = r . getSize ( ) ; Geo pl0 = r . get ( rlen - NUM_ , new Geo ( ) ) ; Geo pl1 = new Geo ( ) ; for ( int j = NUM_ ; j < rlen ; j ++ ) { r . get ( j , pl1 ) ; if ( pl0 . isInside ( pl1 , near , s ) ) { return BOOL_ ; } pl0 . initialize ( pl1 ) ; } return BOOL_ ; }
void clear ( ) ;
public void runTest ( ) throws Throwable { Document doc ; Attr newAttrNode ; String attrValue ; String attrName ; int attrType ; doc = ( Document ) load ( STR_ , BOOL_ ) ; newAttrNode = doc . createAttribute ( STR_ ) ; attrValue = newAttrNode . getNodeValue ( ) ; assertEquals ( STR_ , STR_ , attrValue ) ; attrName = newAttrNode . getNodeName ( ) ; assertEqualsAutoCase ( STR_ , STR_ , STR_ , attrName ) ; attrType = ( int ) newAttrNode . getNodeType ( ) ; assertEquals ( STR_ , NUM_ , attrType ) ; }
public static < V extends SampledVertex > List < Set < V > > createSampledPartitions ( Collection < V > vertices ) { TIntObjectHashMap < Set < V > > partitions = new TIntObjectHashMap < Set < V > > ( ) ; for ( V vertex : vertices ) { if ( vertex . isSampled ( ) ) { int it = vertex . getIterationSampled ( ) ; Set < V > partition = partitions . get ( it ) ; if ( partition == null ) { partition = new HashSet < V > ( ) ; partitions . put ( it , partition ) ; } partition . add ( vertex ) ; } } List < Set < V > > list = new ArrayList < Set < V > > ( partitions . size ( ) ) ; for ( int i = NUM_ ; i < partitions . size ( ) - NUM_ ; i ++ ) { list . add ( partitions . get ( i ) ) ; } return list ; }
protected void debugCodeCall ( String methodName , String param ) { if ( trace . isDebugEnabled ( ) ) { trace . debugCode ( getTraceObjectName ( ) + STR_ + methodName + STR_ + quote ( param ) + STR_ ) ; } }
public List < Map < String , String > > listVolumeInfo ( String volume , Collection < String > attrs ) { if ( log . isDebugEnabled ( ) ) { log . debug ( STR_ ) ; } FlexVolume vol = new FlexVolume ( server . getNaServer ( ) , volume ) ; return vol . listVolumeInfo ( attrs ) ; }
public float lengthSquared ( ) { return Vector2 . lengthSquared ( this ) ; }
private void init ( final IMemento memento ) { folderControl . populateTreeUsingServerRoot ( ) ; if ( memento != null ) { folderControlViewState . setSavedState ( memento ) ; } final ServerItemPath [ ] expanded = folderControlViewState . getPreviouslyExpandedPaths ( ) ; if ( expanded != null && expanded . length > NUM_ ) { folderControl . setExpandedItems ( expanded ) ; } else { folderControl . expandToLevel ( TFSItemFactory . getRoot ( ) , NUM_ ) ; } final ServerItemPath selected = folderControlViewState . getPreviouslySelectedPath ( ) ; if ( selected != null ) { folderControl . setSelectedItem ( selected ) ; } else { folderControl . setSelectedItem ( ServerItemPath . ROOT ) ; } handleFolderSelection ( folderControl . getSelection ( ) ) ; }
private RangeAxisConfig ( String name , int Id ) { this . Id = Id ; if ( name == null ) { this . autoNaming = BOOL_ ; setAutoLabelIfEnabled ( ) ; } else { this . name = name ; } userDefinedRange = new NumericalValueRange ( NUM_ , NUM_ , - NUM_ ) ; userDefinedRange . addValueRangeListener ( this ) ; crosshairLines . addAxisParallelLinesConfigurationListener ( this ) ; }
void initInputFrame ( final ClassWriter cw , final int access , final Type [ ] args , final int maxLocals ) { inputLocals = new int [ maxLocals ] ; inputStack = new int [ NUM_ ] ; int i = NUM_ ; if ( ( access & Opcodes . ACC_STATIC ) == NUM_ ) { if ( ( access & MethodWriter . ACC_CONSTRUCTOR ) == NUM_ ) { inputLocals [ i ++ ] = OBJECT | cw . addType ( cw . thisName ) ; } else { inputLocals [ i ++ ] = UNINITIALIZED_THIS ; } } for ( int j = NUM_ ; j < args . length ; ++ j ) { int t = type ( cw , args [ j ] . getDescriptor ( ) ) ; inputLocals [ i ++ ] = t ; if ( t == LONG || t == DOUBLE ) { inputLocals [ i ++ ] = TOP ; } } while ( i < maxLocals ) { inputLocals [ i ++ ] = TOP ; } }
private static boolean isMoreAbove ( String src , int index ) { int ch ; int cc ; int len = src . length ( ) ; for ( int i = index + Character . charCount ( src . codePointAt ( index ) ) ; i < len ; i += Character . charCount ( ch ) ) { ch = src . codePointAt ( i ) ; cc = Normalizer . getCombiningClass ( ch ) ; if ( cc == COMBINING_CLASS_ABOVE ) { return BOOL_ ; } else if ( cc == NUM_ ) { return BOOL_ ; } } return BOOL_ ; }
public abstract void updateWeight ( int index , float gradient , float learningRate , int steps , boolean sparse ) ;
public NamespaceId concat ( final NamespaceIdPart part ) { final NamespaceIdPart [ ] parts = new NamespaceIdPart [ this . namespaceIdParts . length + NUM_ ] ; System . arraycopy ( this . namespaceIdParts , NUM_ , parts , NUM_ , this . namespaceIdParts . length ) ; parts [ this . namespaceIdParts . length ] = part ; return new NamespaceId ( parts ) ; }
private void installDefaults ( ) { setFont ( UIManager . getFont ( STR_ ) ) ; closeButtonToolTip = UIManager . getString ( STR_ ) ; iconButtonToolTip = UIManager . getString ( STR_ ) ; restoreButtonToolTip = UIManager . getString ( STR_ ) ; maxButtonToolTip = UIManager . getString ( STR_ ) ; updateStyle ( this ) ; }
public Boolean isUseToe ( ) { return useToe ; }
public int size ( ) { return size ; }
protected void startAutoScrolling ( int direction ) { if ( isAutoScrolling ) { autoscrollTimer . stop ( ) ; } isAutoScrolling = BOOL_ ; if ( direction == SCROLL_UP ) { scrollDirection = SCROLL_UP ; Point convertedPoint = SwingUtilities . convertPoint ( scroller , new Point ( NUM_ , NUM_ ) , list ) ; int top = list . locationToIndex ( convertedPoint ) ; list . setSelectedIndex ( top ) ; autoscrollTimer = new Timer ( NUM_ , new AutoScrollActionHandler ( SCROLL_UP ) ) ; } else if ( direction == SCROLL_DOWN ) { scrollDirection = SCROLL_DOWN ; Dimension size = scroller . getSize ( ) ; Point convertedPoint = SwingUtilities . convertPoint ( scroller , new Point ( NUM_ , ( size . height - NUM_ ) - NUM_ ) , list ) ; int bottom = list . locationToIndex ( convertedPoint ) ; list . setSelectedIndex ( bottom ) ; autoscrollTimer = new Timer ( NUM_ , new AutoScrollActionHandler ( SCROLL_DOWN ) ) ; } autoscrollTimer . start ( ) ; }
private Boolean functionExists ( String functionName , String functionAlias ) { GetFunctionRequest getFunctionRequest = new GetFunctionRequest ( ) . withFunctionName ( functionName ) ; if ( functionAlias != null ) { getFunctionRequest . withQualifier ( functionAlias ) ; logger . log ( STR_ , getFunctionRequest . toString ( ) ) ; } else { logger . log ( STR_ , getFunctionRequest . toString ( ) ) ; } try { GetFunctionResult functionResult = client . getFunction ( getFunctionRequest ) ; logger . log ( STR_ , functionResult . toString ( ) ) ; return BOOL_ ; } catch ( ResourceNotFoundException rnfe ) { logger . log ( STR_ ) ; return BOOL_ ; } }
Impl ( Strategy < K , V , E > strategy , Builder builder ) { int concurrencyLevel = builder . getConcurrencyLevel ( ) ; int initialCapacity = builder . getInitialCapacity ( ) ; if ( concurrencyLevel > MAX_SEGMENTS ) { concurrencyLevel = MAX_SEGMENTS ; } int segmentShift = NUM_ ; int segmentCount = NUM_ ; while ( segmentCount < concurrencyLevel ) { ++ segmentShift ; segmentCount <<= NUM_ ; } this . segmentShift = NUM_ - segmentShift ; segmentMask = segmentCount - NUM_ ; this . segments = newSegmentArray ( segmentCount ) ; if ( initialCapacity > MAXIMUM_CAPACITY ) { initialCapacity = MAXIMUM_CAPACITY ; } int segmentCapacity = initialCapacity / segmentCount ; if ( segmentCapacity * segmentCount < initialCapacity ) { ++ segmentCapacity ; } int segmentSize = NUM_ ; while ( segmentSize < segmentCapacity ) { segmentSize <<= NUM_ ; } for ( int i = NUM_ ; i < this . segments . length ; ++ i ) { this . segments [ i ] = new Segment ( segmentSize ) ; } this . strategy = strategy ; strategy . setInternals ( new InternalsImpl ( ) ) ; }
public void onMouseDragged ( MapMouseEvent ev ) { }
public void runTest ( ) throws Throwable { Document doc ; NamedNodeMap attributes ; NodeList elementList ; Element element ; Attr attr ; Node newNode ; doc = ( Document ) load ( STR_ , BOOL_ ) ; elementList = doc . getElementsByTagNameNS ( STR_ , STR_ ) ; element = ( Element ) elementList . item ( NUM_ ) ; attributes = element . getAttributes ( ) ; attr = ( Attr ) attributes . getNamedItemNS ( STR_ , STR_ ) ; element = ( Element ) elementList . item ( NUM_ ) ; attributes = element . getAttributes ( ) ; { boolean success = BOOL_ ; try { newNode = attributes . setNamedItemNS ( attr ) ; } catch ( DOMException ex ) { success = ( ex . code == DOMException . INUSE_ATTRIBUTE_ERR ) ; } assertTrue ( STR_ , success ) ; } }
public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case NUM_ : return NODE_ID ; case NUM_ : return VERSION ; default : return null ; } }
void onGroupCollapsed ( int positionStart , int itemCount ) ;
public static Tuple median ( Iterator tuples , String field , Comparator cmp ) { Object [ ] t = new Tuple [ NUM_ ] ; int i = NUM_ ; for ( ; tuples . hasNext ( ) ; ++ i ) { if ( i >= t . length ) t = ArrayLib . resize ( t , NUM_ * t . length / NUM_ ) ; t [ i ] = ( Tuple ) tuples . next ( ) ; } ArrayLib . trim ( t , i ) ; Object [ ] v = new Object [ t . length ] ; int [ ] idx = new int [ t . length ] ; for ( i = NUM_ ; i < t . length ; ++ i ) { idx [ i ] = i ; v [ i ] = ( ( Tuple ) t [ i ] ) . get ( field ) ; } ArrayLib . sort ( v , idx , cmp ) ; return ( Tuple ) t [ idx [ idx . length / NUM_ ] ] ; }
public ValidateQueryRequest source ( Map source ) { try { XContentBuilder builder = XContentFactory . contentBuilder ( Requests . CONTENT_TYPE ) ; builder . map ( source ) ; return source ( builder ) ; } catch ( IOException e ) { throw new ElasticsearchGenerationException ( STR_ + source + STR_ , e ) ; } }
public static String hexMD5 ( String s ) { return StringUtils . toHEXString ( rawMD5 ( StringUtils . toUTF8 ( s ) ) ) ; }
public abstract Rule createRule ( ) ;
public static void traverse ( Tree tree , TreeItemAction action ) { Treechildren treechildren = tree . getTreechildren ( ) ; traverse ( treechildren , action ) ; }
public double lngRadians ( ) { return lngRadians ; }
public int core_hashCode ( ) { return _core_hash_cache ; }
public HandlerRegistration addClickHandler ( com . smartgwt . client . widgets . form . fields . events . ClickHandler handler ) { if ( getHandlerCount ( com . smartgwt . client . widgets . form . fields . events . ClickEvent . getType ( ) ) == NUM_ ) setupClickEvent ( ) ; return doAddHandler ( handler , com . smartgwt . client . widgets . form . fields . events . ClickEvent . getType ( ) ) ; }
public Object runSafely ( Catbert . FastStack stack ) throws Exception { String imageURL = getEditorial ( stack ) . getImageURL ( ) ; return ( imageURL == null || imageURL . length ( ) == NUM_ ) ? Boolean . FALSE : Boolean . TRUE ; }
public boolean isLaunching ( ) { return isLaunching ( getState ( ) ) ; }
CommandInterface prepareCommand ( String sql , int fetchSize ) ;
public TimeOfDay ( int hour , int minute ) { this . hour = hour ; this . minute = minute ; this . second = NUM_ ; validate ( ) ; }
public static Class indexTypeFor ( Class pathType ) throws TypeMismatchException { if ( Character . class . isAssignableFrom ( pathType ) || Character . TYPE == pathType ) return pathType ; if ( Byte . class . isAssignableFrom ( pathType ) || Short . class . isAssignableFrom ( pathType ) || Byte . TYPE == pathType || Short . TYPE == pathType ) return Integer . class ; Iterator i = _numericWrapperClasses . iterator ( ) ; while ( i . hasNext ( ) ) { Class cls = ( Class ) i . next ( ) ; if ( cls . isAssignableFrom ( pathType ) ) return pathType ; } i = _numericPrimitiveClasses . iterator ( ) ; while ( i . hasNext ( ) ) { Class cls = ( Class ) i . next ( ) ; if ( cls == pathType ) return pathType ; } if ( java . util . Date . class . isAssignableFrom ( pathType ) || pathType == String . class ) return pathType ; throw new TypeMismatchException ( LocalizedStrings . TypeUtils_INDEXES_ARE_NOT_SUPPORTED_ON_PATHS_OF_TYPE_0 . toLocalizedString ( pathType . getName ( ) ) ) ; }
public void flushBase64 ( ) throws java . io . IOException { if ( position > NUM_ ) { if ( encode ) { out . write ( encode3to4 ( b4 , buffer , position , options ) ) ; position = NUM_ ; } else { throw new java . io . IOException ( STR_ ) ; } } }
private boolean isAssignableFrom ( ServiceType [ ] ifaces ) { for ( int i = ifaces . length ; -- i >= NUM_ ; ) { if ( hash == ifaces [ i ] . hash || isAssignableFrom ( ifaces [ i ] . interfaces ) ) return BOOL_ ; } return BOOL_ ; }
public int segmentAtLength ( float length ) { int upperIndex = findUpperIndex ( length ) ; if ( upperIndex == - NUM_ ) { return - NUM_ ; } if ( upperIndex == NUM_ ) { PathSegment upper = ( PathSegment ) segments . get ( upperIndex ) ; return upper . getIndex ( ) ; } PathSegment lower = ( PathSegment ) segments . get ( upperIndex - NUM_ ) ; return lower . getIndex ( ) ; }
public static String stringFor ( int n ) { switch ( n ) { case CU_COMPUTEMODE_DEFAULT : return STR_ ; case CU_COMPUTEMODE_EXCLUSIVE : return STR_ ; case CU_COMPUTEMODE_PROHIBITED : return STR_ ; case CU_COMPUTEMODE_EXCLUSIVE_PROCESS : return STR_ ; } return STR_ + n ; }
public CannotCompileException ( String msg ) { super ( msg ) ; message = msg ; initCause ( null ) ; }
public void line ( String srcName , Paint color , String legend , float width , boolean stack ) { if ( legend != null ) { comments . add ( new LegendText ( color , legend ) ) ; } SourcedPlotElement parent = stack ? findParent ( ) : null ; plotElements . add ( new Line ( srcName , color , new BasicStroke ( width ) , parent ) ) ; }
public Object runSafely ( Catbert . FastStack stack ) throws Exception { String setting = getString ( stack ) ; sage . plugin . PluginWrapper pluggy = getPlugin ( stack ) ; if ( pluggy != null ) { if ( pluggy . isServerPluginInfo ( ) ) { stack . push ( pluggy ) ; stack . push ( setting ) ; return makeNetworkedCall ( stack ) ; } SageTVPlugin realPlug = sage . plugin . CorePluginManager . getInstance ( ) . getRealPlugin ( pluggy . getId ( ) ) ; if ( realPlug != null ) { if ( stack . getUIMgr ( ) != null ) { Catbert . uiContextThreadNames . set ( stack . getUIMgr ( ) . getLocalUIClientName ( ) ) ; } return realPlug . getConfigHelpText ( setting ) ; } } return STR_ ; }
public abstract void closeOutbound ( ) ;
public boolean isImportantForAccessibility ( ) { final int mode = ( mPrivateFlags2 & PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_MASK ) > > PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_SHIFT ; switch ( mode ) { case IMPORTANT_FOR_ACCESSIBILITY_YES : return BOOL_ ; case IMPORTANT_FOR_ACCESSIBILITY_NO : return BOOL_ ; case IMPORTANT_FOR_ACCESSIBILITY_AUTO : return isActionableForAccessibility ( ) || hasListenersForAccessibility ( ) || getAccessibilityNodeProvider ( ) != null ; default : throw new IllegalArgumentException ( STR_ + mode ) ; } }
public void executeASync ( ProcessInfo pi ) { log . config ( STR_ ) ; }
public void removeAllTags ( ) { removeAllViews ( ) ; clearTagViewMap ( ) ; }
public static void closeQuietly ( LineIterator iterator ) { if ( iterator != null ) { iterator . close ( ) ; } }
public static void assertGTest ( final RealDistribution expectedDistribution , final double [ ] values , double alpha ) { final int numBins = values . length / NUM_ ; final double [ ] breaks = new double [ numBins ] ; for ( int b = NUM_ ; b < breaks . length ; b ++ ) { breaks [ b ] = expectedDistribution . inverseCumulativeProbability ( ( double ) b / numBins ) ; } final long [ ] observed = new long [ numBins ] ; for ( final double value : values ) { int b = NUM_ ; do { b ++ ; } while ( b < numBins && value >= breaks [ b ] ) ; observed [ b - NUM_ ] ++ ; } final double [ ] expected = new double [ numBins ] ; Arrays . fill ( expected , ( double ) values . length / numBins ) ; assertGTest ( expected , observed , alpha ) ; }
public ReplDBMSFilteredEvent ( Long firstFilteredSeqno , Short firstFilteredFragno , Long lastFilteredSeqno , Short lastFilteredFragno , boolean lastFrag , String eventId , String sourceId , Timestamp timestamp , long epochNumber ) { super ( firstFilteredSeqno , new DBMSEvent ( eventId , null , timestamp ) ) ; this . seqnoEnd = lastFilteredSeqno ; this . fragno = firstFilteredFragno ; this . fragnoEnd = lastFilteredFragno ; this . lastFrag = lastFrag ; this . sourceId = sourceId ; this . extractedTstamp = timestamp ; this . epochNumber = epochNumber ; }
public boolean removeAll ( Collection < ? > c ) { if ( ! ( c instanceof RegularEnumSet ) ) return super . removeAll ( c ) ; RegularEnumSet < ? > es = ( RegularEnumSet < ? > ) c ; if ( es . elementType != elementType ) return BOOL_ ; long oldElements = elements ; elements &= ~ es . elements ; return elements != oldElements ; }
public void drawImage ( int x , int y , int width , int height , Bitmap pic ) { CBitmap bitmap = new CBitmap ( pic , x , y ) ; bitmap . setWidth ( width ) ; bitmap . setHeight ( height ) ; mDrawableList . add ( bitmap ) ; invalidate ( ) ; }
public void load ( Reader aReader ) throws IOException { String line = null ; BufferedReader br = new BufferedReader ( aReader ) ; while ( ( line = br . readLine ( ) ) != null ) { String [ ] words = line . trim ( ) . split ( STR_ ) ; if ( words . length > NUM_ && words [ NUM_ ] . trim ( ) . length ( ) > NUM_ ) { data . add ( words [ NUM_ ] . toLowerCase ( ) ) ; } } }
public List < DecoderFile > matchingDecoderList ( String mfg , String family , String decoderMfgID , String decoderVersionID , String decoderProductID , String model , String developerID ) { List < DecoderFile > l = new ArrayList < DecoderFile > ( ) ; for ( int i = NUM_ ; i < numDecoders ( ) ; i ++ ) { if ( checkEntry ( i , mfg , family , decoderMfgID , decoderVersionID , decoderProductID , model , developerID ) ) { l . add ( decoderList . get ( i ) ) ; } } return l ; }
private static FrameDescriptor handleBaseNamespaceEnv ( Frame frame ) { return frame == null ? null : frame instanceof NSBaseMaterializedFrame ? ( ( NSBaseMaterializedFrame ) frame ) . getMarkerFrameDescriptor ( ) : frame . getFrameDescriptor ( ) ; }
public void configure ( ) { XNetTrafficController packets = new XNetPacketizer ( new HornbyEliteCommandStation ( ) ) ; packets . connectPort ( this ) ; this . getSystemConnectionMemo ( ) . setXNetTrafficController ( packets ) ; new EliteXNetInitializationManager ( this . getSystemConnectionMemo ( ) ) ; }
public String toString ( ) { StringBuffer buf = new StringBuffer ( ) ; if ( type != null ) { buf . append ( type . toString ( ) + STR_ + type . getExtension ( ) + STR_ ) ; } else { buf . append ( STR_ ) ; } if ( byteLength != AudioSystem . NOT_SPECIFIED ) { buf . append ( STR_ + byteLength ) ; } buf . append ( STR_ + format ) ; if ( frameLength != AudioSystem . NOT_SPECIFIED ) { buf . append ( STR_ + frameLength ) ; } return new String ( buf ) ; }
public Object remove ( int index ) { return index >= NUM_ && index < this . length ( ) ? this . myArrayList . remove ( index ) : null ; }
private void createClientCache ( final Properties javaProps , final String authInit , final Properties [ ] authProps , final int ports [ ] , final int numOfUsers , final String durableId , final boolean [ ] postAuthzAllowed ) { createCacheClientForMultiUserMode ( numOfUsers , authInit , authProps , javaProps , ports , NUM_ , BOOL_ , durableId , NO_EXCEPTION ) ; }
public ScheduleItem addItem ( String carType , int sequence ) { ScheduleItem si = addItem ( carType ) ; if ( sequence < NUM_ || sequence > _scheduleHashTable . size ( ) ) { return si ; } for ( int i = NUM_ ; i < _scheduleHashTable . size ( ) - sequence - NUM_ ; i ++ ) { moveItemUp ( si ) ; } return si ; }
private void manuallyRegisterHostInitiators ( StorageSystem storage , Multimap < URI , Initiator > targetPortsToInitiators ) throws Exception { _log . info ( STR_ , targetPortsToInitiators ) ; for ( Map . Entry < URI , Collection < Initiator > > t2is : targetPortsToInitiators . asMap ( ) . entrySet ( ) ) { URI storagePortURI = t2is . getKey ( ) ; Collection < Initiator > initiators = t2is . getValue ( ) ; _log . info ( STR_ , initiators , storagePortURI ) ; CIMArgument [ ] inArgs = _helper . getEMCManuallyRegisterHostInitiators ( storage , initiators , storagePortURI ) ; CIMArgument [ ] outArgs = new CIMArgument [ NUM_ ] ; _helper . invokeMethod ( storage , _cimPath . getStorageHardwareIDManagementService ( storage ) , SmisConstants . EMC_MANUALLY_REGISTER_HOST_INITIATORS , inArgs , outArgs ) ; } _log . info ( STR_ ) ; }
protected void sequence_ThisTypeRefNominal_TypeRef_TypeRefWithoutModifiers ( ISerializationContext context , ThisTypeRefNominal semanticObject ) { genericSequencer . createSequence ( context , semanticObject ) ; }
public boolean isRestricted ( ) throws SessionException { return restriction != null ; }
public static void cancelTouchEvent ( View view ) { final long now = SystemClock . uptimeMillis ( ) ; MotionEvent event = MotionEvent . obtain ( now , now , MotionEvent . ACTION_CANCEL , NUM_ , NUM_ , NUM_ ) ; view . dispatchTouchEvent ( event ) ; event . recycle ( ) ; }
public boolean hasScores ( ) ;
public boolean execute ( IGameState gameState ) { boolean rc = super . execute ( gameState ) ; if ( ! rc ) return BOOL_ ; TicTacToeState state = ( TicTacToeState ) gameState ; SlideLogic logic = ( SlideLogic ) state . logic ( ) ; logic . doneTurn ( ) ; return BOOL_ ; }
public void testIOErrorWhileCreatingSocket ( ) { String reqdata = STR_ ; Request request = Request . newBuilder ( ) . setStrData ( reqdata ) . build ( ) ; SocketRpcChannel rpcChannel = new SocketRpcChannel ( STR_ , - NUM_ , new FakeSocketFactory ( ) . throwsException ( new IOException ( ) ) ) ; callAsync ( rpcChannel , request , ErrorReason . IO_ERROR ) ; assertNull ( callSync ( rpcChannel , request , ErrorReason . IO_ERROR ) ) ; }
private static AccessControlContext preserveCombiner ( DomainCombiner combiner , Class < ? > caller ) { return createWrapper ( combiner , caller , null , null , null ) ; }
public String consumeSafeUriOrStringAttribute ( String name ) throws UnableToCompleteException { return consumeAttributeWithParser ( name , attributeParsers . getSafeUriInHtmlParser ( ) ) ; }
void updateAfterChange ( ) { }
public ArrayMap ( int capacity ) { super ( capacity ) ; }
void connect ( ) { if ( ! mGoogleApiClient . isConnected ( ) ) { mGoogleApiClient . connect ( ) ; } }
public static boolean isInvocable ( Types types , MethodType from , MethodType target ) { if ( from . getParameterTypes ( ) . length ( ) != target . getParameterTypes ( ) . length ( ) ) { return BOOL_ ; } for ( int i = NUM_ ; i < from . getParameterTypes ( ) . length ( ) ; i ++ ) { if ( ! types . isAssignable ( types . erasure ( from . getParameterTypes ( ) . get ( i ) ) , types . erasure ( target . getParameterTypes ( ) . get ( i ) ) ) ) { return BOOL_ ; } } return BOOL_ ; }
private void centerBitmap ( ) { RectF rect = new RectF ( NUM_ , NUM_ , imageW , imageH ) ; matrix . mapRect ( rect ) ; float height = rect . height ( ) ; float width = rect . width ( ) ; float deltaX = NUM_ , deltaY = NUM_ ; deltaX = ( viewW - width - leftMargins * NUM_ ) / NUM_ ; deltaY = - ( viewH - height - topBottomMargins ) / NUM_ ; matrix . postTranslate ( deltaX , deltaY ) ; }
